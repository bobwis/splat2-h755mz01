
Splat2-H755-mz01_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d60  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800a000  0800a000  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a12c  0800a12c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a12c  0800a12c  0001a12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a134  0800a134  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a134  0800a134  0001a134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a138  0800a138  0001a138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  0800a13c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b88  24000078  0800a1b4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004c00  0800a1b4  00024c00  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a92f  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004900  00000000  00000000  0004a9d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  0004f2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c0  00000000  00000000  000507f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c05e  00000000  00000000  00051bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a9c5  00000000  00000000  0008dc0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00188c4e  00000000  00000000  000a85d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00231221  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e7c  00000000  00000000  00231274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009fe8 	.word	0x08009fe8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08009fe8 	.word	0x08009fe8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800067c:	4b3f      	ldr	r3, [pc, #252]	; (800077c <SystemInit+0x104>)
 800067e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000682:	4a3e      	ldr	r2, [pc, #248]	; (800077c <SystemInit+0x104>)
 8000684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800068c:	4b3b      	ldr	r3, [pc, #236]	; (800077c <SystemInit+0x104>)
 800068e:	691b      	ldr	r3, [r3, #16]
 8000690:	4a3a      	ldr	r2, [pc, #232]	; (800077c <SystemInit+0x104>)
 8000692:	f043 0310 	orr.w	r3, r3, #16
 8000696:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0x108>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f003 030f 	and.w	r3, r3, #15
 80006a0:	2b06      	cmp	r3, #6
 80006a2:	d807      	bhi.n	80006b4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006a4:	4b36      	ldr	r3, [pc, #216]	; (8000780 <SystemInit+0x108>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f023 030f 	bic.w	r3, r3, #15
 80006ac:	4a34      	ldr	r2, [pc, #208]	; (8000780 <SystemInit+0x108>)
 80006ae:	f043 0307 	orr.w	r3, r3, #7
 80006b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b4:	4b33      	ldr	r3, [pc, #204]	; (8000784 <SystemInit+0x10c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x10c>)
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c0:	4b30      	ldr	r3, [pc, #192]	; (8000784 <SystemInit+0x10c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006c6:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <SystemInit+0x10c>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	492e      	ldr	r1, [pc, #184]	; (8000784 <SystemInit+0x10c>)
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x110>)
 80006ce:	4013      	ands	r3, r2
 80006d0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d2:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <SystemInit+0x108>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f003 0308 	and.w	r3, r3, #8
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d007      	beq.n	80006ee <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006de:	4b28      	ldr	r3, [pc, #160]	; (8000780 <SystemInit+0x108>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f023 030f 	bic.w	r3, r3, #15
 80006e6:	4a26      	ldr	r2, [pc, #152]	; (8000780 <SystemInit+0x108>)
 80006e8:	f043 0307 	orr.w	r3, r3, #7
 80006ec:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <SystemInit+0x10c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <SystemInit+0x10c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <SystemInit+0x10c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <SystemInit+0x10c>)
 8000702:	4a22      	ldr	r2, [pc, #136]	; (800078c <SystemInit+0x114>)
 8000704:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <SystemInit+0x10c>)
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <SystemInit+0x118>)
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <SystemInit+0x10c>)
 800070e:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemInit+0x11c>)
 8000710:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <SystemInit+0x10c>)
 8000714:	2200      	movs	r2, #0
 8000716:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <SystemInit+0x10c>)
 800071a:	4a1e      	ldr	r2, [pc, #120]	; (8000794 <SystemInit+0x11c>)
 800071c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <SystemInit+0x10c>)
 8000720:	2200      	movs	r2, #0
 8000722:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <SystemInit+0x10c>)
 8000726:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <SystemInit+0x11c>)
 8000728:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <SystemInit+0x10c>)
 800072c:	2200      	movs	r2, #0
 800072e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <SystemInit+0x10c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a13      	ldr	r2, [pc, #76]	; (8000784 <SystemInit+0x10c>)
 8000736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800073a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <SystemInit+0x10c>)
 800073e:	2200      	movs	r2, #0
 8000740:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x120>)
 8000744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000746:	4a14      	ldr	r2, [pc, #80]	; (8000798 <SystemInit+0x120>)
 8000748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x124>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <SystemInit+0x128>)
 8000754:	4013      	ands	r3, r2
 8000756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800075a:	d202      	bcs.n	8000762 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x12c>)
 800075e:	2201      	movs	r2, #1
 8000760:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <SystemInit+0x130>)
 8000764:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000768:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <SystemInit+0x104>)
 800076c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000770:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007b8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d013      	beq.n	80007ec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80007c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007c8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80007cc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d00b      	beq.n	80007ec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80007d4:	e000      	b.n	80007d8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80007d6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80007d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d0f9      	beq.n	80007d6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80007e2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	b2d2      	uxtb	r2, r2
 80007ea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80007ec:	687b      	ldr	r3, [r7, #4]
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
	...

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000802:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000806:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) ) //&& (timeout-- > 0))
 8000808:	e000      	b.n	800080c <main+0x10>
	{
		asm("nop");
 800080a:	bf00      	nop
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) ) //&& (timeout-- > 0))
 800080c:	4b23      	ldr	r3, [pc, #140]	; (800089c <main+0xa0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000814:	2b00      	cmp	r3, #0
 8000816:	d1f8      	bne.n	800080a <main+0xe>
//	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000818:	f000 fcb2 	bl	8001180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081c:	f000 f846 	bl	80008ac <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000820:	4b1e      	ldr	r3, [pc, #120]	; (800089c <main+0xa0>)
 8000822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000826:	4a1d      	ldr	r2, [pc, #116]	; (800089c <main+0xa0>)
 8000828:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800082c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000830:	4b1a      	ldr	r3, [pc, #104]	; (800089c <main+0xa0>)
 8000832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 800083e:	2000      	movs	r0, #0
 8000840:	f001 fd92 	bl	8002368 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000844:	2100      	movs	r1, #0
 8000846:	2000      	movs	r0, #0
 8000848:	f001 fda8 	bl	800239c <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800084c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000850:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000852:	bf00      	nop
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <main+0xa0>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800085c:	2b00      	cmp	r3, #0
 800085e:	d104      	bne.n	800086a <main+0x6e>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	1e5a      	subs	r2, r3, #1
 8000864:	607a      	str	r2, [r7, #4]
 8000866:	2b00      	cmp	r3, #0
 8000868:	dcf4      	bgt.n	8000854 <main+0x58>
		;
	if (timeout < 0) {
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2b00      	cmp	r3, #0
 800086e:	da01      	bge.n	8000874 <main+0x78>
		Error_Handler();
 8000870:	f000 f9e4 	bl	8000c3c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000874:	f000 f92e 	bl	8000ad4 <MX_GPIO_Init>
  MX_UART7_Init();
 8000878:	f000 f894 	bl	80009a4 <MX_UART7_Init>
  MX_USART3_UART_Init();
 800087c:	f000 f8de 	bl	8000a3c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000880:	f005 fe34 	bl	80064ec <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000884:	4a06      	ldr	r2, [pc, #24]	; (80008a0 <main+0xa4>)
 8000886:	2100      	movs	r1, #0
 8000888:	4806      	ldr	r0, [pc, #24]	; (80008a4 <main+0xa8>)
 800088a:	f005 fe79 	bl	8006580 <osThreadNew>
 800088e:	4603      	mov	r3, r0
 8000890:	4a05      	ldr	r2, [pc, #20]	; (80008a8 <main+0xac>)
 8000892:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000894:	f005 fe4e 	bl	8006534 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000898:	e7fe      	b.n	8000898 <main+0x9c>
 800089a:	bf00      	nop
 800089c:	58024400 	.word	0x58024400
 80008a0:	0800a048 	.word	0x0800a048
 80008a4:	08000c09 	.word	0x08000c09
 80008a8:	24004a94 	.word	0x24004a94

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b09c      	sub	sp, #112	; 0x70
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b6:	224c      	movs	r2, #76	; 0x4c
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f008 fcc4 	bl	8009248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2220      	movs	r2, #32
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f008 fcbe 	bl	8009248 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008cc:	2004      	movs	r0, #4
 80008ce:	f001 fd79 	bl	80023c4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b31      	ldr	r3, [pc, #196]	; (800099c <SystemClock_Config+0xf0>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	4a30      	ldr	r2, [pc, #192]	; (800099c <SystemClock_Config+0xf0>)
 80008dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008e0:	6193      	str	r3, [r2, #24]
 80008e2:	4b2e      	ldr	r3, [pc, #184]	; (800099c <SystemClock_Config+0xf0>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	4b2c      	ldr	r3, [pc, #176]	; (80009a0 <SystemClock_Config+0xf4>)
 80008ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008f0:	4a2b      	ldr	r2, [pc, #172]	; (80009a0 <SystemClock_Config+0xf4>)
 80008f2:	f043 0301 	orr.w	r3, r3, #1
 80008f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008f8:	4b29      	ldr	r3, [pc, #164]	; (80009a0 <SystemClock_Config+0xf4>)
 80008fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000904:	bf00      	nop
 8000906:	4b25      	ldr	r3, [pc, #148]	; (800099c <SystemClock_Config+0xf0>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800090e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000912:	d1f8      	bne.n	8000906 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000914:	2302      	movs	r3, #2
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000918:	2301      	movs	r3, #1
 800091a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800091c:	2340      	movs	r3, #64	; 0x40
 800091e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000920:	2302      	movs	r3, #2
 8000922:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000924:	2300      	movs	r3, #0
 8000926:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000928:	2310      	movs	r3, #16
 800092a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 800092c:	23f0      	movs	r3, #240	; 0xf0
 800092e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000930:	2302      	movs	r3, #2
 8000932:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000934:	2302      	movs	r3, #2
 8000936:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000938:	2302      	movs	r3, #2
 800093a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800093c:	2308      	movs	r3, #8
 800093e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000940:	2300      	movs	r3, #0
 8000942:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094c:	4618      	mov	r0, r3
 800094e:	f001 fd93 	bl	8002478 <HAL_RCC_OscConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000958:	f000 f970 	bl	8000c3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095c:	233f      	movs	r3, #63	; 0x3f
 800095e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000960:	2303      	movs	r3, #3
 8000962:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000968:	2308      	movs	r3, #8
 800096a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800096c:	2340      	movs	r3, #64	; 0x40
 800096e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000970:	2340      	movs	r3, #64	; 0x40
 8000972:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000974:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000978:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800097a:	2340      	movs	r3, #64	; 0x40
 800097c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2104      	movs	r1, #4
 8000982:	4618      	mov	r0, r3
 8000984:	f002 f9a4 	bl	8002cd0 <HAL_RCC_ClockConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800098e:	f000 f955 	bl	8000c3c <Error_Handler>
  }
}
 8000992:	bf00      	nop
 8000994:	3770      	adds	r7, #112	; 0x70
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	58024800 	.word	0x58024800
 80009a0:	58000400 	.word	0x58000400

080009a4 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80009a8:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <MX_UART7_Init+0x90>)
 80009aa:	4a23      	ldr	r2, [pc, #140]	; (8000a38 <MX_UART7_Init+0x94>)
 80009ac:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80009ae:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <MX_UART7_Init+0x90>)
 80009b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_UART7_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <MX_UART7_Init+0x90>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <MX_UART7_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_UART7_Init+0x90>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <MX_UART7_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_UART7_Init+0x90>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <MX_UART7_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_UART7_Init+0x90>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_UART7_Init+0x90>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80009ec:	4811      	ldr	r0, [pc, #68]	; (8000a34 <MX_UART7_Init+0x90>)
 80009ee:	f004 f85d 	bl	8004aac <HAL_UART_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80009f8:	f000 f920 	bl	8000c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009fc:	2100      	movs	r1, #0
 80009fe:	480d      	ldr	r0, [pc, #52]	; (8000a34 <MX_UART7_Init+0x90>)
 8000a00:	f005 fc76 	bl	80062f0 <HAL_UARTEx_SetTxFifoThreshold>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000a0a:	f000 f917 	bl	8000c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4808      	ldr	r0, [pc, #32]	; (8000a34 <MX_UART7_Init+0x90>)
 8000a12:	f005 fcab 	bl	800636c <HAL_UARTEx_SetRxFifoThreshold>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000a1c:	f000 f90e 	bl	8000c3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <MX_UART7_Init+0x90>)
 8000a22:	f005 fc2c 	bl	800627e <HAL_UARTEx_DisableFifoMode>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000a2c:	f000 f906 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	24004a98 	.word	0x24004a98
 8000a38:	40007800 	.word	0x40007800

08000a3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a40:	4b22      	ldr	r3, [pc, #136]	; (8000acc <MX_USART3_UART_Init+0x90>)
 8000a42:	4a23      	ldr	r2, [pc, #140]	; (8000ad0 <MX_USART3_UART_Init+0x94>)
 8000a44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a46:	4b21      	ldr	r3, [pc, #132]	; (8000acc <MX_USART3_UART_Init+0x90>)
 8000a48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <MX_USART3_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <MX_USART3_UART_Init+0x90>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <MX_USART3_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <MX_USART3_UART_Init+0x90>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a66:	4b19      	ldr	r3, [pc, #100]	; (8000acc <MX_USART3_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	4b17      	ldr	r3, [pc, #92]	; (8000acc <MX_USART3_UART_Init+0x90>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a72:	4b16      	ldr	r3, [pc, #88]	; (8000acc <MX_USART3_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <MX_USART3_UART_Init+0x90>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a7e:	4b13      	ldr	r3, [pc, #76]	; (8000acc <MX_USART3_UART_Init+0x90>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a84:	4811      	ldr	r0, [pc, #68]	; (8000acc <MX_USART3_UART_Init+0x90>)
 8000a86:	f004 f811 	bl	8004aac <HAL_UART_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a90:	f000 f8d4 	bl	8000c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a94:	2100      	movs	r1, #0
 8000a96:	480d      	ldr	r0, [pc, #52]	; (8000acc <MX_USART3_UART_Init+0x90>)
 8000a98:	f005 fc2a 	bl	80062f0 <HAL_UARTEx_SetTxFifoThreshold>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000aa2:	f000 f8cb 	bl	8000c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4808      	ldr	r0, [pc, #32]	; (8000acc <MX_USART3_UART_Init+0x90>)
 8000aaa:	f005 fc5f 	bl	800636c <HAL_UARTEx_SetRxFifoThreshold>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ab4:	f000 f8c2 	bl	8000c3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <MX_USART3_UART_Init+0x90>)
 8000aba:	f005 fbe0 	bl	800627e <HAL_UARTEx_DisableFifoMode>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ac4:	f000 f8ba 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	24004b28 	.word	0x24004b28
 8000ad0:	40004800 	.word	0x40004800

08000ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	; 0x28
 8000ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aea:	4b3d      	ldr	r3, [pc, #244]	; (8000be0 <MX_GPIO_Init+0x10c>)
 8000aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af0:	4a3b      	ldr	r2, [pc, #236]	; (8000be0 <MX_GPIO_Init+0x10c>)
 8000af2:	f043 0320 	orr.w	r3, r3, #32
 8000af6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afa:	4b39      	ldr	r3, [pc, #228]	; (8000be0 <MX_GPIO_Init+0x10c>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b00:	f003 0320 	and.w	r3, r3, #32
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b08:	4b35      	ldr	r3, [pc, #212]	; (8000be0 <MX_GPIO_Init+0x10c>)
 8000b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0e:	4a34      	ldr	r2, [pc, #208]	; (8000be0 <MX_GPIO_Init+0x10c>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b18:	4b31      	ldr	r3, [pc, #196]	; (8000be0 <MX_GPIO_Init+0x10c>)
 8000b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b26:	4b2e      	ldr	r3, [pc, #184]	; (8000be0 <MX_GPIO_Init+0x10c>)
 8000b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2c:	4a2c      	ldr	r2, [pc, #176]	; (8000be0 <MX_GPIO_Init+0x10c>)
 8000b2e:	f043 0308 	orr.w	r3, r3, #8
 8000b32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b36:	4b2a      	ldr	r3, [pc, #168]	; (8000be0 <MX_GPIO_Init+0x10c>)
 8000b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3c:	f003 0308 	and.w	r3, r3, #8
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b44:	4b26      	ldr	r3, [pc, #152]	; (8000be0 <MX_GPIO_Init+0x10c>)
 8000b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4a:	4a25      	ldr	r2, [pc, #148]	; (8000be0 <MX_GPIO_Init+0x10c>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b54:	4b22      	ldr	r3, [pc, #136]	; (8000be0 <MX_GPIO_Init+0x10c>)
 8000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GREEN_GPIO_Port, LD1_GREEN_Pin, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2101      	movs	r1, #1
 8000b66:	481f      	ldr	r0, [pc, #124]	; (8000be4 <MX_GPIO_Init+0x110>)
 8000b68:	f001 fbca 	bl	8002300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD1_SPLAT_Pin|LD3_SPLAT_Pin|LD4_SPLAT_Pin, GPIO_PIN_RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f44f 41d0 	mov.w	r1, #26624	; 0x6800
 8000b72:	481d      	ldr	r0, [pc, #116]	; (8000be8 <MX_GPIO_Init+0x114>)
 8000b74:	f001 fbc4 	bl	8002300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD5_SPLAT_GPIO_Port, LD5_SPLAT_Pin, GPIO_PIN_SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b7e:	481a      	ldr	r0, [pc, #104]	; (8000be8 <MX_GPIO_Init+0x114>)
 8000b80:	f001 fbbe 	bl	8002300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_GREEN_Pin */
  GPIO_InitStruct.Pin = LD1_GREEN_Pin;
 8000b84:	2301      	movs	r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD1_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4812      	ldr	r0, [pc, #72]	; (8000be4 <MX_GPIO_Init+0x110>)
 8000b9c:	f001 fa00 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_SPLAT_Pin LD3_SPLAT_Pin LD4_SPLAT_Pin LD5_SPLAT_Pin */
  GPIO_InitStruct.Pin = LD1_SPLAT_Pin|LD3_SPLAT_Pin|LD4_SPLAT_Pin|LD5_SPLAT_Pin;
 8000ba0:	f44f 4368 	mov.w	r3, #59392	; 0xe800
 8000ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	480b      	ldr	r0, [pc, #44]	; (8000be8 <MX_GPIO_Init+0x114>)
 8000bba:	f001 f9f1 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_1_SPLAT_Pin */
  GPIO_InitStruct.Pin = SW1_1_SPLAT_Pin;
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_1_SPLAT_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_GPIO_Init+0x114>)
 8000bd2:	f001 f9e5 	bl	8001fa0 <HAL_GPIO_Init>

}
 8000bd6:	bf00      	nop
 8000bd8:	3728      	adds	r7, #40	; 0x28
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	58024400 	.word	0x58024400
 8000be4:	58020400 	.word	0x58020400
 8000be8:	58020c00 	.word	0x58020c00

08000bec <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(char ch)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
    return ITM_SendChar(ch);
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fdd7 	bl	80007ac <ITM_SendChar>
 8000bfe:	4603      	mov	r3, r0
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	unsigned int i;
	/* Infinite loop */
	for (i=0;;i++) {
 8000c10:	2300      	movs	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(LD4_SPLAT_GPIO_Port, LD4_SPLAT_Pin);
 8000c14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c18:	4806      	ldr	r0, [pc, #24]	; (8000c34 <StartDefaultTask+0x2c>)
 8000c1a:	f001 fb8a 	bl	8002332 <HAL_GPIO_TogglePin>
		osDelay(210);
 8000c1e:	20d2      	movs	r0, #210	; 0xd2
 8000c20:	f005 fd40 	bl	80066a4 <osDelay>
		printf("%d hello from M7\n",i);
 8000c24:	68f9      	ldr	r1, [r7, #12]
 8000c26:	4804      	ldr	r0, [pc, #16]	; (8000c38 <StartDefaultTask+0x30>)
 8000c28:	f008 fbc0 	bl	80093ac <iprintf>
	for (i=0;;i++) {
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(LD4_SPLAT_GPIO_Port, LD4_SPLAT_Pin);
 8000c32:	e7ef      	b.n	8000c14 <StartDefaultTask+0xc>
 8000c34:	58020c00 	.word	0x58020c00
 8000c38:	0800a00c 	.word	0x0800a00c

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c44:	e7fe      	b.n	8000c44 <Error_Handler+0x8>
	...

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <HAL_MspInit+0x38>)
 8000c50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c54:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <HAL_MspInit+0x38>)
 8000c56:	f043 0302 	orr.w	r3, r3, #2
 8000c5a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c5e:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <HAL_MspInit+0x38>)
 8000c60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c64:	f003 0302 	and.w	r3, r3, #2
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	210f      	movs	r1, #15
 8000c70:	f06f 0001 	mvn.w	r0, #1
 8000c74:	f000 fbfd 	bl	8001472 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	58024400 	.word	0x58024400

08000c84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b0ba      	sub	sp, #232	; 0xe8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c9c:	f107 0318 	add.w	r3, r7, #24
 8000ca0:	22bc      	movs	r2, #188	; 0xbc
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f008 facf 	bl	8009248 <memset>
  if(huart->Instance==UART7)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a4d      	ldr	r2, [pc, #308]	; (8000de4 <HAL_UART_MspInit+0x160>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d142      	bne.n	8000d3a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cbe:	f107 0318 	add.w	r3, r7, #24
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f002 fb90 	bl	80033e8 <HAL_RCCEx_PeriphCLKConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cce:	f7ff ffb5 	bl	8000c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8000cd2:	4b45      	ldr	r3, [pc, #276]	; (8000de8 <HAL_UART_MspInit+0x164>)
 8000cd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cd8:	4a43      	ldr	r2, [pc, #268]	; (8000de8 <HAL_UART_MspInit+0x164>)
 8000cda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000cde:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ce2:	4b41      	ldr	r3, [pc, #260]	; (8000de8 <HAL_UART_MspInit+0x164>)
 8000ce4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ce8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cf0:	4b3d      	ldr	r3, [pc, #244]	; (8000de8 <HAL_UART_MspInit+0x164>)
 8000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf6:	4a3c      	ldr	r2, [pc, #240]	; (8000de8 <HAL_UART_MspInit+0x164>)
 8000cf8:	f043 0320 	orr.w	r3, r3, #32
 8000cfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d00:	4b39      	ldr	r3, [pc, #228]	; (8000de8 <HAL_UART_MspInit+0x164>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d06:	f003 0320 	and.w	r3, r3, #32
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d0e:	23c0      	movs	r3, #192	; 0xc0
 8000d10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8000d26:	2307      	movs	r3, #7
 8000d28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d2c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d30:	4619      	mov	r1, r3
 8000d32:	482e      	ldr	r0, [pc, #184]	; (8000dec <HAL_UART_MspInit+0x168>)
 8000d34:	f001 f934 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d38:	e04f      	b.n	8000dda <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART3)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a2c      	ldr	r2, [pc, #176]	; (8000df0 <HAL_UART_MspInit+0x16c>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d14a      	bne.n	8000dda <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d44:	2302      	movs	r3, #2
 8000d46:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d4e:	f107 0318 	add.w	r3, r7, #24
 8000d52:	4618      	mov	r0, r3
 8000d54:	f002 fb48 	bl	80033e8 <HAL_RCCEx_PeriphCLKConfig>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <HAL_UART_MspInit+0xde>
      Error_Handler();
 8000d5e:	f7ff ff6d 	bl	8000c3c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d62:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <HAL_UART_MspInit+0x164>)
 8000d64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d68:	4a1f      	ldr	r2, [pc, #124]	; (8000de8 <HAL_UART_MspInit+0x164>)
 8000d6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d72:	4b1d      	ldr	r3, [pc, #116]	; (8000de8 <HAL_UART_MspInit+0x164>)
 8000d74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d80:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <HAL_UART_MspInit+0x164>)
 8000d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d86:	4a18      	ldr	r2, [pc, #96]	; (8000de8 <HAL_UART_MspInit+0x164>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d90:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <HAL_UART_MspInit+0x164>)
 8000d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d9e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000da2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000db8:	2307      	movs	r3, #7
 8000dba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480b      	ldr	r0, [pc, #44]	; (8000df4 <HAL_UART_MspInit+0x170>)
 8000dc6:	f001 f8eb 	bl	8001fa0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2105      	movs	r1, #5
 8000dce:	2027      	movs	r0, #39	; 0x27
 8000dd0:	f000 fb4f 	bl	8001472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000dd4:	2027      	movs	r0, #39	; 0x27
 8000dd6:	f000 fb66 	bl	80014a6 <HAL_NVIC_EnableIRQ>
}
 8000dda:	bf00      	nop
 8000ddc:	37e8      	adds	r7, #232	; 0xe8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40007800 	.word	0x40007800
 8000de8:	58024400 	.word	0x58024400
 8000dec:	58021400 	.word	0x58021400
 8000df0:	40004800 	.word	0x40004800
 8000df4:	58020400 	.word	0x58020400

08000df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <NMI_Handler+0x4>

08000dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <HardFault_Handler+0x4>

08000e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <MemManage_Handler+0x4>

08000e0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <BusFault_Handler+0x4>

08000e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <UsageFault_Handler+0x4>

08000e16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e28:	f000 fa1c 	bl	8001264 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000e2c:	f007 fca8 	bl	8008780 <xTaskGetSchedulerState>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d001      	beq.n	8000e3a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000e36:	f006 f8df 	bl	8006ff8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <USART3_IRQHandler+0x10>)
 8000e46:	f003 fe81 	bl	8004b4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	24004b28 	.word	0x24004b28

08000e54 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	e00a      	b.n	8000e7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e66:	f3af 8000 	nop.w
 8000e6a:	4601      	mov	r1, r0
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	1c5a      	adds	r2, r3, #1
 8000e70:	60ba      	str	r2, [r7, #8]
 8000e72:	b2ca      	uxtb	r2, r1
 8000e74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	dbf0      	blt.n	8000e66 <_read+0x12>
	}

return len;
 8000e84:	687b      	ldr	r3, [r7, #4]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b086      	sub	sp, #24
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	60f8      	str	r0, [r7, #12]
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	e009      	b.n	8000eb4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	1c5a      	adds	r2, r3, #1
 8000ea4:	60ba      	str	r2, [r7, #8]
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fe9f 	bl	8000bec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	697a      	ldr	r2, [r7, #20]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	dbf1      	blt.n	8000ea0 <_write+0x12>
	}
	return len;
 8000ebc:	687b      	ldr	r3, [r7, #4]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <_close>:

int _close(int file)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
	return -1;
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eee:	605a      	str	r2, [r3, #4]
	return 0;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <_isatty>:

int _isatty(int file)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
	return 1;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
	return 0;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f38:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <_sbrk+0x5c>)
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <_sbrk+0x60>)
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d102      	bne.n	8000f52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <_sbrk+0x64>)
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <_sbrk+0x68>)
 8000f50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <_sbrk+0x64>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d207      	bcs.n	8000f70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f60:	f008 f83c 	bl	8008fdc <__errno>
 8000f64:	4603      	mov	r3, r0
 8000f66:	220c      	movs	r2, #12
 8000f68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6e:	e009      	b.n	8000f84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f76:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <_sbrk+0x64>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <_sbrk+0x64>)
 8000f80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f82:	68fb      	ldr	r3, [r7, #12]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	24080000 	.word	0x24080000
 8000f90:	00000400 	.word	0x00000400
 8000f94:	24000094 	.word	0x24000094
 8000f98:	24004c00 	.word	0x24004c00

08000f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fa0:	f7ff fb6a 	bl	8000678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa4:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fa6:	490d      	ldr	r1, [pc, #52]	; (8000fdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	; (8000fe0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fac:	e002      	b.n	8000fb4 <LoopCopyDataInit>

08000fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb2:	3304      	adds	r3, #4

08000fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb8:	d3f9      	bcc.n	8000fae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fbc:	4c0a      	ldr	r4, [pc, #40]	; (8000fe8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc0:	e001      	b.n	8000fc6 <LoopFillZerobss>

08000fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc4:	3204      	adds	r2, #4

08000fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc8:	d3fb      	bcc.n	8000fc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fca:	f008 f903 	bl	80091d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fce:	f7ff fc15 	bl	80007fc <main>
  bx  lr
 8000fd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fd4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fd8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fdc:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000fe0:	0800a13c 	.word	0x0800a13c
  ldr r2, =_sbss
 8000fe4:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8000fe8:	24004c00 	.word	0x24004c00

08000fec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fec:	e7fe      	b.n	8000fec <ADC3_IRQHandler>

08000fee <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b084      	sub	sp, #16
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d104      	bne.n	8001006 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000ffc:	b672      	cpsid	i
}
 8000ffe:	bf00      	nop
 8001000:	f7ff fe1c 	bl	8000c3c <Error_Handler>
 8001004:	e7fe      	b.n	8001004 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	e007      	b.n	800101c <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	2100      	movs	r1, #0
 8001012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	3301      	adds	r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d9f4      	bls.n	800100c <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	721a      	strb	r2, [r3, #8]
}
 8001028:	bf00      	nop
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d104      	bne.n	8001048 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800103e:	b672      	cpsid	i
}
 8001040:	bf00      	nop
 8001042:	f7ff fdfb 	bl	8000c3c <Error_Handler>
 8001046:	e7fe      	b.n	8001046 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	7a1b      	ldrb	r3, [r3, #8]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d904      	bls.n	800105a <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001050:	b672      	cpsid	i
}
 8001052:	bf00      	nop
 8001054:	f7ff fdf2 	bl	8000c3c <Error_Handler>
 8001058:	e7fe      	b.n	8001058 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7a1b      	ldrb	r3, [r3, #8]
 800105e:	1c5a      	adds	r2, r3, #1
 8001060:	b2d1      	uxtb	r1, r2
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	7211      	strb	r1, [r2, #8]
 8001066:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001068:	f3ef 8211 	mrs	r2, BASEPRI
 800106c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001070:	f383 8811 	msr	BASEPRI, r3
 8001074:	f3bf 8f6f 	isb	sy
 8001078:	f3bf 8f4f 	dsb	sy
 800107c:	60fa      	str	r2, [r7, #12]
 800107e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d104      	bne.n	80010a8 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800109e:	b672      	cpsid	i
}
 80010a0:	bf00      	nop
 80010a2:	f7ff fdcb 	bl	8000c3c <Error_Handler>
 80010a6:	e7fe      	b.n	80010a6 <stm32_lock_release+0x16>
  lock->nesting_level--;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7a1b      	ldrb	r3, [r3, #8]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	7a1b      	ldrb	r3, [r3, #8]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d904      	bls.n	80010c6 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 80010bc:	b672      	cpsid	i
}
 80010be:	bf00      	nop
 80010c0:	f7ff fdbc 	bl	8000c3c <Error_Handler>
 80010c4:	e7fe      	b.n	80010c4 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	7a1b      	ldrb	r3, [r3, #8]
 80010ca:	461a      	mov	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80010da:	bf00      	nop
}
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d105      	bne.n	80010fe <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 80010f2:	f007 ff73 	bl	8008fdc <__errno>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2216      	movs	r2, #22
 80010fa:	601a      	str	r2, [r3, #0]
    return;
 80010fc:	e015      	b.n	800112a <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 80010fe:	200c      	movs	r0, #12
 8001100:	f008 f88c 	bl	800921c <malloc>
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d005      	beq.n	8001120 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff68 	bl	8000fee <stm32_lock_init>
    return;
 800111e:	e004      	b.n	800112a <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8001120:	b672      	cpsid	i
}
 8001122:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8001124:	f7ff fd8a 	bl	8000c3c <Error_Handler>
 8001128:	e7fe      	b.n	8001128 <__retarget_lock_init_recursive+0x44>
}
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d104      	bne.n	8001148 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800113e:	b672      	cpsid	i
}
 8001140:	bf00      	nop
 8001142:	f7ff fd7b 	bl	8000c3c <Error_Handler>
 8001146:	e7fe      	b.n	8001146 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff70 	bl	8001030 <stm32_lock_acquire>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d104      	bne.n	8001170 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001166:	b672      	cpsid	i
}
 8001168:	bf00      	nop
 800116a:	f7ff fd67 	bl	8000c3c <Error_Handler>
 800116e:	e7fe      	b.n	800116e <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ff8c 	bl	8001090 <stm32_lock_release>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001186:	2003      	movs	r0, #3
 8001188:	f000 f968 	bl	800145c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800118c:	f001 ff56 	bl	800303c <HAL_RCC_GetSysClockFreq>
 8001190:	4602      	mov	r2, r0
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <HAL_Init+0x68>)
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	0a1b      	lsrs	r3, r3, #8
 8001198:	f003 030f 	and.w	r3, r3, #15
 800119c:	4913      	ldr	r1, [pc, #76]	; (80011ec <HAL_Init+0x6c>)
 800119e:	5ccb      	ldrb	r3, [r1, r3]
 80011a0:	f003 031f 	and.w	r3, r3, #31
 80011a4:	fa22 f303 	lsr.w	r3, r2, r3
 80011a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <HAL_Init+0x68>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <HAL_Init+0x6c>)
 80011b4:	5cd3      	ldrb	r3, [r2, r3]
 80011b6:	f003 031f 	and.w	r3, r3, #31
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	fa22 f303 	lsr.w	r3, r2, r3
 80011c0:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <HAL_Init+0x70>)
 80011c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011c4:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <HAL_Init+0x74>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ca:	200f      	movs	r0, #15
 80011cc:	f000 f814 	bl	80011f8 <HAL_InitTick>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e002      	b.n	80011e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011da:	f7ff fd35 	bl	8000c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	58024400 	.word	0x58024400
 80011ec:	0800a038 	.word	0x0800a038
 80011f0:	24000004 	.word	0x24000004
 80011f4:	24000000 	.word	0x24000000

080011f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_InitTick+0x60>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d101      	bne.n	800120c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e021      	b.n	8001250 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <HAL_InitTick+0x64>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_InitTick+0x60>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	fbb3 f3f1 	udiv	r3, r3, r1
 800121e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f94d 	bl	80014c2 <HAL_SYSTICK_Config>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e00e      	b.n	8001250 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b0f      	cmp	r3, #15
 8001236:	d80a      	bhi.n	800124e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001238:	2200      	movs	r2, #0
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f000 f917 	bl	8001472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001244:	4a06      	ldr	r2, [pc, #24]	; (8001260 <HAL_InitTick+0x68>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	e000      	b.n	8001250 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	2400000c 	.word	0x2400000c
 800125c:	24000000 	.word	0x24000000
 8001260:	24000008 	.word	0x24000008

08001264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_IncTick+0x20>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_IncTick+0x24>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4413      	add	r3, r2
 8001274:	4a04      	ldr	r2, [pc, #16]	; (8001288 <HAL_IncTick+0x24>)
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	2400000c 	.word	0x2400000c
 8001288:	24004bb8 	.word	0x24004bb8

0800128c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <HAL_GetTick+0x14>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	24004bb8 	.word	0x24004bb8

080012a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <HAL_GetREVID+0x14>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	0c1b      	lsrs	r3, r3, #16
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	5c001000 	.word	0x5c001000

080012bc <__NVIC_SetPriorityGrouping>:
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <__NVIC_SetPriorityGrouping+0x40>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d8:	4013      	ands	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ea:	4a04      	ldr	r2, [pc, #16]	; (80012fc <__NVIC_SetPriorityGrouping+0x40>)
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	60d3      	str	r3, [r2, #12]
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00
 8001300:	05fa0000 	.word	0x05fa0000

08001304 <__NVIC_GetPriorityGrouping>:
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <__NVIC_GetPriorityGrouping+0x18>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	f003 0307 	and.w	r3, r3, #7
}
 8001312:	4618      	mov	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_EnableIRQ>:
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800132a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800132e:	2b00      	cmp	r3, #0
 8001330:	db0b      	blt.n	800134a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	f003 021f 	and.w	r2, r3, #31
 8001338:	4907      	ldr	r1, [pc, #28]	; (8001358 <__NVIC_EnableIRQ+0x38>)
 800133a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800133e:	095b      	lsrs	r3, r3, #5
 8001340:	2001      	movs	r0, #1
 8001342:	fa00 f202 	lsl.w	r2, r0, r2
 8001346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000e100 	.word	0xe000e100

0800135c <__NVIC_SetPriority>:
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	6039      	str	r1, [r7, #0]
 8001366:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001368:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800136c:	2b00      	cmp	r3, #0
 800136e:	db0a      	blt.n	8001386 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	490c      	ldr	r1, [pc, #48]	; (80013a8 <__NVIC_SetPriority+0x4c>)
 8001376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137a:	0112      	lsls	r2, r2, #4
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	440b      	add	r3, r1
 8001380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001384:	e00a      	b.n	800139c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4908      	ldr	r1, [pc, #32]	; (80013ac <__NVIC_SetPriority+0x50>)
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	3b04      	subs	r3, #4
 8001394:	0112      	lsls	r2, r2, #4
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	440b      	add	r3, r1
 800139a:	761a      	strb	r2, [r3, #24]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000e100 	.word	0xe000e100
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <NVIC_EncodePriority>:
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	; 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f1c3 0307 	rsb	r3, r3, #7
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	bf28      	it	cs
 80013ce:	2304      	movcs	r3, #4
 80013d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3304      	adds	r3, #4
 80013d6:	2b06      	cmp	r3, #6
 80013d8:	d902      	bls.n	80013e0 <NVIC_EncodePriority+0x30>
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3b03      	subs	r3, #3
 80013de:	e000      	b.n	80013e2 <NVIC_EncodePriority+0x32>
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	f04f 32ff 	mov.w	r2, #4294967295
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43da      	mvns	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	401a      	ands	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f8:	f04f 31ff 	mov.w	r1, #4294967295
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	43d9      	mvns	r1, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	4313      	orrs	r3, r2
}
 800140a:	4618      	mov	r0, r3
 800140c:	3724      	adds	r7, #36	; 0x24
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <SysTick_Config>:
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001428:	d301      	bcc.n	800142e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800142a:	2301      	movs	r3, #1
 800142c:	e00f      	b.n	800144e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142e:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <SysTick_Config+0x40>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001436:	210f      	movs	r1, #15
 8001438:	f04f 30ff 	mov.w	r0, #4294967295
 800143c:	f7ff ff8e 	bl	800135c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <SysTick_Config+0x40>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <SysTick_Config+0x40>)
 8001448:	2207      	movs	r2, #7
 800144a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	e000e010 	.word	0xe000e010

0800145c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ff29 	bl	80012bc <__NVIC_SetPriorityGrouping>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b086      	sub	sp, #24
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	607a      	str	r2, [r7, #4]
 800147e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001480:	f7ff ff40 	bl	8001304 <__NVIC_GetPriorityGrouping>
 8001484:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	6978      	ldr	r0, [r7, #20]
 800148c:	f7ff ff90 	bl	80013b0 <NVIC_EncodePriority>
 8001490:	4602      	mov	r2, r0
 8001492:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001496:	4611      	mov	r1, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff5f 	bl	800135c <__NVIC_SetPriority>
}
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff33 	bl	8001320 <__NVIC_EnableIRQ>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff ffa4 	bl	8001418 <SysTick_Config>
 80014d0:	4603      	mov	r3, r0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80014e4:	f7ff fed2 	bl	800128c <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d101      	bne.n	80014f4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e2dc      	b.n	8001aae <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d008      	beq.n	8001512 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2280      	movs	r2, #128	; 0x80
 8001504:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e2cd      	b.n	8001aae <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a76      	ldr	r2, [pc, #472]	; (80016f0 <HAL_DMA_Abort+0x214>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d04a      	beq.n	80015b2 <HAL_DMA_Abort+0xd6>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a74      	ldr	r2, [pc, #464]	; (80016f4 <HAL_DMA_Abort+0x218>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d045      	beq.n	80015b2 <HAL_DMA_Abort+0xd6>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a73      	ldr	r2, [pc, #460]	; (80016f8 <HAL_DMA_Abort+0x21c>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d040      	beq.n	80015b2 <HAL_DMA_Abort+0xd6>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a71      	ldr	r2, [pc, #452]	; (80016fc <HAL_DMA_Abort+0x220>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d03b      	beq.n	80015b2 <HAL_DMA_Abort+0xd6>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a70      	ldr	r2, [pc, #448]	; (8001700 <HAL_DMA_Abort+0x224>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d036      	beq.n	80015b2 <HAL_DMA_Abort+0xd6>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a6e      	ldr	r2, [pc, #440]	; (8001704 <HAL_DMA_Abort+0x228>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d031      	beq.n	80015b2 <HAL_DMA_Abort+0xd6>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a6d      	ldr	r2, [pc, #436]	; (8001708 <HAL_DMA_Abort+0x22c>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d02c      	beq.n	80015b2 <HAL_DMA_Abort+0xd6>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a6b      	ldr	r2, [pc, #428]	; (800170c <HAL_DMA_Abort+0x230>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d027      	beq.n	80015b2 <HAL_DMA_Abort+0xd6>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a6a      	ldr	r2, [pc, #424]	; (8001710 <HAL_DMA_Abort+0x234>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d022      	beq.n	80015b2 <HAL_DMA_Abort+0xd6>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a68      	ldr	r2, [pc, #416]	; (8001714 <HAL_DMA_Abort+0x238>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d01d      	beq.n	80015b2 <HAL_DMA_Abort+0xd6>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a67      	ldr	r2, [pc, #412]	; (8001718 <HAL_DMA_Abort+0x23c>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d018      	beq.n	80015b2 <HAL_DMA_Abort+0xd6>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a65      	ldr	r2, [pc, #404]	; (800171c <HAL_DMA_Abort+0x240>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d013      	beq.n	80015b2 <HAL_DMA_Abort+0xd6>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a64      	ldr	r2, [pc, #400]	; (8001720 <HAL_DMA_Abort+0x244>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d00e      	beq.n	80015b2 <HAL_DMA_Abort+0xd6>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a62      	ldr	r2, [pc, #392]	; (8001724 <HAL_DMA_Abort+0x248>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d009      	beq.n	80015b2 <HAL_DMA_Abort+0xd6>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a61      	ldr	r2, [pc, #388]	; (8001728 <HAL_DMA_Abort+0x24c>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d004      	beq.n	80015b2 <HAL_DMA_Abort+0xd6>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a5f      	ldr	r2, [pc, #380]	; (800172c <HAL_DMA_Abort+0x250>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d101      	bne.n	80015b6 <HAL_DMA_Abort+0xda>
 80015b2:	2301      	movs	r3, #1
 80015b4:	e000      	b.n	80015b8 <HAL_DMA_Abort+0xdc>
 80015b6:	2300      	movs	r3, #0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d013      	beq.n	80015e4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 021e 	bic.w	r2, r2, #30
 80015ca:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	695a      	ldr	r2, [r3, #20]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015da:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	e00a      	b.n	80015fa <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 020e 	bic.w	r2, r2, #14
 80015f2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a3c      	ldr	r2, [pc, #240]	; (80016f0 <HAL_DMA_Abort+0x214>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d072      	beq.n	80016ea <HAL_DMA_Abort+0x20e>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a3a      	ldr	r2, [pc, #232]	; (80016f4 <HAL_DMA_Abort+0x218>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d06d      	beq.n	80016ea <HAL_DMA_Abort+0x20e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a39      	ldr	r2, [pc, #228]	; (80016f8 <HAL_DMA_Abort+0x21c>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d068      	beq.n	80016ea <HAL_DMA_Abort+0x20e>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a37      	ldr	r2, [pc, #220]	; (80016fc <HAL_DMA_Abort+0x220>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d063      	beq.n	80016ea <HAL_DMA_Abort+0x20e>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a36      	ldr	r2, [pc, #216]	; (8001700 <HAL_DMA_Abort+0x224>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d05e      	beq.n	80016ea <HAL_DMA_Abort+0x20e>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a34      	ldr	r2, [pc, #208]	; (8001704 <HAL_DMA_Abort+0x228>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d059      	beq.n	80016ea <HAL_DMA_Abort+0x20e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a33      	ldr	r2, [pc, #204]	; (8001708 <HAL_DMA_Abort+0x22c>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d054      	beq.n	80016ea <HAL_DMA_Abort+0x20e>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a31      	ldr	r2, [pc, #196]	; (800170c <HAL_DMA_Abort+0x230>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d04f      	beq.n	80016ea <HAL_DMA_Abort+0x20e>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a30      	ldr	r2, [pc, #192]	; (8001710 <HAL_DMA_Abort+0x234>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d04a      	beq.n	80016ea <HAL_DMA_Abort+0x20e>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a2e      	ldr	r2, [pc, #184]	; (8001714 <HAL_DMA_Abort+0x238>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d045      	beq.n	80016ea <HAL_DMA_Abort+0x20e>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a2d      	ldr	r2, [pc, #180]	; (8001718 <HAL_DMA_Abort+0x23c>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d040      	beq.n	80016ea <HAL_DMA_Abort+0x20e>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a2b      	ldr	r2, [pc, #172]	; (800171c <HAL_DMA_Abort+0x240>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d03b      	beq.n	80016ea <HAL_DMA_Abort+0x20e>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a2a      	ldr	r2, [pc, #168]	; (8001720 <HAL_DMA_Abort+0x244>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d036      	beq.n	80016ea <HAL_DMA_Abort+0x20e>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a28      	ldr	r2, [pc, #160]	; (8001724 <HAL_DMA_Abort+0x248>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d031      	beq.n	80016ea <HAL_DMA_Abort+0x20e>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a27      	ldr	r2, [pc, #156]	; (8001728 <HAL_DMA_Abort+0x24c>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d02c      	beq.n	80016ea <HAL_DMA_Abort+0x20e>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a25      	ldr	r2, [pc, #148]	; (800172c <HAL_DMA_Abort+0x250>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d027      	beq.n	80016ea <HAL_DMA_Abort+0x20e>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a24      	ldr	r2, [pc, #144]	; (8001730 <HAL_DMA_Abort+0x254>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d022      	beq.n	80016ea <HAL_DMA_Abort+0x20e>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a22      	ldr	r2, [pc, #136]	; (8001734 <HAL_DMA_Abort+0x258>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d01d      	beq.n	80016ea <HAL_DMA_Abort+0x20e>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a21      	ldr	r2, [pc, #132]	; (8001738 <HAL_DMA_Abort+0x25c>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d018      	beq.n	80016ea <HAL_DMA_Abort+0x20e>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a1f      	ldr	r2, [pc, #124]	; (800173c <HAL_DMA_Abort+0x260>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d013      	beq.n	80016ea <HAL_DMA_Abort+0x20e>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a1e      	ldr	r2, [pc, #120]	; (8001740 <HAL_DMA_Abort+0x264>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d00e      	beq.n	80016ea <HAL_DMA_Abort+0x20e>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a1c      	ldr	r2, [pc, #112]	; (8001744 <HAL_DMA_Abort+0x268>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d009      	beq.n	80016ea <HAL_DMA_Abort+0x20e>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a1b      	ldr	r2, [pc, #108]	; (8001748 <HAL_DMA_Abort+0x26c>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d004      	beq.n	80016ea <HAL_DMA_Abort+0x20e>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a19      	ldr	r2, [pc, #100]	; (800174c <HAL_DMA_Abort+0x270>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d132      	bne.n	8001750 <HAL_DMA_Abort+0x274>
 80016ea:	2301      	movs	r3, #1
 80016ec:	e031      	b.n	8001752 <HAL_DMA_Abort+0x276>
 80016ee:	bf00      	nop
 80016f0:	40020010 	.word	0x40020010
 80016f4:	40020028 	.word	0x40020028
 80016f8:	40020040 	.word	0x40020040
 80016fc:	40020058 	.word	0x40020058
 8001700:	40020070 	.word	0x40020070
 8001704:	40020088 	.word	0x40020088
 8001708:	400200a0 	.word	0x400200a0
 800170c:	400200b8 	.word	0x400200b8
 8001710:	40020410 	.word	0x40020410
 8001714:	40020428 	.word	0x40020428
 8001718:	40020440 	.word	0x40020440
 800171c:	40020458 	.word	0x40020458
 8001720:	40020470 	.word	0x40020470
 8001724:	40020488 	.word	0x40020488
 8001728:	400204a0 	.word	0x400204a0
 800172c:	400204b8 	.word	0x400204b8
 8001730:	58025408 	.word	0x58025408
 8001734:	5802541c 	.word	0x5802541c
 8001738:	58025430 	.word	0x58025430
 800173c:	58025444 	.word	0x58025444
 8001740:	58025458 	.word	0x58025458
 8001744:	5802546c 	.word	0x5802546c
 8001748:	58025480 	.word	0x58025480
 800174c:	58025494 	.word	0x58025494
 8001750:	2300      	movs	r3, #0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d007      	beq.n	8001766 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001760:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001764:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a6d      	ldr	r2, [pc, #436]	; (8001920 <HAL_DMA_Abort+0x444>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d04a      	beq.n	8001806 <HAL_DMA_Abort+0x32a>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a6b      	ldr	r2, [pc, #428]	; (8001924 <HAL_DMA_Abort+0x448>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d045      	beq.n	8001806 <HAL_DMA_Abort+0x32a>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a6a      	ldr	r2, [pc, #424]	; (8001928 <HAL_DMA_Abort+0x44c>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d040      	beq.n	8001806 <HAL_DMA_Abort+0x32a>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a68      	ldr	r2, [pc, #416]	; (800192c <HAL_DMA_Abort+0x450>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d03b      	beq.n	8001806 <HAL_DMA_Abort+0x32a>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a67      	ldr	r2, [pc, #412]	; (8001930 <HAL_DMA_Abort+0x454>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d036      	beq.n	8001806 <HAL_DMA_Abort+0x32a>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a65      	ldr	r2, [pc, #404]	; (8001934 <HAL_DMA_Abort+0x458>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d031      	beq.n	8001806 <HAL_DMA_Abort+0x32a>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a64      	ldr	r2, [pc, #400]	; (8001938 <HAL_DMA_Abort+0x45c>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d02c      	beq.n	8001806 <HAL_DMA_Abort+0x32a>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a62      	ldr	r2, [pc, #392]	; (800193c <HAL_DMA_Abort+0x460>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d027      	beq.n	8001806 <HAL_DMA_Abort+0x32a>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a61      	ldr	r2, [pc, #388]	; (8001940 <HAL_DMA_Abort+0x464>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d022      	beq.n	8001806 <HAL_DMA_Abort+0x32a>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a5f      	ldr	r2, [pc, #380]	; (8001944 <HAL_DMA_Abort+0x468>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d01d      	beq.n	8001806 <HAL_DMA_Abort+0x32a>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a5e      	ldr	r2, [pc, #376]	; (8001948 <HAL_DMA_Abort+0x46c>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d018      	beq.n	8001806 <HAL_DMA_Abort+0x32a>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a5c      	ldr	r2, [pc, #368]	; (800194c <HAL_DMA_Abort+0x470>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d013      	beq.n	8001806 <HAL_DMA_Abort+0x32a>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a5b      	ldr	r2, [pc, #364]	; (8001950 <HAL_DMA_Abort+0x474>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d00e      	beq.n	8001806 <HAL_DMA_Abort+0x32a>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a59      	ldr	r2, [pc, #356]	; (8001954 <HAL_DMA_Abort+0x478>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d009      	beq.n	8001806 <HAL_DMA_Abort+0x32a>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a58      	ldr	r2, [pc, #352]	; (8001958 <HAL_DMA_Abort+0x47c>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d004      	beq.n	8001806 <HAL_DMA_Abort+0x32a>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a56      	ldr	r2, [pc, #344]	; (800195c <HAL_DMA_Abort+0x480>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d108      	bne.n	8001818 <HAL_DMA_Abort+0x33c>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 0201 	bic.w	r2, r2, #1
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	e007      	b.n	8001828 <HAL_DMA_Abort+0x34c>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 0201 	bic.w	r2, r2, #1
 8001826:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001828:	e013      	b.n	8001852 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800182a:	f7ff fd2f 	bl	800128c <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b05      	cmp	r3, #5
 8001836:	d90c      	bls.n	8001852 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2220      	movs	r2, #32
 800183c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2203      	movs	r2, #3
 8001842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e12d      	b.n	8001aae <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1e5      	bne.n	800182a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a2f      	ldr	r2, [pc, #188]	; (8001920 <HAL_DMA_Abort+0x444>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d04a      	beq.n	80018fe <HAL_DMA_Abort+0x422>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a2d      	ldr	r2, [pc, #180]	; (8001924 <HAL_DMA_Abort+0x448>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d045      	beq.n	80018fe <HAL_DMA_Abort+0x422>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a2c      	ldr	r2, [pc, #176]	; (8001928 <HAL_DMA_Abort+0x44c>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d040      	beq.n	80018fe <HAL_DMA_Abort+0x422>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a2a      	ldr	r2, [pc, #168]	; (800192c <HAL_DMA_Abort+0x450>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d03b      	beq.n	80018fe <HAL_DMA_Abort+0x422>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a29      	ldr	r2, [pc, #164]	; (8001930 <HAL_DMA_Abort+0x454>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d036      	beq.n	80018fe <HAL_DMA_Abort+0x422>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a27      	ldr	r2, [pc, #156]	; (8001934 <HAL_DMA_Abort+0x458>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d031      	beq.n	80018fe <HAL_DMA_Abort+0x422>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a26      	ldr	r2, [pc, #152]	; (8001938 <HAL_DMA_Abort+0x45c>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d02c      	beq.n	80018fe <HAL_DMA_Abort+0x422>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a24      	ldr	r2, [pc, #144]	; (800193c <HAL_DMA_Abort+0x460>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d027      	beq.n	80018fe <HAL_DMA_Abort+0x422>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a23      	ldr	r2, [pc, #140]	; (8001940 <HAL_DMA_Abort+0x464>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d022      	beq.n	80018fe <HAL_DMA_Abort+0x422>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a21      	ldr	r2, [pc, #132]	; (8001944 <HAL_DMA_Abort+0x468>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d01d      	beq.n	80018fe <HAL_DMA_Abort+0x422>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a20      	ldr	r2, [pc, #128]	; (8001948 <HAL_DMA_Abort+0x46c>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d018      	beq.n	80018fe <HAL_DMA_Abort+0x422>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a1e      	ldr	r2, [pc, #120]	; (800194c <HAL_DMA_Abort+0x470>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d013      	beq.n	80018fe <HAL_DMA_Abort+0x422>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a1d      	ldr	r2, [pc, #116]	; (8001950 <HAL_DMA_Abort+0x474>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d00e      	beq.n	80018fe <HAL_DMA_Abort+0x422>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a1b      	ldr	r2, [pc, #108]	; (8001954 <HAL_DMA_Abort+0x478>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d009      	beq.n	80018fe <HAL_DMA_Abort+0x422>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a1a      	ldr	r2, [pc, #104]	; (8001958 <HAL_DMA_Abort+0x47c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d004      	beq.n	80018fe <HAL_DMA_Abort+0x422>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a18      	ldr	r2, [pc, #96]	; (800195c <HAL_DMA_Abort+0x480>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d101      	bne.n	8001902 <HAL_DMA_Abort+0x426>
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <HAL_DMA_Abort+0x428>
 8001902:	2300      	movs	r3, #0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d02b      	beq.n	8001960 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001912:	f003 031f 	and.w	r3, r3, #31
 8001916:	223f      	movs	r2, #63	; 0x3f
 8001918:	409a      	lsls	r2, r3
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	e02a      	b.n	8001976 <HAL_DMA_Abort+0x49a>
 8001920:	40020010 	.word	0x40020010
 8001924:	40020028 	.word	0x40020028
 8001928:	40020040 	.word	0x40020040
 800192c:	40020058 	.word	0x40020058
 8001930:	40020070 	.word	0x40020070
 8001934:	40020088 	.word	0x40020088
 8001938:	400200a0 	.word	0x400200a0
 800193c:	400200b8 	.word	0x400200b8
 8001940:	40020410 	.word	0x40020410
 8001944:	40020428 	.word	0x40020428
 8001948:	40020440 	.word	0x40020440
 800194c:	40020458 	.word	0x40020458
 8001950:	40020470 	.word	0x40020470
 8001954:	40020488 	.word	0x40020488
 8001958:	400204a0 	.word	0x400204a0
 800195c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001964:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800196a:	f003 031f 	and.w	r3, r3, #31
 800196e:	2201      	movs	r2, #1
 8001970:	409a      	lsls	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a4f      	ldr	r2, [pc, #316]	; (8001ab8 <HAL_DMA_Abort+0x5dc>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d072      	beq.n	8001a66 <HAL_DMA_Abort+0x58a>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a4d      	ldr	r2, [pc, #308]	; (8001abc <HAL_DMA_Abort+0x5e0>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d06d      	beq.n	8001a66 <HAL_DMA_Abort+0x58a>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a4c      	ldr	r2, [pc, #304]	; (8001ac0 <HAL_DMA_Abort+0x5e4>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d068      	beq.n	8001a66 <HAL_DMA_Abort+0x58a>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a4a      	ldr	r2, [pc, #296]	; (8001ac4 <HAL_DMA_Abort+0x5e8>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d063      	beq.n	8001a66 <HAL_DMA_Abort+0x58a>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a49      	ldr	r2, [pc, #292]	; (8001ac8 <HAL_DMA_Abort+0x5ec>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d05e      	beq.n	8001a66 <HAL_DMA_Abort+0x58a>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a47      	ldr	r2, [pc, #284]	; (8001acc <HAL_DMA_Abort+0x5f0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d059      	beq.n	8001a66 <HAL_DMA_Abort+0x58a>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a46      	ldr	r2, [pc, #280]	; (8001ad0 <HAL_DMA_Abort+0x5f4>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d054      	beq.n	8001a66 <HAL_DMA_Abort+0x58a>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a44      	ldr	r2, [pc, #272]	; (8001ad4 <HAL_DMA_Abort+0x5f8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d04f      	beq.n	8001a66 <HAL_DMA_Abort+0x58a>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a43      	ldr	r2, [pc, #268]	; (8001ad8 <HAL_DMA_Abort+0x5fc>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d04a      	beq.n	8001a66 <HAL_DMA_Abort+0x58a>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a41      	ldr	r2, [pc, #260]	; (8001adc <HAL_DMA_Abort+0x600>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d045      	beq.n	8001a66 <HAL_DMA_Abort+0x58a>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a40      	ldr	r2, [pc, #256]	; (8001ae0 <HAL_DMA_Abort+0x604>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d040      	beq.n	8001a66 <HAL_DMA_Abort+0x58a>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a3e      	ldr	r2, [pc, #248]	; (8001ae4 <HAL_DMA_Abort+0x608>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d03b      	beq.n	8001a66 <HAL_DMA_Abort+0x58a>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a3d      	ldr	r2, [pc, #244]	; (8001ae8 <HAL_DMA_Abort+0x60c>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d036      	beq.n	8001a66 <HAL_DMA_Abort+0x58a>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a3b      	ldr	r2, [pc, #236]	; (8001aec <HAL_DMA_Abort+0x610>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d031      	beq.n	8001a66 <HAL_DMA_Abort+0x58a>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a3a      	ldr	r2, [pc, #232]	; (8001af0 <HAL_DMA_Abort+0x614>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d02c      	beq.n	8001a66 <HAL_DMA_Abort+0x58a>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a38      	ldr	r2, [pc, #224]	; (8001af4 <HAL_DMA_Abort+0x618>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d027      	beq.n	8001a66 <HAL_DMA_Abort+0x58a>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a37      	ldr	r2, [pc, #220]	; (8001af8 <HAL_DMA_Abort+0x61c>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d022      	beq.n	8001a66 <HAL_DMA_Abort+0x58a>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a35      	ldr	r2, [pc, #212]	; (8001afc <HAL_DMA_Abort+0x620>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d01d      	beq.n	8001a66 <HAL_DMA_Abort+0x58a>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a34      	ldr	r2, [pc, #208]	; (8001b00 <HAL_DMA_Abort+0x624>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d018      	beq.n	8001a66 <HAL_DMA_Abort+0x58a>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a32      	ldr	r2, [pc, #200]	; (8001b04 <HAL_DMA_Abort+0x628>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d013      	beq.n	8001a66 <HAL_DMA_Abort+0x58a>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a31      	ldr	r2, [pc, #196]	; (8001b08 <HAL_DMA_Abort+0x62c>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d00e      	beq.n	8001a66 <HAL_DMA_Abort+0x58a>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a2f      	ldr	r2, [pc, #188]	; (8001b0c <HAL_DMA_Abort+0x630>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d009      	beq.n	8001a66 <HAL_DMA_Abort+0x58a>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a2e      	ldr	r2, [pc, #184]	; (8001b10 <HAL_DMA_Abort+0x634>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d004      	beq.n	8001a66 <HAL_DMA_Abort+0x58a>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a2c      	ldr	r2, [pc, #176]	; (8001b14 <HAL_DMA_Abort+0x638>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d101      	bne.n	8001a6a <HAL_DMA_Abort+0x58e>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <HAL_DMA_Abort+0x590>
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d015      	beq.n	8001a9c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001a78:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00c      	beq.n	8001a9c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a90:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001a9a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40020010 	.word	0x40020010
 8001abc:	40020028 	.word	0x40020028
 8001ac0:	40020040 	.word	0x40020040
 8001ac4:	40020058 	.word	0x40020058
 8001ac8:	40020070 	.word	0x40020070
 8001acc:	40020088 	.word	0x40020088
 8001ad0:	400200a0 	.word	0x400200a0
 8001ad4:	400200b8 	.word	0x400200b8
 8001ad8:	40020410 	.word	0x40020410
 8001adc:	40020428 	.word	0x40020428
 8001ae0:	40020440 	.word	0x40020440
 8001ae4:	40020458 	.word	0x40020458
 8001ae8:	40020470 	.word	0x40020470
 8001aec:	40020488 	.word	0x40020488
 8001af0:	400204a0 	.word	0x400204a0
 8001af4:	400204b8 	.word	0x400204b8
 8001af8:	58025408 	.word	0x58025408
 8001afc:	5802541c 	.word	0x5802541c
 8001b00:	58025430 	.word	0x58025430
 8001b04:	58025444 	.word	0x58025444
 8001b08:	58025458 	.word	0x58025458
 8001b0c:	5802546c 	.word	0x5802546c
 8001b10:	58025480 	.word	0x58025480
 8001b14:	58025494 	.word	0x58025494

08001b18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e205      	b.n	8001f36 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d004      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2280      	movs	r2, #128	; 0x80
 8001b3a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e1fa      	b.n	8001f36 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a8c      	ldr	r2, [pc, #560]	; (8001d78 <HAL_DMA_Abort_IT+0x260>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d04a      	beq.n	8001be0 <HAL_DMA_Abort_IT+0xc8>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a8b      	ldr	r2, [pc, #556]	; (8001d7c <HAL_DMA_Abort_IT+0x264>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d045      	beq.n	8001be0 <HAL_DMA_Abort_IT+0xc8>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a89      	ldr	r2, [pc, #548]	; (8001d80 <HAL_DMA_Abort_IT+0x268>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d040      	beq.n	8001be0 <HAL_DMA_Abort_IT+0xc8>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a88      	ldr	r2, [pc, #544]	; (8001d84 <HAL_DMA_Abort_IT+0x26c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d03b      	beq.n	8001be0 <HAL_DMA_Abort_IT+0xc8>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a86      	ldr	r2, [pc, #536]	; (8001d88 <HAL_DMA_Abort_IT+0x270>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d036      	beq.n	8001be0 <HAL_DMA_Abort_IT+0xc8>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a85      	ldr	r2, [pc, #532]	; (8001d8c <HAL_DMA_Abort_IT+0x274>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d031      	beq.n	8001be0 <HAL_DMA_Abort_IT+0xc8>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a83      	ldr	r2, [pc, #524]	; (8001d90 <HAL_DMA_Abort_IT+0x278>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d02c      	beq.n	8001be0 <HAL_DMA_Abort_IT+0xc8>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a82      	ldr	r2, [pc, #520]	; (8001d94 <HAL_DMA_Abort_IT+0x27c>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d027      	beq.n	8001be0 <HAL_DMA_Abort_IT+0xc8>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a80      	ldr	r2, [pc, #512]	; (8001d98 <HAL_DMA_Abort_IT+0x280>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d022      	beq.n	8001be0 <HAL_DMA_Abort_IT+0xc8>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a7f      	ldr	r2, [pc, #508]	; (8001d9c <HAL_DMA_Abort_IT+0x284>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d01d      	beq.n	8001be0 <HAL_DMA_Abort_IT+0xc8>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a7d      	ldr	r2, [pc, #500]	; (8001da0 <HAL_DMA_Abort_IT+0x288>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d018      	beq.n	8001be0 <HAL_DMA_Abort_IT+0xc8>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a7c      	ldr	r2, [pc, #496]	; (8001da4 <HAL_DMA_Abort_IT+0x28c>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d013      	beq.n	8001be0 <HAL_DMA_Abort_IT+0xc8>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a7a      	ldr	r2, [pc, #488]	; (8001da8 <HAL_DMA_Abort_IT+0x290>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d00e      	beq.n	8001be0 <HAL_DMA_Abort_IT+0xc8>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a79      	ldr	r2, [pc, #484]	; (8001dac <HAL_DMA_Abort_IT+0x294>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d009      	beq.n	8001be0 <HAL_DMA_Abort_IT+0xc8>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a77      	ldr	r2, [pc, #476]	; (8001db0 <HAL_DMA_Abort_IT+0x298>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d004      	beq.n	8001be0 <HAL_DMA_Abort_IT+0xc8>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a76      	ldr	r2, [pc, #472]	; (8001db4 <HAL_DMA_Abort_IT+0x29c>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d101      	bne.n	8001be4 <HAL_DMA_Abort_IT+0xcc>
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <HAL_DMA_Abort_IT+0xce>
 8001be4:	2300      	movs	r3, #0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d065      	beq.n	8001cb6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2204      	movs	r2, #4
 8001bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a60      	ldr	r2, [pc, #384]	; (8001d78 <HAL_DMA_Abort_IT+0x260>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d04a      	beq.n	8001c92 <HAL_DMA_Abort_IT+0x17a>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a5e      	ldr	r2, [pc, #376]	; (8001d7c <HAL_DMA_Abort_IT+0x264>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d045      	beq.n	8001c92 <HAL_DMA_Abort_IT+0x17a>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a5d      	ldr	r2, [pc, #372]	; (8001d80 <HAL_DMA_Abort_IT+0x268>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d040      	beq.n	8001c92 <HAL_DMA_Abort_IT+0x17a>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a5b      	ldr	r2, [pc, #364]	; (8001d84 <HAL_DMA_Abort_IT+0x26c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d03b      	beq.n	8001c92 <HAL_DMA_Abort_IT+0x17a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a5a      	ldr	r2, [pc, #360]	; (8001d88 <HAL_DMA_Abort_IT+0x270>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d036      	beq.n	8001c92 <HAL_DMA_Abort_IT+0x17a>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a58      	ldr	r2, [pc, #352]	; (8001d8c <HAL_DMA_Abort_IT+0x274>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d031      	beq.n	8001c92 <HAL_DMA_Abort_IT+0x17a>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a57      	ldr	r2, [pc, #348]	; (8001d90 <HAL_DMA_Abort_IT+0x278>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d02c      	beq.n	8001c92 <HAL_DMA_Abort_IT+0x17a>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a55      	ldr	r2, [pc, #340]	; (8001d94 <HAL_DMA_Abort_IT+0x27c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d027      	beq.n	8001c92 <HAL_DMA_Abort_IT+0x17a>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a54      	ldr	r2, [pc, #336]	; (8001d98 <HAL_DMA_Abort_IT+0x280>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d022      	beq.n	8001c92 <HAL_DMA_Abort_IT+0x17a>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a52      	ldr	r2, [pc, #328]	; (8001d9c <HAL_DMA_Abort_IT+0x284>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d01d      	beq.n	8001c92 <HAL_DMA_Abort_IT+0x17a>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a51      	ldr	r2, [pc, #324]	; (8001da0 <HAL_DMA_Abort_IT+0x288>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d018      	beq.n	8001c92 <HAL_DMA_Abort_IT+0x17a>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a4f      	ldr	r2, [pc, #316]	; (8001da4 <HAL_DMA_Abort_IT+0x28c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d013      	beq.n	8001c92 <HAL_DMA_Abort_IT+0x17a>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a4e      	ldr	r2, [pc, #312]	; (8001da8 <HAL_DMA_Abort_IT+0x290>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d00e      	beq.n	8001c92 <HAL_DMA_Abort_IT+0x17a>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a4c      	ldr	r2, [pc, #304]	; (8001dac <HAL_DMA_Abort_IT+0x294>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d009      	beq.n	8001c92 <HAL_DMA_Abort_IT+0x17a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a4b      	ldr	r2, [pc, #300]	; (8001db0 <HAL_DMA_Abort_IT+0x298>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d004      	beq.n	8001c92 <HAL_DMA_Abort_IT+0x17a>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a49      	ldr	r2, [pc, #292]	; (8001db4 <HAL_DMA_Abort_IT+0x29c>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d108      	bne.n	8001ca4 <HAL_DMA_Abort_IT+0x18c>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 0201 	bic.w	r2, r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	e147      	b.n	8001f34 <HAL_DMA_Abort_IT+0x41c>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0201 	bic.w	r2, r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	e13e      	b.n	8001f34 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 020e 	bic.w	r2, r2, #14
 8001cc4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a2b      	ldr	r2, [pc, #172]	; (8001d78 <HAL_DMA_Abort_IT+0x260>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d04a      	beq.n	8001d66 <HAL_DMA_Abort_IT+0x24e>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a29      	ldr	r2, [pc, #164]	; (8001d7c <HAL_DMA_Abort_IT+0x264>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d045      	beq.n	8001d66 <HAL_DMA_Abort_IT+0x24e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a28      	ldr	r2, [pc, #160]	; (8001d80 <HAL_DMA_Abort_IT+0x268>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d040      	beq.n	8001d66 <HAL_DMA_Abort_IT+0x24e>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a26      	ldr	r2, [pc, #152]	; (8001d84 <HAL_DMA_Abort_IT+0x26c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d03b      	beq.n	8001d66 <HAL_DMA_Abort_IT+0x24e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a25      	ldr	r2, [pc, #148]	; (8001d88 <HAL_DMA_Abort_IT+0x270>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d036      	beq.n	8001d66 <HAL_DMA_Abort_IT+0x24e>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a23      	ldr	r2, [pc, #140]	; (8001d8c <HAL_DMA_Abort_IT+0x274>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d031      	beq.n	8001d66 <HAL_DMA_Abort_IT+0x24e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a22      	ldr	r2, [pc, #136]	; (8001d90 <HAL_DMA_Abort_IT+0x278>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d02c      	beq.n	8001d66 <HAL_DMA_Abort_IT+0x24e>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a20      	ldr	r2, [pc, #128]	; (8001d94 <HAL_DMA_Abort_IT+0x27c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d027      	beq.n	8001d66 <HAL_DMA_Abort_IT+0x24e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a1f      	ldr	r2, [pc, #124]	; (8001d98 <HAL_DMA_Abort_IT+0x280>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d022      	beq.n	8001d66 <HAL_DMA_Abort_IT+0x24e>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a1d      	ldr	r2, [pc, #116]	; (8001d9c <HAL_DMA_Abort_IT+0x284>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d01d      	beq.n	8001d66 <HAL_DMA_Abort_IT+0x24e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a1c      	ldr	r2, [pc, #112]	; (8001da0 <HAL_DMA_Abort_IT+0x288>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d018      	beq.n	8001d66 <HAL_DMA_Abort_IT+0x24e>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1a      	ldr	r2, [pc, #104]	; (8001da4 <HAL_DMA_Abort_IT+0x28c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d013      	beq.n	8001d66 <HAL_DMA_Abort_IT+0x24e>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a19      	ldr	r2, [pc, #100]	; (8001da8 <HAL_DMA_Abort_IT+0x290>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d00e      	beq.n	8001d66 <HAL_DMA_Abort_IT+0x24e>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a17      	ldr	r2, [pc, #92]	; (8001dac <HAL_DMA_Abort_IT+0x294>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d009      	beq.n	8001d66 <HAL_DMA_Abort_IT+0x24e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a16      	ldr	r2, [pc, #88]	; (8001db0 <HAL_DMA_Abort_IT+0x298>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d004      	beq.n	8001d66 <HAL_DMA_Abort_IT+0x24e>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a14      	ldr	r2, [pc, #80]	; (8001db4 <HAL_DMA_Abort_IT+0x29c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d128      	bne.n	8001db8 <HAL_DMA_Abort_IT+0x2a0>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0201 	bic.w	r2, r2, #1
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	e027      	b.n	8001dc8 <HAL_DMA_Abort_IT+0x2b0>
 8001d78:	40020010 	.word	0x40020010
 8001d7c:	40020028 	.word	0x40020028
 8001d80:	40020040 	.word	0x40020040
 8001d84:	40020058 	.word	0x40020058
 8001d88:	40020070 	.word	0x40020070
 8001d8c:	40020088 	.word	0x40020088
 8001d90:	400200a0 	.word	0x400200a0
 8001d94:	400200b8 	.word	0x400200b8
 8001d98:	40020410 	.word	0x40020410
 8001d9c:	40020428 	.word	0x40020428
 8001da0:	40020440 	.word	0x40020440
 8001da4:	40020458 	.word	0x40020458
 8001da8:	40020470 	.word	0x40020470
 8001dac:	40020488 	.word	0x40020488
 8001db0:	400204a0 	.word	0x400204a0
 8001db4:	400204b8 	.word	0x400204b8
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0201 	bic.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a5c      	ldr	r2, [pc, #368]	; (8001f40 <HAL_DMA_Abort_IT+0x428>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d072      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x3a0>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a5b      	ldr	r2, [pc, #364]	; (8001f44 <HAL_DMA_Abort_IT+0x42c>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d06d      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x3a0>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a59      	ldr	r2, [pc, #356]	; (8001f48 <HAL_DMA_Abort_IT+0x430>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d068      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x3a0>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a58      	ldr	r2, [pc, #352]	; (8001f4c <HAL_DMA_Abort_IT+0x434>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d063      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x3a0>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a56      	ldr	r2, [pc, #344]	; (8001f50 <HAL_DMA_Abort_IT+0x438>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d05e      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x3a0>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a55      	ldr	r2, [pc, #340]	; (8001f54 <HAL_DMA_Abort_IT+0x43c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d059      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x3a0>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a53      	ldr	r2, [pc, #332]	; (8001f58 <HAL_DMA_Abort_IT+0x440>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d054      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x3a0>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a52      	ldr	r2, [pc, #328]	; (8001f5c <HAL_DMA_Abort_IT+0x444>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d04f      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x3a0>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a50      	ldr	r2, [pc, #320]	; (8001f60 <HAL_DMA_Abort_IT+0x448>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d04a      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x3a0>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a4f      	ldr	r2, [pc, #316]	; (8001f64 <HAL_DMA_Abort_IT+0x44c>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d045      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x3a0>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a4d      	ldr	r2, [pc, #308]	; (8001f68 <HAL_DMA_Abort_IT+0x450>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d040      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x3a0>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a4c      	ldr	r2, [pc, #304]	; (8001f6c <HAL_DMA_Abort_IT+0x454>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d03b      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x3a0>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a4a      	ldr	r2, [pc, #296]	; (8001f70 <HAL_DMA_Abort_IT+0x458>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d036      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x3a0>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a49      	ldr	r2, [pc, #292]	; (8001f74 <HAL_DMA_Abort_IT+0x45c>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d031      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x3a0>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a47      	ldr	r2, [pc, #284]	; (8001f78 <HAL_DMA_Abort_IT+0x460>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d02c      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x3a0>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a46      	ldr	r2, [pc, #280]	; (8001f7c <HAL_DMA_Abort_IT+0x464>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d027      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x3a0>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a44      	ldr	r2, [pc, #272]	; (8001f80 <HAL_DMA_Abort_IT+0x468>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d022      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x3a0>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a43      	ldr	r2, [pc, #268]	; (8001f84 <HAL_DMA_Abort_IT+0x46c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d01d      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x3a0>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a41      	ldr	r2, [pc, #260]	; (8001f88 <HAL_DMA_Abort_IT+0x470>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d018      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x3a0>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a40      	ldr	r2, [pc, #256]	; (8001f8c <HAL_DMA_Abort_IT+0x474>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d013      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x3a0>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a3e      	ldr	r2, [pc, #248]	; (8001f90 <HAL_DMA_Abort_IT+0x478>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00e      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x3a0>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a3d      	ldr	r2, [pc, #244]	; (8001f94 <HAL_DMA_Abort_IT+0x47c>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d009      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x3a0>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a3b      	ldr	r2, [pc, #236]	; (8001f98 <HAL_DMA_Abort_IT+0x480>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d004      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x3a0>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a3a      	ldr	r2, [pc, #232]	; (8001f9c <HAL_DMA_Abort_IT+0x484>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d101      	bne.n	8001ebc <HAL_DMA_Abort_IT+0x3a4>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <HAL_DMA_Abort_IT+0x3a6>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d028      	beq.n	8001f14 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ecc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ed0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001edc:	f003 031f 	and.w	r3, r3, #31
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001ef0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00c      	beq.n	8001f14 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f08:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001f12:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40020010 	.word	0x40020010
 8001f44:	40020028 	.word	0x40020028
 8001f48:	40020040 	.word	0x40020040
 8001f4c:	40020058 	.word	0x40020058
 8001f50:	40020070 	.word	0x40020070
 8001f54:	40020088 	.word	0x40020088
 8001f58:	400200a0 	.word	0x400200a0
 8001f5c:	400200b8 	.word	0x400200b8
 8001f60:	40020410 	.word	0x40020410
 8001f64:	40020428 	.word	0x40020428
 8001f68:	40020440 	.word	0x40020440
 8001f6c:	40020458 	.word	0x40020458
 8001f70:	40020470 	.word	0x40020470
 8001f74:	40020488 	.word	0x40020488
 8001f78:	400204a0 	.word	0x400204a0
 8001f7c:	400204b8 	.word	0x400204b8
 8001f80:	58025408 	.word	0x58025408
 8001f84:	5802541c 	.word	0x5802541c
 8001f88:	58025430 	.word	0x58025430
 8001f8c:	58025444 	.word	0x58025444
 8001f90:	58025458 	.word	0x58025458
 8001f94:	5802546c 	.word	0x5802546c
 8001f98:	58025480 	.word	0x58025480
 8001f9c:	58025494 	.word	0x58025494

08001fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001fae:	4b89      	ldr	r3, [pc, #548]	; (80021d4 <HAL_GPIO_Init+0x234>)
 8001fb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fb2:	e194      	b.n	80022de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	2101      	movs	r1, #1
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 8186 	beq.w	80022d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d005      	beq.n	8001fe4 <HAL_GPIO_Init+0x44>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d130      	bne.n	8002046 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	2203      	movs	r2, #3
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800201a:	2201      	movs	r2, #1
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	091b      	lsrs	r3, r3, #4
 8002030:	f003 0201 	and.w	r2, r3, #1
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	2b03      	cmp	r3, #3
 8002050:	d017      	beq.n	8002082 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	2203      	movs	r2, #3
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d123      	bne.n	80020d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	08da      	lsrs	r2, r3, #3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3208      	adds	r2, #8
 8002096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	220f      	movs	r2, #15
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	691a      	ldr	r2, [r3, #16]
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	08da      	lsrs	r2, r3, #3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3208      	adds	r2, #8
 80020d0:	69b9      	ldr	r1, [r7, #24]
 80020d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	2203      	movs	r2, #3
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43db      	mvns	r3, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4013      	ands	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 0203 	and.w	r2, r3, #3
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 80e0 	beq.w	80022d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002118:	4b2f      	ldr	r3, [pc, #188]	; (80021d8 <HAL_GPIO_Init+0x238>)
 800211a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800211e:	4a2e      	ldr	r2, [pc, #184]	; (80021d8 <HAL_GPIO_Init+0x238>)
 8002120:	f043 0302 	orr.w	r3, r3, #2
 8002124:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002128:	4b2b      	ldr	r3, [pc, #172]	; (80021d8 <HAL_GPIO_Init+0x238>)
 800212a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002136:	4a29      	ldr	r2, [pc, #164]	; (80021dc <HAL_GPIO_Init+0x23c>)
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	089b      	lsrs	r3, r3, #2
 800213c:	3302      	adds	r3, #2
 800213e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002142:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	220f      	movs	r2, #15
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a20      	ldr	r2, [pc, #128]	; (80021e0 <HAL_GPIO_Init+0x240>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d052      	beq.n	8002208 <HAL_GPIO_Init+0x268>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a1f      	ldr	r2, [pc, #124]	; (80021e4 <HAL_GPIO_Init+0x244>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d031      	beq.n	80021ce <HAL_GPIO_Init+0x22e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a1e      	ldr	r2, [pc, #120]	; (80021e8 <HAL_GPIO_Init+0x248>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d02b      	beq.n	80021ca <HAL_GPIO_Init+0x22a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a1d      	ldr	r2, [pc, #116]	; (80021ec <HAL_GPIO_Init+0x24c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d025      	beq.n	80021c6 <HAL_GPIO_Init+0x226>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a1c      	ldr	r2, [pc, #112]	; (80021f0 <HAL_GPIO_Init+0x250>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d01f      	beq.n	80021c2 <HAL_GPIO_Init+0x222>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a1b      	ldr	r2, [pc, #108]	; (80021f4 <HAL_GPIO_Init+0x254>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d019      	beq.n	80021be <HAL_GPIO_Init+0x21e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a1a      	ldr	r2, [pc, #104]	; (80021f8 <HAL_GPIO_Init+0x258>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d013      	beq.n	80021ba <HAL_GPIO_Init+0x21a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a19      	ldr	r2, [pc, #100]	; (80021fc <HAL_GPIO_Init+0x25c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00d      	beq.n	80021b6 <HAL_GPIO_Init+0x216>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a18      	ldr	r2, [pc, #96]	; (8002200 <HAL_GPIO_Init+0x260>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d007      	beq.n	80021b2 <HAL_GPIO_Init+0x212>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a17      	ldr	r2, [pc, #92]	; (8002204 <HAL_GPIO_Init+0x264>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d101      	bne.n	80021ae <HAL_GPIO_Init+0x20e>
 80021aa:	2309      	movs	r3, #9
 80021ac:	e02d      	b.n	800220a <HAL_GPIO_Init+0x26a>
 80021ae:	230a      	movs	r3, #10
 80021b0:	e02b      	b.n	800220a <HAL_GPIO_Init+0x26a>
 80021b2:	2308      	movs	r3, #8
 80021b4:	e029      	b.n	800220a <HAL_GPIO_Init+0x26a>
 80021b6:	2307      	movs	r3, #7
 80021b8:	e027      	b.n	800220a <HAL_GPIO_Init+0x26a>
 80021ba:	2306      	movs	r3, #6
 80021bc:	e025      	b.n	800220a <HAL_GPIO_Init+0x26a>
 80021be:	2305      	movs	r3, #5
 80021c0:	e023      	b.n	800220a <HAL_GPIO_Init+0x26a>
 80021c2:	2304      	movs	r3, #4
 80021c4:	e021      	b.n	800220a <HAL_GPIO_Init+0x26a>
 80021c6:	2303      	movs	r3, #3
 80021c8:	e01f      	b.n	800220a <HAL_GPIO_Init+0x26a>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e01d      	b.n	800220a <HAL_GPIO_Init+0x26a>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e01b      	b.n	800220a <HAL_GPIO_Init+0x26a>
 80021d2:	bf00      	nop
 80021d4:	58000080 	.word	0x58000080
 80021d8:	58024400 	.word	0x58024400
 80021dc:	58000400 	.word	0x58000400
 80021e0:	58020000 	.word	0x58020000
 80021e4:	58020400 	.word	0x58020400
 80021e8:	58020800 	.word	0x58020800
 80021ec:	58020c00 	.word	0x58020c00
 80021f0:	58021000 	.word	0x58021000
 80021f4:	58021400 	.word	0x58021400
 80021f8:	58021800 	.word	0x58021800
 80021fc:	58021c00 	.word	0x58021c00
 8002200:	58022000 	.word	0x58022000
 8002204:	58022400 	.word	0x58022400
 8002208:	2300      	movs	r3, #0
 800220a:	69fa      	ldr	r2, [r7, #28]
 800220c:	f002 0203 	and.w	r2, r2, #3
 8002210:	0092      	lsls	r2, r2, #2
 8002212:	4093      	lsls	r3, r2
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800221a:	4938      	ldr	r1, [pc, #224]	; (80022fc <HAL_GPIO_Init+0x35c>)
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	089b      	lsrs	r3, r3, #2
 8002220:	3302      	adds	r3, #2
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800224e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800227c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	43db      	mvns	r3, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4013      	ands	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	3301      	adds	r3, #1
 80022dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	fa22 f303 	lsr.w	r3, r2, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f47f ae63 	bne.w	8001fb4 <HAL_GPIO_Init+0x14>
  }
}
 80022ee:	bf00      	nop
 80022f0:	bf00      	nop
 80022f2:	3724      	adds	r7, #36	; 0x24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	58000400 	.word	0x58000400

08002300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	807b      	strh	r3, [r7, #2]
 800230c:	4613      	mov	r3, r2
 800230e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002310:	787b      	ldrb	r3, [r7, #1]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002316:	887a      	ldrh	r2, [r7, #2]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800231c:	e003      	b.n	8002326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800231e:	887b      	ldrh	r3, [r7, #2]
 8002320:	041a      	lsls	r2, r3, #16
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	619a      	str	r2, [r3, #24]
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002332:	b480      	push	{r7}
 8002334:	b085      	sub	sp, #20
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	460b      	mov	r3, r1
 800233c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002344:	887a      	ldrh	r2, [r7, #2]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4013      	ands	r3, r2
 800234a:	041a      	lsls	r2, r3, #16
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	43d9      	mvns	r1, r3
 8002350:	887b      	ldrh	r3, [r7, #2]
 8002352:	400b      	ands	r3, r1
 8002354:	431a      	orrs	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	619a      	str	r2, [r3, #24]
}
 800235a:	bf00      	nop
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
	...

08002368 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002370:	4a08      	ldr	r2, [pc, #32]	; (8002394 <HAL_HSEM_FastTake+0x2c>)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3320      	adds	r3, #32
 8002376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237a:	4a07      	ldr	r2, [pc, #28]	; (8002398 <HAL_HSEM_FastTake+0x30>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d101      	bne.n	8002384 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	e000      	b.n	8002386 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
}
 8002386:	4618      	mov	r0, r3
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	58026400 	.word	0x58026400
 8002398:	80000300 	.word	0x80000300

0800239c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80023a6:	4906      	ldr	r1, [pc, #24]	; (80023c0 <HAL_HSEM_Release+0x24>)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	58026400 	.word	0x58026400

080023c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80023cc:	4b29      	ldr	r3, [pc, #164]	; (8002474 <HAL_PWREx_ConfigSupply+0xb0>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	2b06      	cmp	r3, #6
 80023d6:	d00a      	beq.n	80023ee <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80023d8:	4b26      	ldr	r3, [pc, #152]	; (8002474 <HAL_PWREx_ConfigSupply+0xb0>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d001      	beq.n	80023ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e040      	b.n	800246c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80023ea:	2300      	movs	r3, #0
 80023ec:	e03e      	b.n	800246c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80023ee:	4b21      	ldr	r3, [pc, #132]	; (8002474 <HAL_PWREx_ConfigSupply+0xb0>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80023f6:	491f      	ldr	r1, [pc, #124]	; (8002474 <HAL_PWREx_ConfigSupply+0xb0>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80023fe:	f7fe ff45 	bl	800128c <HAL_GetTick>
 8002402:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002404:	e009      	b.n	800241a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002406:	f7fe ff41 	bl	800128c <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002414:	d901      	bls.n	800241a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e028      	b.n	800246c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800241a:	4b16      	ldr	r3, [pc, #88]	; (8002474 <HAL_PWREx_ConfigSupply+0xb0>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002426:	d1ee      	bne.n	8002406 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b1e      	cmp	r3, #30
 800242c:	d008      	beq.n	8002440 <HAL_PWREx_ConfigSupply+0x7c>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b2e      	cmp	r3, #46	; 0x2e
 8002432:	d005      	beq.n	8002440 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b1d      	cmp	r3, #29
 8002438:	d002      	beq.n	8002440 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b2d      	cmp	r3, #45	; 0x2d
 800243e:	d114      	bne.n	800246a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002440:	f7fe ff24 	bl	800128c <HAL_GetTick>
 8002444:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002446:	e009      	b.n	800245c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002448:	f7fe ff20 	bl	800128c <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002456:	d901      	bls.n	800245c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e007      	b.n	800246c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <HAL_PWREx_ConfigSupply+0xb0>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002468:	d1ee      	bne.n	8002448 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	58024800 	.word	0x58024800

08002478 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08c      	sub	sp, #48	; 0x30
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d102      	bne.n	800248c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	f000 bc1c 	b.w	8002cc4 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 8087 	beq.w	80025a8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800249a:	4b9e      	ldr	r3, [pc, #632]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024a4:	4b9b      	ldr	r3, [pc, #620]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 80024a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80024aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ac:	2b10      	cmp	r3, #16
 80024ae:	d007      	beq.n	80024c0 <HAL_RCC_OscConfig+0x48>
 80024b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b2:	2b18      	cmp	r3, #24
 80024b4:	d110      	bne.n	80024d8 <HAL_RCC_OscConfig+0x60>
 80024b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d10b      	bne.n	80024d8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c0:	4b94      	ldr	r3, [pc, #592]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d06c      	beq.n	80025a6 <HAL_RCC_OscConfig+0x12e>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d168      	bne.n	80025a6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e3f5      	b.n	8002cc4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e0:	d106      	bne.n	80024f0 <HAL_RCC_OscConfig+0x78>
 80024e2:	4b8c      	ldr	r3, [pc, #560]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a8b      	ldr	r2, [pc, #556]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 80024e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	e02e      	b.n	800254e <HAL_RCC_OscConfig+0xd6>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10c      	bne.n	8002512 <HAL_RCC_OscConfig+0x9a>
 80024f8:	4b86      	ldr	r3, [pc, #536]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a85      	ldr	r2, [pc, #532]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 80024fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	4b83      	ldr	r3, [pc, #524]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a82      	ldr	r2, [pc, #520]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 800250a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	e01d      	b.n	800254e <HAL_RCC_OscConfig+0xd6>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800251a:	d10c      	bne.n	8002536 <HAL_RCC_OscConfig+0xbe>
 800251c:	4b7d      	ldr	r3, [pc, #500]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a7c      	ldr	r2, [pc, #496]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 8002522:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4b7a      	ldr	r3, [pc, #488]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a79      	ldr	r2, [pc, #484]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 800252e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	e00b      	b.n	800254e <HAL_RCC_OscConfig+0xd6>
 8002536:	4b77      	ldr	r3, [pc, #476]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a76      	ldr	r2, [pc, #472]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 800253c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	4b74      	ldr	r3, [pc, #464]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a73      	ldr	r2, [pc, #460]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 8002548:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800254c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d013      	beq.n	800257e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002556:	f7fe fe99 	bl	800128c <HAL_GetTick>
 800255a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800255e:	f7fe fe95 	bl	800128c <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b64      	cmp	r3, #100	; 0x64
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e3a9      	b.n	8002cc4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002570:	4b68      	ldr	r3, [pc, #416]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0xe6>
 800257c:	e014      	b.n	80025a8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257e:	f7fe fe85 	bl	800128c <HAL_GetTick>
 8002582:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002586:	f7fe fe81 	bl	800128c <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b64      	cmp	r3, #100	; 0x64
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e395      	b.n	8002cc4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002598:	4b5e      	ldr	r3, [pc, #376]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f0      	bne.n	8002586 <HAL_RCC_OscConfig+0x10e>
 80025a4:	e000      	b.n	80025a8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 80ca 	beq.w	800274a <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025b6:	4b57      	ldr	r3, [pc, #348]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025be:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025c0:	4b54      	ldr	r3, [pc, #336]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 80025c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d007      	beq.n	80025dc <HAL_RCC_OscConfig+0x164>
 80025cc:	6a3b      	ldr	r3, [r7, #32]
 80025ce:	2b18      	cmp	r3, #24
 80025d0:	d156      	bne.n	8002680 <HAL_RCC_OscConfig+0x208>
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d151      	bne.n	8002680 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025dc:	4b4d      	ldr	r3, [pc, #308]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_RCC_OscConfig+0x17c>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e367      	b.n	8002cc4 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025f4:	4b47      	ldr	r3, [pc, #284]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f023 0219 	bic.w	r2, r3, #25
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	4944      	ldr	r1, [pc, #272]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002606:	f7fe fe41 	bl	800128c <HAL_GetTick>
 800260a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800260e:	f7fe fe3d 	bl	800128c <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e351      	b.n	8002cc4 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002620:	4b3c      	ldr	r3, [pc, #240]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0f0      	beq.n	800260e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262c:	f7fe fe3a 	bl	80012a4 <HAL_GetREVID>
 8002630:	4603      	mov	r3, r0
 8002632:	f241 0203 	movw	r2, #4099	; 0x1003
 8002636:	4293      	cmp	r3, r2
 8002638:	d817      	bhi.n	800266a <HAL_RCC_OscConfig+0x1f2>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	2b40      	cmp	r3, #64	; 0x40
 8002640:	d108      	bne.n	8002654 <HAL_RCC_OscConfig+0x1dc>
 8002642:	4b34      	ldr	r3, [pc, #208]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800264a:	4a32      	ldr	r2, [pc, #200]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 800264c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002650:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002652:	e07a      	b.n	800274a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002654:	4b2f      	ldr	r3, [pc, #188]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	031b      	lsls	r3, r3, #12
 8002662:	492c      	ldr	r1, [pc, #176]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 8002664:	4313      	orrs	r3, r2
 8002666:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002668:	e06f      	b.n	800274a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266a:	4b2a      	ldr	r3, [pc, #168]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	061b      	lsls	r3, r3, #24
 8002678:	4926      	ldr	r1, [pc, #152]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 800267a:	4313      	orrs	r3, r2
 800267c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800267e:	e064      	b.n	800274a <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d047      	beq.n	8002718 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002688:	4b22      	ldr	r3, [pc, #136]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f023 0219 	bic.w	r2, r3, #25
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	491f      	ldr	r1, [pc, #124]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269a:	f7fe fdf7 	bl	800128c <HAL_GetTick>
 800269e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026a2:	f7fe fdf3 	bl	800128c <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e307      	b.n	8002cc4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026b4:	4b17      	ldr	r3, [pc, #92]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0f0      	beq.n	80026a2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c0:	f7fe fdf0 	bl	80012a4 <HAL_GetREVID>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d817      	bhi.n	80026fe <HAL_RCC_OscConfig+0x286>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	2b40      	cmp	r3, #64	; 0x40
 80026d4:	d108      	bne.n	80026e8 <HAL_RCC_OscConfig+0x270>
 80026d6:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80026de:	4a0d      	ldr	r2, [pc, #52]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 80026e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e4:	6053      	str	r3, [r2, #4]
 80026e6:	e030      	b.n	800274a <HAL_RCC_OscConfig+0x2d2>
 80026e8:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	031b      	lsls	r3, r3, #12
 80026f6:	4907      	ldr	r1, [pc, #28]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	604b      	str	r3, [r1, #4]
 80026fc:	e025      	b.n	800274a <HAL_RCC_OscConfig+0x2d2>
 80026fe:	4b05      	ldr	r3, [pc, #20]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	061b      	lsls	r3, r3, #24
 800270c:	4901      	ldr	r1, [pc, #4]	; (8002714 <HAL_RCC_OscConfig+0x29c>)
 800270e:	4313      	orrs	r3, r2
 8002710:	604b      	str	r3, [r1, #4]
 8002712:	e01a      	b.n	800274a <HAL_RCC_OscConfig+0x2d2>
 8002714:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002718:	4b9e      	ldr	r3, [pc, #632]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a9d      	ldr	r2, [pc, #628]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 800271e:	f023 0301 	bic.w	r3, r3, #1
 8002722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002724:	f7fe fdb2 	bl	800128c <HAL_GetTick>
 8002728:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800272c:	f7fe fdae 	bl	800128c <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e2c2      	b.n	8002cc4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800273e:	4b95      	ldr	r3, [pc, #596]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f0      	bne.n	800272c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0310 	and.w	r3, r3, #16
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 80a9 	beq.w	80028aa <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002758:	4b8e      	ldr	r3, [pc, #568]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002760:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002762:	4b8c      	ldr	r3, [pc, #560]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 8002764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002766:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	2b08      	cmp	r3, #8
 800276c:	d007      	beq.n	800277e <HAL_RCC_OscConfig+0x306>
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	2b18      	cmp	r3, #24
 8002772:	d13a      	bne.n	80027ea <HAL_RCC_OscConfig+0x372>
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	2b01      	cmp	r3, #1
 800277c:	d135      	bne.n	80027ea <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800277e:	4b85      	ldr	r3, [pc, #532]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002786:	2b00      	cmp	r3, #0
 8002788:	d005      	beq.n	8002796 <HAL_RCC_OscConfig+0x31e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	2b80      	cmp	r3, #128	; 0x80
 8002790:	d001      	beq.n	8002796 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e296      	b.n	8002cc4 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002796:	f7fe fd85 	bl	80012a4 <HAL_GetREVID>
 800279a:	4603      	mov	r3, r0
 800279c:	f241 0203 	movw	r2, #4099	; 0x1003
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d817      	bhi.n	80027d4 <HAL_RCC_OscConfig+0x35c>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	2b20      	cmp	r3, #32
 80027aa:	d108      	bne.n	80027be <HAL_RCC_OscConfig+0x346>
 80027ac:	4b79      	ldr	r3, [pc, #484]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80027b4:	4a77      	ldr	r2, [pc, #476]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 80027b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80027ba:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027bc:	e075      	b.n	80028aa <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027be:	4b75      	ldr	r3, [pc, #468]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	069b      	lsls	r3, r3, #26
 80027cc:	4971      	ldr	r1, [pc, #452]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027d2:	e06a      	b.n	80028aa <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027d4:	4b6f      	ldr	r3, [pc, #444]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	061b      	lsls	r3, r3, #24
 80027e2:	496c      	ldr	r1, [pc, #432]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027e8:	e05f      	b.n	80028aa <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d042      	beq.n	8002878 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80027f2:	4b68      	ldr	r3, [pc, #416]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a67      	ldr	r2, [pc, #412]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 80027f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fe:	f7fe fd45 	bl	800128c <HAL_GetTick>
 8002802:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002806:	f7fe fd41 	bl	800128c <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e255      	b.n	8002cc4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002818:	4b5e      	ldr	r3, [pc, #376]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0f0      	beq.n	8002806 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002824:	f7fe fd3e 	bl	80012a4 <HAL_GetREVID>
 8002828:	4603      	mov	r3, r0
 800282a:	f241 0203 	movw	r2, #4099	; 0x1003
 800282e:	4293      	cmp	r3, r2
 8002830:	d817      	bhi.n	8002862 <HAL_RCC_OscConfig+0x3ea>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	2b20      	cmp	r3, #32
 8002838:	d108      	bne.n	800284c <HAL_RCC_OscConfig+0x3d4>
 800283a:	4b56      	ldr	r3, [pc, #344]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002842:	4a54      	ldr	r2, [pc, #336]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 8002844:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002848:	6053      	str	r3, [r2, #4]
 800284a:	e02e      	b.n	80028aa <HAL_RCC_OscConfig+0x432>
 800284c:	4b51      	ldr	r3, [pc, #324]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	069b      	lsls	r3, r3, #26
 800285a:	494e      	ldr	r1, [pc, #312]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]
 8002860:	e023      	b.n	80028aa <HAL_RCC_OscConfig+0x432>
 8002862:	4b4c      	ldr	r3, [pc, #304]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	061b      	lsls	r3, r3, #24
 8002870:	4948      	ldr	r1, [pc, #288]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 8002872:	4313      	orrs	r3, r2
 8002874:	60cb      	str	r3, [r1, #12]
 8002876:	e018      	b.n	80028aa <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002878:	4b46      	ldr	r3, [pc, #280]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a45      	ldr	r2, [pc, #276]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 800287e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7fe fd02 	bl	800128c <HAL_GetTick>
 8002888:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800288c:	f7fe fcfe 	bl	800128c <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e212      	b.n	8002cc4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800289e:	4b3d      	ldr	r3, [pc, #244]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d036      	beq.n	8002924 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d019      	beq.n	80028f2 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028be:	4b35      	ldr	r3, [pc, #212]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 80028c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c2:	4a34      	ldr	r2, [pc, #208]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ca:	f7fe fcdf 	bl	800128c <HAL_GetTick>
 80028ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028d2:	f7fe fcdb 	bl	800128c <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e1ef      	b.n	8002cc4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028e4:	4b2b      	ldr	r3, [pc, #172]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 80028e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0f0      	beq.n	80028d2 <HAL_RCC_OscConfig+0x45a>
 80028f0:	e018      	b.n	8002924 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028f2:	4b28      	ldr	r3, [pc, #160]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 80028f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f6:	4a27      	ldr	r2, [pc, #156]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 80028f8:	f023 0301 	bic.w	r3, r3, #1
 80028fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fe:	f7fe fcc5 	bl	800128c <HAL_GetTick>
 8002902:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002906:	f7fe fcc1 	bl	800128c <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e1d5      	b.n	8002cc4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002918:	4b1e      	ldr	r3, [pc, #120]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 800291a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1f0      	bne.n	8002906 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d039      	beq.n	80029a4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d019      	beq.n	800296c <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002938:	4b16      	ldr	r3, [pc, #88]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a15      	ldr	r2, [pc, #84]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 800293e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002942:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002944:	f7fe fca2 	bl	800128c <HAL_GetTick>
 8002948:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800294c:	f7fe fc9e 	bl	800128c <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e1b2      	b.n	8002cc4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800295e:	4b0d      	ldr	r3, [pc, #52]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0x4d4>
 800296a:	e01b      	b.n	80029a4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800296c:	4b09      	ldr	r3, [pc, #36]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a08      	ldr	r2, [pc, #32]	; (8002994 <HAL_RCC_OscConfig+0x51c>)
 8002972:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002976:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002978:	f7fe fc88 	bl	800128c <HAL_GetTick>
 800297c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800297e:	e00b      	b.n	8002998 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002980:	f7fe fc84 	bl	800128c <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d904      	bls.n	8002998 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e198      	b.n	8002cc4 <HAL_RCC_OscConfig+0x84c>
 8002992:	bf00      	nop
 8002994:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002998:	4ba3      	ldr	r3, [pc, #652]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1ed      	bne.n	8002980 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 8081 	beq.w	8002ab4 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029b2:	4b9e      	ldr	r3, [pc, #632]	; (8002c2c <HAL_RCC_OscConfig+0x7b4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a9d      	ldr	r2, [pc, #628]	; (8002c2c <HAL_RCC_OscConfig+0x7b4>)
 80029b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029be:	f7fe fc65 	bl	800128c <HAL_GetTick>
 80029c2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80029c6:	f7fe fc61 	bl	800128c <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b64      	cmp	r3, #100	; 0x64
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e175      	b.n	8002cc4 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029d8:	4b94      	ldr	r3, [pc, #592]	; (8002c2c <HAL_RCC_OscConfig+0x7b4>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d106      	bne.n	80029fa <HAL_RCC_OscConfig+0x582>
 80029ec:	4b8e      	ldr	r3, [pc, #568]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 80029ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f0:	4a8d      	ldr	r2, [pc, #564]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	6713      	str	r3, [r2, #112]	; 0x70
 80029f8:	e02d      	b.n	8002a56 <HAL_RCC_OscConfig+0x5de>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10c      	bne.n	8002a1c <HAL_RCC_OscConfig+0x5a4>
 8002a02:	4b89      	ldr	r3, [pc, #548]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a06:	4a88      	ldr	r2, [pc, #544]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002a08:	f023 0301 	bic.w	r3, r3, #1
 8002a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a0e:	4b86      	ldr	r3, [pc, #536]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a12:	4a85      	ldr	r2, [pc, #532]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002a14:	f023 0304 	bic.w	r3, r3, #4
 8002a18:	6713      	str	r3, [r2, #112]	; 0x70
 8002a1a:	e01c      	b.n	8002a56 <HAL_RCC_OscConfig+0x5de>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2b05      	cmp	r3, #5
 8002a22:	d10c      	bne.n	8002a3e <HAL_RCC_OscConfig+0x5c6>
 8002a24:	4b80      	ldr	r3, [pc, #512]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a28:	4a7f      	ldr	r2, [pc, #508]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002a2a:	f043 0304 	orr.w	r3, r3, #4
 8002a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a30:	4b7d      	ldr	r3, [pc, #500]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a34:	4a7c      	ldr	r2, [pc, #496]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a3c:	e00b      	b.n	8002a56 <HAL_RCC_OscConfig+0x5de>
 8002a3e:	4b7a      	ldr	r3, [pc, #488]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a42:	4a79      	ldr	r2, [pc, #484]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002a44:	f023 0301 	bic.w	r3, r3, #1
 8002a48:	6713      	str	r3, [r2, #112]	; 0x70
 8002a4a:	4b77      	ldr	r3, [pc, #476]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4e:	4a76      	ldr	r2, [pc, #472]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002a50:	f023 0304 	bic.w	r3, r3, #4
 8002a54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d015      	beq.n	8002a8a <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5e:	f7fe fc15 	bl	800128c <HAL_GetTick>
 8002a62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a64:	e00a      	b.n	8002a7c <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a66:	f7fe fc11 	bl	800128c <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e123      	b.n	8002cc4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a7c:	4b6a      	ldr	r3, [pc, #424]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0ee      	beq.n	8002a66 <HAL_RCC_OscConfig+0x5ee>
 8002a88:	e014      	b.n	8002ab4 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8a:	f7fe fbff 	bl	800128c <HAL_GetTick>
 8002a8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a90:	e00a      	b.n	8002aa8 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a92:	f7fe fbfb 	bl	800128c <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e10d      	b.n	8002cc4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002aa8:	4b5f      	ldr	r3, [pc, #380]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1ee      	bne.n	8002a92 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 8102 	beq.w	8002cc2 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002abe:	4b5a      	ldr	r3, [pc, #360]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ac6:	2b18      	cmp	r3, #24
 8002ac8:	f000 80bd 	beq.w	8002c46 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	f040 8095 	bne.w	8002c00 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad6:	4b54      	ldr	r3, [pc, #336]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a53      	ldr	r2, [pc, #332]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002adc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae2:	f7fe fbd3 	bl	800128c <HAL_GetTick>
 8002ae6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aea:	f7fe fbcf 	bl	800128c <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e0e3      	b.n	8002cc4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002afc:	4b4a      	ldr	r3, [pc, #296]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f0      	bne.n	8002aea <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b08:	4b47      	ldr	r3, [pc, #284]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002b0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b0c:	4b48      	ldr	r3, [pc, #288]	; (8002c30 <HAL_RCC_OscConfig+0x7b8>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b18:	0112      	lsls	r2, r2, #4
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	4942      	ldr	r1, [pc, #264]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	628b      	str	r3, [r1, #40]	; 0x28
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	3b01      	subs	r3, #1
 8002b28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b30:	3b01      	subs	r3, #1
 8002b32:	025b      	lsls	r3, r3, #9
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	041b      	lsls	r3, r3, #16
 8002b40:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002b44:	431a      	orrs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	061b      	lsls	r3, r3, #24
 8002b4e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002b52:	4935      	ldr	r1, [pc, #212]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002b58:	4b33      	ldr	r3, [pc, #204]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	4a32      	ldr	r2, [pc, #200]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002b5e:	f023 0301 	bic.w	r3, r3, #1
 8002b62:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b64:	4b30      	ldr	r3, [pc, #192]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002b66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b68:	4b32      	ldr	r3, [pc, #200]	; (8002c34 <HAL_RCC_OscConfig+0x7bc>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b70:	00d2      	lsls	r2, r2, #3
 8002b72:	492d      	ldr	r1, [pc, #180]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002b78:	4b2b      	ldr	r3, [pc, #172]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7c:	f023 020c 	bic.w	r2, r3, #12
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	4928      	ldr	r1, [pc, #160]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002b8a:	4b27      	ldr	r3, [pc, #156]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8e:	f023 0202 	bic.w	r2, r3, #2
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b96:	4924      	ldr	r1, [pc, #144]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b9c:	4b22      	ldr	r3, [pc, #136]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba0:	4a21      	ldr	r2, [pc, #132]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ba8:	4b1f      	ldr	r3, [pc, #124]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bac:	4a1e      	ldr	r2, [pc, #120]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002bb4:	4b1c      	ldr	r3, [pc, #112]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	4a1b      	ldr	r2, [pc, #108]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002bba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002bc0:	4b19      	ldr	r3, [pc, #100]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	4a18      	ldr	r2, [pc, #96]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bcc:	4b16      	ldr	r3, [pc, #88]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a15      	ldr	r2, [pc, #84]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd8:	f7fe fb58 	bl	800128c <HAL_GetTick>
 8002bdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be0:	f7fe fb54 	bl	800128c <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e068      	b.n	8002cc4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bf2:	4b0d      	ldr	r3, [pc, #52]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0f0      	beq.n	8002be0 <HAL_RCC_OscConfig+0x768>
 8002bfe:	e060      	b.n	8002cc2 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c00:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a08      	ldr	r2, [pc, #32]	; (8002c28 <HAL_RCC_OscConfig+0x7b0>)
 8002c06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7fe fb3e 	bl	800128c <HAL_GetTick>
 8002c10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c12:	e011      	b.n	8002c38 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c14:	f7fe fb3a 	bl	800128c <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d90a      	bls.n	8002c38 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e04e      	b.n	8002cc4 <HAL_RCC_OscConfig+0x84c>
 8002c26:	bf00      	nop
 8002c28:	58024400 	.word	0x58024400
 8002c2c:	58024800 	.word	0x58024800
 8002c30:	fffffc0c 	.word	0xfffffc0c
 8002c34:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c38:	4b24      	ldr	r3, [pc, #144]	; (8002ccc <HAL_RCC_OscConfig+0x854>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1e7      	bne.n	8002c14 <HAL_RCC_OscConfig+0x79c>
 8002c44:	e03d      	b.n	8002cc2 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c46:	4b21      	ldr	r3, [pc, #132]	; (8002ccc <HAL_RCC_OscConfig+0x854>)
 8002c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c4c:	4b1f      	ldr	r3, [pc, #124]	; (8002ccc <HAL_RCC_OscConfig+0x854>)
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d031      	beq.n	8002cbe <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f003 0203 	and.w	r2, r3, #3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d12a      	bne.n	8002cbe <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	091b      	lsrs	r3, r3, #4
 8002c6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d122      	bne.n	8002cbe <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d11a      	bne.n	8002cbe <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	0a5b      	lsrs	r3, r3, #9
 8002c8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c94:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d111      	bne.n	8002cbe <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	0c1b      	lsrs	r3, r3, #16
 8002c9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d108      	bne.n	8002cbe <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	0e1b      	lsrs	r3, r3, #24
 8002cb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d001      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3730      	adds	r7, #48	; 0x30
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	58024400 	.word	0x58024400

08002cd0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e19c      	b.n	800301e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce4:	4b8a      	ldr	r3, [pc, #552]	; (8002f10 <HAL_RCC_ClockConfig+0x240>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 030f 	and.w	r3, r3, #15
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d910      	bls.n	8002d14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf2:	4b87      	ldr	r3, [pc, #540]	; (8002f10 <HAL_RCC_ClockConfig+0x240>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 020f 	bic.w	r2, r3, #15
 8002cfa:	4985      	ldr	r1, [pc, #532]	; (8002f10 <HAL_RCC_ClockConfig+0x240>)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d02:	4b83      	ldr	r3, [pc, #524]	; (8002f10 <HAL_RCC_ClockConfig+0x240>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d001      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e184      	b.n	800301e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d010      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691a      	ldr	r2, [r3, #16]
 8002d24:	4b7b      	ldr	r3, [pc, #492]	; (8002f14 <HAL_RCC_ClockConfig+0x244>)
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d908      	bls.n	8002d42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d30:	4b78      	ldr	r3, [pc, #480]	; (8002f14 <HAL_RCC_ClockConfig+0x244>)
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	4975      	ldr	r1, [pc, #468]	; (8002f14 <HAL_RCC_ClockConfig+0x244>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d010      	beq.n	8002d70 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695a      	ldr	r2, [r3, #20]
 8002d52:	4b70      	ldr	r3, [pc, #448]	; (8002f14 <HAL_RCC_ClockConfig+0x244>)
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d908      	bls.n	8002d70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d5e:	4b6d      	ldr	r3, [pc, #436]	; (8002f14 <HAL_RCC_ClockConfig+0x244>)
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	496a      	ldr	r1, [pc, #424]	; (8002f14 <HAL_RCC_ClockConfig+0x244>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0310 	and.w	r3, r3, #16
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d010      	beq.n	8002d9e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699a      	ldr	r2, [r3, #24]
 8002d80:	4b64      	ldr	r3, [pc, #400]	; (8002f14 <HAL_RCC_ClockConfig+0x244>)
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d908      	bls.n	8002d9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d8c:	4b61      	ldr	r3, [pc, #388]	; (8002f14 <HAL_RCC_ClockConfig+0x244>)
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	495e      	ldr	r1, [pc, #376]	; (8002f14 <HAL_RCC_ClockConfig+0x244>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d010      	beq.n	8002dcc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69da      	ldr	r2, [r3, #28]
 8002dae:	4b59      	ldr	r3, [pc, #356]	; (8002f14 <HAL_RCC_ClockConfig+0x244>)
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d908      	bls.n	8002dcc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002dba:	4b56      	ldr	r3, [pc, #344]	; (8002f14 <HAL_RCC_ClockConfig+0x244>)
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	4953      	ldr	r1, [pc, #332]	; (8002f14 <HAL_RCC_ClockConfig+0x244>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d010      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	4b4d      	ldr	r3, [pc, #308]	; (8002f14 <HAL_RCC_ClockConfig+0x244>)
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d908      	bls.n	8002dfa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de8:	4b4a      	ldr	r3, [pc, #296]	; (8002f14 <HAL_RCC_ClockConfig+0x244>)
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	f023 020f 	bic.w	r2, r3, #15
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	4947      	ldr	r1, [pc, #284]	; (8002f14 <HAL_RCC_ClockConfig+0x244>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d055      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e06:	4b43      	ldr	r3, [pc, #268]	; (8002f14 <HAL_RCC_ClockConfig+0x244>)
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	4940      	ldr	r1, [pc, #256]	; (8002f14 <HAL_RCC_ClockConfig+0x244>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d107      	bne.n	8002e30 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e20:	4b3c      	ldr	r3, [pc, #240]	; (8002f14 <HAL_RCC_ClockConfig+0x244>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d121      	bne.n	8002e70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e0f6      	b.n	800301e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d107      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e38:	4b36      	ldr	r3, [pc, #216]	; (8002f14 <HAL_RCC_ClockConfig+0x244>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d115      	bne.n	8002e70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0ea      	b.n	800301e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d107      	bne.n	8002e60 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e50:	4b30      	ldr	r3, [pc, #192]	; (8002f14 <HAL_RCC_ClockConfig+0x244>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d109      	bne.n	8002e70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0de      	b.n	800301e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e60:	4b2c      	ldr	r3, [pc, #176]	; (8002f14 <HAL_RCC_ClockConfig+0x244>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0d6      	b.n	800301e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e70:	4b28      	ldr	r3, [pc, #160]	; (8002f14 <HAL_RCC_ClockConfig+0x244>)
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	f023 0207 	bic.w	r2, r3, #7
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	4925      	ldr	r1, [pc, #148]	; (8002f14 <HAL_RCC_ClockConfig+0x244>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e82:	f7fe fa03 	bl	800128c <HAL_GetTick>
 8002e86:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e88:	e00a      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e8a:	f7fe f9ff 	bl	800128c <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e0be      	b.n	800301e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea0:	4b1c      	ldr	r3, [pc, #112]	; (8002f14 <HAL_RCC_ClockConfig+0x244>)
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d1eb      	bne.n	8002e8a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d010      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <HAL_RCC_ClockConfig+0x244>)
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d208      	bcs.n	8002ee0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ece:	4b11      	ldr	r3, [pc, #68]	; (8002f14 <HAL_RCC_ClockConfig+0x244>)
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	f023 020f 	bic.w	r2, r3, #15
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	490e      	ldr	r1, [pc, #56]	; (8002f14 <HAL_RCC_ClockConfig+0x244>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <HAL_RCC_ClockConfig+0x240>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 030f 	and.w	r3, r3, #15
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d214      	bcs.n	8002f18 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eee:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <HAL_RCC_ClockConfig+0x240>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f023 020f 	bic.w	r2, r3, #15
 8002ef6:	4906      	ldr	r1, [pc, #24]	; (8002f10 <HAL_RCC_ClockConfig+0x240>)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efe:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <HAL_RCC_ClockConfig+0x240>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d005      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e086      	b.n	800301e <HAL_RCC_ClockConfig+0x34e>
 8002f10:	52002000 	.word	0x52002000
 8002f14:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d010      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	4b3f      	ldr	r3, [pc, #252]	; (8003028 <HAL_RCC_ClockConfig+0x358>)
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d208      	bcs.n	8002f46 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f34:	4b3c      	ldr	r3, [pc, #240]	; (8003028 <HAL_RCC_ClockConfig+0x358>)
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	4939      	ldr	r1, [pc, #228]	; (8003028 <HAL_RCC_ClockConfig+0x358>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d010      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695a      	ldr	r2, [r3, #20]
 8002f56:	4b34      	ldr	r3, [pc, #208]	; (8003028 <HAL_RCC_ClockConfig+0x358>)
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d208      	bcs.n	8002f74 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f62:	4b31      	ldr	r3, [pc, #196]	; (8003028 <HAL_RCC_ClockConfig+0x358>)
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	492e      	ldr	r1, [pc, #184]	; (8003028 <HAL_RCC_ClockConfig+0x358>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d010      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699a      	ldr	r2, [r3, #24]
 8002f84:	4b28      	ldr	r3, [pc, #160]	; (8003028 <HAL_RCC_ClockConfig+0x358>)
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d208      	bcs.n	8002fa2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f90:	4b25      	ldr	r3, [pc, #148]	; (8003028 <HAL_RCC_ClockConfig+0x358>)
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	4922      	ldr	r1, [pc, #136]	; (8003028 <HAL_RCC_ClockConfig+0x358>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0320 	and.w	r3, r3, #32
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d010      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69da      	ldr	r2, [r3, #28]
 8002fb2:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <HAL_RCC_ClockConfig+0x358>)
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d208      	bcs.n	8002fd0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002fbe:	4b1a      	ldr	r3, [pc, #104]	; (8003028 <HAL_RCC_ClockConfig+0x358>)
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	4917      	ldr	r1, [pc, #92]	; (8003028 <HAL_RCC_ClockConfig+0x358>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002fd0:	f000 f834 	bl	800303c <HAL_RCC_GetSysClockFreq>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	4b14      	ldr	r3, [pc, #80]	; (8003028 <HAL_RCC_ClockConfig+0x358>)
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	0a1b      	lsrs	r3, r3, #8
 8002fdc:	f003 030f 	and.w	r3, r3, #15
 8002fe0:	4912      	ldr	r1, [pc, #72]	; (800302c <HAL_RCC_ClockConfig+0x35c>)
 8002fe2:	5ccb      	ldrb	r3, [r1, r3]
 8002fe4:	f003 031f 	and.w	r3, r3, #31
 8002fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fee:	4b0e      	ldr	r3, [pc, #56]	; (8003028 <HAL_RCC_ClockConfig+0x358>)
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	4a0d      	ldr	r2, [pc, #52]	; (800302c <HAL_RCC_ClockConfig+0x35c>)
 8002ff8:	5cd3      	ldrb	r3, [r2, r3]
 8002ffa:	f003 031f 	and.w	r3, r3, #31
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	fa22 f303 	lsr.w	r3, r2, r3
 8003004:	4a0a      	ldr	r2, [pc, #40]	; (8003030 <HAL_RCC_ClockConfig+0x360>)
 8003006:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003008:	4a0a      	ldr	r2, [pc, #40]	; (8003034 <HAL_RCC_ClockConfig+0x364>)
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800300e:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <HAL_RCC_ClockConfig+0x368>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe f8f0 	bl	80011f8 <HAL_InitTick>
 8003018:	4603      	mov	r3, r0
 800301a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800301c:	7bfb      	ldrb	r3, [r7, #15]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	58024400 	.word	0x58024400
 800302c:	0800a038 	.word	0x0800a038
 8003030:	24000004 	.word	0x24000004
 8003034:	24000000 	.word	0x24000000
 8003038:	24000008 	.word	0x24000008

0800303c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800303c:	b480      	push	{r7}
 800303e:	b089      	sub	sp, #36	; 0x24
 8003040:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003042:	4bb3      	ldr	r3, [pc, #716]	; (8003310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800304a:	2b18      	cmp	r3, #24
 800304c:	f200 8155 	bhi.w	80032fa <HAL_RCC_GetSysClockFreq+0x2be>
 8003050:	a201      	add	r2, pc, #4	; (adr r2, 8003058 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003056:	bf00      	nop
 8003058:	080030bd 	.word	0x080030bd
 800305c:	080032fb 	.word	0x080032fb
 8003060:	080032fb 	.word	0x080032fb
 8003064:	080032fb 	.word	0x080032fb
 8003068:	080032fb 	.word	0x080032fb
 800306c:	080032fb 	.word	0x080032fb
 8003070:	080032fb 	.word	0x080032fb
 8003074:	080032fb 	.word	0x080032fb
 8003078:	080030e3 	.word	0x080030e3
 800307c:	080032fb 	.word	0x080032fb
 8003080:	080032fb 	.word	0x080032fb
 8003084:	080032fb 	.word	0x080032fb
 8003088:	080032fb 	.word	0x080032fb
 800308c:	080032fb 	.word	0x080032fb
 8003090:	080032fb 	.word	0x080032fb
 8003094:	080032fb 	.word	0x080032fb
 8003098:	080030e9 	.word	0x080030e9
 800309c:	080032fb 	.word	0x080032fb
 80030a0:	080032fb 	.word	0x080032fb
 80030a4:	080032fb 	.word	0x080032fb
 80030a8:	080032fb 	.word	0x080032fb
 80030ac:	080032fb 	.word	0x080032fb
 80030b0:	080032fb 	.word	0x080032fb
 80030b4:	080032fb 	.word	0x080032fb
 80030b8:	080030ef 	.word	0x080030ef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030bc:	4b94      	ldr	r3, [pc, #592]	; (8003310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0320 	and.w	r3, r3, #32
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d009      	beq.n	80030dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80030c8:	4b91      	ldr	r3, [pc, #580]	; (8003310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	08db      	lsrs	r3, r3, #3
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	4a90      	ldr	r2, [pc, #576]	; (8003314 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030d4:	fa22 f303 	lsr.w	r3, r2, r3
 80030d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80030da:	e111      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80030dc:	4b8d      	ldr	r3, [pc, #564]	; (8003314 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030de:	61bb      	str	r3, [r7, #24]
    break;
 80030e0:	e10e      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80030e2:	4b8d      	ldr	r3, [pc, #564]	; (8003318 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030e4:	61bb      	str	r3, [r7, #24]
    break;
 80030e6:	e10b      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80030e8:	4b8c      	ldr	r3, [pc, #560]	; (800331c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80030ea:	61bb      	str	r3, [r7, #24]
    break;
 80030ec:	e108      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030ee:	4b88      	ldr	r3, [pc, #544]	; (8003310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80030f8:	4b85      	ldr	r3, [pc, #532]	; (8003310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003102:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003104:	4b82      	ldr	r3, [pc, #520]	; (8003310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800310e:	4b80      	ldr	r3, [pc, #512]	; (8003310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003112:	08db      	lsrs	r3, r3, #3
 8003114:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	fb02 f303 	mul.w	r3, r2, r3
 800311e:	ee07 3a90 	vmov	s15, r3
 8003122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003126:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 80e1 	beq.w	80032f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2b02      	cmp	r3, #2
 8003136:	f000 8083 	beq.w	8003240 <HAL_RCC_GetSysClockFreq+0x204>
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2b02      	cmp	r3, #2
 800313e:	f200 80a1 	bhi.w	8003284 <HAL_RCC_GetSysClockFreq+0x248>
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <HAL_RCC_GetSysClockFreq+0x114>
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d056      	beq.n	80031fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800314e:	e099      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003150:	4b6f      	ldr	r3, [pc, #444]	; (8003310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0320 	and.w	r3, r3, #32
 8003158:	2b00      	cmp	r3, #0
 800315a:	d02d      	beq.n	80031b8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800315c:	4b6c      	ldr	r3, [pc, #432]	; (8003310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	08db      	lsrs	r3, r3, #3
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	4a6b      	ldr	r2, [pc, #428]	; (8003314 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
 800316c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	ee07 3a90 	vmov	s15, r3
 8003174:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	ee07 3a90 	vmov	s15, r3
 800317e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003186:	4b62      	ldr	r3, [pc, #392]	; (8003310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800318e:	ee07 3a90 	vmov	s15, r3
 8003192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003196:	ed97 6a02 	vldr	s12, [r7, #8]
 800319a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003320 <HAL_RCC_GetSysClockFreq+0x2e4>
 800319e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80031b6:	e087      	b.n	80032c8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	ee07 3a90 	vmov	s15, r3
 80031be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031c2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003324 <HAL_RCC_GetSysClockFreq+0x2e8>
 80031c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ca:	4b51      	ldr	r3, [pc, #324]	; (8003310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d2:	ee07 3a90 	vmov	s15, r3
 80031d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031da:	ed97 6a02 	vldr	s12, [r7, #8]
 80031de:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003320 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031fa:	e065      	b.n	80032c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	ee07 3a90 	vmov	s15, r3
 8003202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003206:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003328 <HAL_RCC_GetSysClockFreq+0x2ec>
 800320a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800320e:	4b40      	ldr	r3, [pc, #256]	; (8003310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800321e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003222:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003320 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800322a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800322e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800323a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800323e:	e043      	b.n	80032c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	ee07 3a90 	vmov	s15, r3
 8003246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800324a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800332c <HAL_RCC_GetSysClockFreq+0x2f0>
 800324e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003252:	4b2f      	ldr	r3, [pc, #188]	; (8003310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800325a:	ee07 3a90 	vmov	s15, r3
 800325e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003262:	ed97 6a02 	vldr	s12, [r7, #8]
 8003266:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003320 <HAL_RCC_GetSysClockFreq+0x2e4>
 800326a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800326e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800327a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800327e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003282:	e021      	b.n	80032c8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	ee07 3a90 	vmov	s15, r3
 800328a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800328e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003328 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003296:	4b1e      	ldr	r3, [pc, #120]	; (8003310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800329e:	ee07 3a90 	vmov	s15, r3
 80032a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80032aa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003320 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032c6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80032c8:	4b11      	ldr	r3, [pc, #68]	; (8003310 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032cc:	0a5b      	lsrs	r3, r3, #9
 80032ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032d2:	3301      	adds	r3, #1
 80032d4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	ee07 3a90 	vmov	s15, r3
 80032dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80032e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032ec:	ee17 3a90 	vmov	r3, s15
 80032f0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80032f2:	e005      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	61bb      	str	r3, [r7, #24]
    break;
 80032f8:	e002      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80032fa:	4b07      	ldr	r3, [pc, #28]	; (8003318 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032fc:	61bb      	str	r3, [r7, #24]
    break;
 80032fe:	bf00      	nop
  }

  return sysclockfreq;
 8003300:	69bb      	ldr	r3, [r7, #24]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3724      	adds	r7, #36	; 0x24
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	58024400 	.word	0x58024400
 8003314:	03d09000 	.word	0x03d09000
 8003318:	003d0900 	.word	0x003d0900
 800331c:	017d7840 	.word	0x017d7840
 8003320:	46000000 	.word	0x46000000
 8003324:	4c742400 	.word	0x4c742400
 8003328:	4a742400 	.word	0x4a742400
 800332c:	4bbebc20 	.word	0x4bbebc20

08003330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003336:	f7ff fe81 	bl	800303c <HAL_RCC_GetSysClockFreq>
 800333a:	4602      	mov	r2, r0
 800333c:	4b10      	ldr	r3, [pc, #64]	; (8003380 <HAL_RCC_GetHCLKFreq+0x50>)
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	0a1b      	lsrs	r3, r3, #8
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	490f      	ldr	r1, [pc, #60]	; (8003384 <HAL_RCC_GetHCLKFreq+0x54>)
 8003348:	5ccb      	ldrb	r3, [r1, r3]
 800334a:	f003 031f 	and.w	r3, r3, #31
 800334e:	fa22 f303 	lsr.w	r3, r2, r3
 8003352:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003354:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <HAL_RCC_GetHCLKFreq+0x50>)
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	f003 030f 	and.w	r3, r3, #15
 800335c:	4a09      	ldr	r2, [pc, #36]	; (8003384 <HAL_RCC_GetHCLKFreq+0x54>)
 800335e:	5cd3      	ldrb	r3, [r2, r3]
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	fa22 f303 	lsr.w	r3, r2, r3
 800336a:	4a07      	ldr	r2, [pc, #28]	; (8003388 <HAL_RCC_GetHCLKFreq+0x58>)
 800336c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800336e:	4a07      	ldr	r2, [pc, #28]	; (800338c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003374:	4b04      	ldr	r3, [pc, #16]	; (8003388 <HAL_RCC_GetHCLKFreq+0x58>)
 8003376:	681b      	ldr	r3, [r3, #0]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	58024400 	.word	0x58024400
 8003384:	0800a038 	.word	0x0800a038
 8003388:	24000004 	.word	0x24000004
 800338c:	24000000 	.word	0x24000000

08003390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003394:	f7ff ffcc 	bl	8003330 <HAL_RCC_GetHCLKFreq>
 8003398:	4602      	mov	r2, r0
 800339a:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	091b      	lsrs	r3, r3, #4
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	4904      	ldr	r1, [pc, #16]	; (80033b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033a6:	5ccb      	ldrb	r3, [r1, r3]
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	58024400 	.word	0x58024400
 80033b8:	0800a038 	.word	0x0800a038

080033bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80033c0:	f7ff ffb6 	bl	8003330 <HAL_RCC_GetHCLKFreq>
 80033c4:	4602      	mov	r2, r0
 80033c6:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	0a1b      	lsrs	r3, r3, #8
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	4904      	ldr	r1, [pc, #16]	; (80033e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033d2:	5ccb      	ldrb	r3, [r1, r3]
 80033d4:	f003 031f 	and.w	r3, r3, #31
 80033d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80033dc:	4618      	mov	r0, r3
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	58024400 	.word	0x58024400
 80033e4:	0800a038 	.word	0x0800a038

080033e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033f0:	2300      	movs	r3, #0
 80033f2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033f4:	2300      	movs	r3, #0
 80033f6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d03f      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003408:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800340c:	d02a      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800340e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003412:	d824      	bhi.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003414:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003418:	d018      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800341a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800341e:	d81e      	bhi.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003428:	d007      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800342a:	e018      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800342c:	4bab      	ldr	r3, [pc, #684]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800342e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003430:	4aaa      	ldr	r2, [pc, #680]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003436:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003438:	e015      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3304      	adds	r3, #4
 800343e:	2102      	movs	r1, #2
 8003440:	4618      	mov	r0, r3
 8003442:	f001 f9cf 	bl	80047e4 <RCCEx_PLL2_Config>
 8003446:	4603      	mov	r3, r0
 8003448:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800344a:	e00c      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3324      	adds	r3, #36	; 0x24
 8003450:	2102      	movs	r1, #2
 8003452:	4618      	mov	r0, r3
 8003454:	f001 fa78 	bl	8004948 <RCCEx_PLL3_Config>
 8003458:	4603      	mov	r3, r0
 800345a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800345c:	e003      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	75fb      	strb	r3, [r7, #23]
      break;
 8003462:	e000      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003464:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003466:	7dfb      	ldrb	r3, [r7, #23]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d109      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800346c:	4b9b      	ldr	r3, [pc, #620]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800346e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003470:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003478:	4998      	ldr	r1, [pc, #608]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800347a:	4313      	orrs	r3, r2
 800347c:	650b      	str	r3, [r1, #80]	; 0x50
 800347e:	e001      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003480:	7dfb      	ldrb	r3, [r7, #23]
 8003482:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348c:	2b00      	cmp	r3, #0
 800348e:	d03d      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003494:	2b04      	cmp	r3, #4
 8003496:	d826      	bhi.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003498:	a201      	add	r2, pc, #4	; (adr r2, 80034a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800349a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349e:	bf00      	nop
 80034a0:	080034b5 	.word	0x080034b5
 80034a4:	080034c3 	.word	0x080034c3
 80034a8:	080034d5 	.word	0x080034d5
 80034ac:	080034ed 	.word	0x080034ed
 80034b0:	080034ed 	.word	0x080034ed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034b4:	4b89      	ldr	r3, [pc, #548]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	4a88      	ldr	r2, [pc, #544]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034c0:	e015      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3304      	adds	r3, #4
 80034c6:	2100      	movs	r1, #0
 80034c8:	4618      	mov	r0, r3
 80034ca:	f001 f98b 	bl	80047e4 <RCCEx_PLL2_Config>
 80034ce:	4603      	mov	r3, r0
 80034d0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034d2:	e00c      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3324      	adds	r3, #36	; 0x24
 80034d8:	2100      	movs	r1, #0
 80034da:	4618      	mov	r0, r3
 80034dc:	f001 fa34 	bl	8004948 <RCCEx_PLL3_Config>
 80034e0:	4603      	mov	r3, r0
 80034e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034e4:	e003      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	75fb      	strb	r3, [r7, #23]
      break;
 80034ea:	e000      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80034ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034ee:	7dfb      	ldrb	r3, [r7, #23]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d109      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034f4:	4b79      	ldr	r3, [pc, #484]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f8:	f023 0207 	bic.w	r2, r3, #7
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003500:	4976      	ldr	r1, [pc, #472]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003502:	4313      	orrs	r3, r2
 8003504:	650b      	str	r3, [r1, #80]	; 0x50
 8003506:	e001      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003508:	7dfb      	ldrb	r3, [r7, #23]
 800350a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003514:	2b00      	cmp	r3, #0
 8003516:	d042      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003520:	d02b      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003526:	d825      	bhi.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003528:	2bc0      	cmp	r3, #192	; 0xc0
 800352a:	d028      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800352c:	2bc0      	cmp	r3, #192	; 0xc0
 800352e:	d821      	bhi.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003530:	2b80      	cmp	r3, #128	; 0x80
 8003532:	d016      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003534:	2b80      	cmp	r3, #128	; 0x80
 8003536:	d81d      	bhi.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003538:	2b00      	cmp	r3, #0
 800353a:	d002      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800353c:	2b40      	cmp	r3, #64	; 0x40
 800353e:	d007      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003540:	e018      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003542:	4b66      	ldr	r3, [pc, #408]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003546:	4a65      	ldr	r2, [pc, #404]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800354c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800354e:	e017      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3304      	adds	r3, #4
 8003554:	2100      	movs	r1, #0
 8003556:	4618      	mov	r0, r3
 8003558:	f001 f944 	bl	80047e4 <RCCEx_PLL2_Config>
 800355c:	4603      	mov	r3, r0
 800355e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003560:	e00e      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	3324      	adds	r3, #36	; 0x24
 8003566:	2100      	movs	r1, #0
 8003568:	4618      	mov	r0, r3
 800356a:	f001 f9ed 	bl	8004948 <RCCEx_PLL3_Config>
 800356e:	4603      	mov	r3, r0
 8003570:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003572:	e005      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	75fb      	strb	r3, [r7, #23]
      break;
 8003578:	e002      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800357a:	bf00      	nop
 800357c:	e000      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800357e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003580:	7dfb      	ldrb	r3, [r7, #23]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d109      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003586:	4b55      	ldr	r3, [pc, #340]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800358a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003592:	4952      	ldr	r1, [pc, #328]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003594:	4313      	orrs	r3, r2
 8003596:	650b      	str	r3, [r1, #80]	; 0x50
 8003598:	e001      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800359a:	7dfb      	ldrb	r3, [r7, #23]
 800359c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d049      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035b4:	d030      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80035b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035ba:	d82a      	bhi.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80035bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80035c0:	d02c      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80035c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80035c6:	d824      	bhi.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80035c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035cc:	d018      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80035ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035d2:	d81e      	bhi.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80035d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035dc:	d007      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x206>
 80035de:	e018      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035e0:	4b3e      	ldr	r3, [pc, #248]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	4a3d      	ldr	r2, [pc, #244]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035ec:	e017      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3304      	adds	r3, #4
 80035f2:	2100      	movs	r1, #0
 80035f4:	4618      	mov	r0, r3
 80035f6:	f001 f8f5 	bl	80047e4 <RCCEx_PLL2_Config>
 80035fa:	4603      	mov	r3, r0
 80035fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80035fe:	e00e      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3324      	adds	r3, #36	; 0x24
 8003604:	2100      	movs	r1, #0
 8003606:	4618      	mov	r0, r3
 8003608:	f001 f99e 	bl	8004948 <RCCEx_PLL3_Config>
 800360c:	4603      	mov	r3, r0
 800360e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003610:	e005      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	75fb      	strb	r3, [r7, #23]
      break;
 8003616:	e002      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003618:	bf00      	nop
 800361a:	e000      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800361c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800361e:	7dfb      	ldrb	r3, [r7, #23]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10a      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003624:	4b2d      	ldr	r3, [pc, #180]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003628:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003632:	492a      	ldr	r1, [pc, #168]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003634:	4313      	orrs	r3, r2
 8003636:	658b      	str	r3, [r1, #88]	; 0x58
 8003638:	e001      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363a:	7dfb      	ldrb	r3, [r7, #23]
 800363c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003646:	2b00      	cmp	r3, #0
 8003648:	d04c      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003650:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003654:	d030      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003656:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800365a:	d82a      	bhi.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800365c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003660:	d02c      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003662:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003666:	d824      	bhi.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003668:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800366c:	d018      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800366e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003672:	d81e      	bhi.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800367c:	d007      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800367e:	e018      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003680:	4b16      	ldr	r3, [pc, #88]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	4a15      	ldr	r2, [pc, #84]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800368a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800368c:	e017      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3304      	adds	r3, #4
 8003692:	2100      	movs	r1, #0
 8003694:	4618      	mov	r0, r3
 8003696:	f001 f8a5 	bl	80047e4 <RCCEx_PLL2_Config>
 800369a:	4603      	mov	r3, r0
 800369c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800369e:	e00e      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3324      	adds	r3, #36	; 0x24
 80036a4:	2100      	movs	r1, #0
 80036a6:	4618      	mov	r0, r3
 80036a8:	f001 f94e 	bl	8004948 <RCCEx_PLL3_Config>
 80036ac:	4603      	mov	r3, r0
 80036ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036b0:	e005      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	75fb      	strb	r3, [r7, #23]
      break;
 80036b6:	e002      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80036b8:	bf00      	nop
 80036ba:	e000      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80036bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036be:	7dfb      	ldrb	r3, [r7, #23]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10d      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80036c4:	4b05      	ldr	r3, [pc, #20]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80036d2:	4902      	ldr	r1, [pc, #8]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	658b      	str	r3, [r1, #88]	; 0x58
 80036d8:	e004      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80036da:	bf00      	nop
 80036dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e0:	7dfb      	ldrb	r3, [r7, #23]
 80036e2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d032      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f4:	2b30      	cmp	r3, #48	; 0x30
 80036f6:	d01c      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80036f8:	2b30      	cmp	r3, #48	; 0x30
 80036fa:	d817      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x344>
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	d00c      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003700:	2b20      	cmp	r3, #32
 8003702:	d813      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003704:	2b00      	cmp	r3, #0
 8003706:	d016      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003708:	2b10      	cmp	r3, #16
 800370a:	d10f      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800370c:	4baf      	ldr	r3, [pc, #700]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003710:	4aae      	ldr	r2, [pc, #696]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003716:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003718:	e00e      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3304      	adds	r3, #4
 800371e:	2102      	movs	r1, #2
 8003720:	4618      	mov	r0, r3
 8003722:	f001 f85f 	bl	80047e4 <RCCEx_PLL2_Config>
 8003726:	4603      	mov	r3, r0
 8003728:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800372a:	e005      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	75fb      	strb	r3, [r7, #23]
      break;
 8003730:	e002      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003732:	bf00      	nop
 8003734:	e000      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003736:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003738:	7dfb      	ldrb	r3, [r7, #23]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d109      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800373e:	4ba3      	ldr	r3, [pc, #652]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003742:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800374a:	49a0      	ldr	r1, [pc, #640]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800374c:	4313      	orrs	r3, r2
 800374e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003750:	e001      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003752:	7dfb      	ldrb	r3, [r7, #23]
 8003754:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d047      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003766:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800376a:	d030      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800376c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003770:	d82a      	bhi.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003772:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003776:	d02c      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003778:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800377c:	d824      	bhi.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800377e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003782:	d018      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003788:	d81e      	bhi.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800378e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003792:	d007      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003794:	e018      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003796:	4b8d      	ldr	r3, [pc, #564]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379a:	4a8c      	ldr	r2, [pc, #560]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800379c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037a2:	e017      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3304      	adds	r3, #4
 80037a8:	2100      	movs	r1, #0
 80037aa:	4618      	mov	r0, r3
 80037ac:	f001 f81a 	bl	80047e4 <RCCEx_PLL2_Config>
 80037b0:	4603      	mov	r3, r0
 80037b2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037b4:	e00e      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3324      	adds	r3, #36	; 0x24
 80037ba:	2100      	movs	r1, #0
 80037bc:	4618      	mov	r0, r3
 80037be:	f001 f8c3 	bl	8004948 <RCCEx_PLL3_Config>
 80037c2:	4603      	mov	r3, r0
 80037c4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037c6:	e005      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	75fb      	strb	r3, [r7, #23]
      break;
 80037cc:	e002      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80037ce:	bf00      	nop
 80037d0:	e000      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80037d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037d4:	7dfb      	ldrb	r3, [r7, #23]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d109      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037da:	4b7c      	ldr	r3, [pc, #496]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037de:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e6:	4979      	ldr	r1, [pc, #484]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	650b      	str	r3, [r1, #80]	; 0x50
 80037ec:	e001      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ee:	7dfb      	ldrb	r3, [r7, #23]
 80037f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d049      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003802:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003806:	d02e      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800380c:	d828      	bhi.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800380e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003812:	d02a      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003814:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003818:	d822      	bhi.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800381a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800381e:	d026      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003820:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003824:	d81c      	bhi.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003826:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800382a:	d010      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800382c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003830:	d816      	bhi.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003832:	2b00      	cmp	r3, #0
 8003834:	d01d      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800383a:	d111      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3304      	adds	r3, #4
 8003840:	2101      	movs	r1, #1
 8003842:	4618      	mov	r0, r3
 8003844:	f000 ffce 	bl	80047e4 <RCCEx_PLL2_Config>
 8003848:	4603      	mov	r3, r0
 800384a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800384c:	e012      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3324      	adds	r3, #36	; 0x24
 8003852:	2101      	movs	r1, #1
 8003854:	4618      	mov	r0, r3
 8003856:	f001 f877 	bl	8004948 <RCCEx_PLL3_Config>
 800385a:	4603      	mov	r3, r0
 800385c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800385e:	e009      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	75fb      	strb	r3, [r7, #23]
      break;
 8003864:	e006      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003866:	bf00      	nop
 8003868:	e004      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800386a:	bf00      	nop
 800386c:	e002      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800386e:	bf00      	nop
 8003870:	e000      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003872:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003874:	7dfb      	ldrb	r3, [r7, #23]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d109      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800387a:	4b54      	ldr	r3, [pc, #336]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800387c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800387e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003886:	4951      	ldr	r1, [pc, #324]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003888:	4313      	orrs	r3, r2
 800388a:	650b      	str	r3, [r1, #80]	; 0x50
 800388c:	e001      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800388e:	7dfb      	ldrb	r3, [r7, #23]
 8003890:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d04b      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038a8:	d02e      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80038aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038ae:	d828      	bhi.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80038b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b4:	d02a      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80038b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ba:	d822      	bhi.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80038bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038c0:	d026      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80038c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038c6:	d81c      	bhi.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80038c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038cc:	d010      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80038ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038d2:	d816      	bhi.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d01d      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80038d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038dc:	d111      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3304      	adds	r3, #4
 80038e2:	2101      	movs	r1, #1
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 ff7d 	bl	80047e4 <RCCEx_PLL2_Config>
 80038ea:	4603      	mov	r3, r0
 80038ec:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80038ee:	e012      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3324      	adds	r3, #36	; 0x24
 80038f4:	2101      	movs	r1, #1
 80038f6:	4618      	mov	r0, r3
 80038f8:	f001 f826 	bl	8004948 <RCCEx_PLL3_Config>
 80038fc:	4603      	mov	r3, r0
 80038fe:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003900:	e009      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	75fb      	strb	r3, [r7, #23]
      break;
 8003906:	e006      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003908:	bf00      	nop
 800390a:	e004      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800390c:	bf00      	nop
 800390e:	e002      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003910:	bf00      	nop
 8003912:	e000      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003914:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003916:	7dfb      	ldrb	r3, [r7, #23]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10a      	bne.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800391c:	4b2b      	ldr	r3, [pc, #172]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800391e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003920:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800392a:	4928      	ldr	r1, [pc, #160]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800392c:	4313      	orrs	r3, r2
 800392e:	658b      	str	r3, [r1, #88]	; 0x58
 8003930:	e001      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003932:	7dfb      	ldrb	r3, [r7, #23]
 8003934:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d02f      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800394a:	d00e      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800394c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003950:	d814      	bhi.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003952:	2b00      	cmp	r3, #0
 8003954:	d015      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003956:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800395a:	d10f      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800395c:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	4a1a      	ldr	r2, [pc, #104]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003966:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003968:	e00c      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	3304      	adds	r3, #4
 800396e:	2101      	movs	r1, #1
 8003970:	4618      	mov	r0, r3
 8003972:	f000 ff37 	bl	80047e4 <RCCEx_PLL2_Config>
 8003976:	4603      	mov	r3, r0
 8003978:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800397a:	e003      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	75fb      	strb	r3, [r7, #23]
      break;
 8003980:	e000      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003982:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003984:	7dfb      	ldrb	r3, [r7, #23]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d109      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800398a:	4b10      	ldr	r3, [pc, #64]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800398c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800398e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003996:	490d      	ldr	r1, [pc, #52]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003998:	4313      	orrs	r3, r2
 800399a:	650b      	str	r3, [r1, #80]	; 0x50
 800399c:	e001      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399e:	7dfb      	ldrb	r3, [r7, #23]
 80039a0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d033      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d81c      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80039b6:	a201      	add	r2, pc, #4	; (adr r2, 80039bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80039b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039bc:	080039f7 	.word	0x080039f7
 80039c0:	080039d1 	.word	0x080039d1
 80039c4:	080039df 	.word	0x080039df
 80039c8:	080039f7 	.word	0x080039f7
 80039cc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039d0:	4bb8      	ldr	r3, [pc, #736]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	4ab7      	ldr	r2, [pc, #732]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80039dc:	e00c      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3304      	adds	r3, #4
 80039e2:	2102      	movs	r1, #2
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 fefd 	bl	80047e4 <RCCEx_PLL2_Config>
 80039ea:	4603      	mov	r3, r0
 80039ec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80039ee:	e003      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	75fb      	strb	r3, [r7, #23]
      break;
 80039f4:	e000      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80039f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039f8:	7dfb      	ldrb	r3, [r7, #23]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d109      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80039fe:	4bad      	ldr	r3, [pc, #692]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a02:	f023 0203 	bic.w	r2, r3, #3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0a:	49aa      	ldr	r1, [pc, #680]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a10:	e001      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a12:	7dfb      	ldrb	r3, [r7, #23]
 8003a14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 8086 	beq.w	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a24:	4ba4      	ldr	r3, [pc, #656]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4aa3      	ldr	r2, [pc, #652]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a30:	f7fd fc2c 	bl	800128c <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a36:	e009      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a38:	f7fd fc28 	bl	800128c <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b64      	cmp	r3, #100	; 0x64
 8003a44:	d902      	bls.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	75fb      	strb	r3, [r7, #23]
        break;
 8003a4a:	e005      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a4c:	4b9a      	ldr	r3, [pc, #616]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0ef      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003a58:	7dfb      	ldrb	r3, [r7, #23]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d166      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a5e:	4b95      	ldr	r3, [pc, #596]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a68:	4053      	eors	r3, r2
 8003a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d013      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a72:	4b90      	ldr	r3, [pc, #576]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a7a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a7c:	4b8d      	ldr	r3, [pc, #564]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a80:	4a8c      	ldr	r2, [pc, #560]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a86:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a88:	4b8a      	ldr	r3, [pc, #552]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8c:	4a89      	ldr	r2, [pc, #548]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a92:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003a94:	4a87      	ldr	r2, [pc, #540]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aa4:	d115      	bne.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa6:	f7fd fbf1 	bl	800128c <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003aac:	e00b      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aae:	f7fd fbed 	bl	800128c <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d902      	bls.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	75fb      	strb	r3, [r7, #23]
            break;
 8003ac4:	e005      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ac6:	4b7b      	ldr	r3, [pc, #492]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0ed      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003ad2:	7dfb      	ldrb	r3, [r7, #23]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d126      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ae6:	d10d      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003ae8:	4b72      	ldr	r3, [pc, #456]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003af6:	0919      	lsrs	r1, r3, #4
 8003af8:	4b70      	ldr	r3, [pc, #448]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003afa:	400b      	ands	r3, r1
 8003afc:	496d      	ldr	r1, [pc, #436]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	610b      	str	r3, [r1, #16]
 8003b02:	e005      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003b04:	4b6b      	ldr	r3, [pc, #428]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	4a6a      	ldr	r2, [pc, #424]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b0a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b0e:	6113      	str	r3, [r2, #16]
 8003b10:	4b68      	ldr	r3, [pc, #416]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b1e:	4965      	ldr	r1, [pc, #404]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	670b      	str	r3, [r1, #112]	; 0x70
 8003b24:	e004      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b26:	7dfb      	ldrb	r3, [r7, #23]
 8003b28:	75bb      	strb	r3, [r7, #22]
 8003b2a:	e001      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2c:	7dfb      	ldrb	r3, [r7, #23]
 8003b2e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d07e      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b40:	2b28      	cmp	r3, #40	; 0x28
 8003b42:	d867      	bhi.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003b44:	a201      	add	r2, pc, #4	; (adr r2, 8003b4c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4a:	bf00      	nop
 8003b4c:	08003c1b 	.word	0x08003c1b
 8003b50:	08003c15 	.word	0x08003c15
 8003b54:	08003c15 	.word	0x08003c15
 8003b58:	08003c15 	.word	0x08003c15
 8003b5c:	08003c15 	.word	0x08003c15
 8003b60:	08003c15 	.word	0x08003c15
 8003b64:	08003c15 	.word	0x08003c15
 8003b68:	08003c15 	.word	0x08003c15
 8003b6c:	08003bf1 	.word	0x08003bf1
 8003b70:	08003c15 	.word	0x08003c15
 8003b74:	08003c15 	.word	0x08003c15
 8003b78:	08003c15 	.word	0x08003c15
 8003b7c:	08003c15 	.word	0x08003c15
 8003b80:	08003c15 	.word	0x08003c15
 8003b84:	08003c15 	.word	0x08003c15
 8003b88:	08003c15 	.word	0x08003c15
 8003b8c:	08003c03 	.word	0x08003c03
 8003b90:	08003c15 	.word	0x08003c15
 8003b94:	08003c15 	.word	0x08003c15
 8003b98:	08003c15 	.word	0x08003c15
 8003b9c:	08003c15 	.word	0x08003c15
 8003ba0:	08003c15 	.word	0x08003c15
 8003ba4:	08003c15 	.word	0x08003c15
 8003ba8:	08003c15 	.word	0x08003c15
 8003bac:	08003c1b 	.word	0x08003c1b
 8003bb0:	08003c15 	.word	0x08003c15
 8003bb4:	08003c15 	.word	0x08003c15
 8003bb8:	08003c15 	.word	0x08003c15
 8003bbc:	08003c15 	.word	0x08003c15
 8003bc0:	08003c15 	.word	0x08003c15
 8003bc4:	08003c15 	.word	0x08003c15
 8003bc8:	08003c15 	.word	0x08003c15
 8003bcc:	08003c1b 	.word	0x08003c1b
 8003bd0:	08003c15 	.word	0x08003c15
 8003bd4:	08003c15 	.word	0x08003c15
 8003bd8:	08003c15 	.word	0x08003c15
 8003bdc:	08003c15 	.word	0x08003c15
 8003be0:	08003c15 	.word	0x08003c15
 8003be4:	08003c15 	.word	0x08003c15
 8003be8:	08003c15 	.word	0x08003c15
 8003bec:	08003c1b 	.word	0x08003c1b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fdf4 	bl	80047e4 <RCCEx_PLL2_Config>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c00:	e00c      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3324      	adds	r3, #36	; 0x24
 8003c06:	2101      	movs	r1, #1
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 fe9d 	bl	8004948 <RCCEx_PLL3_Config>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c12:	e003      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	75fb      	strb	r3, [r7, #23]
      break;
 8003c18:	e000      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003c1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c1c:	7dfb      	ldrb	r3, [r7, #23]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d109      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c22:	4b24      	ldr	r3, [pc, #144]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c26:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c2e:	4921      	ldr	r1, [pc, #132]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	654b      	str	r3, [r1, #84]	; 0x54
 8003c34:	e001      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c36:	7dfb      	ldrb	r3, [r7, #23]
 8003c38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d03e      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c4a:	2b05      	cmp	r3, #5
 8003c4c:	d820      	bhi.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003c4e:	a201      	add	r2, pc, #4	; (adr r2, 8003c54 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c54:	08003c97 	.word	0x08003c97
 8003c58:	08003c6d 	.word	0x08003c6d
 8003c5c:	08003c7f 	.word	0x08003c7f
 8003c60:	08003c97 	.word	0x08003c97
 8003c64:	08003c97 	.word	0x08003c97
 8003c68:	08003c97 	.word	0x08003c97
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3304      	adds	r3, #4
 8003c70:	2101      	movs	r1, #1
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 fdb6 	bl	80047e4 <RCCEx_PLL2_Config>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003c7c:	e00c      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3324      	adds	r3, #36	; 0x24
 8003c82:	2101      	movs	r1, #1
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 fe5f 	bl	8004948 <RCCEx_PLL3_Config>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003c8e:	e003      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	75fb      	strb	r3, [r7, #23]
      break;
 8003c94:	e000      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003c96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c98:	7dfb      	ldrb	r3, [r7, #23]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d110      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003c9e:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca2:	f023 0207 	bic.w	r2, r3, #7
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003caa:	4902      	ldr	r1, [pc, #8]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	654b      	str	r3, [r1, #84]	; 0x54
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003cb2:	bf00      	nop
 8003cb4:	58024400 	.word	0x58024400
 8003cb8:	58024800 	.word	0x58024800
 8003cbc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc0:	7dfb      	ldrb	r3, [r7, #23]
 8003cc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d039      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd6:	2b05      	cmp	r3, #5
 8003cd8:	d820      	bhi.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003cda:	a201      	add	r2, pc, #4	; (adr r2, 8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce0:	08003d23 	.word	0x08003d23
 8003ce4:	08003cf9 	.word	0x08003cf9
 8003ce8:	08003d0b 	.word	0x08003d0b
 8003cec:	08003d23 	.word	0x08003d23
 8003cf0:	08003d23 	.word	0x08003d23
 8003cf4:	08003d23 	.word	0x08003d23
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fd70 	bl	80047e4 <RCCEx_PLL2_Config>
 8003d04:	4603      	mov	r3, r0
 8003d06:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d08:	e00c      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	3324      	adds	r3, #36	; 0x24
 8003d0e:	2101      	movs	r1, #1
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 fe19 	bl	8004948 <RCCEx_PLL3_Config>
 8003d16:	4603      	mov	r3, r0
 8003d18:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d1a:	e003      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d20:	e000      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003d22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d24:	7dfb      	ldrb	r3, [r7, #23]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10a      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d2a:	4bb7      	ldr	r3, [pc, #732]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2e:	f023 0207 	bic.w	r2, r3, #7
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d38:	49b3      	ldr	r1, [pc, #716]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	658b      	str	r3, [r1, #88]	; 0x58
 8003d3e:	e001      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d40:	7dfb      	ldrb	r3, [r7, #23]
 8003d42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0320 	and.w	r3, r3, #32
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d04b      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d5a:	d02e      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003d5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d60:	d828      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d66:	d02a      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6c:	d822      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003d6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d72:	d026      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003d74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d78:	d81c      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003d7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d7e:	d010      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003d80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d84:	d816      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d01d      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003d8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d8e:	d111      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3304      	adds	r3, #4
 8003d94:	2100      	movs	r1, #0
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 fd24 	bl	80047e4 <RCCEx_PLL2_Config>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003da0:	e012      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3324      	adds	r3, #36	; 0x24
 8003da6:	2102      	movs	r1, #2
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fdcd 	bl	8004948 <RCCEx_PLL3_Config>
 8003dae:	4603      	mov	r3, r0
 8003db0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003db2:	e009      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	75fb      	strb	r3, [r7, #23]
      break;
 8003db8:	e006      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003dba:	bf00      	nop
 8003dbc:	e004      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003dbe:	bf00      	nop
 8003dc0:	e002      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003dc2:	bf00      	nop
 8003dc4:	e000      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003dc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dc8:	7dfb      	ldrb	r3, [r7, #23]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10a      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dce:	4b8e      	ldr	r3, [pc, #568]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ddc:	498a      	ldr	r1, [pc, #552]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	654b      	str	r3, [r1, #84]	; 0x54
 8003de2:	e001      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de4:	7dfb      	ldrb	r3, [r7, #23]
 8003de6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d04b      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dfa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003dfe:	d02e      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003e00:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e04:	d828      	bhi.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e0a:	d02a      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e10:	d822      	bhi.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003e12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e16:	d026      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003e18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e1c:	d81c      	bhi.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e22:	d010      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e28:	d816      	bhi.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d01d      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e32:	d111      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3304      	adds	r3, #4
 8003e38:	2100      	movs	r1, #0
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fcd2 	bl	80047e4 <RCCEx_PLL2_Config>
 8003e40:	4603      	mov	r3, r0
 8003e42:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e44:	e012      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3324      	adds	r3, #36	; 0x24
 8003e4a:	2102      	movs	r1, #2
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 fd7b 	bl	8004948 <RCCEx_PLL3_Config>
 8003e52:	4603      	mov	r3, r0
 8003e54:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e56:	e009      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e5c:	e006      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003e5e:	bf00      	nop
 8003e60:	e004      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003e62:	bf00      	nop
 8003e64:	e002      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003e66:	bf00      	nop
 8003e68:	e000      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003e6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e6c:	7dfb      	ldrb	r3, [r7, #23]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10a      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e72:	4b65      	ldr	r3, [pc, #404]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e76:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e80:	4961      	ldr	r1, [pc, #388]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	658b      	str	r3, [r1, #88]	; 0x58
 8003e86:	e001      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e88:	7dfb      	ldrb	r3, [r7, #23]
 8003e8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d04b      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e9e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003ea2:	d02e      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003ea4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003ea8:	d828      	bhi.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eae:	d02a      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eb4:	d822      	bhi.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003eb6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003eba:	d026      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003ebc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ec0:	d81c      	bhi.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003ec2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ec6:	d010      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003ec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ecc:	d816      	bhi.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d01d      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003ed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ed6:	d111      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3304      	adds	r3, #4
 8003edc:	2100      	movs	r1, #0
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 fc80 	bl	80047e4 <RCCEx_PLL2_Config>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003ee8:	e012      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3324      	adds	r3, #36	; 0x24
 8003eee:	2102      	movs	r1, #2
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 fd29 	bl	8004948 <RCCEx_PLL3_Config>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003efa:	e009      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	75fb      	strb	r3, [r7, #23]
      break;
 8003f00:	e006      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003f02:	bf00      	nop
 8003f04:	e004      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003f06:	bf00      	nop
 8003f08:	e002      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003f0a:	bf00      	nop
 8003f0c:	e000      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003f0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f10:	7dfb      	ldrb	r3, [r7, #23]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10a      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003f16:	4b3c      	ldr	r3, [pc, #240]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f24:	4938      	ldr	r1, [pc, #224]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	658b      	str	r3, [r1, #88]	; 0x58
 8003f2a:	e001      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2c:	7dfb      	ldrb	r3, [r7, #23]
 8003f2e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d01a      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f46:	d10a      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3324      	adds	r3, #36	; 0x24
 8003f4c:	2102      	movs	r1, #2
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 fcfa 	bl	8004948 <RCCEx_PLL3_Config>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003f5e:	4b2a      	ldr	r3, [pc, #168]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f62:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f6c:	4926      	ldr	r1, [pc, #152]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0310 	and.w	r3, r3, #16
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d01a      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f88:	d10a      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	3324      	adds	r3, #36	; 0x24
 8003f8e:	2102      	movs	r1, #2
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 fcd9 	bl	8004948 <RCCEx_PLL3_Config>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fa0:	4b19      	ldr	r3, [pc, #100]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fae:	4916      	ldr	r1, [pc, #88]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d036      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003fc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fca:	d01f      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003fcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fd0:	d817      	bhi.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8003fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fda:	d009      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003fdc:	e011      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 fbfd 	bl	80047e4 <RCCEx_PLL2_Config>
 8003fea:	4603      	mov	r3, r0
 8003fec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003fee:	e00e      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3324      	adds	r3, #36	; 0x24
 8003ff4:	2102      	movs	r1, #2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fca6 	bl	8004948 <RCCEx_PLL3_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004000:	e005      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	75fb      	strb	r3, [r7, #23]
      break;
 8004006:	e002      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004008:	58024400 	.word	0x58024400
      break;
 800400c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800400e:	7dfb      	ldrb	r3, [r7, #23]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10a      	bne.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004014:	4b93      	ldr	r3, [pc, #588]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004018:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004022:	4990      	ldr	r1, [pc, #576]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004024:	4313      	orrs	r3, r2
 8004026:	658b      	str	r3, [r1, #88]	; 0x58
 8004028:	e001      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800402a:	7dfb      	ldrb	r3, [r7, #23]
 800402c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d033      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004040:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004044:	d01c      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8004046:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800404a:	d816      	bhi.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800404c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004050:	d003      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004052:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004056:	d007      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004058:	e00f      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800405a:	4b82      	ldr	r3, [pc, #520]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	4a81      	ldr	r2, [pc, #516]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004064:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004066:	e00c      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3324      	adds	r3, #36	; 0x24
 800406c:	2101      	movs	r1, #1
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fc6a 	bl	8004948 <RCCEx_PLL3_Config>
 8004074:	4603      	mov	r3, r0
 8004076:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004078:	e003      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	75fb      	strb	r3, [r7, #23]
      break;
 800407e:	e000      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004080:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004082:	7dfb      	ldrb	r3, [r7, #23]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10a      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004088:	4b76      	ldr	r3, [pc, #472]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800408a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004096:	4973      	ldr	r1, [pc, #460]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004098:	4313      	orrs	r3, r2
 800409a:	654b      	str	r3, [r1, #84]	; 0x54
 800409c:	e001      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409e:	7dfb      	ldrb	r3, [r7, #23]
 80040a0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d029      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80040b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ba:	d007      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80040bc:	e00f      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040be:	4b69      	ldr	r3, [pc, #420]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c2:	4a68      	ldr	r2, [pc, #416]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80040ca:	e00b      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3304      	adds	r3, #4
 80040d0:	2102      	movs	r1, #2
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 fb86 	bl	80047e4 <RCCEx_PLL2_Config>
 80040d8:	4603      	mov	r3, r0
 80040da:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80040dc:	e002      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	75fb      	strb	r3, [r7, #23]
      break;
 80040e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040e4:	7dfb      	ldrb	r3, [r7, #23]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d109      	bne.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80040ea:	4b5e      	ldr	r3, [pc, #376]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f6:	495b      	ldr	r1, [pc, #364]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80040fc:	e001      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fe:	7dfb      	ldrb	r3, [r7, #23]
 8004100:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	3324      	adds	r3, #36	; 0x24
 8004112:	2102      	movs	r1, #2
 8004114:	4618      	mov	r0, r3
 8004116:	f000 fc17 	bl	8004948 <RCCEx_PLL3_Config>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d030      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004134:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004138:	d017      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800413a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800413e:	d811      	bhi.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004144:	d013      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800414a:	d80b      	bhi.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800414c:	2b00      	cmp	r3, #0
 800414e:	d010      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004154:	d106      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004156:	4b43      	ldr	r3, [pc, #268]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415a:	4a42      	ldr	r2, [pc, #264]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800415c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004160:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004162:	e007      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	75fb      	strb	r3, [r7, #23]
      break;
 8004168:	e004      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800416a:	bf00      	nop
 800416c:	e002      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800416e:	bf00      	nop
 8004170:	e000      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004174:	7dfb      	ldrb	r3, [r7, #23]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d109      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800417a:	4b3a      	ldr	r3, [pc, #232]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800417c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004186:	4937      	ldr	r1, [pc, #220]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004188:	4313      	orrs	r3, r2
 800418a:	654b      	str	r3, [r1, #84]	; 0x54
 800418c:	e001      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418e:	7dfb      	ldrb	r3, [r7, #23]
 8004190:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d008      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800419e:	4b31      	ldr	r3, [pc, #196]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041aa:	492e      	ldr	r1, [pc, #184]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d009      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80041bc:	4b29      	ldr	r3, [pc, #164]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80041ca:	4926      	ldr	r1, [pc, #152]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d008      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041dc:	4b21      	ldr	r3, [pc, #132]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041e8:	491e      	ldr	r1, [pc, #120]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00d      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041fa:	4b1a      	ldr	r3, [pc, #104]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	4a19      	ldr	r2, [pc, #100]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004200:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004204:	6113      	str	r3, [r2, #16]
 8004206:	4b17      	ldr	r3, [pc, #92]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004210:	4914      	ldr	r1, [pc, #80]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004212:	4313      	orrs	r3, r2
 8004214:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	da08      	bge.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800421e:	4b11      	ldr	r3, [pc, #68]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004222:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800422a:	490e      	ldr	r1, [pc, #56]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800422c:	4313      	orrs	r3, r2
 800422e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d009      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800423c:	4b09      	ldr	r3, [pc, #36]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800423e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004240:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424a:	4906      	ldr	r1, [pc, #24]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800424c:	4313      	orrs	r3, r2
 800424e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004250:	7dbb      	ldrb	r3, [r7, #22]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	e000      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
}
 800425c:	4618      	mov	r0, r3
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	58024400 	.word	0x58024400

08004268 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800426c:	f7ff f860 	bl	8003330 <HAL_RCC_GetHCLKFreq>
 8004270:	4602      	mov	r2, r0
 8004272:	4b06      	ldr	r3, [pc, #24]	; (800428c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	091b      	lsrs	r3, r3, #4
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	4904      	ldr	r1, [pc, #16]	; (8004290 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800427e:	5ccb      	ldrb	r3, [r1, r3]
 8004280:	f003 031f 	and.w	r3, r3, #31
 8004284:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004288:	4618      	mov	r0, r3
 800428a:	bd80      	pop	{r7, pc}
 800428c:	58024400 	.word	0x58024400
 8004290:	0800a038 	.word	0x0800a038

08004294 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004294:	b480      	push	{r7}
 8004296:	b089      	sub	sp, #36	; 0x24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800429c:	4ba1      	ldr	r3, [pc, #644]	; (8004524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800429e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a0:	f003 0303 	and.w	r3, r3, #3
 80042a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80042a6:	4b9f      	ldr	r3, [pc, #636]	; (8004524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042aa:	0b1b      	lsrs	r3, r3, #12
 80042ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80042b2:	4b9c      	ldr	r3, [pc, #624]	; (8004524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b6:	091b      	lsrs	r3, r3, #4
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80042be:	4b99      	ldr	r3, [pc, #612]	; (8004524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c2:	08db      	lsrs	r3, r3, #3
 80042c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	fb02 f303 	mul.w	r3, r2, r3
 80042ce:	ee07 3a90 	vmov	s15, r3
 80042d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 8111 	beq.w	8004504 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	f000 8083 	beq.w	80043f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	f200 80a1 	bhi.w	8004434 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d056      	beq.n	80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80042fe:	e099      	b.n	8004434 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004300:	4b88      	ldr	r3, [pc, #544]	; (8004524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0320 	and.w	r3, r3, #32
 8004308:	2b00      	cmp	r3, #0
 800430a:	d02d      	beq.n	8004368 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800430c:	4b85      	ldr	r3, [pc, #532]	; (8004524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	08db      	lsrs	r3, r3, #3
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	4a84      	ldr	r2, [pc, #528]	; (8004528 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004318:	fa22 f303 	lsr.w	r3, r2, r3
 800431c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	ee07 3a90 	vmov	s15, r3
 8004324:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	ee07 3a90 	vmov	s15, r3
 800432e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004336:	4b7b      	ldr	r3, [pc, #492]	; (8004524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800433e:	ee07 3a90 	vmov	s15, r3
 8004342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004346:	ed97 6a03 	vldr	s12, [r7, #12]
 800434a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800452c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800434e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800435a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800435e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004362:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004366:	e087      	b.n	8004478 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	ee07 3a90 	vmov	s15, r3
 800436e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004372:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004530 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800437a:	4b6a      	ldr	r3, [pc, #424]	; (8004524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800437c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004382:	ee07 3a90 	vmov	s15, r3
 8004386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800438a:	ed97 6a03 	vldr	s12, [r7, #12]
 800438e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800452c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800439a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800439e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043aa:	e065      	b.n	8004478 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	ee07 3a90 	vmov	s15, r3
 80043b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004534 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80043ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043be:	4b59      	ldr	r3, [pc, #356]	; (8004524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043c6:	ee07 3a90 	vmov	s15, r3
 80043ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80043d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800452c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043ee:	e043      	b.n	8004478 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	ee07 3a90 	vmov	s15, r3
 80043f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004538 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80043fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004402:	4b48      	ldr	r3, [pc, #288]	; (8004524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800440a:	ee07 3a90 	vmov	s15, r3
 800440e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004412:	ed97 6a03 	vldr	s12, [r7, #12]
 8004416:	eddf 5a45 	vldr	s11, [pc, #276]	; 800452c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800441a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800441e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800442a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800442e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004432:	e021      	b.n	8004478 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	ee07 3a90 	vmov	s15, r3
 800443a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800443e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004534 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004446:	4b37      	ldr	r3, [pc, #220]	; (8004524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800444e:	ee07 3a90 	vmov	s15, r3
 8004452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004456:	ed97 6a03 	vldr	s12, [r7, #12]
 800445a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800452c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800445e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800446a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800446e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004472:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004476:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004478:	4b2a      	ldr	r3, [pc, #168]	; (8004524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800447a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447c:	0a5b      	lsrs	r3, r3, #9
 800447e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004482:	ee07 3a90 	vmov	s15, r3
 8004486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800448a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800448e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004492:	edd7 6a07 	vldr	s13, [r7, #28]
 8004496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800449a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800449e:	ee17 2a90 	vmov	r2, s15
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80044a6:	4b1f      	ldr	r3, [pc, #124]	; (8004524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044aa:	0c1b      	lsrs	r3, r3, #16
 80044ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044b0:	ee07 3a90 	vmov	s15, r3
 80044b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80044c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044cc:	ee17 2a90 	vmov	r2, s15
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80044d4:	4b13      	ldr	r3, [pc, #76]	; (8004524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d8:	0e1b      	lsrs	r3, r3, #24
 80044da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80044f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044fa:	ee17 2a90 	vmov	r2, s15
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004502:	e008      	b.n	8004516 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	609a      	str	r2, [r3, #8]
}
 8004516:	bf00      	nop
 8004518:	3724      	adds	r7, #36	; 0x24
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	58024400 	.word	0x58024400
 8004528:	03d09000 	.word	0x03d09000
 800452c:	46000000 	.word	0x46000000
 8004530:	4c742400 	.word	0x4c742400
 8004534:	4a742400 	.word	0x4a742400
 8004538:	4bbebc20 	.word	0x4bbebc20

0800453c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800453c:	b480      	push	{r7}
 800453e:	b089      	sub	sp, #36	; 0x24
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004544:	4ba1      	ldr	r3, [pc, #644]	; (80047cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004548:	f003 0303 	and.w	r3, r3, #3
 800454c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800454e:	4b9f      	ldr	r3, [pc, #636]	; (80047cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	0d1b      	lsrs	r3, r3, #20
 8004554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004558:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800455a:	4b9c      	ldr	r3, [pc, #624]	; (80047cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800455c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455e:	0a1b      	lsrs	r3, r3, #8
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004566:	4b99      	ldr	r3, [pc, #612]	; (80047cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456a:	08db      	lsrs	r3, r3, #3
 800456c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	fb02 f303 	mul.w	r3, r2, r3
 8004576:	ee07 3a90 	vmov	s15, r3
 800457a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800457e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 8111 	beq.w	80047ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	2b02      	cmp	r3, #2
 800458e:	f000 8083 	beq.w	8004698 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	2b02      	cmp	r3, #2
 8004596:	f200 80a1 	bhi.w	80046dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d056      	beq.n	8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80045a6:	e099      	b.n	80046dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045a8:	4b88      	ldr	r3, [pc, #544]	; (80047cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0320 	and.w	r3, r3, #32
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d02d      	beq.n	8004610 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045b4:	4b85      	ldr	r3, [pc, #532]	; (80047cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	08db      	lsrs	r3, r3, #3
 80045ba:	f003 0303 	and.w	r3, r3, #3
 80045be:	4a84      	ldr	r2, [pc, #528]	; (80047d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80045c0:	fa22 f303 	lsr.w	r3, r2, r3
 80045c4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	ee07 3a90 	vmov	s15, r3
 80045cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	ee07 3a90 	vmov	s15, r3
 80045d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045de:	4b7b      	ldr	r3, [pc, #492]	; (80047cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e6:	ee07 3a90 	vmov	s15, r3
 80045ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80045f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80047d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800460a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800460e:	e087      	b.n	8004720 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800461a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80047d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800461e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004622:	4b6a      	ldr	r3, [pc, #424]	; (80047cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800462a:	ee07 3a90 	vmov	s15, r3
 800462e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004632:	ed97 6a03 	vldr	s12, [r7, #12]
 8004636:	eddf 5a67 	vldr	s11, [pc, #412]	; 80047d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800463a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800463e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800464a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004652:	e065      	b.n	8004720 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	ee07 3a90 	vmov	s15, r3
 800465a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800465e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80047dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004666:	4b59      	ldr	r3, [pc, #356]	; (80047cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800466e:	ee07 3a90 	vmov	s15, r3
 8004672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004676:	ed97 6a03 	vldr	s12, [r7, #12]
 800467a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80047d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800467e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800468a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800468e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004692:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004696:	e043      	b.n	8004720 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	ee07 3a90 	vmov	s15, r3
 800469e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80047e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80046a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046aa:	4b48      	ldr	r3, [pc, #288]	; (80047cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b2:	ee07 3a90 	vmov	s15, r3
 80046b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80046be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80047d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046da:	e021      	b.n	8004720 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	ee07 3a90 	vmov	s15, r3
 80046e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80047dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80046ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ee:	4b37      	ldr	r3, [pc, #220]	; (80047cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004702:	eddf 5a34 	vldr	s11, [pc, #208]	; 80047d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800470a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800470e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800471a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800471e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004720:	4b2a      	ldr	r3, [pc, #168]	; (80047cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	0a5b      	lsrs	r3, r3, #9
 8004726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800472a:	ee07 3a90 	vmov	s15, r3
 800472e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004732:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004736:	ee37 7a87 	vadd.f32	s14, s15, s14
 800473a:	edd7 6a07 	vldr	s13, [r7, #28]
 800473e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004746:	ee17 2a90 	vmov	r2, s15
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800474e:	4b1f      	ldr	r3, [pc, #124]	; (80047cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	0c1b      	lsrs	r3, r3, #16
 8004754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004758:	ee07 3a90 	vmov	s15, r3
 800475c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004760:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004764:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004768:	edd7 6a07 	vldr	s13, [r7, #28]
 800476c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004770:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004774:	ee17 2a90 	vmov	r2, s15
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800477c:	4b13      	ldr	r3, [pc, #76]	; (80047cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	0e1b      	lsrs	r3, r3, #24
 8004782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004786:	ee07 3a90 	vmov	s15, r3
 800478a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800478e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004792:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004796:	edd7 6a07 	vldr	s13, [r7, #28]
 800479a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800479e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047a2:	ee17 2a90 	vmov	r2, s15
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80047aa:	e008      	b.n	80047be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	609a      	str	r2, [r3, #8]
}
 80047be:	bf00      	nop
 80047c0:	3724      	adds	r7, #36	; 0x24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	58024400 	.word	0x58024400
 80047d0:	03d09000 	.word	0x03d09000
 80047d4:	46000000 	.word	0x46000000
 80047d8:	4c742400 	.word	0x4c742400
 80047dc:	4a742400 	.word	0x4a742400
 80047e0:	4bbebc20 	.word	0x4bbebc20

080047e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80047f2:	4b53      	ldr	r3, [pc, #332]	; (8004940 <RCCEx_PLL2_Config+0x15c>)
 80047f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	2b03      	cmp	r3, #3
 80047fc:	d101      	bne.n	8004802 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e099      	b.n	8004936 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004802:	4b4f      	ldr	r3, [pc, #316]	; (8004940 <RCCEx_PLL2_Config+0x15c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a4e      	ldr	r2, [pc, #312]	; (8004940 <RCCEx_PLL2_Config+0x15c>)
 8004808:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800480c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800480e:	f7fc fd3d 	bl	800128c <HAL_GetTick>
 8004812:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004814:	e008      	b.n	8004828 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004816:	f7fc fd39 	bl	800128c <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e086      	b.n	8004936 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004828:	4b45      	ldr	r3, [pc, #276]	; (8004940 <RCCEx_PLL2_Config+0x15c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1f0      	bne.n	8004816 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004834:	4b42      	ldr	r3, [pc, #264]	; (8004940 <RCCEx_PLL2_Config+0x15c>)
 8004836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004838:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	031b      	lsls	r3, r3, #12
 8004842:	493f      	ldr	r1, [pc, #252]	; (8004940 <RCCEx_PLL2_Config+0x15c>)
 8004844:	4313      	orrs	r3, r2
 8004846:	628b      	str	r3, [r1, #40]	; 0x28
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	3b01      	subs	r3, #1
 800484e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	3b01      	subs	r3, #1
 8004858:	025b      	lsls	r3, r3, #9
 800485a:	b29b      	uxth	r3, r3
 800485c:	431a      	orrs	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	3b01      	subs	r3, #1
 8004864:	041b      	lsls	r3, r3, #16
 8004866:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	3b01      	subs	r3, #1
 8004872:	061b      	lsls	r3, r3, #24
 8004874:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004878:	4931      	ldr	r1, [pc, #196]	; (8004940 <RCCEx_PLL2_Config+0x15c>)
 800487a:	4313      	orrs	r3, r2
 800487c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800487e:	4b30      	ldr	r3, [pc, #192]	; (8004940 <RCCEx_PLL2_Config+0x15c>)
 8004880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004882:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	492d      	ldr	r1, [pc, #180]	; (8004940 <RCCEx_PLL2_Config+0x15c>)
 800488c:	4313      	orrs	r3, r2
 800488e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004890:	4b2b      	ldr	r3, [pc, #172]	; (8004940 <RCCEx_PLL2_Config+0x15c>)
 8004892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004894:	f023 0220 	bic.w	r2, r3, #32
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	4928      	ldr	r1, [pc, #160]	; (8004940 <RCCEx_PLL2_Config+0x15c>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80048a2:	4b27      	ldr	r3, [pc, #156]	; (8004940 <RCCEx_PLL2_Config+0x15c>)
 80048a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a6:	4a26      	ldr	r2, [pc, #152]	; (8004940 <RCCEx_PLL2_Config+0x15c>)
 80048a8:	f023 0310 	bic.w	r3, r3, #16
 80048ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80048ae:	4b24      	ldr	r3, [pc, #144]	; (8004940 <RCCEx_PLL2_Config+0x15c>)
 80048b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048b2:	4b24      	ldr	r3, [pc, #144]	; (8004944 <RCCEx_PLL2_Config+0x160>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	69d2      	ldr	r2, [r2, #28]
 80048ba:	00d2      	lsls	r2, r2, #3
 80048bc:	4920      	ldr	r1, [pc, #128]	; (8004940 <RCCEx_PLL2_Config+0x15c>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80048c2:	4b1f      	ldr	r3, [pc, #124]	; (8004940 <RCCEx_PLL2_Config+0x15c>)
 80048c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c6:	4a1e      	ldr	r2, [pc, #120]	; (8004940 <RCCEx_PLL2_Config+0x15c>)
 80048c8:	f043 0310 	orr.w	r3, r3, #16
 80048cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d106      	bne.n	80048e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80048d4:	4b1a      	ldr	r3, [pc, #104]	; (8004940 <RCCEx_PLL2_Config+0x15c>)
 80048d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d8:	4a19      	ldr	r2, [pc, #100]	; (8004940 <RCCEx_PLL2_Config+0x15c>)
 80048da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80048e0:	e00f      	b.n	8004902 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d106      	bne.n	80048f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80048e8:	4b15      	ldr	r3, [pc, #84]	; (8004940 <RCCEx_PLL2_Config+0x15c>)
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	4a14      	ldr	r2, [pc, #80]	; (8004940 <RCCEx_PLL2_Config+0x15c>)
 80048ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80048f4:	e005      	b.n	8004902 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80048f6:	4b12      	ldr	r3, [pc, #72]	; (8004940 <RCCEx_PLL2_Config+0x15c>)
 80048f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fa:	4a11      	ldr	r2, [pc, #68]	; (8004940 <RCCEx_PLL2_Config+0x15c>)
 80048fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004900:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004902:	4b0f      	ldr	r3, [pc, #60]	; (8004940 <RCCEx_PLL2_Config+0x15c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a0e      	ldr	r2, [pc, #56]	; (8004940 <RCCEx_PLL2_Config+0x15c>)
 8004908:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800490c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800490e:	f7fc fcbd 	bl	800128c <HAL_GetTick>
 8004912:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004914:	e008      	b.n	8004928 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004916:	f7fc fcb9 	bl	800128c <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d901      	bls.n	8004928 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e006      	b.n	8004936 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004928:	4b05      	ldr	r3, [pc, #20]	; (8004940 <RCCEx_PLL2_Config+0x15c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0f0      	beq.n	8004916 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004934:	7bfb      	ldrb	r3, [r7, #15]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	58024400 	.word	0x58024400
 8004944:	ffff0007 	.word	0xffff0007

08004948 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004952:	2300      	movs	r3, #0
 8004954:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004956:	4b53      	ldr	r3, [pc, #332]	; (8004aa4 <RCCEx_PLL3_Config+0x15c>)
 8004958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	2b03      	cmp	r3, #3
 8004960:	d101      	bne.n	8004966 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e099      	b.n	8004a9a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004966:	4b4f      	ldr	r3, [pc, #316]	; (8004aa4 <RCCEx_PLL3_Config+0x15c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a4e      	ldr	r2, [pc, #312]	; (8004aa4 <RCCEx_PLL3_Config+0x15c>)
 800496c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004970:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004972:	f7fc fc8b 	bl	800128c <HAL_GetTick>
 8004976:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004978:	e008      	b.n	800498c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800497a:	f7fc fc87 	bl	800128c <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d901      	bls.n	800498c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e086      	b.n	8004a9a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800498c:	4b45      	ldr	r3, [pc, #276]	; (8004aa4 <RCCEx_PLL3_Config+0x15c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1f0      	bne.n	800497a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004998:	4b42      	ldr	r3, [pc, #264]	; (8004aa4 <RCCEx_PLL3_Config+0x15c>)
 800499a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	051b      	lsls	r3, r3, #20
 80049a6:	493f      	ldr	r1, [pc, #252]	; (8004aa4 <RCCEx_PLL3_Config+0x15c>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	628b      	str	r3, [r1, #40]	; 0x28
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	3b01      	subs	r3, #1
 80049b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	3b01      	subs	r3, #1
 80049bc:	025b      	lsls	r3, r3, #9
 80049be:	b29b      	uxth	r3, r3
 80049c0:	431a      	orrs	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	3b01      	subs	r3, #1
 80049c8:	041b      	lsls	r3, r3, #16
 80049ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	3b01      	subs	r3, #1
 80049d6:	061b      	lsls	r3, r3, #24
 80049d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80049dc:	4931      	ldr	r1, [pc, #196]	; (8004aa4 <RCCEx_PLL3_Config+0x15c>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80049e2:	4b30      	ldr	r3, [pc, #192]	; (8004aa4 <RCCEx_PLL3_Config+0x15c>)
 80049e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	492d      	ldr	r1, [pc, #180]	; (8004aa4 <RCCEx_PLL3_Config+0x15c>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80049f4:	4b2b      	ldr	r3, [pc, #172]	; (8004aa4 <RCCEx_PLL3_Config+0x15c>)
 80049f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	4928      	ldr	r1, [pc, #160]	; (8004aa4 <RCCEx_PLL3_Config+0x15c>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004a06:	4b27      	ldr	r3, [pc, #156]	; (8004aa4 <RCCEx_PLL3_Config+0x15c>)
 8004a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0a:	4a26      	ldr	r2, [pc, #152]	; (8004aa4 <RCCEx_PLL3_Config+0x15c>)
 8004a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004a12:	4b24      	ldr	r3, [pc, #144]	; (8004aa4 <RCCEx_PLL3_Config+0x15c>)
 8004a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a16:	4b24      	ldr	r3, [pc, #144]	; (8004aa8 <RCCEx_PLL3_Config+0x160>)
 8004a18:	4013      	ands	r3, r2
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	69d2      	ldr	r2, [r2, #28]
 8004a1e:	00d2      	lsls	r2, r2, #3
 8004a20:	4920      	ldr	r1, [pc, #128]	; (8004aa4 <RCCEx_PLL3_Config+0x15c>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004a26:	4b1f      	ldr	r3, [pc, #124]	; (8004aa4 <RCCEx_PLL3_Config+0x15c>)
 8004a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2a:	4a1e      	ldr	r2, [pc, #120]	; (8004aa4 <RCCEx_PLL3_Config+0x15c>)
 8004a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d106      	bne.n	8004a46 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004a38:	4b1a      	ldr	r3, [pc, #104]	; (8004aa4 <RCCEx_PLL3_Config+0x15c>)
 8004a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3c:	4a19      	ldr	r2, [pc, #100]	; (8004aa4 <RCCEx_PLL3_Config+0x15c>)
 8004a3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a44:	e00f      	b.n	8004a66 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d106      	bne.n	8004a5a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004a4c:	4b15      	ldr	r3, [pc, #84]	; (8004aa4 <RCCEx_PLL3_Config+0x15c>)
 8004a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a50:	4a14      	ldr	r2, [pc, #80]	; (8004aa4 <RCCEx_PLL3_Config+0x15c>)
 8004a52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a58:	e005      	b.n	8004a66 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004a5a:	4b12      	ldr	r3, [pc, #72]	; (8004aa4 <RCCEx_PLL3_Config+0x15c>)
 8004a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5e:	4a11      	ldr	r2, [pc, #68]	; (8004aa4 <RCCEx_PLL3_Config+0x15c>)
 8004a60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004a66:	4b0f      	ldr	r3, [pc, #60]	; (8004aa4 <RCCEx_PLL3_Config+0x15c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a0e      	ldr	r2, [pc, #56]	; (8004aa4 <RCCEx_PLL3_Config+0x15c>)
 8004a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a72:	f7fc fc0b 	bl	800128c <HAL_GetTick>
 8004a76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a78:	e008      	b.n	8004a8c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004a7a:	f7fc fc07 	bl	800128c <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d901      	bls.n	8004a8c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e006      	b.n	8004a9a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a8c:	4b05      	ldr	r3, [pc, #20]	; (8004aa4 <RCCEx_PLL3_Config+0x15c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0f0      	beq.n	8004a7a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	58024400 	.word	0x58024400
 8004aa8:	ffff0007 	.word	0xffff0007

08004aac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e042      	b.n	8004b44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d106      	bne.n	8004ad6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7fc f8d7 	bl	8000c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2224      	movs	r2, #36	; 0x24
 8004ada:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0201 	bic.w	r2, r2, #1
 8004aec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 fbea 	bl	80052c8 <UART_SetConfig>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d101      	bne.n	8004afe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e022      	b.n	8004b44 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f001 f93e 	bl	8005d88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689a      	ldr	r2, [r3, #8]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0201 	orr.w	r2, r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f001 f9c5 	bl	8005ecc <UART_CheckIdleState>
 8004b42:	4603      	mov	r3, r0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b0ba      	sub	sp, #232	; 0xe8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b72:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004b76:	f640 030f 	movw	r3, #2063	; 0x80f
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004b80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d11b      	bne.n	8004bc0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b8c:	f003 0320 	and.w	r3, r3, #32
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d015      	beq.n	8004bc0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b98:	f003 0320 	and.w	r3, r3, #32
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d105      	bne.n	8004bac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004ba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d009      	beq.n	8004bc0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 835a 	beq.w	800526a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	4798      	blx	r3
      }
      return;
 8004bbe:	e354      	b.n	800526a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004bc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 811f 	beq.w	8004e08 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004bca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004bce:	4b8b      	ldr	r3, [pc, #556]	; (8004dfc <HAL_UART_IRQHandler+0x2b0>)
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d106      	bne.n	8004be4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004bd6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004bda:	4b89      	ldr	r3, [pc, #548]	; (8004e00 <HAL_UART_IRQHandler+0x2b4>)
 8004bdc:	4013      	ands	r3, r2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 8112 	beq.w	8004e08 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d011      	beq.n	8004c14 <HAL_UART_IRQHandler+0xc8>
 8004bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00b      	beq.n	8004c14 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2201      	movs	r2, #1
 8004c02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c0a:	f043 0201 	orr.w	r2, r3, #1
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d011      	beq.n	8004c44 <HAL_UART_IRQHandler+0xf8>
 8004c20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00b      	beq.n	8004c44 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2202      	movs	r2, #2
 8004c32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c3a:	f043 0204 	orr.w	r2, r3, #4
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d011      	beq.n	8004c74 <HAL_UART_IRQHandler+0x128>
 8004c50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00b      	beq.n	8004c74 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2204      	movs	r2, #4
 8004c62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c6a:	f043 0202 	orr.w	r2, r3, #2
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c78:	f003 0308 	and.w	r3, r3, #8
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d017      	beq.n	8004cb0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c84:	f003 0320 	and.w	r3, r3, #32
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d105      	bne.n	8004c98 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004c8c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004c90:	4b5a      	ldr	r3, [pc, #360]	; (8004dfc <HAL_UART_IRQHandler+0x2b0>)
 8004c92:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00b      	beq.n	8004cb0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2208      	movs	r2, #8
 8004c9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ca6:	f043 0208 	orr.w	r2, r3, #8
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d012      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x196>
 8004cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00c      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cd8:	f043 0220 	orr.w	r2, r3, #32
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 82c0 	beq.w	800526e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cf2:	f003 0320 	and.w	r3, r3, #32
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d013      	beq.n	8004d22 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cfe:	f003 0320 	and.w	r3, r3, #32
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d105      	bne.n	8004d12 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004d06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d007      	beq.n	8004d22 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d36:	2b40      	cmp	r3, #64	; 0x40
 8004d38:	d005      	beq.n	8004d46 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d04f      	beq.n	8004de6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f001 f9d4 	bl	80060f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d56:	2b40      	cmp	r3, #64	; 0x40
 8004d58:	d141      	bne.n	8004dde <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	3308      	adds	r3, #8
 8004d60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d68:	e853 3f00 	ldrex	r3, [r3]
 8004d6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3308      	adds	r3, #8
 8004d82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d96:	e841 2300 	strex	r3, r2, [r1]
 8004d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1d9      	bne.n	8004d5a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d013      	beq.n	8004dd6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004db2:	4a14      	ldr	r2, [pc, #80]	; (8004e04 <HAL_UART_IRQHandler+0x2b8>)
 8004db4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fc feac 	bl	8001b18 <HAL_DMA_Abort_IT>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d017      	beq.n	8004df6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004dd0:	4610      	mov	r0, r2
 8004dd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd4:	e00f      	b.n	8004df6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 fa60 	bl	800529c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ddc:	e00b      	b.n	8004df6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fa5c 	bl	800529c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de4:	e007      	b.n	8004df6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 fa58 	bl	800529c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004df4:	e23b      	b.n	800526e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df6:	bf00      	nop
    return;
 8004df8:	e239      	b.n	800526e <HAL_UART_IRQHandler+0x722>
 8004dfa:	bf00      	nop
 8004dfc:	10000001 	.word	0x10000001
 8004e00:	04000120 	.word	0x04000120
 8004e04:	080061c1 	.word	0x080061c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	f040 81ce 	bne.w	80051ae <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e16:	f003 0310 	and.w	r3, r3, #16
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 81c7 	beq.w	80051ae <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e24:	f003 0310 	and.w	r3, r3, #16
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 81c0 	beq.w	80051ae <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2210      	movs	r2, #16
 8004e34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e40:	2b40      	cmp	r3, #64	; 0x40
 8004e42:	f040 813b 	bne.w	80050bc <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a8b      	ldr	r2, [pc, #556]	; (800507c <HAL_UART_IRQHandler+0x530>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d059      	beq.n	8004f06 <HAL_UART_IRQHandler+0x3ba>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a89      	ldr	r2, [pc, #548]	; (8005080 <HAL_UART_IRQHandler+0x534>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d053      	beq.n	8004f06 <HAL_UART_IRQHandler+0x3ba>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a87      	ldr	r2, [pc, #540]	; (8005084 <HAL_UART_IRQHandler+0x538>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d04d      	beq.n	8004f06 <HAL_UART_IRQHandler+0x3ba>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a85      	ldr	r2, [pc, #532]	; (8005088 <HAL_UART_IRQHandler+0x53c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d047      	beq.n	8004f06 <HAL_UART_IRQHandler+0x3ba>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a83      	ldr	r2, [pc, #524]	; (800508c <HAL_UART_IRQHandler+0x540>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d041      	beq.n	8004f06 <HAL_UART_IRQHandler+0x3ba>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a81      	ldr	r2, [pc, #516]	; (8005090 <HAL_UART_IRQHandler+0x544>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d03b      	beq.n	8004f06 <HAL_UART_IRQHandler+0x3ba>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a7f      	ldr	r2, [pc, #508]	; (8005094 <HAL_UART_IRQHandler+0x548>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d035      	beq.n	8004f06 <HAL_UART_IRQHandler+0x3ba>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a7d      	ldr	r2, [pc, #500]	; (8005098 <HAL_UART_IRQHandler+0x54c>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d02f      	beq.n	8004f06 <HAL_UART_IRQHandler+0x3ba>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a7b      	ldr	r2, [pc, #492]	; (800509c <HAL_UART_IRQHandler+0x550>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d029      	beq.n	8004f06 <HAL_UART_IRQHandler+0x3ba>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a79      	ldr	r2, [pc, #484]	; (80050a0 <HAL_UART_IRQHandler+0x554>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d023      	beq.n	8004f06 <HAL_UART_IRQHandler+0x3ba>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a77      	ldr	r2, [pc, #476]	; (80050a4 <HAL_UART_IRQHandler+0x558>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d01d      	beq.n	8004f06 <HAL_UART_IRQHandler+0x3ba>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a75      	ldr	r2, [pc, #468]	; (80050a8 <HAL_UART_IRQHandler+0x55c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d017      	beq.n	8004f06 <HAL_UART_IRQHandler+0x3ba>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a73      	ldr	r2, [pc, #460]	; (80050ac <HAL_UART_IRQHandler+0x560>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d011      	beq.n	8004f06 <HAL_UART_IRQHandler+0x3ba>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a71      	ldr	r2, [pc, #452]	; (80050b0 <HAL_UART_IRQHandler+0x564>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d00b      	beq.n	8004f06 <HAL_UART_IRQHandler+0x3ba>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a6f      	ldr	r2, [pc, #444]	; (80050b4 <HAL_UART_IRQHandler+0x568>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d005      	beq.n	8004f06 <HAL_UART_IRQHandler+0x3ba>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a6d      	ldr	r2, [pc, #436]	; (80050b8 <HAL_UART_IRQHandler+0x56c>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d105      	bne.n	8004f12 <HAL_UART_IRQHandler+0x3c6>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	e004      	b.n	8004f1c <HAL_UART_IRQHandler+0x3d0>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 81a4 	beq.w	8005272 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f34:	429a      	cmp	r2, r3
 8004f36:	f080 819c 	bcs.w	8005272 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f4e:	f000 8086 	beq.w	800505e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f5e:	e853 3f00 	ldrex	r3, [r3]
 8004f62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f80:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f84:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f88:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f8c:	e841 2300 	strex	r3, r2, [r1]
 8004f90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1da      	bne.n	8004f52 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3308      	adds	r3, #8
 8004fa2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fa6:	e853 3f00 	ldrex	r3, [r3]
 8004faa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004fac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fae:	f023 0301 	bic.w	r3, r3, #1
 8004fb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3308      	adds	r3, #8
 8004fbc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004fc0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004fc4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004fc8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fcc:	e841 2300 	strex	r3, r2, [r1]
 8004fd0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004fd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1e1      	bne.n	8004f9c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	3308      	adds	r3, #8
 8004fde:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fe2:	e853 3f00 	ldrex	r3, [r3]
 8004fe6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004fe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	3308      	adds	r3, #8
 8004ff8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ffc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ffe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005000:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005002:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005004:	e841 2300 	strex	r3, r2, [r1]
 8005008:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800500a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1e3      	bne.n	8004fd8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2220      	movs	r2, #32
 8005014:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005026:	e853 3f00 	ldrex	r3, [r3]
 800502a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800502c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800502e:	f023 0310 	bic.w	r3, r3, #16
 8005032:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	461a      	mov	r2, r3
 800503c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005040:	65bb      	str	r3, [r7, #88]	; 0x58
 8005042:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005044:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005046:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005048:	e841 2300 	strex	r3, r2, [r1]
 800504c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800504e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1e4      	bne.n	800501e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005058:	4618      	mov	r0, r3
 800505a:	f7fc fa3f 	bl	80014dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800506a:	b29b      	uxth	r3, r3
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	b29b      	uxth	r3, r3
 8005070:	4619      	mov	r1, r3
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f91c 	bl	80052b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005078:	e0fb      	b.n	8005272 <HAL_UART_IRQHandler+0x726>
 800507a:	bf00      	nop
 800507c:	40020010 	.word	0x40020010
 8005080:	40020028 	.word	0x40020028
 8005084:	40020040 	.word	0x40020040
 8005088:	40020058 	.word	0x40020058
 800508c:	40020070 	.word	0x40020070
 8005090:	40020088 	.word	0x40020088
 8005094:	400200a0 	.word	0x400200a0
 8005098:	400200b8 	.word	0x400200b8
 800509c:	40020410 	.word	0x40020410
 80050a0:	40020428 	.word	0x40020428
 80050a4:	40020440 	.word	0x40020440
 80050a8:	40020458 	.word	0x40020458
 80050ac:	40020470 	.word	0x40020470
 80050b0:	40020488 	.word	0x40020488
 80050b4:	400204a0 	.word	0x400204a0
 80050b8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 80cc 	beq.w	8005276 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80050de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f000 80c7 	beq.w	8005276 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f0:	e853 3f00 	ldrex	r3, [r3]
 80050f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	461a      	mov	r2, r3
 8005106:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800510a:	647b      	str	r3, [r7, #68]	; 0x44
 800510c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005110:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005112:	e841 2300 	strex	r3, r2, [r1]
 8005116:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1e4      	bne.n	80050e8 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	3308      	adds	r3, #8
 8005124:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	e853 3f00 	ldrex	r3, [r3]
 800512c:	623b      	str	r3, [r7, #32]
   return(result);
 800512e:	6a3a      	ldr	r2, [r7, #32]
 8005130:	4b54      	ldr	r3, [pc, #336]	; (8005284 <HAL_UART_IRQHandler+0x738>)
 8005132:	4013      	ands	r3, r2
 8005134:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3308      	adds	r3, #8
 800513e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005142:	633a      	str	r2, [r7, #48]	; 0x30
 8005144:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005146:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800514a:	e841 2300 	strex	r3, r2, [r1]
 800514e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1e3      	bne.n	800511e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2220      	movs	r2, #32
 800515a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	e853 3f00 	ldrex	r3, [r3]
 8005176:	60fb      	str	r3, [r7, #12]
   return(result);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f023 0310 	bic.w	r3, r3, #16
 800517e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	461a      	mov	r2, r3
 8005188:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800518c:	61fb      	str	r3, [r7, #28]
 800518e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005190:	69b9      	ldr	r1, [r7, #24]
 8005192:	69fa      	ldr	r2, [r7, #28]
 8005194:	e841 2300 	strex	r3, r2, [r1]
 8005198:	617b      	str	r3, [r7, #20]
   return(result);
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1e4      	bne.n	800516a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051a4:	4619      	mov	r1, r3
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f882 	bl	80052b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80051ac:	e063      	b.n	8005276 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80051ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00e      	beq.n	80051d8 <HAL_UART_IRQHandler+0x68c>
 80051ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d008      	beq.n	80051d8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80051ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f001 f836 	bl	8006242 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051d6:	e051      	b.n	800527c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80051d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d014      	beq.n	800520e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80051e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d105      	bne.n	80051fc <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80051f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d008      	beq.n	800520e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005200:	2b00      	cmp	r3, #0
 8005202:	d03a      	beq.n	800527a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	4798      	blx	r3
    }
    return;
 800520c:	e035      	b.n	800527a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800520e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005216:	2b00      	cmp	r3, #0
 8005218:	d009      	beq.n	800522e <HAL_UART_IRQHandler+0x6e2>
 800521a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800521e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 ffe0 	bl	80061ec <UART_EndTransmit_IT>
    return;
 800522c:	e026      	b.n	800527c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800522e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005232:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d009      	beq.n	800524e <HAL_UART_IRQHandler+0x702>
 800523a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800523e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f001 f80f 	bl	800626a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800524c:	e016      	b.n	800527c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800524e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005252:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d010      	beq.n	800527c <HAL_UART_IRQHandler+0x730>
 800525a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800525e:	2b00      	cmp	r3, #0
 8005260:	da0c      	bge.n	800527c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fff7 	bl	8006256 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005268:	e008      	b.n	800527c <HAL_UART_IRQHandler+0x730>
      return;
 800526a:	bf00      	nop
 800526c:	e006      	b.n	800527c <HAL_UART_IRQHandler+0x730>
    return;
 800526e:	bf00      	nop
 8005270:	e004      	b.n	800527c <HAL_UART_IRQHandler+0x730>
      return;
 8005272:	bf00      	nop
 8005274:	e002      	b.n	800527c <HAL_UART_IRQHandler+0x730>
      return;
 8005276:	bf00      	nop
 8005278:	e000      	b.n	800527c <HAL_UART_IRQHandler+0x730>
    return;
 800527a:	bf00      	nop
  }
}
 800527c:	37e8      	adds	r7, #232	; 0xe8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	effffffe 	.word	0xeffffffe

08005288 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	460b      	mov	r3, r1
 80052ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052c8:	b5b0      	push	{r4, r5, r7, lr}
 80052ca:	b08e      	sub	sp, #56	; 0x38
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052d0:	2300      	movs	r3, #0
 80052d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689a      	ldr	r2, [r3, #8]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	431a      	orrs	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	431a      	orrs	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	4bbf      	ldr	r3, [pc, #764]	; (80055f4 <UART_SetConfig+0x32c>)
 80052f6:	4013      	ands	r3, r2
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6812      	ldr	r2, [r2, #0]
 80052fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80052fe:	430b      	orrs	r3, r1
 8005300:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68da      	ldr	r2, [r3, #12]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4ab5      	ldr	r2, [pc, #724]	; (80055f8 <UART_SetConfig+0x330>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d004      	beq.n	8005332 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800532e:	4313      	orrs	r3, r2
 8005330:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689a      	ldr	r2, [r3, #8]
 8005338:	4bb0      	ldr	r3, [pc, #704]	; (80055fc <UART_SetConfig+0x334>)
 800533a:	4013      	ands	r3, r2
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6812      	ldr	r2, [r2, #0]
 8005340:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005342:	430b      	orrs	r3, r1
 8005344:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534c:	f023 010f 	bic.w	r1, r3, #15
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4aa7      	ldr	r2, [pc, #668]	; (8005600 <UART_SetConfig+0x338>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d176      	bne.n	8005454 <UART_SetConfig+0x18c>
 8005366:	4ba7      	ldr	r3, [pc, #668]	; (8005604 <UART_SetConfig+0x33c>)
 8005368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800536e:	2b28      	cmp	r3, #40	; 0x28
 8005370:	d86c      	bhi.n	800544c <UART_SetConfig+0x184>
 8005372:	a201      	add	r2, pc, #4	; (adr r2, 8005378 <UART_SetConfig+0xb0>)
 8005374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005378:	0800541d 	.word	0x0800541d
 800537c:	0800544d 	.word	0x0800544d
 8005380:	0800544d 	.word	0x0800544d
 8005384:	0800544d 	.word	0x0800544d
 8005388:	0800544d 	.word	0x0800544d
 800538c:	0800544d 	.word	0x0800544d
 8005390:	0800544d 	.word	0x0800544d
 8005394:	0800544d 	.word	0x0800544d
 8005398:	08005425 	.word	0x08005425
 800539c:	0800544d 	.word	0x0800544d
 80053a0:	0800544d 	.word	0x0800544d
 80053a4:	0800544d 	.word	0x0800544d
 80053a8:	0800544d 	.word	0x0800544d
 80053ac:	0800544d 	.word	0x0800544d
 80053b0:	0800544d 	.word	0x0800544d
 80053b4:	0800544d 	.word	0x0800544d
 80053b8:	0800542d 	.word	0x0800542d
 80053bc:	0800544d 	.word	0x0800544d
 80053c0:	0800544d 	.word	0x0800544d
 80053c4:	0800544d 	.word	0x0800544d
 80053c8:	0800544d 	.word	0x0800544d
 80053cc:	0800544d 	.word	0x0800544d
 80053d0:	0800544d 	.word	0x0800544d
 80053d4:	0800544d 	.word	0x0800544d
 80053d8:	08005435 	.word	0x08005435
 80053dc:	0800544d 	.word	0x0800544d
 80053e0:	0800544d 	.word	0x0800544d
 80053e4:	0800544d 	.word	0x0800544d
 80053e8:	0800544d 	.word	0x0800544d
 80053ec:	0800544d 	.word	0x0800544d
 80053f0:	0800544d 	.word	0x0800544d
 80053f4:	0800544d 	.word	0x0800544d
 80053f8:	0800543d 	.word	0x0800543d
 80053fc:	0800544d 	.word	0x0800544d
 8005400:	0800544d 	.word	0x0800544d
 8005404:	0800544d 	.word	0x0800544d
 8005408:	0800544d 	.word	0x0800544d
 800540c:	0800544d 	.word	0x0800544d
 8005410:	0800544d 	.word	0x0800544d
 8005414:	0800544d 	.word	0x0800544d
 8005418:	08005445 	.word	0x08005445
 800541c:	2301      	movs	r3, #1
 800541e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005422:	e222      	b.n	800586a <UART_SetConfig+0x5a2>
 8005424:	2304      	movs	r3, #4
 8005426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800542a:	e21e      	b.n	800586a <UART_SetConfig+0x5a2>
 800542c:	2308      	movs	r3, #8
 800542e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005432:	e21a      	b.n	800586a <UART_SetConfig+0x5a2>
 8005434:	2310      	movs	r3, #16
 8005436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800543a:	e216      	b.n	800586a <UART_SetConfig+0x5a2>
 800543c:	2320      	movs	r3, #32
 800543e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005442:	e212      	b.n	800586a <UART_SetConfig+0x5a2>
 8005444:	2340      	movs	r3, #64	; 0x40
 8005446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800544a:	e20e      	b.n	800586a <UART_SetConfig+0x5a2>
 800544c:	2380      	movs	r3, #128	; 0x80
 800544e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005452:	e20a      	b.n	800586a <UART_SetConfig+0x5a2>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a6b      	ldr	r2, [pc, #428]	; (8005608 <UART_SetConfig+0x340>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d130      	bne.n	80054c0 <UART_SetConfig+0x1f8>
 800545e:	4b69      	ldr	r3, [pc, #420]	; (8005604 <UART_SetConfig+0x33c>)
 8005460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	2b05      	cmp	r3, #5
 8005468:	d826      	bhi.n	80054b8 <UART_SetConfig+0x1f0>
 800546a:	a201      	add	r2, pc, #4	; (adr r2, 8005470 <UART_SetConfig+0x1a8>)
 800546c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005470:	08005489 	.word	0x08005489
 8005474:	08005491 	.word	0x08005491
 8005478:	08005499 	.word	0x08005499
 800547c:	080054a1 	.word	0x080054a1
 8005480:	080054a9 	.word	0x080054a9
 8005484:	080054b1 	.word	0x080054b1
 8005488:	2300      	movs	r3, #0
 800548a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800548e:	e1ec      	b.n	800586a <UART_SetConfig+0x5a2>
 8005490:	2304      	movs	r3, #4
 8005492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005496:	e1e8      	b.n	800586a <UART_SetConfig+0x5a2>
 8005498:	2308      	movs	r3, #8
 800549a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800549e:	e1e4      	b.n	800586a <UART_SetConfig+0x5a2>
 80054a0:	2310      	movs	r3, #16
 80054a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054a6:	e1e0      	b.n	800586a <UART_SetConfig+0x5a2>
 80054a8:	2320      	movs	r3, #32
 80054aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ae:	e1dc      	b.n	800586a <UART_SetConfig+0x5a2>
 80054b0:	2340      	movs	r3, #64	; 0x40
 80054b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054b6:	e1d8      	b.n	800586a <UART_SetConfig+0x5a2>
 80054b8:	2380      	movs	r3, #128	; 0x80
 80054ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054be:	e1d4      	b.n	800586a <UART_SetConfig+0x5a2>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a51      	ldr	r2, [pc, #324]	; (800560c <UART_SetConfig+0x344>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d130      	bne.n	800552c <UART_SetConfig+0x264>
 80054ca:	4b4e      	ldr	r3, [pc, #312]	; (8005604 <UART_SetConfig+0x33c>)
 80054cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	2b05      	cmp	r3, #5
 80054d4:	d826      	bhi.n	8005524 <UART_SetConfig+0x25c>
 80054d6:	a201      	add	r2, pc, #4	; (adr r2, 80054dc <UART_SetConfig+0x214>)
 80054d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054dc:	080054f5 	.word	0x080054f5
 80054e0:	080054fd 	.word	0x080054fd
 80054e4:	08005505 	.word	0x08005505
 80054e8:	0800550d 	.word	0x0800550d
 80054ec:	08005515 	.word	0x08005515
 80054f0:	0800551d 	.word	0x0800551d
 80054f4:	2300      	movs	r3, #0
 80054f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054fa:	e1b6      	b.n	800586a <UART_SetConfig+0x5a2>
 80054fc:	2304      	movs	r3, #4
 80054fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005502:	e1b2      	b.n	800586a <UART_SetConfig+0x5a2>
 8005504:	2308      	movs	r3, #8
 8005506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800550a:	e1ae      	b.n	800586a <UART_SetConfig+0x5a2>
 800550c:	2310      	movs	r3, #16
 800550e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005512:	e1aa      	b.n	800586a <UART_SetConfig+0x5a2>
 8005514:	2320      	movs	r3, #32
 8005516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800551a:	e1a6      	b.n	800586a <UART_SetConfig+0x5a2>
 800551c:	2340      	movs	r3, #64	; 0x40
 800551e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005522:	e1a2      	b.n	800586a <UART_SetConfig+0x5a2>
 8005524:	2380      	movs	r3, #128	; 0x80
 8005526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800552a:	e19e      	b.n	800586a <UART_SetConfig+0x5a2>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a37      	ldr	r2, [pc, #220]	; (8005610 <UART_SetConfig+0x348>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d130      	bne.n	8005598 <UART_SetConfig+0x2d0>
 8005536:	4b33      	ldr	r3, [pc, #204]	; (8005604 <UART_SetConfig+0x33c>)
 8005538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	2b05      	cmp	r3, #5
 8005540:	d826      	bhi.n	8005590 <UART_SetConfig+0x2c8>
 8005542:	a201      	add	r2, pc, #4	; (adr r2, 8005548 <UART_SetConfig+0x280>)
 8005544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005548:	08005561 	.word	0x08005561
 800554c:	08005569 	.word	0x08005569
 8005550:	08005571 	.word	0x08005571
 8005554:	08005579 	.word	0x08005579
 8005558:	08005581 	.word	0x08005581
 800555c:	08005589 	.word	0x08005589
 8005560:	2300      	movs	r3, #0
 8005562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005566:	e180      	b.n	800586a <UART_SetConfig+0x5a2>
 8005568:	2304      	movs	r3, #4
 800556a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800556e:	e17c      	b.n	800586a <UART_SetConfig+0x5a2>
 8005570:	2308      	movs	r3, #8
 8005572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005576:	e178      	b.n	800586a <UART_SetConfig+0x5a2>
 8005578:	2310      	movs	r3, #16
 800557a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800557e:	e174      	b.n	800586a <UART_SetConfig+0x5a2>
 8005580:	2320      	movs	r3, #32
 8005582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005586:	e170      	b.n	800586a <UART_SetConfig+0x5a2>
 8005588:	2340      	movs	r3, #64	; 0x40
 800558a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800558e:	e16c      	b.n	800586a <UART_SetConfig+0x5a2>
 8005590:	2380      	movs	r3, #128	; 0x80
 8005592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005596:	e168      	b.n	800586a <UART_SetConfig+0x5a2>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a1d      	ldr	r2, [pc, #116]	; (8005614 <UART_SetConfig+0x34c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d142      	bne.n	8005628 <UART_SetConfig+0x360>
 80055a2:	4b18      	ldr	r3, [pc, #96]	; (8005604 <UART_SetConfig+0x33c>)
 80055a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	2b05      	cmp	r3, #5
 80055ac:	d838      	bhi.n	8005620 <UART_SetConfig+0x358>
 80055ae:	a201      	add	r2, pc, #4	; (adr r2, 80055b4 <UART_SetConfig+0x2ec>)
 80055b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b4:	080055cd 	.word	0x080055cd
 80055b8:	080055d5 	.word	0x080055d5
 80055bc:	080055dd 	.word	0x080055dd
 80055c0:	080055e5 	.word	0x080055e5
 80055c4:	080055ed 	.word	0x080055ed
 80055c8:	08005619 	.word	0x08005619
 80055cc:	2300      	movs	r3, #0
 80055ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055d2:	e14a      	b.n	800586a <UART_SetConfig+0x5a2>
 80055d4:	2304      	movs	r3, #4
 80055d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055da:	e146      	b.n	800586a <UART_SetConfig+0x5a2>
 80055dc:	2308      	movs	r3, #8
 80055de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055e2:	e142      	b.n	800586a <UART_SetConfig+0x5a2>
 80055e4:	2310      	movs	r3, #16
 80055e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055ea:	e13e      	b.n	800586a <UART_SetConfig+0x5a2>
 80055ec:	2320      	movs	r3, #32
 80055ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055f2:	e13a      	b.n	800586a <UART_SetConfig+0x5a2>
 80055f4:	cfff69f3 	.word	0xcfff69f3
 80055f8:	58000c00 	.word	0x58000c00
 80055fc:	11fff4ff 	.word	0x11fff4ff
 8005600:	40011000 	.word	0x40011000
 8005604:	58024400 	.word	0x58024400
 8005608:	40004400 	.word	0x40004400
 800560c:	40004800 	.word	0x40004800
 8005610:	40004c00 	.word	0x40004c00
 8005614:	40005000 	.word	0x40005000
 8005618:	2340      	movs	r3, #64	; 0x40
 800561a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800561e:	e124      	b.n	800586a <UART_SetConfig+0x5a2>
 8005620:	2380      	movs	r3, #128	; 0x80
 8005622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005626:	e120      	b.n	800586a <UART_SetConfig+0x5a2>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4acc      	ldr	r2, [pc, #816]	; (8005960 <UART_SetConfig+0x698>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d176      	bne.n	8005720 <UART_SetConfig+0x458>
 8005632:	4bcc      	ldr	r3, [pc, #816]	; (8005964 <UART_SetConfig+0x69c>)
 8005634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005636:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800563a:	2b28      	cmp	r3, #40	; 0x28
 800563c:	d86c      	bhi.n	8005718 <UART_SetConfig+0x450>
 800563e:	a201      	add	r2, pc, #4	; (adr r2, 8005644 <UART_SetConfig+0x37c>)
 8005640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005644:	080056e9 	.word	0x080056e9
 8005648:	08005719 	.word	0x08005719
 800564c:	08005719 	.word	0x08005719
 8005650:	08005719 	.word	0x08005719
 8005654:	08005719 	.word	0x08005719
 8005658:	08005719 	.word	0x08005719
 800565c:	08005719 	.word	0x08005719
 8005660:	08005719 	.word	0x08005719
 8005664:	080056f1 	.word	0x080056f1
 8005668:	08005719 	.word	0x08005719
 800566c:	08005719 	.word	0x08005719
 8005670:	08005719 	.word	0x08005719
 8005674:	08005719 	.word	0x08005719
 8005678:	08005719 	.word	0x08005719
 800567c:	08005719 	.word	0x08005719
 8005680:	08005719 	.word	0x08005719
 8005684:	080056f9 	.word	0x080056f9
 8005688:	08005719 	.word	0x08005719
 800568c:	08005719 	.word	0x08005719
 8005690:	08005719 	.word	0x08005719
 8005694:	08005719 	.word	0x08005719
 8005698:	08005719 	.word	0x08005719
 800569c:	08005719 	.word	0x08005719
 80056a0:	08005719 	.word	0x08005719
 80056a4:	08005701 	.word	0x08005701
 80056a8:	08005719 	.word	0x08005719
 80056ac:	08005719 	.word	0x08005719
 80056b0:	08005719 	.word	0x08005719
 80056b4:	08005719 	.word	0x08005719
 80056b8:	08005719 	.word	0x08005719
 80056bc:	08005719 	.word	0x08005719
 80056c0:	08005719 	.word	0x08005719
 80056c4:	08005709 	.word	0x08005709
 80056c8:	08005719 	.word	0x08005719
 80056cc:	08005719 	.word	0x08005719
 80056d0:	08005719 	.word	0x08005719
 80056d4:	08005719 	.word	0x08005719
 80056d8:	08005719 	.word	0x08005719
 80056dc:	08005719 	.word	0x08005719
 80056e0:	08005719 	.word	0x08005719
 80056e4:	08005711 	.word	0x08005711
 80056e8:	2301      	movs	r3, #1
 80056ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056ee:	e0bc      	b.n	800586a <UART_SetConfig+0x5a2>
 80056f0:	2304      	movs	r3, #4
 80056f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056f6:	e0b8      	b.n	800586a <UART_SetConfig+0x5a2>
 80056f8:	2308      	movs	r3, #8
 80056fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056fe:	e0b4      	b.n	800586a <UART_SetConfig+0x5a2>
 8005700:	2310      	movs	r3, #16
 8005702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005706:	e0b0      	b.n	800586a <UART_SetConfig+0x5a2>
 8005708:	2320      	movs	r3, #32
 800570a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800570e:	e0ac      	b.n	800586a <UART_SetConfig+0x5a2>
 8005710:	2340      	movs	r3, #64	; 0x40
 8005712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005716:	e0a8      	b.n	800586a <UART_SetConfig+0x5a2>
 8005718:	2380      	movs	r3, #128	; 0x80
 800571a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800571e:	e0a4      	b.n	800586a <UART_SetConfig+0x5a2>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a90      	ldr	r2, [pc, #576]	; (8005968 <UART_SetConfig+0x6a0>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d130      	bne.n	800578c <UART_SetConfig+0x4c4>
 800572a:	4b8e      	ldr	r3, [pc, #568]	; (8005964 <UART_SetConfig+0x69c>)
 800572c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800572e:	f003 0307 	and.w	r3, r3, #7
 8005732:	2b05      	cmp	r3, #5
 8005734:	d826      	bhi.n	8005784 <UART_SetConfig+0x4bc>
 8005736:	a201      	add	r2, pc, #4	; (adr r2, 800573c <UART_SetConfig+0x474>)
 8005738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573c:	08005755 	.word	0x08005755
 8005740:	0800575d 	.word	0x0800575d
 8005744:	08005765 	.word	0x08005765
 8005748:	0800576d 	.word	0x0800576d
 800574c:	08005775 	.word	0x08005775
 8005750:	0800577d 	.word	0x0800577d
 8005754:	2300      	movs	r3, #0
 8005756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800575a:	e086      	b.n	800586a <UART_SetConfig+0x5a2>
 800575c:	2304      	movs	r3, #4
 800575e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005762:	e082      	b.n	800586a <UART_SetConfig+0x5a2>
 8005764:	2308      	movs	r3, #8
 8005766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800576a:	e07e      	b.n	800586a <UART_SetConfig+0x5a2>
 800576c:	2310      	movs	r3, #16
 800576e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005772:	e07a      	b.n	800586a <UART_SetConfig+0x5a2>
 8005774:	2320      	movs	r3, #32
 8005776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800577a:	e076      	b.n	800586a <UART_SetConfig+0x5a2>
 800577c:	2340      	movs	r3, #64	; 0x40
 800577e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005782:	e072      	b.n	800586a <UART_SetConfig+0x5a2>
 8005784:	2380      	movs	r3, #128	; 0x80
 8005786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800578a:	e06e      	b.n	800586a <UART_SetConfig+0x5a2>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a76      	ldr	r2, [pc, #472]	; (800596c <UART_SetConfig+0x6a4>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d130      	bne.n	80057f8 <UART_SetConfig+0x530>
 8005796:	4b73      	ldr	r3, [pc, #460]	; (8005964 <UART_SetConfig+0x69c>)
 8005798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800579a:	f003 0307 	and.w	r3, r3, #7
 800579e:	2b05      	cmp	r3, #5
 80057a0:	d826      	bhi.n	80057f0 <UART_SetConfig+0x528>
 80057a2:	a201      	add	r2, pc, #4	; (adr r2, 80057a8 <UART_SetConfig+0x4e0>)
 80057a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a8:	080057c1 	.word	0x080057c1
 80057ac:	080057c9 	.word	0x080057c9
 80057b0:	080057d1 	.word	0x080057d1
 80057b4:	080057d9 	.word	0x080057d9
 80057b8:	080057e1 	.word	0x080057e1
 80057bc:	080057e9 	.word	0x080057e9
 80057c0:	2300      	movs	r3, #0
 80057c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057c6:	e050      	b.n	800586a <UART_SetConfig+0x5a2>
 80057c8:	2304      	movs	r3, #4
 80057ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ce:	e04c      	b.n	800586a <UART_SetConfig+0x5a2>
 80057d0:	2308      	movs	r3, #8
 80057d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057d6:	e048      	b.n	800586a <UART_SetConfig+0x5a2>
 80057d8:	2310      	movs	r3, #16
 80057da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057de:	e044      	b.n	800586a <UART_SetConfig+0x5a2>
 80057e0:	2320      	movs	r3, #32
 80057e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057e6:	e040      	b.n	800586a <UART_SetConfig+0x5a2>
 80057e8:	2340      	movs	r3, #64	; 0x40
 80057ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ee:	e03c      	b.n	800586a <UART_SetConfig+0x5a2>
 80057f0:	2380      	movs	r3, #128	; 0x80
 80057f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057f6:	e038      	b.n	800586a <UART_SetConfig+0x5a2>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a5c      	ldr	r2, [pc, #368]	; (8005970 <UART_SetConfig+0x6a8>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d130      	bne.n	8005864 <UART_SetConfig+0x59c>
 8005802:	4b58      	ldr	r3, [pc, #352]	; (8005964 <UART_SetConfig+0x69c>)
 8005804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005806:	f003 0307 	and.w	r3, r3, #7
 800580a:	2b05      	cmp	r3, #5
 800580c:	d826      	bhi.n	800585c <UART_SetConfig+0x594>
 800580e:	a201      	add	r2, pc, #4	; (adr r2, 8005814 <UART_SetConfig+0x54c>)
 8005810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005814:	0800582d 	.word	0x0800582d
 8005818:	08005835 	.word	0x08005835
 800581c:	0800583d 	.word	0x0800583d
 8005820:	08005845 	.word	0x08005845
 8005824:	0800584d 	.word	0x0800584d
 8005828:	08005855 	.word	0x08005855
 800582c:	2302      	movs	r3, #2
 800582e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005832:	e01a      	b.n	800586a <UART_SetConfig+0x5a2>
 8005834:	2304      	movs	r3, #4
 8005836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800583a:	e016      	b.n	800586a <UART_SetConfig+0x5a2>
 800583c:	2308      	movs	r3, #8
 800583e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005842:	e012      	b.n	800586a <UART_SetConfig+0x5a2>
 8005844:	2310      	movs	r3, #16
 8005846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800584a:	e00e      	b.n	800586a <UART_SetConfig+0x5a2>
 800584c:	2320      	movs	r3, #32
 800584e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005852:	e00a      	b.n	800586a <UART_SetConfig+0x5a2>
 8005854:	2340      	movs	r3, #64	; 0x40
 8005856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800585a:	e006      	b.n	800586a <UART_SetConfig+0x5a2>
 800585c:	2380      	movs	r3, #128	; 0x80
 800585e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005862:	e002      	b.n	800586a <UART_SetConfig+0x5a2>
 8005864:	2380      	movs	r3, #128	; 0x80
 8005866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a40      	ldr	r2, [pc, #256]	; (8005970 <UART_SetConfig+0x6a8>)
 8005870:	4293      	cmp	r3, r2
 8005872:	f040 80ef 	bne.w	8005a54 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005876:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800587a:	2b20      	cmp	r3, #32
 800587c:	dc46      	bgt.n	800590c <UART_SetConfig+0x644>
 800587e:	2b02      	cmp	r3, #2
 8005880:	f2c0 8081 	blt.w	8005986 <UART_SetConfig+0x6be>
 8005884:	3b02      	subs	r3, #2
 8005886:	2b1e      	cmp	r3, #30
 8005888:	d87d      	bhi.n	8005986 <UART_SetConfig+0x6be>
 800588a:	a201      	add	r2, pc, #4	; (adr r2, 8005890 <UART_SetConfig+0x5c8>)
 800588c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005890:	08005913 	.word	0x08005913
 8005894:	08005987 	.word	0x08005987
 8005898:	0800591b 	.word	0x0800591b
 800589c:	08005987 	.word	0x08005987
 80058a0:	08005987 	.word	0x08005987
 80058a4:	08005987 	.word	0x08005987
 80058a8:	0800592b 	.word	0x0800592b
 80058ac:	08005987 	.word	0x08005987
 80058b0:	08005987 	.word	0x08005987
 80058b4:	08005987 	.word	0x08005987
 80058b8:	08005987 	.word	0x08005987
 80058bc:	08005987 	.word	0x08005987
 80058c0:	08005987 	.word	0x08005987
 80058c4:	08005987 	.word	0x08005987
 80058c8:	0800593b 	.word	0x0800593b
 80058cc:	08005987 	.word	0x08005987
 80058d0:	08005987 	.word	0x08005987
 80058d4:	08005987 	.word	0x08005987
 80058d8:	08005987 	.word	0x08005987
 80058dc:	08005987 	.word	0x08005987
 80058e0:	08005987 	.word	0x08005987
 80058e4:	08005987 	.word	0x08005987
 80058e8:	08005987 	.word	0x08005987
 80058ec:	08005987 	.word	0x08005987
 80058f0:	08005987 	.word	0x08005987
 80058f4:	08005987 	.word	0x08005987
 80058f8:	08005987 	.word	0x08005987
 80058fc:	08005987 	.word	0x08005987
 8005900:	08005987 	.word	0x08005987
 8005904:	08005987 	.word	0x08005987
 8005908:	08005979 	.word	0x08005979
 800590c:	2b40      	cmp	r3, #64	; 0x40
 800590e:	d036      	beq.n	800597e <UART_SetConfig+0x6b6>
 8005910:	e039      	b.n	8005986 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005912:	f7fe fca9 	bl	8004268 <HAL_RCCEx_GetD3PCLK1Freq>
 8005916:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005918:	e03b      	b.n	8005992 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800591a:	f107 0314 	add.w	r3, r7, #20
 800591e:	4618      	mov	r0, r3
 8005920:	f7fe fcb8 	bl	8004294 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005928:	e033      	b.n	8005992 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800592a:	f107 0308 	add.w	r3, r7, #8
 800592e:	4618      	mov	r0, r3
 8005930:	f7fe fe04 	bl	800453c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005938:	e02b      	b.n	8005992 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800593a:	4b0a      	ldr	r3, [pc, #40]	; (8005964 <UART_SetConfig+0x69c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0320 	and.w	r3, r3, #32
 8005942:	2b00      	cmp	r3, #0
 8005944:	d009      	beq.n	800595a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005946:	4b07      	ldr	r3, [pc, #28]	; (8005964 <UART_SetConfig+0x69c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	08db      	lsrs	r3, r3, #3
 800594c:	f003 0303 	and.w	r3, r3, #3
 8005950:	4a08      	ldr	r2, [pc, #32]	; (8005974 <UART_SetConfig+0x6ac>)
 8005952:	fa22 f303 	lsr.w	r3, r2, r3
 8005956:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005958:	e01b      	b.n	8005992 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800595a:	4b06      	ldr	r3, [pc, #24]	; (8005974 <UART_SetConfig+0x6ac>)
 800595c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800595e:	e018      	b.n	8005992 <UART_SetConfig+0x6ca>
 8005960:	40011400 	.word	0x40011400
 8005964:	58024400 	.word	0x58024400
 8005968:	40007800 	.word	0x40007800
 800596c:	40007c00 	.word	0x40007c00
 8005970:	58000c00 	.word	0x58000c00
 8005974:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005978:	4bc4      	ldr	r3, [pc, #784]	; (8005c8c <UART_SetConfig+0x9c4>)
 800597a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800597c:	e009      	b.n	8005992 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800597e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005982:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005984:	e005      	b.n	8005992 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005990:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 81da 	beq.w	8005d4e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	4abc      	ldr	r2, [pc, #752]	; (8005c90 <UART_SetConfig+0x9c8>)
 80059a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059a4:	461a      	mov	r2, r3
 80059a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80059ac:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	4613      	mov	r3, r2
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	4413      	add	r3, r2
 80059b8:	6a3a      	ldr	r2, [r7, #32]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d305      	bcc.n	80059ca <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059c4:	6a3a      	ldr	r2, [r7, #32]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d903      	bls.n	80059d2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80059d0:	e1bd      	b.n	8005d4e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d4:	4618      	mov	r0, r3
 80059d6:	f04f 0100 	mov.w	r1, #0
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	4aac      	ldr	r2, [pc, #688]	; (8005c90 <UART_SetConfig+0x9c8>)
 80059e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	f04f 0300 	mov.w	r3, #0
 80059ea:	f7fa fcc9 	bl	8000380 <__aeabi_uldivmod>
 80059ee:	4602      	mov	r2, r0
 80059f0:	460b      	mov	r3, r1
 80059f2:	4610      	mov	r0, r2
 80059f4:	4619      	mov	r1, r3
 80059f6:	f04f 0200 	mov.w	r2, #0
 80059fa:	f04f 0300 	mov.w	r3, #0
 80059fe:	020b      	lsls	r3, r1, #8
 8005a00:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a04:	0202      	lsls	r2, r0, #8
 8005a06:	6879      	ldr	r1, [r7, #4]
 8005a08:	6849      	ldr	r1, [r1, #4]
 8005a0a:	0849      	lsrs	r1, r1, #1
 8005a0c:	4608      	mov	r0, r1
 8005a0e:	f04f 0100 	mov.w	r1, #0
 8005a12:	1814      	adds	r4, r2, r0
 8005a14:	eb43 0501 	adc.w	r5, r3, r1
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	f04f 0300 	mov.w	r3, #0
 8005a22:	4620      	mov	r0, r4
 8005a24:	4629      	mov	r1, r5
 8005a26:	f7fa fcab 	bl	8000380 <__aeabi_uldivmod>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	4613      	mov	r3, r2
 8005a30:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a38:	d308      	bcc.n	8005a4c <UART_SetConfig+0x784>
 8005a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a40:	d204      	bcs.n	8005a4c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a48:	60da      	str	r2, [r3, #12]
 8005a4a:	e180      	b.n	8005d4e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005a52:	e17c      	b.n	8005d4e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a5c:	f040 80be 	bne.w	8005bdc <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8005a60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a64:	2b20      	cmp	r3, #32
 8005a66:	dc49      	bgt.n	8005afc <UART_SetConfig+0x834>
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	db7c      	blt.n	8005b66 <UART_SetConfig+0x89e>
 8005a6c:	2b20      	cmp	r3, #32
 8005a6e:	d87a      	bhi.n	8005b66 <UART_SetConfig+0x89e>
 8005a70:	a201      	add	r2, pc, #4	; (adr r2, 8005a78 <UART_SetConfig+0x7b0>)
 8005a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a76:	bf00      	nop
 8005a78:	08005b03 	.word	0x08005b03
 8005a7c:	08005b0b 	.word	0x08005b0b
 8005a80:	08005b67 	.word	0x08005b67
 8005a84:	08005b67 	.word	0x08005b67
 8005a88:	08005b13 	.word	0x08005b13
 8005a8c:	08005b67 	.word	0x08005b67
 8005a90:	08005b67 	.word	0x08005b67
 8005a94:	08005b67 	.word	0x08005b67
 8005a98:	08005b23 	.word	0x08005b23
 8005a9c:	08005b67 	.word	0x08005b67
 8005aa0:	08005b67 	.word	0x08005b67
 8005aa4:	08005b67 	.word	0x08005b67
 8005aa8:	08005b67 	.word	0x08005b67
 8005aac:	08005b67 	.word	0x08005b67
 8005ab0:	08005b67 	.word	0x08005b67
 8005ab4:	08005b67 	.word	0x08005b67
 8005ab8:	08005b33 	.word	0x08005b33
 8005abc:	08005b67 	.word	0x08005b67
 8005ac0:	08005b67 	.word	0x08005b67
 8005ac4:	08005b67 	.word	0x08005b67
 8005ac8:	08005b67 	.word	0x08005b67
 8005acc:	08005b67 	.word	0x08005b67
 8005ad0:	08005b67 	.word	0x08005b67
 8005ad4:	08005b67 	.word	0x08005b67
 8005ad8:	08005b67 	.word	0x08005b67
 8005adc:	08005b67 	.word	0x08005b67
 8005ae0:	08005b67 	.word	0x08005b67
 8005ae4:	08005b67 	.word	0x08005b67
 8005ae8:	08005b67 	.word	0x08005b67
 8005aec:	08005b67 	.word	0x08005b67
 8005af0:	08005b67 	.word	0x08005b67
 8005af4:	08005b67 	.word	0x08005b67
 8005af8:	08005b59 	.word	0x08005b59
 8005afc:	2b40      	cmp	r3, #64	; 0x40
 8005afe:	d02e      	beq.n	8005b5e <UART_SetConfig+0x896>
 8005b00:	e031      	b.n	8005b66 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b02:	f7fd fc45 	bl	8003390 <HAL_RCC_GetPCLK1Freq>
 8005b06:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005b08:	e033      	b.n	8005b72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b0a:	f7fd fc57 	bl	80033bc <HAL_RCC_GetPCLK2Freq>
 8005b0e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005b10:	e02f      	b.n	8005b72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b12:	f107 0314 	add.w	r3, r7, #20
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fe fbbc 	bl	8004294 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b20:	e027      	b.n	8005b72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b22:	f107 0308 	add.w	r3, r7, #8
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fe fd08 	bl	800453c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b30:	e01f      	b.n	8005b72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b32:	4b58      	ldr	r3, [pc, #352]	; (8005c94 <UART_SetConfig+0x9cc>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0320 	and.w	r3, r3, #32
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d009      	beq.n	8005b52 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b3e:	4b55      	ldr	r3, [pc, #340]	; (8005c94 <UART_SetConfig+0x9cc>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	08db      	lsrs	r3, r3, #3
 8005b44:	f003 0303 	and.w	r3, r3, #3
 8005b48:	4a53      	ldr	r2, [pc, #332]	; (8005c98 <UART_SetConfig+0x9d0>)
 8005b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b50:	e00f      	b.n	8005b72 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8005b52:	4b51      	ldr	r3, [pc, #324]	; (8005c98 <UART_SetConfig+0x9d0>)
 8005b54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b56:	e00c      	b.n	8005b72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b58:	4b4c      	ldr	r3, [pc, #304]	; (8005c8c <UART_SetConfig+0x9c4>)
 8005b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b5c:	e009      	b.n	8005b72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b64:	e005      	b.n	8005b72 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005b70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 80ea 	beq.w	8005d4e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	4a44      	ldr	r2, [pc, #272]	; (8005c90 <UART_SetConfig+0x9c8>)
 8005b80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b84:	461a      	mov	r2, r3
 8005b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b88:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b8c:	005a      	lsls	r2, r3, #1
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	085b      	lsrs	r3, r3, #1
 8005b94:	441a      	add	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba2:	2b0f      	cmp	r3, #15
 8005ba4:	d916      	bls.n	8005bd4 <UART_SetConfig+0x90c>
 8005ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bac:	d212      	bcs.n	8005bd4 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	f023 030f 	bic.w	r3, r3, #15
 8005bb6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bba:	085b      	lsrs	r3, r3, #1
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005bd0:	60da      	str	r2, [r3, #12]
 8005bd2:	e0bc      	b.n	8005d4e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005bda:	e0b8      	b.n	8005d4e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005be0:	2b20      	cmp	r3, #32
 8005be2:	dc4b      	bgt.n	8005c7c <UART_SetConfig+0x9b4>
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f2c0 8087 	blt.w	8005cf8 <UART_SetConfig+0xa30>
 8005bea:	2b20      	cmp	r3, #32
 8005bec:	f200 8084 	bhi.w	8005cf8 <UART_SetConfig+0xa30>
 8005bf0:	a201      	add	r2, pc, #4	; (adr r2, 8005bf8 <UART_SetConfig+0x930>)
 8005bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf6:	bf00      	nop
 8005bf8:	08005c83 	.word	0x08005c83
 8005bfc:	08005c9d 	.word	0x08005c9d
 8005c00:	08005cf9 	.word	0x08005cf9
 8005c04:	08005cf9 	.word	0x08005cf9
 8005c08:	08005ca5 	.word	0x08005ca5
 8005c0c:	08005cf9 	.word	0x08005cf9
 8005c10:	08005cf9 	.word	0x08005cf9
 8005c14:	08005cf9 	.word	0x08005cf9
 8005c18:	08005cb5 	.word	0x08005cb5
 8005c1c:	08005cf9 	.word	0x08005cf9
 8005c20:	08005cf9 	.word	0x08005cf9
 8005c24:	08005cf9 	.word	0x08005cf9
 8005c28:	08005cf9 	.word	0x08005cf9
 8005c2c:	08005cf9 	.word	0x08005cf9
 8005c30:	08005cf9 	.word	0x08005cf9
 8005c34:	08005cf9 	.word	0x08005cf9
 8005c38:	08005cc5 	.word	0x08005cc5
 8005c3c:	08005cf9 	.word	0x08005cf9
 8005c40:	08005cf9 	.word	0x08005cf9
 8005c44:	08005cf9 	.word	0x08005cf9
 8005c48:	08005cf9 	.word	0x08005cf9
 8005c4c:	08005cf9 	.word	0x08005cf9
 8005c50:	08005cf9 	.word	0x08005cf9
 8005c54:	08005cf9 	.word	0x08005cf9
 8005c58:	08005cf9 	.word	0x08005cf9
 8005c5c:	08005cf9 	.word	0x08005cf9
 8005c60:	08005cf9 	.word	0x08005cf9
 8005c64:	08005cf9 	.word	0x08005cf9
 8005c68:	08005cf9 	.word	0x08005cf9
 8005c6c:	08005cf9 	.word	0x08005cf9
 8005c70:	08005cf9 	.word	0x08005cf9
 8005c74:	08005cf9 	.word	0x08005cf9
 8005c78:	08005ceb 	.word	0x08005ceb
 8005c7c:	2b40      	cmp	r3, #64	; 0x40
 8005c7e:	d037      	beq.n	8005cf0 <UART_SetConfig+0xa28>
 8005c80:	e03a      	b.n	8005cf8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c82:	f7fd fb85 	bl	8003390 <HAL_RCC_GetPCLK1Freq>
 8005c86:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005c88:	e03c      	b.n	8005d04 <UART_SetConfig+0xa3c>
 8005c8a:	bf00      	nop
 8005c8c:	003d0900 	.word	0x003d0900
 8005c90:	0800a06c 	.word	0x0800a06c
 8005c94:	58024400 	.word	0x58024400
 8005c98:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c9c:	f7fd fb8e 	bl	80033bc <HAL_RCC_GetPCLK2Freq>
 8005ca0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005ca2:	e02f      	b.n	8005d04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ca4:	f107 0314 	add.w	r3, r7, #20
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7fe faf3 	bl	8004294 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cb2:	e027      	b.n	8005d04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cb4:	f107 0308 	add.w	r3, r7, #8
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7fe fc3f 	bl	800453c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cc2:	e01f      	b.n	8005d04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cc4:	4b2c      	ldr	r3, [pc, #176]	; (8005d78 <UART_SetConfig+0xab0>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0320 	and.w	r3, r3, #32
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d009      	beq.n	8005ce4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005cd0:	4b29      	ldr	r3, [pc, #164]	; (8005d78 <UART_SetConfig+0xab0>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	08db      	lsrs	r3, r3, #3
 8005cd6:	f003 0303 	and.w	r3, r3, #3
 8005cda:	4a28      	ldr	r2, [pc, #160]	; (8005d7c <UART_SetConfig+0xab4>)
 8005cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ce2:	e00f      	b.n	8005d04 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8005ce4:	4b25      	ldr	r3, [pc, #148]	; (8005d7c <UART_SetConfig+0xab4>)
 8005ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ce8:	e00c      	b.n	8005d04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005cea:	4b25      	ldr	r3, [pc, #148]	; (8005d80 <UART_SetConfig+0xab8>)
 8005cec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cee:	e009      	b.n	8005d04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cf6:	e005      	b.n	8005d04 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005d02:	bf00      	nop
    }

    if (pclk != 0U)
 8005d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d021      	beq.n	8005d4e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0e:	4a1d      	ldr	r2, [pc, #116]	; (8005d84 <UART_SetConfig+0xabc>)
 8005d10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d14:	461a      	mov	r2, r3
 8005d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d18:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	085b      	lsrs	r3, r3, #1
 8005d22:	441a      	add	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d2c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d30:	2b0f      	cmp	r3, #15
 8005d32:	d909      	bls.n	8005d48 <UART_SetConfig+0xa80>
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d3a:	d205      	bcs.n	8005d48 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	60da      	str	r2, [r3, #12]
 8005d46:	e002      	b.n	8005d4e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005d6a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3738      	adds	r7, #56	; 0x38
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bdb0      	pop	{r4, r5, r7, pc}
 8005d76:	bf00      	nop
 8005d78:	58024400 	.word	0x58024400
 8005d7c:	03d09000 	.word	0x03d09000
 8005d80:	003d0900 	.word	0x003d0900
 8005d84:	0800a06c 	.word	0x0800a06c

08005d88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00a      	beq.n	8005db2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd8:	f003 0304 	and.w	r3, r3, #4
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00a      	beq.n	8005df6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfa:	f003 0308 	and.w	r3, r3, #8
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00a      	beq.n	8005e18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	430a      	orrs	r2, r1
 8005e16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1c:	f003 0310 	and.w	r3, r3, #16
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00a      	beq.n	8005e3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3e:	f003 0320 	and.w	r3, r3, #32
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d01a      	beq.n	8005e9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e86:	d10a      	bne.n	8005e9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00a      	beq.n	8005ec0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	605a      	str	r2, [r3, #4]
  }
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af02      	add	r7, sp, #8
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005edc:	f7fb f9d6 	bl	800128c <HAL_GetTick>
 8005ee0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0308 	and.w	r3, r3, #8
 8005eec:	2b08      	cmp	r3, #8
 8005eee:	d10e      	bne.n	8005f0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ef0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f82f 	bl	8005f62 <UART_WaitOnFlagUntilTimeout>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e025      	b.n	8005f5a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0304 	and.w	r3, r3, #4
 8005f18:	2b04      	cmp	r3, #4
 8005f1a:	d10e      	bne.n	8005f3a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f819 	bl	8005f62 <UART_WaitOnFlagUntilTimeout>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e00f      	b.n	8005f5a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2220      	movs	r2, #32
 8005f46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b09c      	sub	sp, #112	; 0x70
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	60b9      	str	r1, [r7, #8]
 8005f6c:	603b      	str	r3, [r7, #0]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f72:	e0a9      	b.n	80060c8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7a:	f000 80a5 	beq.w	80060c8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f7e:	f7fb f985 	bl	800128c <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d302      	bcc.n	8005f94 <UART_WaitOnFlagUntilTimeout+0x32>
 8005f8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d140      	bne.n	8006016 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f9c:	e853 3f00 	ldrex	r3, [r3]
 8005fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fa4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fa8:	667b      	str	r3, [r7, #100]	; 0x64
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fb4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005fb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fba:	e841 2300 	strex	r3, r2, [r1]
 8005fbe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1e6      	bne.n	8005f94 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	3308      	adds	r3, #8
 8005fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd0:	e853 3f00 	ldrex	r3, [r3]
 8005fd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd8:	f023 0301 	bic.w	r3, r3, #1
 8005fdc:	663b      	str	r3, [r7, #96]	; 0x60
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	3308      	adds	r3, #8
 8005fe4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005fe6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005fe8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005fec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fee:	e841 2300 	strex	r3, r2, [r1]
 8005ff2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1e5      	bne.n	8005fc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2220      	movs	r2, #32
 8006006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e069      	b.n	80060ea <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0304 	and.w	r3, r3, #4
 8006020:	2b00      	cmp	r3, #0
 8006022:	d051      	beq.n	80060c8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800602e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006032:	d149      	bne.n	80060c8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800603c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006046:	e853 3f00 	ldrex	r3, [r3]
 800604a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006052:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	461a      	mov	r2, r3
 800605a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800605c:	637b      	str	r3, [r7, #52]	; 0x34
 800605e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006060:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006062:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006064:	e841 2300 	strex	r3, r2, [r1]
 8006068:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800606a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1e6      	bne.n	800603e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3308      	adds	r3, #8
 8006076:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	e853 3f00 	ldrex	r3, [r3]
 800607e:	613b      	str	r3, [r7, #16]
   return(result);
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f023 0301 	bic.w	r3, r3, #1
 8006086:	66bb      	str	r3, [r7, #104]	; 0x68
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3308      	adds	r3, #8
 800608e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006090:	623a      	str	r2, [r7, #32]
 8006092:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006094:	69f9      	ldr	r1, [r7, #28]
 8006096:	6a3a      	ldr	r2, [r7, #32]
 8006098:	e841 2300 	strex	r3, r2, [r1]
 800609c:	61bb      	str	r3, [r7, #24]
   return(result);
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1e5      	bne.n	8006070 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2220      	movs	r2, #32
 80060a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2220      	movs	r2, #32
 80060b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2220      	movs	r2, #32
 80060b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e010      	b.n	80060ea <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	69da      	ldr	r2, [r3, #28]
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	4013      	ands	r3, r2
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	bf0c      	ite	eq
 80060d8:	2301      	moveq	r3, #1
 80060da:	2300      	movne	r3, #0
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	461a      	mov	r2, r3
 80060e0:	79fb      	ldrb	r3, [r7, #7]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	f43f af46 	beq.w	8005f74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3770      	adds	r7, #112	; 0x70
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
	...

080060f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b095      	sub	sp, #84	; 0x54
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006104:	e853 3f00 	ldrex	r3, [r3]
 8006108:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800610a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006110:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	461a      	mov	r2, r3
 8006118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800611a:	643b      	str	r3, [r7, #64]	; 0x40
 800611c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006120:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006122:	e841 2300 	strex	r3, r2, [r1]
 8006126:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1e6      	bne.n	80060fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3308      	adds	r3, #8
 8006134:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006136:	6a3b      	ldr	r3, [r7, #32]
 8006138:	e853 3f00 	ldrex	r3, [r3]
 800613c:	61fb      	str	r3, [r7, #28]
   return(result);
 800613e:	69fa      	ldr	r2, [r7, #28]
 8006140:	4b1e      	ldr	r3, [pc, #120]	; (80061bc <UART_EndRxTransfer+0xc8>)
 8006142:	4013      	ands	r3, r2
 8006144:	64bb      	str	r3, [r7, #72]	; 0x48
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	3308      	adds	r3, #8
 800614c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800614e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006150:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006152:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006156:	e841 2300 	strex	r3, r2, [r1]
 800615a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1e5      	bne.n	800612e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006166:	2b01      	cmp	r3, #1
 8006168:	d118      	bne.n	800619c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	e853 3f00 	ldrex	r3, [r3]
 8006176:	60bb      	str	r3, [r7, #8]
   return(result);
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	f023 0310 	bic.w	r3, r3, #16
 800617e:	647b      	str	r3, [r7, #68]	; 0x44
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	461a      	mov	r2, r3
 8006186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006188:	61bb      	str	r3, [r7, #24]
 800618a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618c:	6979      	ldr	r1, [r7, #20]
 800618e:	69ba      	ldr	r2, [r7, #24]
 8006190:	e841 2300 	strex	r3, r2, [r1]
 8006194:	613b      	str	r3, [r7, #16]
   return(result);
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1e6      	bne.n	800616a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2220      	movs	r2, #32
 80061a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	671a      	str	r2, [r3, #112]	; 0x70
}
 80061b0:	bf00      	nop
 80061b2:	3754      	adds	r7, #84	; 0x54
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	effffffe 	.word	0xeffffffe

080061c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f7ff f85c 	bl	800529c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061e4:	bf00      	nop
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b088      	sub	sp, #32
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	e853 3f00 	ldrex	r3, [r3]
 8006200:	60bb      	str	r3, [r7, #8]
   return(result);
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006208:	61fb      	str	r3, [r7, #28]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	461a      	mov	r2, r3
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	61bb      	str	r3, [r7, #24]
 8006214:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006216:	6979      	ldr	r1, [r7, #20]
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	e841 2300 	strex	r3, r2, [r1]
 800621e:	613b      	str	r3, [r7, #16]
   return(result);
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1e6      	bne.n	80061f4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2220      	movs	r2, #32
 800622a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7ff f827 	bl	8005288 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800623a:	bf00      	nop
 800623c:	3720      	adds	r7, #32
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800624a:	bf00      	nop
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006256:	b480      	push	{r7}
 8006258:	b083      	sub	sp, #12
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800625e:	bf00      	nop
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800626a:	b480      	push	{r7}
 800626c:	b083      	sub	sp, #12
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006272:	bf00      	nop
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800627e:	b480      	push	{r7}
 8006280:	b085      	sub	sp, #20
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800628c:	2b01      	cmp	r3, #1
 800628e:	d101      	bne.n	8006294 <HAL_UARTEx_DisableFifoMode+0x16>
 8006290:	2302      	movs	r3, #2
 8006292:	e027      	b.n	80062e4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2224      	movs	r2, #36	; 0x24
 80062a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 0201 	bic.w	r2, r2, #1
 80062ba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80062c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2220      	movs	r2, #32
 80062d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006300:	2b01      	cmp	r3, #1
 8006302:	d101      	bne.n	8006308 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006304:	2302      	movs	r3, #2
 8006306:	e02d      	b.n	8006364 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2224      	movs	r2, #36	; 0x24
 8006314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f022 0201 	bic.w	r2, r2, #1
 800632e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	430a      	orrs	r2, r1
 8006342:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f84f 	bl	80063e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2220      	movs	r2, #32
 8006356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800637c:	2b01      	cmp	r3, #1
 800637e:	d101      	bne.n	8006384 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006380:	2302      	movs	r3, #2
 8006382:	e02d      	b.n	80063e0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2224      	movs	r2, #36	; 0x24
 8006390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 0201 	bic.w	r2, r2, #1
 80063aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	683a      	ldr	r2, [r7, #0]
 80063bc:	430a      	orrs	r2, r1
 80063be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f811 	bl	80063e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2220      	movs	r2, #32
 80063d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d108      	bne.n	800640a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006408:	e031      	b.n	800646e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800640a:	2310      	movs	r3, #16
 800640c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800640e:	2310      	movs	r3, #16
 8006410:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	0e5b      	lsrs	r3, r3, #25
 800641a:	b2db      	uxtb	r3, r3
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	0f5b      	lsrs	r3, r3, #29
 800642a:	b2db      	uxtb	r3, r3
 800642c:	f003 0307 	and.w	r3, r3, #7
 8006430:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006432:	7bbb      	ldrb	r3, [r7, #14]
 8006434:	7b3a      	ldrb	r2, [r7, #12]
 8006436:	4911      	ldr	r1, [pc, #68]	; (800647c <UARTEx_SetNbDataToProcess+0x94>)
 8006438:	5c8a      	ldrb	r2, [r1, r2]
 800643a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800643e:	7b3a      	ldrb	r2, [r7, #12]
 8006440:	490f      	ldr	r1, [pc, #60]	; (8006480 <UARTEx_SetNbDataToProcess+0x98>)
 8006442:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006444:	fb93 f3f2 	sdiv	r3, r3, r2
 8006448:	b29a      	uxth	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	7b7a      	ldrb	r2, [r7, #13]
 8006454:	4909      	ldr	r1, [pc, #36]	; (800647c <UARTEx_SetNbDataToProcess+0x94>)
 8006456:	5c8a      	ldrb	r2, [r1, r2]
 8006458:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800645c:	7b7a      	ldrb	r2, [r7, #13]
 800645e:	4908      	ldr	r1, [pc, #32]	; (8006480 <UARTEx_SetNbDataToProcess+0x98>)
 8006460:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006462:	fb93 f3f2 	sdiv	r3, r3, r2
 8006466:	b29a      	uxth	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800646e:	bf00      	nop
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	0800a084 	.word	0x0800a084
 8006480:	0800a08c 	.word	0x0800a08c

08006484 <__NVIC_SetPriority>:
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	4603      	mov	r3, r0
 800648c:	6039      	str	r1, [r7, #0]
 800648e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006490:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006494:	2b00      	cmp	r3, #0
 8006496:	db0a      	blt.n	80064ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	b2da      	uxtb	r2, r3
 800649c:	490c      	ldr	r1, [pc, #48]	; (80064d0 <__NVIC_SetPriority+0x4c>)
 800649e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064a2:	0112      	lsls	r2, r2, #4
 80064a4:	b2d2      	uxtb	r2, r2
 80064a6:	440b      	add	r3, r1
 80064a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80064ac:	e00a      	b.n	80064c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	4908      	ldr	r1, [pc, #32]	; (80064d4 <__NVIC_SetPriority+0x50>)
 80064b4:	88fb      	ldrh	r3, [r7, #6]
 80064b6:	f003 030f 	and.w	r3, r3, #15
 80064ba:	3b04      	subs	r3, #4
 80064bc:	0112      	lsls	r2, r2, #4
 80064be:	b2d2      	uxtb	r2, r2
 80064c0:	440b      	add	r3, r1
 80064c2:	761a      	strb	r2, [r3, #24]
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	e000e100 	.word	0xe000e100
 80064d4:	e000ed00 	.word	0xe000ed00

080064d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80064d8:	b580      	push	{r7, lr}
 80064da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80064dc:	2100      	movs	r1, #0
 80064de:	f06f 0004 	mvn.w	r0, #4
 80064e2:	f7ff ffcf 	bl	8006484 <__NVIC_SetPriority>
#endif
}
 80064e6:	bf00      	nop
 80064e8:	bd80      	pop	{r7, pc}
	...

080064ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064f2:	f3ef 8305 	mrs	r3, IPSR
 80064f6:	603b      	str	r3, [r7, #0]
  return(result);
 80064f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d003      	beq.n	8006506 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80064fe:	f06f 0305 	mvn.w	r3, #5
 8006502:	607b      	str	r3, [r7, #4]
 8006504:	e00c      	b.n	8006520 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006506:	4b0a      	ldr	r3, [pc, #40]	; (8006530 <osKernelInitialize+0x44>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d105      	bne.n	800651a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800650e:	4b08      	ldr	r3, [pc, #32]	; (8006530 <osKernelInitialize+0x44>)
 8006510:	2201      	movs	r2, #1
 8006512:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006514:	2300      	movs	r3, #0
 8006516:	607b      	str	r3, [r7, #4]
 8006518:	e002      	b.n	8006520 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800651a:	f04f 33ff 	mov.w	r3, #4294967295
 800651e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006520:	687b      	ldr	r3, [r7, #4]
}
 8006522:	4618      	mov	r0, r3
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	240000bc 	.word	0x240000bc

08006534 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800653a:	f3ef 8305 	mrs	r3, IPSR
 800653e:	603b      	str	r3, [r7, #0]
  return(result);
 8006540:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006546:	f06f 0305 	mvn.w	r3, #5
 800654a:	607b      	str	r3, [r7, #4]
 800654c:	e010      	b.n	8006570 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800654e:	4b0b      	ldr	r3, [pc, #44]	; (800657c <osKernelStart+0x48>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d109      	bne.n	800656a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006556:	f7ff ffbf 	bl	80064d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800655a:	4b08      	ldr	r3, [pc, #32]	; (800657c <osKernelStart+0x48>)
 800655c:	2202      	movs	r2, #2
 800655e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006560:	f001 fcb2 	bl	8007ec8 <vTaskStartScheduler>
      stat = osOK;
 8006564:	2300      	movs	r3, #0
 8006566:	607b      	str	r3, [r7, #4]
 8006568:	e002      	b.n	8006570 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800656a:	f04f 33ff 	mov.w	r3, #4294967295
 800656e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006570:	687b      	ldr	r3, [r7, #4]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	240000bc 	.word	0x240000bc

08006580 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006580:	b580      	push	{r7, lr}
 8006582:	b08e      	sub	sp, #56	; 0x38
 8006584:	af04      	add	r7, sp, #16
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800658c:	2300      	movs	r3, #0
 800658e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006590:	f3ef 8305 	mrs	r3, IPSR
 8006594:	617b      	str	r3, [r7, #20]
  return(result);
 8006596:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006598:	2b00      	cmp	r3, #0
 800659a:	d17e      	bne.n	800669a <osThreadNew+0x11a>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d07b      	beq.n	800669a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80065a2:	2380      	movs	r3, #128	; 0x80
 80065a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80065a6:	2318      	movs	r3, #24
 80065a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80065aa:	2300      	movs	r3, #0
 80065ac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80065ae:	f04f 33ff 	mov.w	r3, #4294967295
 80065b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d045      	beq.n	8006646 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d002      	beq.n	80065c8 <osThreadNew+0x48>
        name = attr->name;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d008      	beq.n	80065ee <osThreadNew+0x6e>
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	2b38      	cmp	r3, #56	; 0x38
 80065e0:	d805      	bhi.n	80065ee <osThreadNew+0x6e>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <osThreadNew+0x72>
        return (NULL);
 80065ee:	2300      	movs	r3, #0
 80065f0:	e054      	b.n	800669c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	089b      	lsrs	r3, r3, #2
 8006600:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00e      	beq.n	8006628 <osThreadNew+0xa8>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	2bbb      	cmp	r3, #187	; 0xbb
 8006610:	d90a      	bls.n	8006628 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006616:	2b00      	cmp	r3, #0
 8006618:	d006      	beq.n	8006628 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <osThreadNew+0xa8>
        mem = 1;
 8006622:	2301      	movs	r3, #1
 8006624:	61bb      	str	r3, [r7, #24]
 8006626:	e010      	b.n	800664a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10c      	bne.n	800664a <osThreadNew+0xca>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d108      	bne.n	800664a <osThreadNew+0xca>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d104      	bne.n	800664a <osThreadNew+0xca>
          mem = 0;
 8006640:	2300      	movs	r3, #0
 8006642:	61bb      	str	r3, [r7, #24]
 8006644:	e001      	b.n	800664a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006646:	2300      	movs	r3, #0
 8006648:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d110      	bne.n	8006672 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006658:	9202      	str	r2, [sp, #8]
 800665a:	9301      	str	r3, [sp, #4]
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	6a3a      	ldr	r2, [r7, #32]
 8006664:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f001 fa42 	bl	8007af0 <xTaskCreateStatic>
 800666c:	4603      	mov	r3, r0
 800666e:	613b      	str	r3, [r7, #16]
 8006670:	e013      	b.n	800669a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d110      	bne.n	800669a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	b29a      	uxth	r2, r3
 800667c:	f107 0310 	add.w	r3, r7, #16
 8006680:	9301      	str	r3, [sp, #4]
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f001 fa8d 	bl	8007baa <xTaskCreate>
 8006690:	4603      	mov	r3, r0
 8006692:	2b01      	cmp	r3, #1
 8006694:	d001      	beq.n	800669a <osThreadNew+0x11a>
            hTask = NULL;
 8006696:	2300      	movs	r3, #0
 8006698:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800669a:	693b      	ldr	r3, [r7, #16]
}
 800669c:	4618      	mov	r0, r3
 800669e:	3728      	adds	r7, #40	; 0x28
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066ac:	f3ef 8305 	mrs	r3, IPSR
 80066b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80066b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d003      	beq.n	80066c0 <osDelay+0x1c>
    stat = osErrorISR;
 80066b8:	f06f 0305 	mvn.w	r3, #5
 80066bc:	60fb      	str	r3, [r7, #12]
 80066be:	e007      	b.n	80066d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80066c0:	2300      	movs	r3, #0
 80066c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d002      	beq.n	80066d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f001 fbc8 	bl	8007e60 <vTaskDelay>
    }
  }

  return (stat);
 80066d0:	68fb      	ldr	r3, [r7, #12]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
	...

080066dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	4a07      	ldr	r2, [pc, #28]	; (8006708 <vApplicationGetIdleTaskMemory+0x2c>)
 80066ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	4a06      	ldr	r2, [pc, #24]	; (800670c <vApplicationGetIdleTaskMemory+0x30>)
 80066f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2280      	movs	r2, #128	; 0x80
 80066f8:	601a      	str	r2, [r3, #0]
}
 80066fa:	bf00      	nop
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	240000c0 	.word	0x240000c0
 800670c:	2400017c 	.word	0x2400017c

08006710 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4a07      	ldr	r2, [pc, #28]	; (800673c <vApplicationGetTimerTaskMemory+0x2c>)
 8006720:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	4a06      	ldr	r2, [pc, #24]	; (8006740 <vApplicationGetTimerTaskMemory+0x30>)
 8006726:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800672e:	601a      	str	r2, [r3, #0]
}
 8006730:	bf00      	nop
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	2400037c 	.word	0x2400037c
 8006740:	24000438 	.word	0x24000438

08006744 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b08a      	sub	sp, #40	; 0x28
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800674c:	2300      	movs	r3, #0
 800674e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006750:	f001 fc2a 	bl	8007fa8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006754:	4b5b      	ldr	r3, [pc, #364]	; (80068c4 <pvPortMalloc+0x180>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800675c:	f000 f920 	bl	80069a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006760:	4b59      	ldr	r3, [pc, #356]	; (80068c8 <pvPortMalloc+0x184>)
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4013      	ands	r3, r2
 8006768:	2b00      	cmp	r3, #0
 800676a:	f040 8093 	bne.w	8006894 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d01d      	beq.n	80067b0 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006774:	2208      	movs	r2, #8
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4413      	add	r3, r2
 800677a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f003 0307 	and.w	r3, r3, #7
 8006782:	2b00      	cmp	r3, #0
 8006784:	d014      	beq.n	80067b0 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f023 0307 	bic.w	r3, r3, #7
 800678c:	3308      	adds	r3, #8
 800678e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f003 0307 	and.w	r3, r3, #7
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00a      	beq.n	80067b0 <pvPortMalloc+0x6c>
	__asm volatile
 800679a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	617b      	str	r3, [r7, #20]
}
 80067ac:	bf00      	nop
 80067ae:	e7fe      	b.n	80067ae <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d06e      	beq.n	8006894 <pvPortMalloc+0x150>
 80067b6:	4b45      	ldr	r3, [pc, #276]	; (80068cc <pvPortMalloc+0x188>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d869      	bhi.n	8006894 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80067c0:	4b43      	ldr	r3, [pc, #268]	; (80068d0 <pvPortMalloc+0x18c>)
 80067c2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80067c4:	4b42      	ldr	r3, [pc, #264]	; (80068d0 <pvPortMalloc+0x18c>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067ca:	e004      	b.n	80067d6 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d903      	bls.n	80067e8 <pvPortMalloc+0xa4>
 80067e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1f1      	bne.n	80067cc <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80067e8:	4b36      	ldr	r3, [pc, #216]	; (80068c4 <pvPortMalloc+0x180>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d050      	beq.n	8006894 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2208      	movs	r2, #8
 80067f8:	4413      	add	r3, r2
 80067fa:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	6a3b      	ldr	r3, [r7, #32]
 8006802:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	1ad2      	subs	r2, r2, r3
 800680c:	2308      	movs	r3, #8
 800680e:	005b      	lsls	r3, r3, #1
 8006810:	429a      	cmp	r2, r3
 8006812:	d91f      	bls.n	8006854 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4413      	add	r3, r2
 800681a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	f003 0307 	and.w	r3, r3, #7
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00a      	beq.n	800683c <pvPortMalloc+0xf8>
	__asm volatile
 8006826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682a:	f383 8811 	msr	BASEPRI, r3
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	613b      	str	r3, [r7, #16]
}
 8006838:	bf00      	nop
 800683a:	e7fe      	b.n	800683a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683e:	685a      	ldr	r2, [r3, #4]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	1ad2      	subs	r2, r2, r3
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800684e:	69b8      	ldr	r0, [r7, #24]
 8006850:	f000 f908 	bl	8006a64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006854:	4b1d      	ldr	r3, [pc, #116]	; (80068cc <pvPortMalloc+0x188>)
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	4a1b      	ldr	r2, [pc, #108]	; (80068cc <pvPortMalloc+0x188>)
 8006860:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006862:	4b1a      	ldr	r3, [pc, #104]	; (80068cc <pvPortMalloc+0x188>)
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	4b1b      	ldr	r3, [pc, #108]	; (80068d4 <pvPortMalloc+0x190>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	429a      	cmp	r2, r3
 800686c:	d203      	bcs.n	8006876 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800686e:	4b17      	ldr	r3, [pc, #92]	; (80068cc <pvPortMalloc+0x188>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a18      	ldr	r2, [pc, #96]	; (80068d4 <pvPortMalloc+0x190>)
 8006874:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	685a      	ldr	r2, [r3, #4]
 800687a:	4b13      	ldr	r3, [pc, #76]	; (80068c8 <pvPortMalloc+0x184>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	431a      	orrs	r2, r3
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	2200      	movs	r2, #0
 8006888:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800688a:	4b13      	ldr	r3, [pc, #76]	; (80068d8 <pvPortMalloc+0x194>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3301      	adds	r3, #1
 8006890:	4a11      	ldr	r2, [pc, #68]	; (80068d8 <pvPortMalloc+0x194>)
 8006892:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006894:	f001 fb96 	bl	8007fc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	f003 0307 	and.w	r3, r3, #7
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00a      	beq.n	80068b8 <pvPortMalloc+0x174>
	__asm volatile
 80068a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a6:	f383 8811 	msr	BASEPRI, r3
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	60fb      	str	r3, [r7, #12]
}
 80068b4:	bf00      	nop
 80068b6:	e7fe      	b.n	80068b6 <pvPortMalloc+0x172>
	return pvReturn;
 80068b8:	69fb      	ldr	r3, [r7, #28]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3728      	adds	r7, #40	; 0x28
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	24004440 	.word	0x24004440
 80068c8:	24004454 	.word	0x24004454
 80068cc:	24004444 	.word	0x24004444
 80068d0:	24004438 	.word	0x24004438
 80068d4:	24004448 	.word	0x24004448
 80068d8:	2400444c 	.word	0x2400444c

080068dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d04d      	beq.n	800698a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80068ee:	2308      	movs	r3, #8
 80068f0:	425b      	negs	r3, r3
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	4413      	add	r3, r2
 80068f6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	4b24      	ldr	r3, [pc, #144]	; (8006994 <vPortFree+0xb8>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4013      	ands	r3, r2
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10a      	bne.n	8006920 <vPortFree+0x44>
	__asm volatile
 800690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	60fb      	str	r3, [r7, #12]
}
 800691c:	bf00      	nop
 800691e:	e7fe      	b.n	800691e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00a      	beq.n	800693e <vPortFree+0x62>
	__asm volatile
 8006928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692c:	f383 8811 	msr	BASEPRI, r3
 8006930:	f3bf 8f6f 	isb	sy
 8006934:	f3bf 8f4f 	dsb	sy
 8006938:	60bb      	str	r3, [r7, #8]
}
 800693a:	bf00      	nop
 800693c:	e7fe      	b.n	800693c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	4b14      	ldr	r3, [pc, #80]	; (8006994 <vPortFree+0xb8>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4013      	ands	r3, r2
 8006948:	2b00      	cmp	r3, #0
 800694a:	d01e      	beq.n	800698a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d11a      	bne.n	800698a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	4b0e      	ldr	r3, [pc, #56]	; (8006994 <vPortFree+0xb8>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	43db      	mvns	r3, r3
 800695e:	401a      	ands	r2, r3
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006964:	f001 fb20 	bl	8007fa8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	4b0a      	ldr	r3, [pc, #40]	; (8006998 <vPortFree+0xbc>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4413      	add	r3, r2
 8006972:	4a09      	ldr	r2, [pc, #36]	; (8006998 <vPortFree+0xbc>)
 8006974:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006976:	6938      	ldr	r0, [r7, #16]
 8006978:	f000 f874 	bl	8006a64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800697c:	4b07      	ldr	r3, [pc, #28]	; (800699c <vPortFree+0xc0>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3301      	adds	r3, #1
 8006982:	4a06      	ldr	r2, [pc, #24]	; (800699c <vPortFree+0xc0>)
 8006984:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006986:	f001 fb1d 	bl	8007fc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800698a:	bf00      	nop
 800698c:	3718      	adds	r7, #24
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	24004454 	.word	0x24004454
 8006998:	24004444 	.word	0x24004444
 800699c:	24004450 	.word	0x24004450

080069a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80069a6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80069aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80069ac:	4b27      	ldr	r3, [pc, #156]	; (8006a4c <prvHeapInit+0xac>)
 80069ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f003 0307 	and.w	r3, r3, #7
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00c      	beq.n	80069d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	3307      	adds	r3, #7
 80069be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f023 0307 	bic.w	r3, r3, #7
 80069c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	4a1f      	ldr	r2, [pc, #124]	; (8006a4c <prvHeapInit+0xac>)
 80069d0:	4413      	add	r3, r2
 80069d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80069d8:	4a1d      	ldr	r2, [pc, #116]	; (8006a50 <prvHeapInit+0xb0>)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80069de:	4b1c      	ldr	r3, [pc, #112]	; (8006a50 <prvHeapInit+0xb0>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	4413      	add	r3, r2
 80069ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80069ec:	2208      	movs	r2, #8
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	1a9b      	subs	r3, r3, r2
 80069f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f023 0307 	bic.w	r3, r3, #7
 80069fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4a15      	ldr	r2, [pc, #84]	; (8006a54 <prvHeapInit+0xb4>)
 8006a00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a02:	4b14      	ldr	r3, [pc, #80]	; (8006a54 <prvHeapInit+0xb4>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2200      	movs	r2, #0
 8006a08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a0a:	4b12      	ldr	r3, [pc, #72]	; (8006a54 <prvHeapInit+0xb4>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	1ad2      	subs	r2, r2, r3
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a20:	4b0c      	ldr	r3, [pc, #48]	; (8006a54 <prvHeapInit+0xb4>)
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	4a0a      	ldr	r2, [pc, #40]	; (8006a58 <prvHeapInit+0xb8>)
 8006a2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	4a09      	ldr	r2, [pc, #36]	; (8006a5c <prvHeapInit+0xbc>)
 8006a36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a38:	4b09      	ldr	r3, [pc, #36]	; (8006a60 <prvHeapInit+0xc0>)
 8006a3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a3e:	601a      	str	r2, [r3, #0]
}
 8006a40:	bf00      	nop
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	24000838 	.word	0x24000838
 8006a50:	24004438 	.word	0x24004438
 8006a54:	24004440 	.word	0x24004440
 8006a58:	24004448 	.word	0x24004448
 8006a5c:	24004444 	.word	0x24004444
 8006a60:	24004454 	.word	0x24004454

08006a64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a6c:	4b28      	ldr	r3, [pc, #160]	; (8006b10 <prvInsertBlockIntoFreeList+0xac>)
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	e002      	b.n	8006a78 <prvInsertBlockIntoFreeList+0x14>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	60fb      	str	r3, [r7, #12]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d8f7      	bhi.n	8006a72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d108      	bne.n	8006aa6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	685a      	ldr	r2, [r3, #4]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	441a      	add	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	441a      	add	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d118      	bne.n	8006aec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	4b15      	ldr	r3, [pc, #84]	; (8006b14 <prvInsertBlockIntoFreeList+0xb0>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d00d      	beq.n	8006ae2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	441a      	add	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	601a      	str	r2, [r3, #0]
 8006ae0:	e008      	b.n	8006af4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ae2:	4b0c      	ldr	r3, [pc, #48]	; (8006b14 <prvInsertBlockIntoFreeList+0xb0>)
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	601a      	str	r2, [r3, #0]
 8006aea:	e003      	b.n	8006af4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d002      	beq.n	8006b02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b02:	bf00      	nop
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	24004438 	.word	0x24004438
 8006b14:	24004440 	.word	0x24004440

08006b18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f103 0208 	add.w	r2, r3, #8
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f103 0208 	add.w	r2, r3, #8
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f103 0208 	add.w	r2, r3, #8
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b66:	bf00      	nop
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b72:	b480      	push	{r7}
 8006b74:	b085      	sub	sp, #20
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
 8006b7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	689a      	ldr	r2, [r3, #8]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	683a      	ldr	r2, [r7, #0]
 8006b96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	1c5a      	adds	r2, r3, #1
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	601a      	str	r2, [r3, #0]
}
 8006bae:	bf00      	nop
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b085      	sub	sp, #20
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
 8006bc2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd0:	d103      	bne.n	8006bda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	e00c      	b.n	8006bf4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	3308      	adds	r3, #8
 8006bde:	60fb      	str	r3, [r7, #12]
 8006be0:	e002      	b.n	8006be8 <vListInsert+0x2e>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	60fb      	str	r3, [r7, #12]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d2f6      	bcs.n	8006be2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	601a      	str	r2, [r3, #0]
}
 8006c20:	bf00      	nop
 8006c22:	3714      	adds	r7, #20
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	6892      	ldr	r2, [r2, #8]
 8006c42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	6852      	ldr	r2, [r2, #4]
 8006c4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d103      	bne.n	8006c60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689a      	ldr	r2, [r3, #8]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	1e5a      	subs	r2, r3, #1
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	3b04      	subs	r3, #4
 8006c90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	3b04      	subs	r3, #4
 8006c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f023 0201 	bic.w	r2, r3, #1
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	3b04      	subs	r3, #4
 8006cae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006cb0:	4a0c      	ldr	r2, [pc, #48]	; (8006ce4 <pxPortInitialiseStack+0x64>)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	3b14      	subs	r3, #20
 8006cba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	3b04      	subs	r3, #4
 8006cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f06f 0202 	mvn.w	r2, #2
 8006cce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	3b20      	subs	r3, #32
 8006cd4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	08006ce9 	.word	0x08006ce9

08006ce8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006cf2:	4b12      	ldr	r3, [pc, #72]	; (8006d3c <prvTaskExitError+0x54>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cfa:	d00a      	beq.n	8006d12 <prvTaskExitError+0x2a>
	__asm volatile
 8006cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d00:	f383 8811 	msr	BASEPRI, r3
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	60fb      	str	r3, [r7, #12]
}
 8006d0e:	bf00      	nop
 8006d10:	e7fe      	b.n	8006d10 <prvTaskExitError+0x28>
	__asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	60bb      	str	r3, [r7, #8]
}
 8006d24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d26:	bf00      	nop
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d0fc      	beq.n	8006d28 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d2e:	bf00      	nop
 8006d30:	bf00      	nop
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	24000010 	.word	0x24000010

08006d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d40:	4b07      	ldr	r3, [pc, #28]	; (8006d60 <pxCurrentTCBConst2>)
 8006d42:	6819      	ldr	r1, [r3, #0]
 8006d44:	6808      	ldr	r0, [r1, #0]
 8006d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d4a:	f380 8809 	msr	PSP, r0
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f04f 0000 	mov.w	r0, #0
 8006d56:	f380 8811 	msr	BASEPRI, r0
 8006d5a:	4770      	bx	lr
 8006d5c:	f3af 8000 	nop.w

08006d60 <pxCurrentTCBConst2>:
 8006d60:	24004460 	.word	0x24004460
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d64:	bf00      	nop
 8006d66:	bf00      	nop

08006d68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d68:	4808      	ldr	r0, [pc, #32]	; (8006d8c <prvPortStartFirstTask+0x24>)
 8006d6a:	6800      	ldr	r0, [r0, #0]
 8006d6c:	6800      	ldr	r0, [r0, #0]
 8006d6e:	f380 8808 	msr	MSP, r0
 8006d72:	f04f 0000 	mov.w	r0, #0
 8006d76:	f380 8814 	msr	CONTROL, r0
 8006d7a:	b662      	cpsie	i
 8006d7c:	b661      	cpsie	f
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	df00      	svc	0
 8006d88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d8a:	bf00      	nop
 8006d8c:	e000ed08 	.word	0xe000ed08

08006d90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006d96:	4b46      	ldr	r3, [pc, #280]	; (8006eb0 <xPortStartScheduler+0x120>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a46      	ldr	r2, [pc, #280]	; (8006eb4 <xPortStartScheduler+0x124>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d10a      	bne.n	8006db6 <xPortStartScheduler+0x26>
	__asm volatile
 8006da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	613b      	str	r3, [r7, #16]
}
 8006db2:	bf00      	nop
 8006db4:	e7fe      	b.n	8006db4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006db6:	4b3e      	ldr	r3, [pc, #248]	; (8006eb0 <xPortStartScheduler+0x120>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a3f      	ldr	r2, [pc, #252]	; (8006eb8 <xPortStartScheduler+0x128>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d10a      	bne.n	8006dd6 <xPortStartScheduler+0x46>
	__asm volatile
 8006dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	60fb      	str	r3, [r7, #12]
}
 8006dd2:	bf00      	nop
 8006dd4:	e7fe      	b.n	8006dd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006dd6:	4b39      	ldr	r3, [pc, #228]	; (8006ebc <xPortStartScheduler+0x12c>)
 8006dd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	22ff      	movs	r2, #255	; 0xff
 8006de6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006df0:	78fb      	ldrb	r3, [r7, #3]
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006df8:	b2da      	uxtb	r2, r3
 8006dfa:	4b31      	ldr	r3, [pc, #196]	; (8006ec0 <xPortStartScheduler+0x130>)
 8006dfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006dfe:	4b31      	ldr	r3, [pc, #196]	; (8006ec4 <xPortStartScheduler+0x134>)
 8006e00:	2207      	movs	r2, #7
 8006e02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e04:	e009      	b.n	8006e1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006e06:	4b2f      	ldr	r3, [pc, #188]	; (8006ec4 <xPortStartScheduler+0x134>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	4a2d      	ldr	r2, [pc, #180]	; (8006ec4 <xPortStartScheduler+0x134>)
 8006e0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e10:	78fb      	ldrb	r3, [r7, #3]
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	005b      	lsls	r3, r3, #1
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e1a:	78fb      	ldrb	r3, [r7, #3]
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e22:	2b80      	cmp	r3, #128	; 0x80
 8006e24:	d0ef      	beq.n	8006e06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e26:	4b27      	ldr	r3, [pc, #156]	; (8006ec4 <xPortStartScheduler+0x134>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f1c3 0307 	rsb	r3, r3, #7
 8006e2e:	2b04      	cmp	r3, #4
 8006e30:	d00a      	beq.n	8006e48 <xPortStartScheduler+0xb8>
	__asm volatile
 8006e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	60bb      	str	r3, [r7, #8]
}
 8006e44:	bf00      	nop
 8006e46:	e7fe      	b.n	8006e46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e48:	4b1e      	ldr	r3, [pc, #120]	; (8006ec4 <xPortStartScheduler+0x134>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	021b      	lsls	r3, r3, #8
 8006e4e:	4a1d      	ldr	r2, [pc, #116]	; (8006ec4 <xPortStartScheduler+0x134>)
 8006e50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e52:	4b1c      	ldr	r3, [pc, #112]	; (8006ec4 <xPortStartScheduler+0x134>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e5a:	4a1a      	ldr	r2, [pc, #104]	; (8006ec4 <xPortStartScheduler+0x134>)
 8006e5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e66:	4b18      	ldr	r3, [pc, #96]	; (8006ec8 <xPortStartScheduler+0x138>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a17      	ldr	r2, [pc, #92]	; (8006ec8 <xPortStartScheduler+0x138>)
 8006e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e72:	4b15      	ldr	r3, [pc, #84]	; (8006ec8 <xPortStartScheduler+0x138>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a14      	ldr	r2, [pc, #80]	; (8006ec8 <xPortStartScheduler+0x138>)
 8006e78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e7e:	f000 f8dd 	bl	800703c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e82:	4b12      	ldr	r3, [pc, #72]	; (8006ecc <xPortStartScheduler+0x13c>)
 8006e84:	2200      	movs	r2, #0
 8006e86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006e88:	f000 f8fc 	bl	8007084 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e8c:	4b10      	ldr	r3, [pc, #64]	; (8006ed0 <xPortStartScheduler+0x140>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a0f      	ldr	r2, [pc, #60]	; (8006ed0 <xPortStartScheduler+0x140>)
 8006e92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006e96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e98:	f7ff ff66 	bl	8006d68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e9c:	f001 f9fa 	bl	8008294 <vTaskSwitchContext>
	prvTaskExitError();
 8006ea0:	f7ff ff22 	bl	8006ce8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3718      	adds	r7, #24
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	e000ed00 	.word	0xe000ed00
 8006eb4:	410fc271 	.word	0x410fc271
 8006eb8:	410fc270 	.word	0x410fc270
 8006ebc:	e000e400 	.word	0xe000e400
 8006ec0:	24004458 	.word	0x24004458
 8006ec4:	2400445c 	.word	0x2400445c
 8006ec8:	e000ed20 	.word	0xe000ed20
 8006ecc:	24000010 	.word	0x24000010
 8006ed0:	e000ef34 	.word	0xe000ef34

08006ed4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
	__asm volatile
 8006eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	607b      	str	r3, [r7, #4]
}
 8006eec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006eee:	4b0f      	ldr	r3, [pc, #60]	; (8006f2c <vPortEnterCritical+0x58>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	4a0d      	ldr	r2, [pc, #52]	; (8006f2c <vPortEnterCritical+0x58>)
 8006ef6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006ef8:	4b0c      	ldr	r3, [pc, #48]	; (8006f2c <vPortEnterCritical+0x58>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d10f      	bne.n	8006f20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f00:	4b0b      	ldr	r3, [pc, #44]	; (8006f30 <vPortEnterCritical+0x5c>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00a      	beq.n	8006f20 <vPortEnterCritical+0x4c>
	__asm volatile
 8006f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0e:	f383 8811 	msr	BASEPRI, r3
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	603b      	str	r3, [r7, #0]
}
 8006f1c:	bf00      	nop
 8006f1e:	e7fe      	b.n	8006f1e <vPortEnterCritical+0x4a>
	}
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr
 8006f2c:	24000010 	.word	0x24000010
 8006f30:	e000ed04 	.word	0xe000ed04

08006f34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f3a:	4b12      	ldr	r3, [pc, #72]	; (8006f84 <vPortExitCritical+0x50>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10a      	bne.n	8006f58 <vPortExitCritical+0x24>
	__asm volatile
 8006f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f46:	f383 8811 	msr	BASEPRI, r3
 8006f4a:	f3bf 8f6f 	isb	sy
 8006f4e:	f3bf 8f4f 	dsb	sy
 8006f52:	607b      	str	r3, [r7, #4]
}
 8006f54:	bf00      	nop
 8006f56:	e7fe      	b.n	8006f56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006f58:	4b0a      	ldr	r3, [pc, #40]	; (8006f84 <vPortExitCritical+0x50>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	4a09      	ldr	r2, [pc, #36]	; (8006f84 <vPortExitCritical+0x50>)
 8006f60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f62:	4b08      	ldr	r3, [pc, #32]	; (8006f84 <vPortExitCritical+0x50>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d105      	bne.n	8006f76 <vPortExitCritical+0x42>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	f383 8811 	msr	BASEPRI, r3
}
 8006f74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f76:	bf00      	nop
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	24000010 	.word	0x24000010
	...

08006f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f90:	f3ef 8009 	mrs	r0, PSP
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	4b15      	ldr	r3, [pc, #84]	; (8006ff0 <pxCurrentTCBConst>)
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	f01e 0f10 	tst.w	lr, #16
 8006fa0:	bf08      	it	eq
 8006fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006faa:	6010      	str	r0, [r2, #0]
 8006fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006fb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006fb4:	f380 8811 	msr	BASEPRI, r0
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	f001 f968 	bl	8008294 <vTaskSwitchContext>
 8006fc4:	f04f 0000 	mov.w	r0, #0
 8006fc8:	f380 8811 	msr	BASEPRI, r0
 8006fcc:	bc09      	pop	{r0, r3}
 8006fce:	6819      	ldr	r1, [r3, #0]
 8006fd0:	6808      	ldr	r0, [r1, #0]
 8006fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd6:	f01e 0f10 	tst.w	lr, #16
 8006fda:	bf08      	it	eq
 8006fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006fe0:	f380 8809 	msr	PSP, r0
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	f3af 8000 	nop.w

08006ff0 <pxCurrentTCBConst>:
 8006ff0:	24004460 	.word	0x24004460
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ff4:	bf00      	nop
 8006ff6:	bf00      	nop

08006ff8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	607b      	str	r3, [r7, #4]
}
 8007010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007012:	f001 f885 	bl	8008120 <xTaskIncrementTick>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d003      	beq.n	8007024 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800701c:	4b06      	ldr	r3, [pc, #24]	; (8007038 <xPortSysTickHandler+0x40>)
 800701e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007022:	601a      	str	r2, [r3, #0]
 8007024:	2300      	movs	r3, #0
 8007026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	f383 8811 	msr	BASEPRI, r3
}
 800702e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007030:	bf00      	nop
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	e000ed04 	.word	0xe000ed04

0800703c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800703c:	b480      	push	{r7}
 800703e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007040:	4b0b      	ldr	r3, [pc, #44]	; (8007070 <vPortSetupTimerInterrupt+0x34>)
 8007042:	2200      	movs	r2, #0
 8007044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007046:	4b0b      	ldr	r3, [pc, #44]	; (8007074 <vPortSetupTimerInterrupt+0x38>)
 8007048:	2200      	movs	r2, #0
 800704a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800704c:	4b0a      	ldr	r3, [pc, #40]	; (8007078 <vPortSetupTimerInterrupt+0x3c>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a0a      	ldr	r2, [pc, #40]	; (800707c <vPortSetupTimerInterrupt+0x40>)
 8007052:	fba2 2303 	umull	r2, r3, r2, r3
 8007056:	099b      	lsrs	r3, r3, #6
 8007058:	4a09      	ldr	r2, [pc, #36]	; (8007080 <vPortSetupTimerInterrupt+0x44>)
 800705a:	3b01      	subs	r3, #1
 800705c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800705e:	4b04      	ldr	r3, [pc, #16]	; (8007070 <vPortSetupTimerInterrupt+0x34>)
 8007060:	2207      	movs	r2, #7
 8007062:	601a      	str	r2, [r3, #0]
}
 8007064:	bf00      	nop
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	e000e010 	.word	0xe000e010
 8007074:	e000e018 	.word	0xe000e018
 8007078:	24000000 	.word	0x24000000
 800707c:	10624dd3 	.word	0x10624dd3
 8007080:	e000e014 	.word	0xe000e014

08007084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007084:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007094 <vPortEnableVFP+0x10>
 8007088:	6801      	ldr	r1, [r0, #0]
 800708a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800708e:	6001      	str	r1, [r0, #0]
 8007090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007092:	bf00      	nop
 8007094:	e000ed88 	.word	0xe000ed88

08007098 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800709e:	f3ef 8305 	mrs	r3, IPSR
 80070a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2b0f      	cmp	r3, #15
 80070a8:	d914      	bls.n	80070d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80070aa:	4a17      	ldr	r2, [pc, #92]	; (8007108 <vPortValidateInterruptPriority+0x70>)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4413      	add	r3, r2
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80070b4:	4b15      	ldr	r3, [pc, #84]	; (800710c <vPortValidateInterruptPriority+0x74>)
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	7afa      	ldrb	r2, [r7, #11]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d20a      	bcs.n	80070d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80070be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c2:	f383 8811 	msr	BASEPRI, r3
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	607b      	str	r3, [r7, #4]
}
 80070d0:	bf00      	nop
 80070d2:	e7fe      	b.n	80070d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80070d4:	4b0e      	ldr	r3, [pc, #56]	; (8007110 <vPortValidateInterruptPriority+0x78>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80070dc:	4b0d      	ldr	r3, [pc, #52]	; (8007114 <vPortValidateInterruptPriority+0x7c>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d90a      	bls.n	80070fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	603b      	str	r3, [r7, #0]
}
 80070f6:	bf00      	nop
 80070f8:	e7fe      	b.n	80070f8 <vPortValidateInterruptPriority+0x60>
	}
 80070fa:	bf00      	nop
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	e000e3f0 	.word	0xe000e3f0
 800710c:	24004458 	.word	0x24004458
 8007110:	e000ed0c 	.word	0xe000ed0c
 8007114:	2400445c 	.word	0x2400445c

08007118 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d10a      	bne.n	8007142 <xQueueGenericReset+0x2a>
	__asm volatile
 800712c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007130:	f383 8811 	msr	BASEPRI, r3
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	60bb      	str	r3, [r7, #8]
}
 800713e:	bf00      	nop
 8007140:	e7fe      	b.n	8007140 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007142:	f7ff fec7 	bl	8006ed4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800714e:	68f9      	ldr	r1, [r7, #12]
 8007150:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007152:	fb01 f303 	mul.w	r3, r1, r3
 8007156:	441a      	add	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007172:	3b01      	subs	r3, #1
 8007174:	68f9      	ldr	r1, [r7, #12]
 8007176:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007178:	fb01 f303 	mul.w	r3, r1, r3
 800717c:	441a      	add	r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	22ff      	movs	r2, #255	; 0xff
 8007186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	22ff      	movs	r2, #255	; 0xff
 800718e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d114      	bne.n	80071c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d01a      	beq.n	80071d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	3310      	adds	r3, #16
 80071a4:	4618      	mov	r0, r3
 80071a6:	f001 f929 	bl	80083fc <xTaskRemoveFromEventList>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d012      	beq.n	80071d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80071b0:	4b0c      	ldr	r3, [pc, #48]	; (80071e4 <xQueueGenericReset+0xcc>)
 80071b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071b6:	601a      	str	r2, [r3, #0]
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	e009      	b.n	80071d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	3310      	adds	r3, #16
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7ff fca6 	bl	8006b18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	3324      	adds	r3, #36	; 0x24
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7ff fca1 	bl	8006b18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80071d6:	f7ff fead 	bl	8006f34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80071da:	2301      	movs	r3, #1
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	e000ed04 	.word	0xe000ed04

080071e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b08e      	sub	sp, #56	; 0x38
 80071ec:	af02      	add	r7, sp, #8
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
 80071f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10a      	bne.n	8007212 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80071fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800720e:	bf00      	nop
 8007210:	e7fe      	b.n	8007210 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10a      	bne.n	800722e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721c:	f383 8811 	msr	BASEPRI, r3
 8007220:	f3bf 8f6f 	isb	sy
 8007224:	f3bf 8f4f 	dsb	sy
 8007228:	627b      	str	r3, [r7, #36]	; 0x24
}
 800722a:	bf00      	nop
 800722c:	e7fe      	b.n	800722c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <xQueueGenericCreateStatic+0x52>
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d001      	beq.n	800723e <xQueueGenericCreateStatic+0x56>
 800723a:	2301      	movs	r3, #1
 800723c:	e000      	b.n	8007240 <xQueueGenericCreateStatic+0x58>
 800723e:	2300      	movs	r3, #0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10a      	bne.n	800725a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	623b      	str	r3, [r7, #32]
}
 8007256:	bf00      	nop
 8007258:	e7fe      	b.n	8007258 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d102      	bne.n	8007266 <xQueueGenericCreateStatic+0x7e>
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d101      	bne.n	800726a <xQueueGenericCreateStatic+0x82>
 8007266:	2301      	movs	r3, #1
 8007268:	e000      	b.n	800726c <xQueueGenericCreateStatic+0x84>
 800726a:	2300      	movs	r3, #0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10a      	bne.n	8007286 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	61fb      	str	r3, [r7, #28]
}
 8007282:	bf00      	nop
 8007284:	e7fe      	b.n	8007284 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007286:	2350      	movs	r3, #80	; 0x50
 8007288:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	2b50      	cmp	r3, #80	; 0x50
 800728e:	d00a      	beq.n	80072a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007294:	f383 8811 	msr	BASEPRI, r3
 8007298:	f3bf 8f6f 	isb	sy
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	61bb      	str	r3, [r7, #24]
}
 80072a2:	bf00      	nop
 80072a4:	e7fe      	b.n	80072a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80072a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80072ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00d      	beq.n	80072ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80072b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80072ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80072be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	4613      	mov	r3, r2
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	68b9      	ldr	r1, [r7, #8]
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f000 f805 	bl	80072d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80072ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3730      	adds	r7, #48	; 0x30
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
 80072e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d103      	bne.n	80072f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	69ba      	ldr	r2, [r7, #24]
 80072f0:	601a      	str	r2, [r3, #0]
 80072f2:	e002      	b.n	80072fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007306:	2101      	movs	r1, #1
 8007308:	69b8      	ldr	r0, [r7, #24]
 800730a:	f7ff ff05 	bl	8007118 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	78fa      	ldrb	r2, [r7, #3]
 8007312:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007316:	bf00      	nop
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
	...

08007320 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b08e      	sub	sp, #56	; 0x38
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
 800732c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800732e:	2300      	movs	r3, #0
 8007330:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10a      	bne.n	8007352 <xQueueGenericSend+0x32>
	__asm volatile
 800733c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007340:	f383 8811 	msr	BASEPRI, r3
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800734e:	bf00      	nop
 8007350:	e7fe      	b.n	8007350 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d103      	bne.n	8007360 <xQueueGenericSend+0x40>
 8007358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735c:	2b00      	cmp	r3, #0
 800735e:	d101      	bne.n	8007364 <xQueueGenericSend+0x44>
 8007360:	2301      	movs	r3, #1
 8007362:	e000      	b.n	8007366 <xQueueGenericSend+0x46>
 8007364:	2300      	movs	r3, #0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10a      	bne.n	8007380 <xQueueGenericSend+0x60>
	__asm volatile
 800736a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736e:	f383 8811 	msr	BASEPRI, r3
 8007372:	f3bf 8f6f 	isb	sy
 8007376:	f3bf 8f4f 	dsb	sy
 800737a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800737c:	bf00      	nop
 800737e:	e7fe      	b.n	800737e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	2b02      	cmp	r3, #2
 8007384:	d103      	bne.n	800738e <xQueueGenericSend+0x6e>
 8007386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800738a:	2b01      	cmp	r3, #1
 800738c:	d101      	bne.n	8007392 <xQueueGenericSend+0x72>
 800738e:	2301      	movs	r3, #1
 8007390:	e000      	b.n	8007394 <xQueueGenericSend+0x74>
 8007392:	2300      	movs	r3, #0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10a      	bne.n	80073ae <xQueueGenericSend+0x8e>
	__asm volatile
 8007398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	623b      	str	r3, [r7, #32]
}
 80073aa:	bf00      	nop
 80073ac:	e7fe      	b.n	80073ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073ae:	f001 f9e7 	bl	8008780 <xTaskGetSchedulerState>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d102      	bne.n	80073be <xQueueGenericSend+0x9e>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d101      	bne.n	80073c2 <xQueueGenericSend+0xa2>
 80073be:	2301      	movs	r3, #1
 80073c0:	e000      	b.n	80073c4 <xQueueGenericSend+0xa4>
 80073c2:	2300      	movs	r3, #0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10a      	bne.n	80073de <xQueueGenericSend+0xbe>
	__asm volatile
 80073c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073cc:	f383 8811 	msr	BASEPRI, r3
 80073d0:	f3bf 8f6f 	isb	sy
 80073d4:	f3bf 8f4f 	dsb	sy
 80073d8:	61fb      	str	r3, [r7, #28]
}
 80073da:	bf00      	nop
 80073dc:	e7fe      	b.n	80073dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073de:	f7ff fd79 	bl	8006ed4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d302      	bcc.n	80073f4 <xQueueGenericSend+0xd4>
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d129      	bne.n	8007448 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073f4:	683a      	ldr	r2, [r7, #0]
 80073f6:	68b9      	ldr	r1, [r7, #8]
 80073f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073fa:	f000 fa0b 	bl	8007814 <prvCopyDataToQueue>
 80073fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007404:	2b00      	cmp	r3, #0
 8007406:	d010      	beq.n	800742a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740a:	3324      	adds	r3, #36	; 0x24
 800740c:	4618      	mov	r0, r3
 800740e:	f000 fff5 	bl	80083fc <xTaskRemoveFromEventList>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d013      	beq.n	8007440 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007418:	4b3f      	ldr	r3, [pc, #252]	; (8007518 <xQueueGenericSend+0x1f8>)
 800741a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800741e:	601a      	str	r2, [r3, #0]
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	e00a      	b.n	8007440 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800742a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742c:	2b00      	cmp	r3, #0
 800742e:	d007      	beq.n	8007440 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007430:	4b39      	ldr	r3, [pc, #228]	; (8007518 <xQueueGenericSend+0x1f8>)
 8007432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007436:	601a      	str	r2, [r3, #0]
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007440:	f7ff fd78 	bl	8006f34 <vPortExitCritical>
				return pdPASS;
 8007444:	2301      	movs	r3, #1
 8007446:	e063      	b.n	8007510 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d103      	bne.n	8007456 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800744e:	f7ff fd71 	bl	8006f34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007452:	2300      	movs	r3, #0
 8007454:	e05c      	b.n	8007510 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007458:	2b00      	cmp	r3, #0
 800745a:	d106      	bne.n	800746a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800745c:	f107 0314 	add.w	r3, r7, #20
 8007460:	4618      	mov	r0, r3
 8007462:	f001 f82f 	bl	80084c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007466:	2301      	movs	r3, #1
 8007468:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800746a:	f7ff fd63 	bl	8006f34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800746e:	f000 fd9b 	bl	8007fa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007472:	f7ff fd2f 	bl	8006ed4 <vPortEnterCritical>
 8007476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007478:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800747c:	b25b      	sxtb	r3, r3
 800747e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007482:	d103      	bne.n	800748c <xQueueGenericSend+0x16c>
 8007484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007486:	2200      	movs	r2, #0
 8007488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800748c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007492:	b25b      	sxtb	r3, r3
 8007494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007498:	d103      	bne.n	80074a2 <xQueueGenericSend+0x182>
 800749a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749c:	2200      	movs	r2, #0
 800749e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074a2:	f7ff fd47 	bl	8006f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074a6:	1d3a      	adds	r2, r7, #4
 80074a8:	f107 0314 	add.w	r3, r7, #20
 80074ac:	4611      	mov	r1, r2
 80074ae:	4618      	mov	r0, r3
 80074b0:	f001 f81e 	bl	80084f0 <xTaskCheckForTimeOut>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d124      	bne.n	8007504 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80074ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074bc:	f000 faa2 	bl	8007a04 <prvIsQueueFull>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d018      	beq.n	80074f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80074c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c8:	3310      	adds	r3, #16
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	4611      	mov	r1, r2
 80074ce:	4618      	mov	r0, r3
 80074d0:	f000 ff44 	bl	800835c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80074d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074d6:	f000 fa2d 	bl	8007934 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80074da:	f000 fd73 	bl	8007fc4 <xTaskResumeAll>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f47f af7c 	bne.w	80073de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80074e6:	4b0c      	ldr	r3, [pc, #48]	; (8007518 <xQueueGenericSend+0x1f8>)
 80074e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ec:	601a      	str	r2, [r3, #0]
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	f3bf 8f6f 	isb	sy
 80074f6:	e772      	b.n	80073de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80074f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074fa:	f000 fa1b 	bl	8007934 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074fe:	f000 fd61 	bl	8007fc4 <xTaskResumeAll>
 8007502:	e76c      	b.n	80073de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007504:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007506:	f000 fa15 	bl	8007934 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800750a:	f000 fd5b 	bl	8007fc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800750e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007510:	4618      	mov	r0, r3
 8007512:	3738      	adds	r7, #56	; 0x38
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	e000ed04 	.word	0xe000ed04

0800751c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b090      	sub	sp, #64	; 0x40
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
 8007528:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800752e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10a      	bne.n	800754a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007538:	f383 8811 	msr	BASEPRI, r3
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007546:	bf00      	nop
 8007548:	e7fe      	b.n	8007548 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d103      	bne.n	8007558 <xQueueGenericSendFromISR+0x3c>
 8007550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007554:	2b00      	cmp	r3, #0
 8007556:	d101      	bne.n	800755c <xQueueGenericSendFromISR+0x40>
 8007558:	2301      	movs	r3, #1
 800755a:	e000      	b.n	800755e <xQueueGenericSendFromISR+0x42>
 800755c:	2300      	movs	r3, #0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10a      	bne.n	8007578 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007574:	bf00      	nop
 8007576:	e7fe      	b.n	8007576 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	2b02      	cmp	r3, #2
 800757c:	d103      	bne.n	8007586 <xQueueGenericSendFromISR+0x6a>
 800757e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007582:	2b01      	cmp	r3, #1
 8007584:	d101      	bne.n	800758a <xQueueGenericSendFromISR+0x6e>
 8007586:	2301      	movs	r3, #1
 8007588:	e000      	b.n	800758c <xQueueGenericSendFromISR+0x70>
 800758a:	2300      	movs	r3, #0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d10a      	bne.n	80075a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007594:	f383 8811 	msr	BASEPRI, r3
 8007598:	f3bf 8f6f 	isb	sy
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	623b      	str	r3, [r7, #32]
}
 80075a2:	bf00      	nop
 80075a4:	e7fe      	b.n	80075a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075a6:	f7ff fd77 	bl	8007098 <vPortValidateInterruptPriority>
	__asm volatile
 80075aa:	f3ef 8211 	mrs	r2, BASEPRI
 80075ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	61fa      	str	r2, [r7, #28]
 80075c0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80075c2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80075c4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d302      	bcc.n	80075d8 <xQueueGenericSendFromISR+0xbc>
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d12f      	bne.n	8007638 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80075d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075e8:	683a      	ldr	r2, [r7, #0]
 80075ea:	68b9      	ldr	r1, [r7, #8]
 80075ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80075ee:	f000 f911 	bl	8007814 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80075f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80075f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075fa:	d112      	bne.n	8007622 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007600:	2b00      	cmp	r3, #0
 8007602:	d016      	beq.n	8007632 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007606:	3324      	adds	r3, #36	; 0x24
 8007608:	4618      	mov	r0, r3
 800760a:	f000 fef7 	bl	80083fc <xTaskRemoveFromEventList>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00e      	beq.n	8007632 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00b      	beq.n	8007632 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2201      	movs	r2, #1
 800761e:	601a      	str	r2, [r3, #0]
 8007620:	e007      	b.n	8007632 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007622:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007626:	3301      	adds	r3, #1
 8007628:	b2db      	uxtb	r3, r3
 800762a:	b25a      	sxtb	r2, r3
 800762c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007632:	2301      	movs	r3, #1
 8007634:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007636:	e001      	b.n	800763c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007638:	2300      	movs	r3, #0
 800763a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800763c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800763e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	f383 8811 	msr	BASEPRI, r3
}
 8007646:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800764a:	4618      	mov	r0, r3
 800764c:	3740      	adds	r7, #64	; 0x40
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
	...

08007654 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b08c      	sub	sp, #48	; 0x30
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007660:	2300      	movs	r3, #0
 8007662:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10a      	bne.n	8007684 <xQueueReceive+0x30>
	__asm volatile
 800766e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	623b      	str	r3, [r7, #32]
}
 8007680:	bf00      	nop
 8007682:	e7fe      	b.n	8007682 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d103      	bne.n	8007692 <xQueueReceive+0x3e>
 800768a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768e:	2b00      	cmp	r3, #0
 8007690:	d101      	bne.n	8007696 <xQueueReceive+0x42>
 8007692:	2301      	movs	r3, #1
 8007694:	e000      	b.n	8007698 <xQueueReceive+0x44>
 8007696:	2300      	movs	r3, #0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d10a      	bne.n	80076b2 <xQueueReceive+0x5e>
	__asm volatile
 800769c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a0:	f383 8811 	msr	BASEPRI, r3
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	61fb      	str	r3, [r7, #28]
}
 80076ae:	bf00      	nop
 80076b0:	e7fe      	b.n	80076b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80076b2:	f001 f865 	bl	8008780 <xTaskGetSchedulerState>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d102      	bne.n	80076c2 <xQueueReceive+0x6e>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d101      	bne.n	80076c6 <xQueueReceive+0x72>
 80076c2:	2301      	movs	r3, #1
 80076c4:	e000      	b.n	80076c8 <xQueueReceive+0x74>
 80076c6:	2300      	movs	r3, #0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10a      	bne.n	80076e2 <xQueueReceive+0x8e>
	__asm volatile
 80076cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d0:	f383 8811 	msr	BASEPRI, r3
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	61bb      	str	r3, [r7, #24]
}
 80076de:	bf00      	nop
 80076e0:	e7fe      	b.n	80076e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80076e2:	f7ff fbf7 	bl	8006ed4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d01f      	beq.n	8007732 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80076f2:	68b9      	ldr	r1, [r7, #8]
 80076f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076f6:	f000 f8f7 	bl	80078e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80076fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fc:	1e5a      	subs	r2, r3, #1
 80076fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007700:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00f      	beq.n	800772a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800770a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770c:	3310      	adds	r3, #16
 800770e:	4618      	mov	r0, r3
 8007710:	f000 fe74 	bl	80083fc <xTaskRemoveFromEventList>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d007      	beq.n	800772a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800771a:	4b3d      	ldr	r3, [pc, #244]	; (8007810 <xQueueReceive+0x1bc>)
 800771c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	f3bf 8f4f 	dsb	sy
 8007726:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800772a:	f7ff fc03 	bl	8006f34 <vPortExitCritical>
				return pdPASS;
 800772e:	2301      	movs	r3, #1
 8007730:	e069      	b.n	8007806 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d103      	bne.n	8007740 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007738:	f7ff fbfc 	bl	8006f34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800773c:	2300      	movs	r3, #0
 800773e:	e062      	b.n	8007806 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007742:	2b00      	cmp	r3, #0
 8007744:	d106      	bne.n	8007754 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007746:	f107 0310 	add.w	r3, r7, #16
 800774a:	4618      	mov	r0, r3
 800774c:	f000 feba 	bl	80084c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007750:	2301      	movs	r3, #1
 8007752:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007754:	f7ff fbee 	bl	8006f34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007758:	f000 fc26 	bl	8007fa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800775c:	f7ff fbba 	bl	8006ed4 <vPortEnterCritical>
 8007760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007762:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007766:	b25b      	sxtb	r3, r3
 8007768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800776c:	d103      	bne.n	8007776 <xQueueReceive+0x122>
 800776e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007770:	2200      	movs	r2, #0
 8007772:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007778:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800777c:	b25b      	sxtb	r3, r3
 800777e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007782:	d103      	bne.n	800778c <xQueueReceive+0x138>
 8007784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007786:	2200      	movs	r2, #0
 8007788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800778c:	f7ff fbd2 	bl	8006f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007790:	1d3a      	adds	r2, r7, #4
 8007792:	f107 0310 	add.w	r3, r7, #16
 8007796:	4611      	mov	r1, r2
 8007798:	4618      	mov	r0, r3
 800779a:	f000 fea9 	bl	80084f0 <xTaskCheckForTimeOut>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d123      	bne.n	80077ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077a6:	f000 f917 	bl	80079d8 <prvIsQueueEmpty>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d017      	beq.n	80077e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80077b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b2:	3324      	adds	r3, #36	; 0x24
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	4611      	mov	r1, r2
 80077b8:	4618      	mov	r0, r3
 80077ba:	f000 fdcf 	bl	800835c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80077be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077c0:	f000 f8b8 	bl	8007934 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80077c4:	f000 fbfe 	bl	8007fc4 <xTaskResumeAll>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d189      	bne.n	80076e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80077ce:	4b10      	ldr	r3, [pc, #64]	; (8007810 <xQueueReceive+0x1bc>)
 80077d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077d4:	601a      	str	r2, [r3, #0]
 80077d6:	f3bf 8f4f 	dsb	sy
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	e780      	b.n	80076e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80077e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077e2:	f000 f8a7 	bl	8007934 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077e6:	f000 fbed 	bl	8007fc4 <xTaskResumeAll>
 80077ea:	e77a      	b.n	80076e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80077ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077ee:	f000 f8a1 	bl	8007934 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077f2:	f000 fbe7 	bl	8007fc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077f8:	f000 f8ee 	bl	80079d8 <prvIsQueueEmpty>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f43f af6f 	beq.w	80076e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007804:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007806:	4618      	mov	r0, r3
 8007808:	3730      	adds	r7, #48	; 0x30
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	e000ed04 	.word	0xe000ed04

08007814 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007820:	2300      	movs	r3, #0
 8007822:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007828:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10d      	bne.n	800784e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d14d      	bne.n	80078d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	4618      	mov	r0, r3
 8007840:	f000 ffbc 	bl	80087bc <xTaskPriorityDisinherit>
 8007844:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	609a      	str	r2, [r3, #8]
 800784c:	e043      	b.n	80078d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d119      	bne.n	8007888 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6858      	ldr	r0, [r3, #4]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785c:	461a      	mov	r2, r3
 800785e:	68b9      	ldr	r1, [r7, #8]
 8007860:	f001 fce4 	bl	800922c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	685a      	ldr	r2, [r3, #4]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786c:	441a      	add	r2, r3
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	685a      	ldr	r2, [r3, #4]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	429a      	cmp	r2, r3
 800787c:	d32b      	bcc.n	80078d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	605a      	str	r2, [r3, #4]
 8007886:	e026      	b.n	80078d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	68d8      	ldr	r0, [r3, #12]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007890:	461a      	mov	r2, r3
 8007892:	68b9      	ldr	r1, [r7, #8]
 8007894:	f001 fcca 	bl	800922c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	68da      	ldr	r2, [r3, #12]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a0:	425b      	negs	r3, r3
 80078a2:	441a      	add	r2, r3
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	68da      	ldr	r2, [r3, #12]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d207      	bcs.n	80078c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	689a      	ldr	r2, [r3, #8]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078bc:	425b      	negs	r3, r3
 80078be:	441a      	add	r2, r3
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d105      	bne.n	80078d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d002      	beq.n	80078d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	3b01      	subs	r3, #1
 80078d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	1c5a      	adds	r2, r3, #1
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80078de:	697b      	ldr	r3, [r7, #20]
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3718      	adds	r7, #24
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d018      	beq.n	800792c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	68da      	ldr	r2, [r3, #12]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007902:	441a      	add	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	68da      	ldr	r2, [r3, #12]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	429a      	cmp	r2, r3
 8007912:	d303      	bcc.n	800791c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	68d9      	ldr	r1, [r3, #12]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007924:	461a      	mov	r2, r3
 8007926:	6838      	ldr	r0, [r7, #0]
 8007928:	f001 fc80 	bl	800922c <memcpy>
	}
}
 800792c:	bf00      	nop
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800793c:	f7ff faca 	bl	8006ed4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007946:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007948:	e011      	b.n	800796e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794e:	2b00      	cmp	r3, #0
 8007950:	d012      	beq.n	8007978 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	3324      	adds	r3, #36	; 0x24
 8007956:	4618      	mov	r0, r3
 8007958:	f000 fd50 	bl	80083fc <xTaskRemoveFromEventList>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007962:	f000 fe27 	bl	80085b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007966:	7bfb      	ldrb	r3, [r7, #15]
 8007968:	3b01      	subs	r3, #1
 800796a:	b2db      	uxtb	r3, r3
 800796c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800796e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007972:	2b00      	cmp	r3, #0
 8007974:	dce9      	bgt.n	800794a <prvUnlockQueue+0x16>
 8007976:	e000      	b.n	800797a <prvUnlockQueue+0x46>
					break;
 8007978:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	22ff      	movs	r2, #255	; 0xff
 800797e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007982:	f7ff fad7 	bl	8006f34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007986:	f7ff faa5 	bl	8006ed4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007990:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007992:	e011      	b.n	80079b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d012      	beq.n	80079c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	3310      	adds	r3, #16
 80079a0:	4618      	mov	r0, r3
 80079a2:	f000 fd2b 	bl	80083fc <xTaskRemoveFromEventList>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d001      	beq.n	80079b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80079ac:	f000 fe02 	bl	80085b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80079b0:	7bbb      	ldrb	r3, [r7, #14]
 80079b2:	3b01      	subs	r3, #1
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	dce9      	bgt.n	8007994 <prvUnlockQueue+0x60>
 80079c0:	e000      	b.n	80079c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80079c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	22ff      	movs	r2, #255	; 0xff
 80079c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80079cc:	f7ff fab2 	bl	8006f34 <vPortExitCritical>
}
 80079d0:	bf00      	nop
 80079d2:	3710      	adds	r7, #16
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079e0:	f7ff fa78 	bl	8006ed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d102      	bne.n	80079f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80079ec:	2301      	movs	r3, #1
 80079ee:	60fb      	str	r3, [r7, #12]
 80079f0:	e001      	b.n	80079f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80079f2:	2300      	movs	r3, #0
 80079f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079f6:	f7ff fa9d 	bl	8006f34 <vPortExitCritical>

	return xReturn;
 80079fa:	68fb      	ldr	r3, [r7, #12]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a0c:	f7ff fa62 	bl	8006ed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d102      	bne.n	8007a22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	60fb      	str	r3, [r7, #12]
 8007a20:	e001      	b.n	8007a26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007a22:	2300      	movs	r3, #0
 8007a24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a26:	f7ff fa85 	bl	8006f34 <vPortExitCritical>

	return xReturn;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a3e:	2300      	movs	r3, #0
 8007a40:	60fb      	str	r3, [r7, #12]
 8007a42:	e014      	b.n	8007a6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007a44:	4a0f      	ldr	r2, [pc, #60]	; (8007a84 <vQueueAddToRegistry+0x50>)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d10b      	bne.n	8007a68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007a50:	490c      	ldr	r1, [pc, #48]	; (8007a84 <vQueueAddToRegistry+0x50>)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	683a      	ldr	r2, [r7, #0]
 8007a56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007a5a:	4a0a      	ldr	r2, [pc, #40]	; (8007a84 <vQueueAddToRegistry+0x50>)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	00db      	lsls	r3, r3, #3
 8007a60:	4413      	add	r3, r2
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007a66:	e006      	b.n	8007a76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	60fb      	str	r3, [r7, #12]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2b07      	cmp	r3, #7
 8007a72:	d9e7      	bls.n	8007a44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007a74:	bf00      	nop
 8007a76:	bf00      	nop
 8007a78:	3714      	adds	r7, #20
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop
 8007a84:	24004bbc 	.word	0x24004bbc

08007a88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007a98:	f7ff fa1c 	bl	8006ed4 <vPortEnterCritical>
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007aa2:	b25b      	sxtb	r3, r3
 8007aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa8:	d103      	bne.n	8007ab2 <vQueueWaitForMessageRestricted+0x2a>
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ab8:	b25b      	sxtb	r3, r3
 8007aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007abe:	d103      	bne.n	8007ac8 <vQueueWaitForMessageRestricted+0x40>
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ac8:	f7ff fa34 	bl	8006f34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d106      	bne.n	8007ae2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	3324      	adds	r3, #36	; 0x24
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	68b9      	ldr	r1, [r7, #8]
 8007adc:	4618      	mov	r0, r3
 8007ade:	f000 fc61 	bl	80083a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007ae2:	6978      	ldr	r0, [r7, #20]
 8007ae4:	f7ff ff26 	bl	8007934 <prvUnlockQueue>
	}
 8007ae8:	bf00      	nop
 8007aea:	3718      	adds	r7, #24
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b08e      	sub	sp, #56	; 0x38
 8007af4:	af04      	add	r7, sp, #16
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]
 8007afc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d10a      	bne.n	8007b1a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b08:	f383 8811 	msr	BASEPRI, r3
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	623b      	str	r3, [r7, #32]
}
 8007b16:	bf00      	nop
 8007b18:	e7fe      	b.n	8007b18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d10a      	bne.n	8007b36 <xTaskCreateStatic+0x46>
	__asm volatile
 8007b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b24:	f383 8811 	msr	BASEPRI, r3
 8007b28:	f3bf 8f6f 	isb	sy
 8007b2c:	f3bf 8f4f 	dsb	sy
 8007b30:	61fb      	str	r3, [r7, #28]
}
 8007b32:	bf00      	nop
 8007b34:	e7fe      	b.n	8007b34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b36:	23bc      	movs	r3, #188	; 0xbc
 8007b38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	2bbc      	cmp	r3, #188	; 0xbc
 8007b3e:	d00a      	beq.n	8007b56 <xTaskCreateStatic+0x66>
	__asm volatile
 8007b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b44:	f383 8811 	msr	BASEPRI, r3
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	61bb      	str	r3, [r7, #24]
}
 8007b52:	bf00      	nop
 8007b54:	e7fe      	b.n	8007b54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007b56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d01e      	beq.n	8007b9c <xTaskCreateStatic+0xac>
 8007b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d01b      	beq.n	8007b9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b70:	2202      	movs	r2, #2
 8007b72:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b76:	2300      	movs	r3, #0
 8007b78:	9303      	str	r3, [sp, #12]
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7c:	9302      	str	r3, [sp, #8]
 8007b7e:	f107 0314 	add.w	r3, r7, #20
 8007b82:	9301      	str	r3, [sp, #4]
 8007b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b86:	9300      	str	r3, [sp, #0]
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	68b9      	ldr	r1, [r7, #8]
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f000 f850 	bl	8007c34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b96:	f000 f8f3 	bl	8007d80 <prvAddNewTaskToReadyList>
 8007b9a:	e001      	b.n	8007ba0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007ba0:	697b      	ldr	r3, [r7, #20]
	}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3728      	adds	r7, #40	; 0x28
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b08c      	sub	sp, #48	; 0x30
 8007bae:	af04      	add	r7, sp, #16
 8007bb0:	60f8      	str	r0, [r7, #12]
 8007bb2:	60b9      	str	r1, [r7, #8]
 8007bb4:	603b      	str	r3, [r7, #0]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007bba:	88fb      	ldrh	r3, [r7, #6]
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fe fdc0 	bl	8006744 <pvPortMalloc>
 8007bc4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00e      	beq.n	8007bea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007bcc:	20bc      	movs	r0, #188	; 0xbc
 8007bce:	f7fe fdb9 	bl	8006744 <pvPortMalloc>
 8007bd2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	631a      	str	r2, [r3, #48]	; 0x30
 8007be0:	e005      	b.n	8007bee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007be2:	6978      	ldr	r0, [r7, #20]
 8007be4:	f7fe fe7a 	bl	80068dc <vPortFree>
 8007be8:	e001      	b.n	8007bee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007bea:	2300      	movs	r3, #0
 8007bec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d017      	beq.n	8007c24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007bfc:	88fa      	ldrh	r2, [r7, #6]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	9303      	str	r3, [sp, #12]
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	9302      	str	r3, [sp, #8]
 8007c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c08:	9301      	str	r3, [sp, #4]
 8007c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0c:	9300      	str	r3, [sp, #0]
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	68b9      	ldr	r1, [r7, #8]
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f000 f80e 	bl	8007c34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c18:	69f8      	ldr	r0, [r7, #28]
 8007c1a:	f000 f8b1 	bl	8007d80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	61bb      	str	r3, [r7, #24]
 8007c22:	e002      	b.n	8007c2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c24:	f04f 33ff 	mov.w	r3, #4294967295
 8007c28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c2a:	69bb      	ldr	r3, [r7, #24]
	}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3720      	adds	r7, #32
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b088      	sub	sp, #32
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
 8007c40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	21a5      	movs	r1, #165	; 0xa5
 8007c4e:	f001 fafb 	bl	8009248 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c56:	6879      	ldr	r1, [r7, #4]
 8007c58:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007c5c:	440b      	add	r3, r1
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	4413      	add	r3, r2
 8007c62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	f023 0307 	bic.w	r3, r3, #7
 8007c6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	f003 0307 	and.w	r3, r3, #7
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00a      	beq.n	8007c8c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7a:	f383 8811 	msr	BASEPRI, r3
 8007c7e:	f3bf 8f6f 	isb	sy
 8007c82:	f3bf 8f4f 	dsb	sy
 8007c86:	617b      	str	r3, [r7, #20]
}
 8007c88:	bf00      	nop
 8007c8a:	e7fe      	b.n	8007c8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d01f      	beq.n	8007cd2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c92:	2300      	movs	r3, #0
 8007c94:	61fb      	str	r3, [r7, #28]
 8007c96:	e012      	b.n	8007cbe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	7819      	ldrb	r1, [r3, #0]
 8007ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	3334      	adds	r3, #52	; 0x34
 8007ca8:	460a      	mov	r2, r1
 8007caa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d006      	beq.n	8007cc6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	61fb      	str	r3, [r7, #28]
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	2b0f      	cmp	r3, #15
 8007cc2:	d9e9      	bls.n	8007c98 <prvInitialiseNewTask+0x64>
 8007cc4:	e000      	b.n	8007cc8 <prvInitialiseNewTask+0x94>
			{
				break;
 8007cc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007cd0:	e003      	b.n	8007cda <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cdc:	2b37      	cmp	r3, #55	; 0x37
 8007cde:	d901      	bls.n	8007ce4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ce0:	2337      	movs	r3, #55	; 0x37
 8007ce2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ce8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf8:	3304      	adds	r3, #4
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fe ff2c 	bl	8006b58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d02:	3318      	adds	r3, #24
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7fe ff27 	bl	8006b58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d22:	2200      	movs	r2, #0
 8007d24:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d32:	3354      	adds	r3, #84	; 0x54
 8007d34:	2260      	movs	r2, #96	; 0x60
 8007d36:	2100      	movs	r1, #0
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f001 fa85 	bl	8009248 <memset>
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d40:	4a0c      	ldr	r2, [pc, #48]	; (8007d74 <prvInitialiseNewTask+0x140>)
 8007d42:	659a      	str	r2, [r3, #88]	; 0x58
 8007d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d46:	4a0c      	ldr	r2, [pc, #48]	; (8007d78 <prvInitialiseNewTask+0x144>)
 8007d48:	65da      	str	r2, [r3, #92]	; 0x5c
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4c:	4a0b      	ldr	r2, [pc, #44]	; (8007d7c <prvInitialiseNewTask+0x148>)
 8007d4e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	68f9      	ldr	r1, [r7, #12]
 8007d54:	69b8      	ldr	r0, [r7, #24]
 8007d56:	f7fe ff93 	bl	8006c80 <pxPortInitialiseStack>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d002      	beq.n	8007d6c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d6c:	bf00      	nop
 8007d6e:	3720      	adds	r7, #32
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	0800a0b4 	.word	0x0800a0b4
 8007d78:	0800a0d4 	.word	0x0800a0d4
 8007d7c:	0800a094 	.word	0x0800a094

08007d80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d88:	f7ff f8a4 	bl	8006ed4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d8c:	4b2d      	ldr	r3, [pc, #180]	; (8007e44 <prvAddNewTaskToReadyList+0xc4>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	3301      	adds	r3, #1
 8007d92:	4a2c      	ldr	r2, [pc, #176]	; (8007e44 <prvAddNewTaskToReadyList+0xc4>)
 8007d94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d96:	4b2c      	ldr	r3, [pc, #176]	; (8007e48 <prvAddNewTaskToReadyList+0xc8>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d109      	bne.n	8007db2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d9e:	4a2a      	ldr	r2, [pc, #168]	; (8007e48 <prvAddNewTaskToReadyList+0xc8>)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007da4:	4b27      	ldr	r3, [pc, #156]	; (8007e44 <prvAddNewTaskToReadyList+0xc4>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d110      	bne.n	8007dce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007dac:	f000 fc26 	bl	80085fc <prvInitialiseTaskLists>
 8007db0:	e00d      	b.n	8007dce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007db2:	4b26      	ldr	r3, [pc, #152]	; (8007e4c <prvAddNewTaskToReadyList+0xcc>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d109      	bne.n	8007dce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007dba:	4b23      	ldr	r3, [pc, #140]	; (8007e48 <prvAddNewTaskToReadyList+0xc8>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d802      	bhi.n	8007dce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007dc8:	4a1f      	ldr	r2, [pc, #124]	; (8007e48 <prvAddNewTaskToReadyList+0xc8>)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007dce:	4b20      	ldr	r3, [pc, #128]	; (8007e50 <prvAddNewTaskToReadyList+0xd0>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	4a1e      	ldr	r2, [pc, #120]	; (8007e50 <prvAddNewTaskToReadyList+0xd0>)
 8007dd6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007dd8:	4b1d      	ldr	r3, [pc, #116]	; (8007e50 <prvAddNewTaskToReadyList+0xd0>)
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de4:	4b1b      	ldr	r3, [pc, #108]	; (8007e54 <prvAddNewTaskToReadyList+0xd4>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d903      	bls.n	8007df4 <prvAddNewTaskToReadyList+0x74>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df0:	4a18      	ldr	r2, [pc, #96]	; (8007e54 <prvAddNewTaskToReadyList+0xd4>)
 8007df2:	6013      	str	r3, [r2, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df8:	4613      	mov	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4a15      	ldr	r2, [pc, #84]	; (8007e58 <prvAddNewTaskToReadyList+0xd8>)
 8007e02:	441a      	add	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	3304      	adds	r3, #4
 8007e08:	4619      	mov	r1, r3
 8007e0a:	4610      	mov	r0, r2
 8007e0c:	f7fe feb1 	bl	8006b72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e10:	f7ff f890 	bl	8006f34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e14:	4b0d      	ldr	r3, [pc, #52]	; (8007e4c <prvAddNewTaskToReadyList+0xcc>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00e      	beq.n	8007e3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e1c:	4b0a      	ldr	r3, [pc, #40]	; (8007e48 <prvAddNewTaskToReadyList+0xc8>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d207      	bcs.n	8007e3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e2a:	4b0c      	ldr	r3, [pc, #48]	; (8007e5c <prvAddNewTaskToReadyList+0xdc>)
 8007e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e30:	601a      	str	r2, [r3, #0]
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e3a:	bf00      	nop
 8007e3c:	3708      	adds	r7, #8
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	24004934 	.word	0x24004934
 8007e48:	24004460 	.word	0x24004460
 8007e4c:	24004940 	.word	0x24004940
 8007e50:	24004950 	.word	0x24004950
 8007e54:	2400493c 	.word	0x2400493c
 8007e58:	24004464 	.word	0x24004464
 8007e5c:	e000ed04 	.word	0xe000ed04

08007e60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d017      	beq.n	8007ea2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e72:	4b13      	ldr	r3, [pc, #76]	; (8007ec0 <vTaskDelay+0x60>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00a      	beq.n	8007e90 <vTaskDelay+0x30>
	__asm volatile
 8007e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7e:	f383 8811 	msr	BASEPRI, r3
 8007e82:	f3bf 8f6f 	isb	sy
 8007e86:	f3bf 8f4f 	dsb	sy
 8007e8a:	60bb      	str	r3, [r7, #8]
}
 8007e8c:	bf00      	nop
 8007e8e:	e7fe      	b.n	8007e8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007e90:	f000 f88a 	bl	8007fa8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e94:	2100      	movs	r1, #0
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 fcfe 	bl	8008898 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e9c:	f000 f892 	bl	8007fc4 <xTaskResumeAll>
 8007ea0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d107      	bne.n	8007eb8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007ea8:	4b06      	ldr	r3, [pc, #24]	; (8007ec4 <vTaskDelay+0x64>)
 8007eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eae:	601a      	str	r2, [r3, #0]
 8007eb0:	f3bf 8f4f 	dsb	sy
 8007eb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007eb8:	bf00      	nop
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	2400495c 	.word	0x2400495c
 8007ec4:	e000ed04 	.word	0xe000ed04

08007ec8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b08a      	sub	sp, #40	; 0x28
 8007ecc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007ed6:	463a      	mov	r2, r7
 8007ed8:	1d39      	adds	r1, r7, #4
 8007eda:	f107 0308 	add.w	r3, r7, #8
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fe fbfc 	bl	80066dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	9202      	str	r2, [sp, #8]
 8007eec:	9301      	str	r3, [sp, #4]
 8007eee:	2300      	movs	r3, #0
 8007ef0:	9300      	str	r3, [sp, #0]
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	460a      	mov	r2, r1
 8007ef6:	4924      	ldr	r1, [pc, #144]	; (8007f88 <vTaskStartScheduler+0xc0>)
 8007ef8:	4824      	ldr	r0, [pc, #144]	; (8007f8c <vTaskStartScheduler+0xc4>)
 8007efa:	f7ff fdf9 	bl	8007af0 <xTaskCreateStatic>
 8007efe:	4603      	mov	r3, r0
 8007f00:	4a23      	ldr	r2, [pc, #140]	; (8007f90 <vTaskStartScheduler+0xc8>)
 8007f02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f04:	4b22      	ldr	r3, [pc, #136]	; (8007f90 <vTaskStartScheduler+0xc8>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d002      	beq.n	8007f12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	617b      	str	r3, [r7, #20]
 8007f10:	e001      	b.n	8007f16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007f12:	2300      	movs	r3, #0
 8007f14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d102      	bne.n	8007f22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007f1c:	f000 fd10 	bl	8008940 <xTimerCreateTimerTask>
 8007f20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d11b      	bne.n	8007f60 <vTaskStartScheduler+0x98>
	__asm volatile
 8007f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2c:	f383 8811 	msr	BASEPRI, r3
 8007f30:	f3bf 8f6f 	isb	sy
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	613b      	str	r3, [r7, #16]
}
 8007f3a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f3c:	4b15      	ldr	r3, [pc, #84]	; (8007f94 <vTaskStartScheduler+0xcc>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	3354      	adds	r3, #84	; 0x54
 8007f42:	4a15      	ldr	r2, [pc, #84]	; (8007f98 <vTaskStartScheduler+0xd0>)
 8007f44:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f46:	4b15      	ldr	r3, [pc, #84]	; (8007f9c <vTaskStartScheduler+0xd4>)
 8007f48:	f04f 32ff 	mov.w	r2, #4294967295
 8007f4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f4e:	4b14      	ldr	r3, [pc, #80]	; (8007fa0 <vTaskStartScheduler+0xd8>)
 8007f50:	2201      	movs	r2, #1
 8007f52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007f54:	4b13      	ldr	r3, [pc, #76]	; (8007fa4 <vTaskStartScheduler+0xdc>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f5a:	f7fe ff19 	bl	8006d90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007f5e:	e00e      	b.n	8007f7e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f66:	d10a      	bne.n	8007f7e <vTaskStartScheduler+0xb6>
	__asm volatile
 8007f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6c:	f383 8811 	msr	BASEPRI, r3
 8007f70:	f3bf 8f6f 	isb	sy
 8007f74:	f3bf 8f4f 	dsb	sy
 8007f78:	60fb      	str	r3, [r7, #12]
}
 8007f7a:	bf00      	nop
 8007f7c:	e7fe      	b.n	8007f7c <vTaskStartScheduler+0xb4>
}
 8007f7e:	bf00      	nop
 8007f80:	3718      	adds	r7, #24
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	0800a020 	.word	0x0800a020
 8007f8c:	080085cd 	.word	0x080085cd
 8007f90:	24004958 	.word	0x24004958
 8007f94:	24004460 	.word	0x24004460
 8007f98:	24000014 	.word	0x24000014
 8007f9c:	24004954 	.word	0x24004954
 8007fa0:	24004940 	.word	0x24004940
 8007fa4:	24004938 	.word	0x24004938

08007fa8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007fa8:	b480      	push	{r7}
 8007faa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007fac:	4b04      	ldr	r3, [pc, #16]	; (8007fc0 <vTaskSuspendAll+0x18>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	4a03      	ldr	r2, [pc, #12]	; (8007fc0 <vTaskSuspendAll+0x18>)
 8007fb4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007fb6:	bf00      	nop
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr
 8007fc0:	2400495c 	.word	0x2400495c

08007fc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007fd2:	4b42      	ldr	r3, [pc, #264]	; (80080dc <xTaskResumeAll+0x118>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10a      	bne.n	8007ff0 <xTaskResumeAll+0x2c>
	__asm volatile
 8007fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fde:	f383 8811 	msr	BASEPRI, r3
 8007fe2:	f3bf 8f6f 	isb	sy
 8007fe6:	f3bf 8f4f 	dsb	sy
 8007fea:	603b      	str	r3, [r7, #0]
}
 8007fec:	bf00      	nop
 8007fee:	e7fe      	b.n	8007fee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007ff0:	f7fe ff70 	bl	8006ed4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007ff4:	4b39      	ldr	r3, [pc, #228]	; (80080dc <xTaskResumeAll+0x118>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	4a38      	ldr	r2, [pc, #224]	; (80080dc <xTaskResumeAll+0x118>)
 8007ffc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ffe:	4b37      	ldr	r3, [pc, #220]	; (80080dc <xTaskResumeAll+0x118>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d162      	bne.n	80080cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008006:	4b36      	ldr	r3, [pc, #216]	; (80080e0 <xTaskResumeAll+0x11c>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d05e      	beq.n	80080cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800800e:	e02f      	b.n	8008070 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008010:	4b34      	ldr	r3, [pc, #208]	; (80080e4 <xTaskResumeAll+0x120>)
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	3318      	adds	r3, #24
 800801c:	4618      	mov	r0, r3
 800801e:	f7fe fe05 	bl	8006c2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	3304      	adds	r3, #4
 8008026:	4618      	mov	r0, r3
 8008028:	f7fe fe00 	bl	8006c2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008030:	4b2d      	ldr	r3, [pc, #180]	; (80080e8 <xTaskResumeAll+0x124>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	429a      	cmp	r2, r3
 8008036:	d903      	bls.n	8008040 <xTaskResumeAll+0x7c>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803c:	4a2a      	ldr	r2, [pc, #168]	; (80080e8 <xTaskResumeAll+0x124>)
 800803e:	6013      	str	r3, [r2, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008044:	4613      	mov	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	4a27      	ldr	r2, [pc, #156]	; (80080ec <xTaskResumeAll+0x128>)
 800804e:	441a      	add	r2, r3
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	3304      	adds	r3, #4
 8008054:	4619      	mov	r1, r3
 8008056:	4610      	mov	r0, r2
 8008058:	f7fe fd8b 	bl	8006b72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008060:	4b23      	ldr	r3, [pc, #140]	; (80080f0 <xTaskResumeAll+0x12c>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008066:	429a      	cmp	r2, r3
 8008068:	d302      	bcc.n	8008070 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800806a:	4b22      	ldr	r3, [pc, #136]	; (80080f4 <xTaskResumeAll+0x130>)
 800806c:	2201      	movs	r2, #1
 800806e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008070:	4b1c      	ldr	r3, [pc, #112]	; (80080e4 <xTaskResumeAll+0x120>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1cb      	bne.n	8008010 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d001      	beq.n	8008082 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800807e:	f000 fb5f 	bl	8008740 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008082:	4b1d      	ldr	r3, [pc, #116]	; (80080f8 <xTaskResumeAll+0x134>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d010      	beq.n	80080b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800808e:	f000 f847 	bl	8008120 <xTaskIncrementTick>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d002      	beq.n	800809e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008098:	4b16      	ldr	r3, [pc, #88]	; (80080f4 <xTaskResumeAll+0x130>)
 800809a:	2201      	movs	r2, #1
 800809c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	3b01      	subs	r3, #1
 80080a2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1f1      	bne.n	800808e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80080aa:	4b13      	ldr	r3, [pc, #76]	; (80080f8 <xTaskResumeAll+0x134>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80080b0:	4b10      	ldr	r3, [pc, #64]	; (80080f4 <xTaskResumeAll+0x130>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d009      	beq.n	80080cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80080b8:	2301      	movs	r3, #1
 80080ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80080bc:	4b0f      	ldr	r3, [pc, #60]	; (80080fc <xTaskResumeAll+0x138>)
 80080be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080c2:	601a      	str	r2, [r3, #0]
 80080c4:	f3bf 8f4f 	dsb	sy
 80080c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80080cc:	f7fe ff32 	bl	8006f34 <vPortExitCritical>

	return xAlreadyYielded;
 80080d0:	68bb      	ldr	r3, [r7, #8]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	2400495c 	.word	0x2400495c
 80080e0:	24004934 	.word	0x24004934
 80080e4:	240048f4 	.word	0x240048f4
 80080e8:	2400493c 	.word	0x2400493c
 80080ec:	24004464 	.word	0x24004464
 80080f0:	24004460 	.word	0x24004460
 80080f4:	24004948 	.word	0x24004948
 80080f8:	24004944 	.word	0x24004944
 80080fc:	e000ed04 	.word	0xe000ed04

08008100 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008106:	4b05      	ldr	r3, [pc, #20]	; (800811c <xTaskGetTickCount+0x1c>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800810c:	687b      	ldr	r3, [r7, #4]
}
 800810e:	4618      	mov	r0, r3
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	24004938 	.word	0x24004938

08008120 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008126:	2300      	movs	r3, #0
 8008128:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800812a:	4b4f      	ldr	r3, [pc, #316]	; (8008268 <xTaskIncrementTick+0x148>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	f040 808f 	bne.w	8008252 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008134:	4b4d      	ldr	r3, [pc, #308]	; (800826c <xTaskIncrementTick+0x14c>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	3301      	adds	r3, #1
 800813a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800813c:	4a4b      	ldr	r2, [pc, #300]	; (800826c <xTaskIncrementTick+0x14c>)
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d120      	bne.n	800818a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008148:	4b49      	ldr	r3, [pc, #292]	; (8008270 <xTaskIncrementTick+0x150>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00a      	beq.n	8008168 <xTaskIncrementTick+0x48>
	__asm volatile
 8008152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008156:	f383 8811 	msr	BASEPRI, r3
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	603b      	str	r3, [r7, #0]
}
 8008164:	bf00      	nop
 8008166:	e7fe      	b.n	8008166 <xTaskIncrementTick+0x46>
 8008168:	4b41      	ldr	r3, [pc, #260]	; (8008270 <xTaskIncrementTick+0x150>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	60fb      	str	r3, [r7, #12]
 800816e:	4b41      	ldr	r3, [pc, #260]	; (8008274 <xTaskIncrementTick+0x154>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a3f      	ldr	r2, [pc, #252]	; (8008270 <xTaskIncrementTick+0x150>)
 8008174:	6013      	str	r3, [r2, #0]
 8008176:	4a3f      	ldr	r2, [pc, #252]	; (8008274 <xTaskIncrementTick+0x154>)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6013      	str	r3, [r2, #0]
 800817c:	4b3e      	ldr	r3, [pc, #248]	; (8008278 <xTaskIncrementTick+0x158>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	3301      	adds	r3, #1
 8008182:	4a3d      	ldr	r2, [pc, #244]	; (8008278 <xTaskIncrementTick+0x158>)
 8008184:	6013      	str	r3, [r2, #0]
 8008186:	f000 fadb 	bl	8008740 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800818a:	4b3c      	ldr	r3, [pc, #240]	; (800827c <xTaskIncrementTick+0x15c>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	429a      	cmp	r2, r3
 8008192:	d349      	bcc.n	8008228 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008194:	4b36      	ldr	r3, [pc, #216]	; (8008270 <xTaskIncrementTick+0x150>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d104      	bne.n	80081a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800819e:	4b37      	ldr	r3, [pc, #220]	; (800827c <xTaskIncrementTick+0x15c>)
 80081a0:	f04f 32ff 	mov.w	r2, #4294967295
 80081a4:	601a      	str	r2, [r3, #0]
					break;
 80081a6:	e03f      	b.n	8008228 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081a8:	4b31      	ldr	r3, [pc, #196]	; (8008270 <xTaskIncrementTick+0x150>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80081b8:	693a      	ldr	r2, [r7, #16]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d203      	bcs.n	80081c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80081c0:	4a2e      	ldr	r2, [pc, #184]	; (800827c <xTaskIncrementTick+0x15c>)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80081c6:	e02f      	b.n	8008228 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	3304      	adds	r3, #4
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7fe fd2d 	bl	8006c2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d004      	beq.n	80081e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	3318      	adds	r3, #24
 80081de:	4618      	mov	r0, r3
 80081e0:	f7fe fd24 	bl	8006c2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e8:	4b25      	ldr	r3, [pc, #148]	; (8008280 <xTaskIncrementTick+0x160>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d903      	bls.n	80081f8 <xTaskIncrementTick+0xd8>
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f4:	4a22      	ldr	r2, [pc, #136]	; (8008280 <xTaskIncrementTick+0x160>)
 80081f6:	6013      	str	r3, [r2, #0]
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081fc:	4613      	mov	r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	4413      	add	r3, r2
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	4a1f      	ldr	r2, [pc, #124]	; (8008284 <xTaskIncrementTick+0x164>)
 8008206:	441a      	add	r2, r3
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	3304      	adds	r3, #4
 800820c:	4619      	mov	r1, r3
 800820e:	4610      	mov	r0, r2
 8008210:	f7fe fcaf 	bl	8006b72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008218:	4b1b      	ldr	r3, [pc, #108]	; (8008288 <xTaskIncrementTick+0x168>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821e:	429a      	cmp	r2, r3
 8008220:	d3b8      	bcc.n	8008194 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008222:	2301      	movs	r3, #1
 8008224:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008226:	e7b5      	b.n	8008194 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008228:	4b17      	ldr	r3, [pc, #92]	; (8008288 <xTaskIncrementTick+0x168>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800822e:	4915      	ldr	r1, [pc, #84]	; (8008284 <xTaskIncrementTick+0x164>)
 8008230:	4613      	mov	r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	4413      	add	r3, r2
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	440b      	add	r3, r1
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d901      	bls.n	8008244 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008240:	2301      	movs	r3, #1
 8008242:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008244:	4b11      	ldr	r3, [pc, #68]	; (800828c <xTaskIncrementTick+0x16c>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d007      	beq.n	800825c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800824c:	2301      	movs	r3, #1
 800824e:	617b      	str	r3, [r7, #20]
 8008250:	e004      	b.n	800825c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008252:	4b0f      	ldr	r3, [pc, #60]	; (8008290 <xTaskIncrementTick+0x170>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3301      	adds	r3, #1
 8008258:	4a0d      	ldr	r2, [pc, #52]	; (8008290 <xTaskIncrementTick+0x170>)
 800825a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800825c:	697b      	ldr	r3, [r7, #20]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3718      	adds	r7, #24
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	2400495c 	.word	0x2400495c
 800826c:	24004938 	.word	0x24004938
 8008270:	240048ec 	.word	0x240048ec
 8008274:	240048f0 	.word	0x240048f0
 8008278:	2400494c 	.word	0x2400494c
 800827c:	24004954 	.word	0x24004954
 8008280:	2400493c 	.word	0x2400493c
 8008284:	24004464 	.word	0x24004464
 8008288:	24004460 	.word	0x24004460
 800828c:	24004948 	.word	0x24004948
 8008290:	24004944 	.word	0x24004944

08008294 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800829a:	4b2a      	ldr	r3, [pc, #168]	; (8008344 <vTaskSwitchContext+0xb0>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d003      	beq.n	80082aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80082a2:	4b29      	ldr	r3, [pc, #164]	; (8008348 <vTaskSwitchContext+0xb4>)
 80082a4:	2201      	movs	r2, #1
 80082a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80082a8:	e046      	b.n	8008338 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80082aa:	4b27      	ldr	r3, [pc, #156]	; (8008348 <vTaskSwitchContext+0xb4>)
 80082ac:	2200      	movs	r2, #0
 80082ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082b0:	4b26      	ldr	r3, [pc, #152]	; (800834c <vTaskSwitchContext+0xb8>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	60fb      	str	r3, [r7, #12]
 80082b6:	e010      	b.n	80082da <vTaskSwitchContext+0x46>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d10a      	bne.n	80082d4 <vTaskSwitchContext+0x40>
	__asm volatile
 80082be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c2:	f383 8811 	msr	BASEPRI, r3
 80082c6:	f3bf 8f6f 	isb	sy
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	607b      	str	r3, [r7, #4]
}
 80082d0:	bf00      	nop
 80082d2:	e7fe      	b.n	80082d2 <vTaskSwitchContext+0x3e>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	3b01      	subs	r3, #1
 80082d8:	60fb      	str	r3, [r7, #12]
 80082da:	491d      	ldr	r1, [pc, #116]	; (8008350 <vTaskSwitchContext+0xbc>)
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	4613      	mov	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4413      	add	r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	440b      	add	r3, r1
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d0e4      	beq.n	80082b8 <vTaskSwitchContext+0x24>
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	4613      	mov	r3, r2
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4413      	add	r3, r2
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	4a15      	ldr	r2, [pc, #84]	; (8008350 <vTaskSwitchContext+0xbc>)
 80082fa:	4413      	add	r3, r2
 80082fc:	60bb      	str	r3, [r7, #8]
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	685a      	ldr	r2, [r3, #4]
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	605a      	str	r2, [r3, #4]
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	685a      	ldr	r2, [r3, #4]
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	3308      	adds	r3, #8
 8008310:	429a      	cmp	r2, r3
 8008312:	d104      	bne.n	800831e <vTaskSwitchContext+0x8a>
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	685a      	ldr	r2, [r3, #4]
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	605a      	str	r2, [r3, #4]
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	4a0b      	ldr	r2, [pc, #44]	; (8008354 <vTaskSwitchContext+0xc0>)
 8008326:	6013      	str	r3, [r2, #0]
 8008328:	4a08      	ldr	r2, [pc, #32]	; (800834c <vTaskSwitchContext+0xb8>)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800832e:	4b09      	ldr	r3, [pc, #36]	; (8008354 <vTaskSwitchContext+0xc0>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	3354      	adds	r3, #84	; 0x54
 8008334:	4a08      	ldr	r2, [pc, #32]	; (8008358 <vTaskSwitchContext+0xc4>)
 8008336:	6013      	str	r3, [r2, #0]
}
 8008338:	bf00      	nop
 800833a:	3714      	adds	r7, #20
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr
 8008344:	2400495c 	.word	0x2400495c
 8008348:	24004948 	.word	0x24004948
 800834c:	2400493c 	.word	0x2400493c
 8008350:	24004464 	.word	0x24004464
 8008354:	24004460 	.word	0x24004460
 8008358:	24000014 	.word	0x24000014

0800835c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d10a      	bne.n	8008382 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800836c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008370:	f383 8811 	msr	BASEPRI, r3
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	60fb      	str	r3, [r7, #12]
}
 800837e:	bf00      	nop
 8008380:	e7fe      	b.n	8008380 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008382:	4b07      	ldr	r3, [pc, #28]	; (80083a0 <vTaskPlaceOnEventList+0x44>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3318      	adds	r3, #24
 8008388:	4619      	mov	r1, r3
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7fe fc15 	bl	8006bba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008390:	2101      	movs	r1, #1
 8008392:	6838      	ldr	r0, [r7, #0]
 8008394:	f000 fa80 	bl	8008898 <prvAddCurrentTaskToDelayedList>
}
 8008398:	bf00      	nop
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	24004460 	.word	0x24004460

080083a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b086      	sub	sp, #24
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10a      	bne.n	80083cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80083b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ba:	f383 8811 	msr	BASEPRI, r3
 80083be:	f3bf 8f6f 	isb	sy
 80083c2:	f3bf 8f4f 	dsb	sy
 80083c6:	617b      	str	r3, [r7, #20]
}
 80083c8:	bf00      	nop
 80083ca:	e7fe      	b.n	80083ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80083cc:	4b0a      	ldr	r3, [pc, #40]	; (80083f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	3318      	adds	r3, #24
 80083d2:	4619      	mov	r1, r3
 80083d4:	68f8      	ldr	r0, [r7, #12]
 80083d6:	f7fe fbcc 	bl	8006b72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d002      	beq.n	80083e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80083e0:	f04f 33ff 	mov.w	r3, #4294967295
 80083e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80083e6:	6879      	ldr	r1, [r7, #4]
 80083e8:	68b8      	ldr	r0, [r7, #8]
 80083ea:	f000 fa55 	bl	8008898 <prvAddCurrentTaskToDelayedList>
	}
 80083ee:	bf00      	nop
 80083f0:	3718      	adds	r7, #24
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	24004460 	.word	0x24004460

080083fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10a      	bne.n	8008428 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	60fb      	str	r3, [r7, #12]
}
 8008424:	bf00      	nop
 8008426:	e7fe      	b.n	8008426 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	3318      	adds	r3, #24
 800842c:	4618      	mov	r0, r3
 800842e:	f7fe fbfd 	bl	8006c2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008432:	4b1e      	ldr	r3, [pc, #120]	; (80084ac <xTaskRemoveFromEventList+0xb0>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d11d      	bne.n	8008476 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	3304      	adds	r3, #4
 800843e:	4618      	mov	r0, r3
 8008440:	f7fe fbf4 	bl	8006c2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008448:	4b19      	ldr	r3, [pc, #100]	; (80084b0 <xTaskRemoveFromEventList+0xb4>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	429a      	cmp	r2, r3
 800844e:	d903      	bls.n	8008458 <xTaskRemoveFromEventList+0x5c>
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008454:	4a16      	ldr	r2, [pc, #88]	; (80084b0 <xTaskRemoveFromEventList+0xb4>)
 8008456:	6013      	str	r3, [r2, #0]
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800845c:	4613      	mov	r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	4413      	add	r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	4a13      	ldr	r2, [pc, #76]	; (80084b4 <xTaskRemoveFromEventList+0xb8>)
 8008466:	441a      	add	r2, r3
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	3304      	adds	r3, #4
 800846c:	4619      	mov	r1, r3
 800846e:	4610      	mov	r0, r2
 8008470:	f7fe fb7f 	bl	8006b72 <vListInsertEnd>
 8008474:	e005      	b.n	8008482 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	3318      	adds	r3, #24
 800847a:	4619      	mov	r1, r3
 800847c:	480e      	ldr	r0, [pc, #56]	; (80084b8 <xTaskRemoveFromEventList+0xbc>)
 800847e:	f7fe fb78 	bl	8006b72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008486:	4b0d      	ldr	r3, [pc, #52]	; (80084bc <xTaskRemoveFromEventList+0xc0>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848c:	429a      	cmp	r2, r3
 800848e:	d905      	bls.n	800849c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008490:	2301      	movs	r3, #1
 8008492:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008494:	4b0a      	ldr	r3, [pc, #40]	; (80084c0 <xTaskRemoveFromEventList+0xc4>)
 8008496:	2201      	movs	r2, #1
 8008498:	601a      	str	r2, [r3, #0]
 800849a:	e001      	b.n	80084a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800849c:	2300      	movs	r3, #0
 800849e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80084a0:	697b      	ldr	r3, [r7, #20]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3718      	adds	r7, #24
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	2400495c 	.word	0x2400495c
 80084b0:	2400493c 	.word	0x2400493c
 80084b4:	24004464 	.word	0x24004464
 80084b8:	240048f4 	.word	0x240048f4
 80084bc:	24004460 	.word	0x24004460
 80084c0:	24004948 	.word	0x24004948

080084c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80084cc:	4b06      	ldr	r3, [pc, #24]	; (80084e8 <vTaskInternalSetTimeOutState+0x24>)
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80084d4:	4b05      	ldr	r3, [pc, #20]	; (80084ec <vTaskInternalSetTimeOutState+0x28>)
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	605a      	str	r2, [r3, #4]
}
 80084dc:	bf00      	nop
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr
 80084e8:	2400494c 	.word	0x2400494c
 80084ec:	24004938 	.word	0x24004938

080084f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b088      	sub	sp, #32
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d10a      	bne.n	8008516 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008504:	f383 8811 	msr	BASEPRI, r3
 8008508:	f3bf 8f6f 	isb	sy
 800850c:	f3bf 8f4f 	dsb	sy
 8008510:	613b      	str	r3, [r7, #16]
}
 8008512:	bf00      	nop
 8008514:	e7fe      	b.n	8008514 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10a      	bne.n	8008532 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800851c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	60fb      	str	r3, [r7, #12]
}
 800852e:	bf00      	nop
 8008530:	e7fe      	b.n	8008530 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008532:	f7fe fccf 	bl	8006ed4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008536:	4b1d      	ldr	r3, [pc, #116]	; (80085ac <xTaskCheckForTimeOut+0xbc>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	69ba      	ldr	r2, [r7, #24]
 8008542:	1ad3      	subs	r3, r2, r3
 8008544:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854e:	d102      	bne.n	8008556 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008550:	2300      	movs	r3, #0
 8008552:	61fb      	str	r3, [r7, #28]
 8008554:	e023      	b.n	800859e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	4b15      	ldr	r3, [pc, #84]	; (80085b0 <xTaskCheckForTimeOut+0xc0>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	429a      	cmp	r2, r3
 8008560:	d007      	beq.n	8008572 <xTaskCheckForTimeOut+0x82>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	69ba      	ldr	r2, [r7, #24]
 8008568:	429a      	cmp	r2, r3
 800856a:	d302      	bcc.n	8008572 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800856c:	2301      	movs	r3, #1
 800856e:	61fb      	str	r3, [r7, #28]
 8008570:	e015      	b.n	800859e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	429a      	cmp	r2, r3
 800857a:	d20b      	bcs.n	8008594 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	1ad2      	subs	r2, r2, r3
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f7ff ff9b 	bl	80084c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800858e:	2300      	movs	r3, #0
 8008590:	61fb      	str	r3, [r7, #28]
 8008592:	e004      	b.n	800859e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	2200      	movs	r2, #0
 8008598:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800859a:	2301      	movs	r3, #1
 800859c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800859e:	f7fe fcc9 	bl	8006f34 <vPortExitCritical>

	return xReturn;
 80085a2:	69fb      	ldr	r3, [r7, #28]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3720      	adds	r7, #32
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	24004938 	.word	0x24004938
 80085b0:	2400494c 	.word	0x2400494c

080085b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80085b4:	b480      	push	{r7}
 80085b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80085b8:	4b03      	ldr	r3, [pc, #12]	; (80085c8 <vTaskMissedYield+0x14>)
 80085ba:	2201      	movs	r2, #1
 80085bc:	601a      	str	r2, [r3, #0]
}
 80085be:	bf00      	nop
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr
 80085c8:	24004948 	.word	0x24004948

080085cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80085d4:	f000 f852 	bl	800867c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80085d8:	4b06      	ldr	r3, [pc, #24]	; (80085f4 <prvIdleTask+0x28>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d9f9      	bls.n	80085d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80085e0:	4b05      	ldr	r3, [pc, #20]	; (80085f8 <prvIdleTask+0x2c>)
 80085e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085e6:	601a      	str	r2, [r3, #0]
 80085e8:	f3bf 8f4f 	dsb	sy
 80085ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80085f0:	e7f0      	b.n	80085d4 <prvIdleTask+0x8>
 80085f2:	bf00      	nop
 80085f4:	24004464 	.word	0x24004464
 80085f8:	e000ed04 	.word	0xe000ed04

080085fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008602:	2300      	movs	r3, #0
 8008604:	607b      	str	r3, [r7, #4]
 8008606:	e00c      	b.n	8008622 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	4613      	mov	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4413      	add	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4a12      	ldr	r2, [pc, #72]	; (800865c <prvInitialiseTaskLists+0x60>)
 8008614:	4413      	add	r3, r2
 8008616:	4618      	mov	r0, r3
 8008618:	f7fe fa7e 	bl	8006b18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	3301      	adds	r3, #1
 8008620:	607b      	str	r3, [r7, #4]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2b37      	cmp	r3, #55	; 0x37
 8008626:	d9ef      	bls.n	8008608 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008628:	480d      	ldr	r0, [pc, #52]	; (8008660 <prvInitialiseTaskLists+0x64>)
 800862a:	f7fe fa75 	bl	8006b18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800862e:	480d      	ldr	r0, [pc, #52]	; (8008664 <prvInitialiseTaskLists+0x68>)
 8008630:	f7fe fa72 	bl	8006b18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008634:	480c      	ldr	r0, [pc, #48]	; (8008668 <prvInitialiseTaskLists+0x6c>)
 8008636:	f7fe fa6f 	bl	8006b18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800863a:	480c      	ldr	r0, [pc, #48]	; (800866c <prvInitialiseTaskLists+0x70>)
 800863c:	f7fe fa6c 	bl	8006b18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008640:	480b      	ldr	r0, [pc, #44]	; (8008670 <prvInitialiseTaskLists+0x74>)
 8008642:	f7fe fa69 	bl	8006b18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008646:	4b0b      	ldr	r3, [pc, #44]	; (8008674 <prvInitialiseTaskLists+0x78>)
 8008648:	4a05      	ldr	r2, [pc, #20]	; (8008660 <prvInitialiseTaskLists+0x64>)
 800864a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800864c:	4b0a      	ldr	r3, [pc, #40]	; (8008678 <prvInitialiseTaskLists+0x7c>)
 800864e:	4a05      	ldr	r2, [pc, #20]	; (8008664 <prvInitialiseTaskLists+0x68>)
 8008650:	601a      	str	r2, [r3, #0]
}
 8008652:	bf00      	nop
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	24004464 	.word	0x24004464
 8008660:	240048c4 	.word	0x240048c4
 8008664:	240048d8 	.word	0x240048d8
 8008668:	240048f4 	.word	0x240048f4
 800866c:	24004908 	.word	0x24004908
 8008670:	24004920 	.word	0x24004920
 8008674:	240048ec 	.word	0x240048ec
 8008678:	240048f0 	.word	0x240048f0

0800867c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008682:	e019      	b.n	80086b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008684:	f7fe fc26 	bl	8006ed4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008688:	4b10      	ldr	r3, [pc, #64]	; (80086cc <prvCheckTasksWaitingTermination+0x50>)
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	3304      	adds	r3, #4
 8008694:	4618      	mov	r0, r3
 8008696:	f7fe fac9 	bl	8006c2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800869a:	4b0d      	ldr	r3, [pc, #52]	; (80086d0 <prvCheckTasksWaitingTermination+0x54>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	3b01      	subs	r3, #1
 80086a0:	4a0b      	ldr	r2, [pc, #44]	; (80086d0 <prvCheckTasksWaitingTermination+0x54>)
 80086a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80086a4:	4b0b      	ldr	r3, [pc, #44]	; (80086d4 <prvCheckTasksWaitingTermination+0x58>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	3b01      	subs	r3, #1
 80086aa:	4a0a      	ldr	r2, [pc, #40]	; (80086d4 <prvCheckTasksWaitingTermination+0x58>)
 80086ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80086ae:	f7fe fc41 	bl	8006f34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f810 	bl	80086d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086b8:	4b06      	ldr	r3, [pc, #24]	; (80086d4 <prvCheckTasksWaitingTermination+0x58>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d1e1      	bne.n	8008684 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80086c0:	bf00      	nop
 80086c2:	bf00      	nop
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	24004908 	.word	0x24004908
 80086d0:	24004934 	.word	0x24004934
 80086d4:	2400491c 	.word	0x2400491c

080086d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	3354      	adds	r3, #84	; 0x54
 80086e4:	4618      	mov	r0, r3
 80086e6:	f000 fe87 	bl	80093f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d108      	bne.n	8008706 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7fe f8ef 	bl	80068dc <vPortFree>
				vPortFree( pxTCB );
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f7fe f8ec 	bl	80068dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008704:	e018      	b.n	8008738 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800870c:	2b01      	cmp	r3, #1
 800870e:	d103      	bne.n	8008718 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f7fe f8e3 	bl	80068dc <vPortFree>
	}
 8008716:	e00f      	b.n	8008738 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800871e:	2b02      	cmp	r3, #2
 8008720:	d00a      	beq.n	8008738 <prvDeleteTCB+0x60>
	__asm volatile
 8008722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	60fb      	str	r3, [r7, #12]
}
 8008734:	bf00      	nop
 8008736:	e7fe      	b.n	8008736 <prvDeleteTCB+0x5e>
	}
 8008738:	bf00      	nop
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008746:	4b0c      	ldr	r3, [pc, #48]	; (8008778 <prvResetNextTaskUnblockTime+0x38>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d104      	bne.n	800875a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008750:	4b0a      	ldr	r3, [pc, #40]	; (800877c <prvResetNextTaskUnblockTime+0x3c>)
 8008752:	f04f 32ff 	mov.w	r2, #4294967295
 8008756:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008758:	e008      	b.n	800876c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800875a:	4b07      	ldr	r3, [pc, #28]	; (8008778 <prvResetNextTaskUnblockTime+0x38>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	4a04      	ldr	r2, [pc, #16]	; (800877c <prvResetNextTaskUnblockTime+0x3c>)
 800876a:	6013      	str	r3, [r2, #0]
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr
 8008778:	240048ec 	.word	0x240048ec
 800877c:	24004954 	.word	0x24004954

08008780 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008786:	4b0b      	ldr	r3, [pc, #44]	; (80087b4 <xTaskGetSchedulerState+0x34>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d102      	bne.n	8008794 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800878e:	2301      	movs	r3, #1
 8008790:	607b      	str	r3, [r7, #4]
 8008792:	e008      	b.n	80087a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008794:	4b08      	ldr	r3, [pc, #32]	; (80087b8 <xTaskGetSchedulerState+0x38>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d102      	bne.n	80087a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800879c:	2302      	movs	r3, #2
 800879e:	607b      	str	r3, [r7, #4]
 80087a0:	e001      	b.n	80087a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80087a2:	2300      	movs	r3, #0
 80087a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80087a6:	687b      	ldr	r3, [r7, #4]
	}
 80087a8:	4618      	mov	r0, r3
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr
 80087b4:	24004940 	.word	0x24004940
 80087b8:	2400495c 	.word	0x2400495c

080087bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b086      	sub	sp, #24
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80087c8:	2300      	movs	r3, #0
 80087ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d056      	beq.n	8008880 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80087d2:	4b2e      	ldr	r3, [pc, #184]	; (800888c <xTaskPriorityDisinherit+0xd0>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	693a      	ldr	r2, [r7, #16]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d00a      	beq.n	80087f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80087dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e0:	f383 8811 	msr	BASEPRI, r3
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	60fb      	str	r3, [r7, #12]
}
 80087ee:	bf00      	nop
 80087f0:	e7fe      	b.n	80087f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10a      	bne.n	8008810 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80087fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	60bb      	str	r3, [r7, #8]
}
 800880c:	bf00      	nop
 800880e:	e7fe      	b.n	800880e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008814:	1e5a      	subs	r2, r3, #1
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008822:	429a      	cmp	r2, r3
 8008824:	d02c      	beq.n	8008880 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800882a:	2b00      	cmp	r3, #0
 800882c:	d128      	bne.n	8008880 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	3304      	adds	r3, #4
 8008832:	4618      	mov	r0, r3
 8008834:	f7fe f9fa 	bl	8006c2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008844:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008850:	4b0f      	ldr	r3, [pc, #60]	; (8008890 <xTaskPriorityDisinherit+0xd4>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	429a      	cmp	r2, r3
 8008856:	d903      	bls.n	8008860 <xTaskPriorityDisinherit+0xa4>
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800885c:	4a0c      	ldr	r2, [pc, #48]	; (8008890 <xTaskPriorityDisinherit+0xd4>)
 800885e:	6013      	str	r3, [r2, #0]
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008864:	4613      	mov	r3, r2
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	4413      	add	r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	4a09      	ldr	r2, [pc, #36]	; (8008894 <xTaskPriorityDisinherit+0xd8>)
 800886e:	441a      	add	r2, r3
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	3304      	adds	r3, #4
 8008874:	4619      	mov	r1, r3
 8008876:	4610      	mov	r0, r2
 8008878:	f7fe f97b 	bl	8006b72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800887c:	2301      	movs	r3, #1
 800887e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008880:	697b      	ldr	r3, [r7, #20]
	}
 8008882:	4618      	mov	r0, r3
 8008884:	3718      	adds	r7, #24
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	24004460 	.word	0x24004460
 8008890:	2400493c 	.word	0x2400493c
 8008894:	24004464 	.word	0x24004464

08008898 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80088a2:	4b21      	ldr	r3, [pc, #132]	; (8008928 <prvAddCurrentTaskToDelayedList+0x90>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088a8:	4b20      	ldr	r3, [pc, #128]	; (800892c <prvAddCurrentTaskToDelayedList+0x94>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	3304      	adds	r3, #4
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fe f9bc 	bl	8006c2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ba:	d10a      	bne.n	80088d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d007      	beq.n	80088d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088c2:	4b1a      	ldr	r3, [pc, #104]	; (800892c <prvAddCurrentTaskToDelayedList+0x94>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	3304      	adds	r3, #4
 80088c8:	4619      	mov	r1, r3
 80088ca:	4819      	ldr	r0, [pc, #100]	; (8008930 <prvAddCurrentTaskToDelayedList+0x98>)
 80088cc:	f7fe f951 	bl	8006b72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80088d0:	e026      	b.n	8008920 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4413      	add	r3, r2
 80088d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80088da:	4b14      	ldr	r3, [pc, #80]	; (800892c <prvAddCurrentTaskToDelayedList+0x94>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80088e2:	68ba      	ldr	r2, [r7, #8]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d209      	bcs.n	80088fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088ea:	4b12      	ldr	r3, [pc, #72]	; (8008934 <prvAddCurrentTaskToDelayedList+0x9c>)
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	4b0f      	ldr	r3, [pc, #60]	; (800892c <prvAddCurrentTaskToDelayedList+0x94>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	3304      	adds	r3, #4
 80088f4:	4619      	mov	r1, r3
 80088f6:	4610      	mov	r0, r2
 80088f8:	f7fe f95f 	bl	8006bba <vListInsert>
}
 80088fc:	e010      	b.n	8008920 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088fe:	4b0e      	ldr	r3, [pc, #56]	; (8008938 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	4b0a      	ldr	r3, [pc, #40]	; (800892c <prvAddCurrentTaskToDelayedList+0x94>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	3304      	adds	r3, #4
 8008908:	4619      	mov	r1, r3
 800890a:	4610      	mov	r0, r2
 800890c:	f7fe f955 	bl	8006bba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008910:	4b0a      	ldr	r3, [pc, #40]	; (800893c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	68ba      	ldr	r2, [r7, #8]
 8008916:	429a      	cmp	r2, r3
 8008918:	d202      	bcs.n	8008920 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800891a:	4a08      	ldr	r2, [pc, #32]	; (800893c <prvAddCurrentTaskToDelayedList+0xa4>)
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	6013      	str	r3, [r2, #0]
}
 8008920:	bf00      	nop
 8008922:	3710      	adds	r7, #16
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}
 8008928:	24004938 	.word	0x24004938
 800892c:	24004460 	.word	0x24004460
 8008930:	24004920 	.word	0x24004920
 8008934:	240048f0 	.word	0x240048f0
 8008938:	240048ec 	.word	0x240048ec
 800893c:	24004954 	.word	0x24004954

08008940 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b08a      	sub	sp, #40	; 0x28
 8008944:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008946:	2300      	movs	r3, #0
 8008948:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800894a:	f000 fb07 	bl	8008f5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800894e:	4b1c      	ldr	r3, [pc, #112]	; (80089c0 <xTimerCreateTimerTask+0x80>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d021      	beq.n	800899a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008956:	2300      	movs	r3, #0
 8008958:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800895a:	2300      	movs	r3, #0
 800895c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800895e:	1d3a      	adds	r2, r7, #4
 8008960:	f107 0108 	add.w	r1, r7, #8
 8008964:	f107 030c 	add.w	r3, r7, #12
 8008968:	4618      	mov	r0, r3
 800896a:	f7fd fed1 	bl	8006710 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800896e:	6879      	ldr	r1, [r7, #4]
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	9202      	str	r2, [sp, #8]
 8008976:	9301      	str	r3, [sp, #4]
 8008978:	2302      	movs	r3, #2
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	2300      	movs	r3, #0
 800897e:	460a      	mov	r2, r1
 8008980:	4910      	ldr	r1, [pc, #64]	; (80089c4 <xTimerCreateTimerTask+0x84>)
 8008982:	4811      	ldr	r0, [pc, #68]	; (80089c8 <xTimerCreateTimerTask+0x88>)
 8008984:	f7ff f8b4 	bl	8007af0 <xTaskCreateStatic>
 8008988:	4603      	mov	r3, r0
 800898a:	4a10      	ldr	r2, [pc, #64]	; (80089cc <xTimerCreateTimerTask+0x8c>)
 800898c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800898e:	4b0f      	ldr	r3, [pc, #60]	; (80089cc <xTimerCreateTimerTask+0x8c>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d001      	beq.n	800899a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008996:	2301      	movs	r3, #1
 8008998:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10a      	bne.n	80089b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80089a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	613b      	str	r3, [r7, #16]
}
 80089b2:	bf00      	nop
 80089b4:	e7fe      	b.n	80089b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80089b6:	697b      	ldr	r3, [r7, #20]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3718      	adds	r7, #24
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	24004990 	.word	0x24004990
 80089c4:	0800a028 	.word	0x0800a028
 80089c8:	08008b05 	.word	0x08008b05
 80089cc:	24004994 	.word	0x24004994

080089d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b08a      	sub	sp, #40	; 0x28
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	607a      	str	r2, [r7, #4]
 80089dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80089de:	2300      	movs	r3, #0
 80089e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d10a      	bne.n	80089fe <xTimerGenericCommand+0x2e>
	__asm volatile
 80089e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ec:	f383 8811 	msr	BASEPRI, r3
 80089f0:	f3bf 8f6f 	isb	sy
 80089f4:	f3bf 8f4f 	dsb	sy
 80089f8:	623b      	str	r3, [r7, #32]
}
 80089fa:	bf00      	nop
 80089fc:	e7fe      	b.n	80089fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80089fe:	4b1a      	ldr	r3, [pc, #104]	; (8008a68 <xTimerGenericCommand+0x98>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d02a      	beq.n	8008a5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	2b05      	cmp	r3, #5
 8008a16:	dc18      	bgt.n	8008a4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008a18:	f7ff feb2 	bl	8008780 <xTaskGetSchedulerState>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d109      	bne.n	8008a36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008a22:	4b11      	ldr	r3, [pc, #68]	; (8008a68 <xTimerGenericCommand+0x98>)
 8008a24:	6818      	ldr	r0, [r3, #0]
 8008a26:	f107 0110 	add.w	r1, r7, #16
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a2e:	f7fe fc77 	bl	8007320 <xQueueGenericSend>
 8008a32:	6278      	str	r0, [r7, #36]	; 0x24
 8008a34:	e012      	b.n	8008a5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008a36:	4b0c      	ldr	r3, [pc, #48]	; (8008a68 <xTimerGenericCommand+0x98>)
 8008a38:	6818      	ldr	r0, [r3, #0]
 8008a3a:	f107 0110 	add.w	r1, r7, #16
 8008a3e:	2300      	movs	r3, #0
 8008a40:	2200      	movs	r2, #0
 8008a42:	f7fe fc6d 	bl	8007320 <xQueueGenericSend>
 8008a46:	6278      	str	r0, [r7, #36]	; 0x24
 8008a48:	e008      	b.n	8008a5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008a4a:	4b07      	ldr	r3, [pc, #28]	; (8008a68 <xTimerGenericCommand+0x98>)
 8008a4c:	6818      	ldr	r0, [r3, #0]
 8008a4e:	f107 0110 	add.w	r1, r7, #16
 8008a52:	2300      	movs	r3, #0
 8008a54:	683a      	ldr	r2, [r7, #0]
 8008a56:	f7fe fd61 	bl	800751c <xQueueGenericSendFromISR>
 8008a5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3728      	adds	r7, #40	; 0x28
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	24004990 	.word	0x24004990

08008a6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b088      	sub	sp, #32
 8008a70:	af02      	add	r7, sp, #8
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a76:	4b22      	ldr	r3, [pc, #136]	; (8008b00 <prvProcessExpiredTimer+0x94>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	3304      	adds	r3, #4
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7fe f8d1 	bl	8006c2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a90:	f003 0304 	and.w	r3, r3, #4
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d022      	beq.n	8008ade <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	699a      	ldr	r2, [r3, #24]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	18d1      	adds	r1, r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	683a      	ldr	r2, [r7, #0]
 8008aa4:	6978      	ldr	r0, [r7, #20]
 8008aa6:	f000 f8d1 	bl	8008c4c <prvInsertTimerInActiveList>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d01f      	beq.n	8008af0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	2100      	movs	r1, #0
 8008aba:	6978      	ldr	r0, [r7, #20]
 8008abc:	f7ff ff88 	bl	80089d0 <xTimerGenericCommand>
 8008ac0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d113      	bne.n	8008af0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	60fb      	str	r3, [r7, #12]
}
 8008ada:	bf00      	nop
 8008adc:	e7fe      	b.n	8008adc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ae4:	f023 0301 	bic.w	r3, r3, #1
 8008ae8:	b2da      	uxtb	r2, r3
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	6a1b      	ldr	r3, [r3, #32]
 8008af4:	6978      	ldr	r0, [r7, #20]
 8008af6:	4798      	blx	r3
}
 8008af8:	bf00      	nop
 8008afa:	3718      	adds	r7, #24
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	24004988 	.word	0x24004988

08008b04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b0c:	f107 0308 	add.w	r3, r7, #8
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 f857 	bl	8008bc4 <prvGetNextExpireTime>
 8008b16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f000 f803 	bl	8008b28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008b22:	f000 f8d5 	bl	8008cd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b26:	e7f1      	b.n	8008b0c <prvTimerTask+0x8>

08008b28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008b32:	f7ff fa39 	bl	8007fa8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b36:	f107 0308 	add.w	r3, r7, #8
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 f866 	bl	8008c0c <prvSampleTimeNow>
 8008b40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d130      	bne.n	8008baa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d10a      	bne.n	8008b64 <prvProcessTimerOrBlockTask+0x3c>
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d806      	bhi.n	8008b64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008b56:	f7ff fa35 	bl	8007fc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008b5a:	68f9      	ldr	r1, [r7, #12]
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f7ff ff85 	bl	8008a6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008b62:	e024      	b.n	8008bae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d008      	beq.n	8008b7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008b6a:	4b13      	ldr	r3, [pc, #76]	; (8008bb8 <prvProcessTimerOrBlockTask+0x90>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d101      	bne.n	8008b78 <prvProcessTimerOrBlockTask+0x50>
 8008b74:	2301      	movs	r3, #1
 8008b76:	e000      	b.n	8008b7a <prvProcessTimerOrBlockTask+0x52>
 8008b78:	2300      	movs	r3, #0
 8008b7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008b7c:	4b0f      	ldr	r3, [pc, #60]	; (8008bbc <prvProcessTimerOrBlockTask+0x94>)
 8008b7e:	6818      	ldr	r0, [r3, #0]
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	683a      	ldr	r2, [r7, #0]
 8008b88:	4619      	mov	r1, r3
 8008b8a:	f7fe ff7d 	bl	8007a88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008b8e:	f7ff fa19 	bl	8007fc4 <xTaskResumeAll>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d10a      	bne.n	8008bae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008b98:	4b09      	ldr	r3, [pc, #36]	; (8008bc0 <prvProcessTimerOrBlockTask+0x98>)
 8008b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b9e:	601a      	str	r2, [r3, #0]
 8008ba0:	f3bf 8f4f 	dsb	sy
 8008ba4:	f3bf 8f6f 	isb	sy
}
 8008ba8:	e001      	b.n	8008bae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008baa:	f7ff fa0b 	bl	8007fc4 <xTaskResumeAll>
}
 8008bae:	bf00      	nop
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	2400498c 	.word	0x2400498c
 8008bbc:	24004990 	.word	0x24004990
 8008bc0:	e000ed04 	.word	0xe000ed04

08008bc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008bcc:	4b0e      	ldr	r3, [pc, #56]	; (8008c08 <prvGetNextExpireTime+0x44>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d101      	bne.n	8008bda <prvGetNextExpireTime+0x16>
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	e000      	b.n	8008bdc <prvGetNextExpireTime+0x18>
 8008bda:	2200      	movs	r2, #0
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d105      	bne.n	8008bf4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008be8:	4b07      	ldr	r3, [pc, #28]	; (8008c08 <prvGetNextExpireTime+0x44>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	60fb      	str	r3, [r7, #12]
 8008bf2:	e001      	b.n	8008bf8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3714      	adds	r7, #20
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop
 8008c08:	24004988 	.word	0x24004988

08008c0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008c14:	f7ff fa74 	bl	8008100 <xTaskGetTickCount>
 8008c18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008c1a:	4b0b      	ldr	r3, [pc, #44]	; (8008c48 <prvSampleTimeNow+0x3c>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d205      	bcs.n	8008c30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008c24:	f000 f936 	bl	8008e94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	601a      	str	r2, [r3, #0]
 8008c2e:	e002      	b.n	8008c36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008c36:	4a04      	ldr	r2, [pc, #16]	; (8008c48 <prvSampleTimeNow+0x3c>)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	24004998 	.word	0x24004998

08008c4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b086      	sub	sp, #24
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]
 8008c58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	68ba      	ldr	r2, [r7, #8]
 8008c62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008c6a:	68ba      	ldr	r2, [r7, #8]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d812      	bhi.n	8008c98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	1ad2      	subs	r2, r2, r3
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	699b      	ldr	r3, [r3, #24]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d302      	bcc.n	8008c86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008c80:	2301      	movs	r3, #1
 8008c82:	617b      	str	r3, [r7, #20]
 8008c84:	e01b      	b.n	8008cbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008c86:	4b10      	ldr	r3, [pc, #64]	; (8008cc8 <prvInsertTimerInActiveList+0x7c>)
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	3304      	adds	r3, #4
 8008c8e:	4619      	mov	r1, r3
 8008c90:	4610      	mov	r0, r2
 8008c92:	f7fd ff92 	bl	8006bba <vListInsert>
 8008c96:	e012      	b.n	8008cbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d206      	bcs.n	8008cae <prvInsertTimerInActiveList+0x62>
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d302      	bcc.n	8008cae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	617b      	str	r3, [r7, #20]
 8008cac:	e007      	b.n	8008cbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cae:	4b07      	ldr	r3, [pc, #28]	; (8008ccc <prvInsertTimerInActiveList+0x80>)
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	3304      	adds	r3, #4
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	4610      	mov	r0, r2
 8008cba:	f7fd ff7e 	bl	8006bba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008cbe:	697b      	ldr	r3, [r7, #20]
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3718      	adds	r7, #24
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	2400498c 	.word	0x2400498c
 8008ccc:	24004988 	.word	0x24004988

08008cd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b08e      	sub	sp, #56	; 0x38
 8008cd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008cd6:	e0ca      	b.n	8008e6e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	da18      	bge.n	8008d10 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008cde:	1d3b      	adds	r3, r7, #4
 8008ce0:	3304      	adds	r3, #4
 8008ce2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d10a      	bne.n	8008d00 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cee:	f383 8811 	msr	BASEPRI, r3
 8008cf2:	f3bf 8f6f 	isb	sy
 8008cf6:	f3bf 8f4f 	dsb	sy
 8008cfa:	61fb      	str	r3, [r7, #28]
}
 8008cfc:	bf00      	nop
 8008cfe:	e7fe      	b.n	8008cfe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d06:	6850      	ldr	r0, [r2, #4]
 8008d08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d0a:	6892      	ldr	r2, [r2, #8]
 8008d0c:	4611      	mov	r1, r2
 8008d0e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	f2c0 80aa 	blt.w	8008e6c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1e:	695b      	ldr	r3, [r3, #20]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d004      	beq.n	8008d2e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d26:	3304      	adds	r3, #4
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7fd ff7f 	bl	8006c2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d2e:	463b      	mov	r3, r7
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7ff ff6b 	bl	8008c0c <prvSampleTimeNow>
 8008d36:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2b09      	cmp	r3, #9
 8008d3c:	f200 8097 	bhi.w	8008e6e <prvProcessReceivedCommands+0x19e>
 8008d40:	a201      	add	r2, pc, #4	; (adr r2, 8008d48 <prvProcessReceivedCommands+0x78>)
 8008d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d46:	bf00      	nop
 8008d48:	08008d71 	.word	0x08008d71
 8008d4c:	08008d71 	.word	0x08008d71
 8008d50:	08008d71 	.word	0x08008d71
 8008d54:	08008de5 	.word	0x08008de5
 8008d58:	08008df9 	.word	0x08008df9
 8008d5c:	08008e43 	.word	0x08008e43
 8008d60:	08008d71 	.word	0x08008d71
 8008d64:	08008d71 	.word	0x08008d71
 8008d68:	08008de5 	.word	0x08008de5
 8008d6c:	08008df9 	.word	0x08008df9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d76:	f043 0301 	orr.w	r3, r3, #1
 8008d7a:	b2da      	uxtb	r2, r3
 8008d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008d82:	68ba      	ldr	r2, [r7, #8]
 8008d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d86:	699b      	ldr	r3, [r3, #24]
 8008d88:	18d1      	adds	r1, r2, r3
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d90:	f7ff ff5c 	bl	8008c4c <prvInsertTimerInActiveList>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d069      	beq.n	8008e6e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9c:	6a1b      	ldr	r3, [r3, #32]
 8008d9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008da0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008da8:	f003 0304 	and.w	r3, r3, #4
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d05e      	beq.n	8008e6e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008db0:	68ba      	ldr	r2, [r7, #8]
 8008db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	441a      	add	r2, r3
 8008db8:	2300      	movs	r3, #0
 8008dba:	9300      	str	r3, [sp, #0]
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	2100      	movs	r1, #0
 8008dc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dc2:	f7ff fe05 	bl	80089d0 <xTimerGenericCommand>
 8008dc6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008dc8:	6a3b      	ldr	r3, [r7, #32]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d14f      	bne.n	8008e6e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	61bb      	str	r3, [r7, #24]
}
 8008de0:	bf00      	nop
 8008de2:	e7fe      	b.n	8008de2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008dea:	f023 0301 	bic.w	r3, r3, #1
 8008dee:	b2da      	uxtb	r2, r3
 8008df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008df6:	e03a      	b.n	8008e6e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008dfe:	f043 0301 	orr.w	r3, r3, #1
 8008e02:	b2da      	uxtb	r2, r3
 8008e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008e0a:	68ba      	ldr	r2, [r7, #8]
 8008e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e12:	699b      	ldr	r3, [r3, #24]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d10a      	bne.n	8008e2e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1c:	f383 8811 	msr	BASEPRI, r3
 8008e20:	f3bf 8f6f 	isb	sy
 8008e24:	f3bf 8f4f 	dsb	sy
 8008e28:	617b      	str	r3, [r7, #20]
}
 8008e2a:	bf00      	nop
 8008e2c:	e7fe      	b.n	8008e2c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e30:	699a      	ldr	r2, [r3, #24]
 8008e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e34:	18d1      	adds	r1, r2, r3
 8008e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e3c:	f7ff ff06 	bl	8008c4c <prvInsertTimerInActiveList>
					break;
 8008e40:	e015      	b.n	8008e6e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e48:	f003 0302 	and.w	r3, r3, #2
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d103      	bne.n	8008e58 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e52:	f7fd fd43 	bl	80068dc <vPortFree>
 8008e56:	e00a      	b.n	8008e6e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e5e:	f023 0301 	bic.w	r3, r3, #1
 8008e62:	b2da      	uxtb	r2, r3
 8008e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008e6a:	e000      	b.n	8008e6e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008e6c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e6e:	4b08      	ldr	r3, [pc, #32]	; (8008e90 <prvProcessReceivedCommands+0x1c0>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	1d39      	adds	r1, r7, #4
 8008e74:	2200      	movs	r2, #0
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7fe fbec 	bl	8007654 <xQueueReceive>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	f47f af2a 	bne.w	8008cd8 <prvProcessReceivedCommands+0x8>
	}
}
 8008e84:	bf00      	nop
 8008e86:	bf00      	nop
 8008e88:	3730      	adds	r7, #48	; 0x30
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	24004990 	.word	0x24004990

08008e94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b088      	sub	sp, #32
 8008e98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e9a:	e048      	b.n	8008f2e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e9c:	4b2d      	ldr	r3, [pc, #180]	; (8008f54 <prvSwitchTimerLists+0xc0>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ea6:	4b2b      	ldr	r3, [pc, #172]	; (8008f54 <prvSwitchTimerLists+0xc0>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	3304      	adds	r3, #4
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fd feb9 	bl	8006c2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6a1b      	ldr	r3, [r3, #32]
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ec8:	f003 0304 	and.w	r3, r3, #4
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d02e      	beq.n	8008f2e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	693a      	ldr	r2, [r7, #16]
 8008ed6:	4413      	add	r3, r2
 8008ed8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008eda:	68ba      	ldr	r2, [r7, #8]
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d90e      	bls.n	8008f00 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	68fa      	ldr	r2, [r7, #12]
 8008eec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008eee:	4b19      	ldr	r3, [pc, #100]	; (8008f54 <prvSwitchTimerLists+0xc0>)
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	3304      	adds	r3, #4
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	4610      	mov	r0, r2
 8008efa:	f7fd fe5e 	bl	8006bba <vListInsert>
 8008efe:	e016      	b.n	8008f2e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f00:	2300      	movs	r3, #0
 8008f02:	9300      	str	r3, [sp, #0]
 8008f04:	2300      	movs	r3, #0
 8008f06:	693a      	ldr	r2, [r7, #16]
 8008f08:	2100      	movs	r1, #0
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f7ff fd60 	bl	80089d0 <xTimerGenericCommand>
 8008f10:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d10a      	bne.n	8008f2e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1c:	f383 8811 	msr	BASEPRI, r3
 8008f20:	f3bf 8f6f 	isb	sy
 8008f24:	f3bf 8f4f 	dsb	sy
 8008f28:	603b      	str	r3, [r7, #0]
}
 8008f2a:	bf00      	nop
 8008f2c:	e7fe      	b.n	8008f2c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f2e:	4b09      	ldr	r3, [pc, #36]	; (8008f54 <prvSwitchTimerLists+0xc0>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1b1      	bne.n	8008e9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008f38:	4b06      	ldr	r3, [pc, #24]	; (8008f54 <prvSwitchTimerLists+0xc0>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008f3e:	4b06      	ldr	r3, [pc, #24]	; (8008f58 <prvSwitchTimerLists+0xc4>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a04      	ldr	r2, [pc, #16]	; (8008f54 <prvSwitchTimerLists+0xc0>)
 8008f44:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008f46:	4a04      	ldr	r2, [pc, #16]	; (8008f58 <prvSwitchTimerLists+0xc4>)
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	6013      	str	r3, [r2, #0]
}
 8008f4c:	bf00      	nop
 8008f4e:	3718      	adds	r7, #24
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	24004988 	.word	0x24004988
 8008f58:	2400498c 	.word	0x2400498c

08008f5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008f62:	f7fd ffb7 	bl	8006ed4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008f66:	4b15      	ldr	r3, [pc, #84]	; (8008fbc <prvCheckForValidListAndQueue+0x60>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d120      	bne.n	8008fb0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008f6e:	4814      	ldr	r0, [pc, #80]	; (8008fc0 <prvCheckForValidListAndQueue+0x64>)
 8008f70:	f7fd fdd2 	bl	8006b18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008f74:	4813      	ldr	r0, [pc, #76]	; (8008fc4 <prvCheckForValidListAndQueue+0x68>)
 8008f76:	f7fd fdcf 	bl	8006b18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008f7a:	4b13      	ldr	r3, [pc, #76]	; (8008fc8 <prvCheckForValidListAndQueue+0x6c>)
 8008f7c:	4a10      	ldr	r2, [pc, #64]	; (8008fc0 <prvCheckForValidListAndQueue+0x64>)
 8008f7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008f80:	4b12      	ldr	r3, [pc, #72]	; (8008fcc <prvCheckForValidListAndQueue+0x70>)
 8008f82:	4a10      	ldr	r2, [pc, #64]	; (8008fc4 <prvCheckForValidListAndQueue+0x68>)
 8008f84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008f86:	2300      	movs	r3, #0
 8008f88:	9300      	str	r3, [sp, #0]
 8008f8a:	4b11      	ldr	r3, [pc, #68]	; (8008fd0 <prvCheckForValidListAndQueue+0x74>)
 8008f8c:	4a11      	ldr	r2, [pc, #68]	; (8008fd4 <prvCheckForValidListAndQueue+0x78>)
 8008f8e:	2110      	movs	r1, #16
 8008f90:	200a      	movs	r0, #10
 8008f92:	f7fe f929 	bl	80071e8 <xQueueGenericCreateStatic>
 8008f96:	4603      	mov	r3, r0
 8008f98:	4a08      	ldr	r2, [pc, #32]	; (8008fbc <prvCheckForValidListAndQueue+0x60>)
 8008f9a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008f9c:	4b07      	ldr	r3, [pc, #28]	; (8008fbc <prvCheckForValidListAndQueue+0x60>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d005      	beq.n	8008fb0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008fa4:	4b05      	ldr	r3, [pc, #20]	; (8008fbc <prvCheckForValidListAndQueue+0x60>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	490b      	ldr	r1, [pc, #44]	; (8008fd8 <prvCheckForValidListAndQueue+0x7c>)
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7fe fd42 	bl	8007a34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008fb0:	f7fd ffc0 	bl	8006f34 <vPortExitCritical>
}
 8008fb4:	bf00      	nop
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	24004990 	.word	0x24004990
 8008fc0:	24004960 	.word	0x24004960
 8008fc4:	24004974 	.word	0x24004974
 8008fc8:	24004988 	.word	0x24004988
 8008fcc:	2400498c 	.word	0x2400498c
 8008fd0:	24004a3c 	.word	0x24004a3c
 8008fd4:	2400499c 	.word	0x2400499c
 8008fd8:	0800a030 	.word	0x0800a030

08008fdc <__errno>:
 8008fdc:	4b01      	ldr	r3, [pc, #4]	; (8008fe4 <__errno+0x8>)
 8008fde:	6818      	ldr	r0, [r3, #0]
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	24000014 	.word	0x24000014

08008fe8 <std>:
 8008fe8:	2300      	movs	r3, #0
 8008fea:	b510      	push	{r4, lr}
 8008fec:	4604      	mov	r4, r0
 8008fee:	e9c0 3300 	strd	r3, r3, [r0]
 8008ff2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ff6:	6083      	str	r3, [r0, #8]
 8008ff8:	8181      	strh	r1, [r0, #12]
 8008ffa:	6643      	str	r3, [r0, #100]	; 0x64
 8008ffc:	81c2      	strh	r2, [r0, #14]
 8008ffe:	6183      	str	r3, [r0, #24]
 8009000:	4619      	mov	r1, r3
 8009002:	2208      	movs	r2, #8
 8009004:	305c      	adds	r0, #92	; 0x5c
 8009006:	f000 f91f 	bl	8009248 <memset>
 800900a:	4b05      	ldr	r3, [pc, #20]	; (8009020 <std+0x38>)
 800900c:	6263      	str	r3, [r4, #36]	; 0x24
 800900e:	4b05      	ldr	r3, [pc, #20]	; (8009024 <std+0x3c>)
 8009010:	62a3      	str	r3, [r4, #40]	; 0x28
 8009012:	4b05      	ldr	r3, [pc, #20]	; (8009028 <std+0x40>)
 8009014:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009016:	4b05      	ldr	r3, [pc, #20]	; (800902c <std+0x44>)
 8009018:	6224      	str	r4, [r4, #32]
 800901a:	6323      	str	r3, [r4, #48]	; 0x30
 800901c:	bd10      	pop	{r4, pc}
 800901e:	bf00      	nop
 8009020:	080094d1 	.word	0x080094d1
 8009024:	080094f3 	.word	0x080094f3
 8009028:	0800952b 	.word	0x0800952b
 800902c:	0800954f 	.word	0x0800954f

08009030 <_cleanup_r>:
 8009030:	4901      	ldr	r1, [pc, #4]	; (8009038 <_cleanup_r+0x8>)
 8009032:	f000 b8af 	b.w	8009194 <_fwalk_reent>
 8009036:	bf00      	nop
 8009038:	080096a9 	.word	0x080096a9

0800903c <__sfmoreglue>:
 800903c:	b570      	push	{r4, r5, r6, lr}
 800903e:	1e4a      	subs	r2, r1, #1
 8009040:	2568      	movs	r5, #104	; 0x68
 8009042:	4355      	muls	r5, r2
 8009044:	460e      	mov	r6, r1
 8009046:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800904a:	f000 f955 	bl	80092f8 <_malloc_r>
 800904e:	4604      	mov	r4, r0
 8009050:	b140      	cbz	r0, 8009064 <__sfmoreglue+0x28>
 8009052:	2100      	movs	r1, #0
 8009054:	e9c0 1600 	strd	r1, r6, [r0]
 8009058:	300c      	adds	r0, #12
 800905a:	60a0      	str	r0, [r4, #8]
 800905c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009060:	f000 f8f2 	bl	8009248 <memset>
 8009064:	4620      	mov	r0, r4
 8009066:	bd70      	pop	{r4, r5, r6, pc}

08009068 <__sfp_lock_acquire>:
 8009068:	4801      	ldr	r0, [pc, #4]	; (8009070 <__sfp_lock_acquire+0x8>)
 800906a:	f7f8 b861 	b.w	8001130 <__retarget_lock_acquire_recursive>
 800906e:	bf00      	nop
 8009070:	240000a4 	.word	0x240000a4

08009074 <__sfp_lock_release>:
 8009074:	4801      	ldr	r0, [pc, #4]	; (800907c <__sfp_lock_release+0x8>)
 8009076:	f7f8 b86f 	b.w	8001158 <__retarget_lock_release_recursive>
 800907a:	bf00      	nop
 800907c:	240000a4 	.word	0x240000a4

08009080 <__sinit_lock_acquire>:
 8009080:	4801      	ldr	r0, [pc, #4]	; (8009088 <__sinit_lock_acquire+0x8>)
 8009082:	f7f8 b855 	b.w	8001130 <__retarget_lock_acquire_recursive>
 8009086:	bf00      	nop
 8009088:	24000098 	.word	0x24000098

0800908c <__sinit_lock_release>:
 800908c:	4801      	ldr	r0, [pc, #4]	; (8009094 <__sinit_lock_release+0x8>)
 800908e:	f7f8 b863 	b.w	8001158 <__retarget_lock_release_recursive>
 8009092:	bf00      	nop
 8009094:	24000098 	.word	0x24000098

08009098 <__sinit>:
 8009098:	b510      	push	{r4, lr}
 800909a:	4604      	mov	r4, r0
 800909c:	f7ff fff0 	bl	8009080 <__sinit_lock_acquire>
 80090a0:	69a3      	ldr	r3, [r4, #24]
 80090a2:	b11b      	cbz	r3, 80090ac <__sinit+0x14>
 80090a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090a8:	f7ff bff0 	b.w	800908c <__sinit_lock_release>
 80090ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80090b0:	6523      	str	r3, [r4, #80]	; 0x50
 80090b2:	4b13      	ldr	r3, [pc, #76]	; (8009100 <__sinit+0x68>)
 80090b4:	4a13      	ldr	r2, [pc, #76]	; (8009104 <__sinit+0x6c>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80090ba:	42a3      	cmp	r3, r4
 80090bc:	bf04      	itt	eq
 80090be:	2301      	moveq	r3, #1
 80090c0:	61a3      	streq	r3, [r4, #24]
 80090c2:	4620      	mov	r0, r4
 80090c4:	f000 f820 	bl	8009108 <__sfp>
 80090c8:	6060      	str	r0, [r4, #4]
 80090ca:	4620      	mov	r0, r4
 80090cc:	f000 f81c 	bl	8009108 <__sfp>
 80090d0:	60a0      	str	r0, [r4, #8]
 80090d2:	4620      	mov	r0, r4
 80090d4:	f000 f818 	bl	8009108 <__sfp>
 80090d8:	2200      	movs	r2, #0
 80090da:	60e0      	str	r0, [r4, #12]
 80090dc:	2104      	movs	r1, #4
 80090de:	6860      	ldr	r0, [r4, #4]
 80090e0:	f7ff ff82 	bl	8008fe8 <std>
 80090e4:	68a0      	ldr	r0, [r4, #8]
 80090e6:	2201      	movs	r2, #1
 80090e8:	2109      	movs	r1, #9
 80090ea:	f7ff ff7d 	bl	8008fe8 <std>
 80090ee:	68e0      	ldr	r0, [r4, #12]
 80090f0:	2202      	movs	r2, #2
 80090f2:	2112      	movs	r1, #18
 80090f4:	f7ff ff78 	bl	8008fe8 <std>
 80090f8:	2301      	movs	r3, #1
 80090fa:	61a3      	str	r3, [r4, #24]
 80090fc:	e7d2      	b.n	80090a4 <__sinit+0xc>
 80090fe:	bf00      	nop
 8009100:	0800a0f4 	.word	0x0800a0f4
 8009104:	08009031 	.word	0x08009031

08009108 <__sfp>:
 8009108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800910a:	4607      	mov	r7, r0
 800910c:	f7ff ffac 	bl	8009068 <__sfp_lock_acquire>
 8009110:	4b1e      	ldr	r3, [pc, #120]	; (800918c <__sfp+0x84>)
 8009112:	681e      	ldr	r6, [r3, #0]
 8009114:	69b3      	ldr	r3, [r6, #24]
 8009116:	b913      	cbnz	r3, 800911e <__sfp+0x16>
 8009118:	4630      	mov	r0, r6
 800911a:	f7ff ffbd 	bl	8009098 <__sinit>
 800911e:	3648      	adds	r6, #72	; 0x48
 8009120:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009124:	3b01      	subs	r3, #1
 8009126:	d503      	bpl.n	8009130 <__sfp+0x28>
 8009128:	6833      	ldr	r3, [r6, #0]
 800912a:	b30b      	cbz	r3, 8009170 <__sfp+0x68>
 800912c:	6836      	ldr	r6, [r6, #0]
 800912e:	e7f7      	b.n	8009120 <__sfp+0x18>
 8009130:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009134:	b9d5      	cbnz	r5, 800916c <__sfp+0x64>
 8009136:	4b16      	ldr	r3, [pc, #88]	; (8009190 <__sfp+0x88>)
 8009138:	60e3      	str	r3, [r4, #12]
 800913a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800913e:	6665      	str	r5, [r4, #100]	; 0x64
 8009140:	f7f7 ffd0 	bl	80010e4 <__retarget_lock_init_recursive>
 8009144:	f7ff ff96 	bl	8009074 <__sfp_lock_release>
 8009148:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800914c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009150:	6025      	str	r5, [r4, #0]
 8009152:	61a5      	str	r5, [r4, #24]
 8009154:	2208      	movs	r2, #8
 8009156:	4629      	mov	r1, r5
 8009158:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800915c:	f000 f874 	bl	8009248 <memset>
 8009160:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009164:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009168:	4620      	mov	r0, r4
 800916a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800916c:	3468      	adds	r4, #104	; 0x68
 800916e:	e7d9      	b.n	8009124 <__sfp+0x1c>
 8009170:	2104      	movs	r1, #4
 8009172:	4638      	mov	r0, r7
 8009174:	f7ff ff62 	bl	800903c <__sfmoreglue>
 8009178:	4604      	mov	r4, r0
 800917a:	6030      	str	r0, [r6, #0]
 800917c:	2800      	cmp	r0, #0
 800917e:	d1d5      	bne.n	800912c <__sfp+0x24>
 8009180:	f7ff ff78 	bl	8009074 <__sfp_lock_release>
 8009184:	230c      	movs	r3, #12
 8009186:	603b      	str	r3, [r7, #0]
 8009188:	e7ee      	b.n	8009168 <__sfp+0x60>
 800918a:	bf00      	nop
 800918c:	0800a0f4 	.word	0x0800a0f4
 8009190:	ffff0001 	.word	0xffff0001

08009194 <_fwalk_reent>:
 8009194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009198:	4606      	mov	r6, r0
 800919a:	4688      	mov	r8, r1
 800919c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80091a0:	2700      	movs	r7, #0
 80091a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091a6:	f1b9 0901 	subs.w	r9, r9, #1
 80091aa:	d505      	bpl.n	80091b8 <_fwalk_reent+0x24>
 80091ac:	6824      	ldr	r4, [r4, #0]
 80091ae:	2c00      	cmp	r4, #0
 80091b0:	d1f7      	bne.n	80091a2 <_fwalk_reent+0xe>
 80091b2:	4638      	mov	r0, r7
 80091b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091b8:	89ab      	ldrh	r3, [r5, #12]
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d907      	bls.n	80091ce <_fwalk_reent+0x3a>
 80091be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091c2:	3301      	adds	r3, #1
 80091c4:	d003      	beq.n	80091ce <_fwalk_reent+0x3a>
 80091c6:	4629      	mov	r1, r5
 80091c8:	4630      	mov	r0, r6
 80091ca:	47c0      	blx	r8
 80091cc:	4307      	orrs	r7, r0
 80091ce:	3568      	adds	r5, #104	; 0x68
 80091d0:	e7e9      	b.n	80091a6 <_fwalk_reent+0x12>
	...

080091d4 <__libc_init_array>:
 80091d4:	b570      	push	{r4, r5, r6, lr}
 80091d6:	4d0d      	ldr	r5, [pc, #52]	; (800920c <__libc_init_array+0x38>)
 80091d8:	4c0d      	ldr	r4, [pc, #52]	; (8009210 <__libc_init_array+0x3c>)
 80091da:	1b64      	subs	r4, r4, r5
 80091dc:	10a4      	asrs	r4, r4, #2
 80091de:	2600      	movs	r6, #0
 80091e0:	42a6      	cmp	r6, r4
 80091e2:	d109      	bne.n	80091f8 <__libc_init_array+0x24>
 80091e4:	4d0b      	ldr	r5, [pc, #44]	; (8009214 <__libc_init_array+0x40>)
 80091e6:	4c0c      	ldr	r4, [pc, #48]	; (8009218 <__libc_init_array+0x44>)
 80091e8:	f000 fefe 	bl	8009fe8 <_init>
 80091ec:	1b64      	subs	r4, r4, r5
 80091ee:	10a4      	asrs	r4, r4, #2
 80091f0:	2600      	movs	r6, #0
 80091f2:	42a6      	cmp	r6, r4
 80091f4:	d105      	bne.n	8009202 <__libc_init_array+0x2e>
 80091f6:	bd70      	pop	{r4, r5, r6, pc}
 80091f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80091fc:	4798      	blx	r3
 80091fe:	3601      	adds	r6, #1
 8009200:	e7ee      	b.n	80091e0 <__libc_init_array+0xc>
 8009202:	f855 3b04 	ldr.w	r3, [r5], #4
 8009206:	4798      	blx	r3
 8009208:	3601      	adds	r6, #1
 800920a:	e7f2      	b.n	80091f2 <__libc_init_array+0x1e>
 800920c:	0800a134 	.word	0x0800a134
 8009210:	0800a134 	.word	0x0800a134
 8009214:	0800a134 	.word	0x0800a134
 8009218:	0800a138 	.word	0x0800a138

0800921c <malloc>:
 800921c:	4b02      	ldr	r3, [pc, #8]	; (8009228 <malloc+0xc>)
 800921e:	4601      	mov	r1, r0
 8009220:	6818      	ldr	r0, [r3, #0]
 8009222:	f000 b869 	b.w	80092f8 <_malloc_r>
 8009226:	bf00      	nop
 8009228:	24000014 	.word	0x24000014

0800922c <memcpy>:
 800922c:	440a      	add	r2, r1
 800922e:	4291      	cmp	r1, r2
 8009230:	f100 33ff 	add.w	r3, r0, #4294967295
 8009234:	d100      	bne.n	8009238 <memcpy+0xc>
 8009236:	4770      	bx	lr
 8009238:	b510      	push	{r4, lr}
 800923a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800923e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009242:	4291      	cmp	r1, r2
 8009244:	d1f9      	bne.n	800923a <memcpy+0xe>
 8009246:	bd10      	pop	{r4, pc}

08009248 <memset>:
 8009248:	4402      	add	r2, r0
 800924a:	4603      	mov	r3, r0
 800924c:	4293      	cmp	r3, r2
 800924e:	d100      	bne.n	8009252 <memset+0xa>
 8009250:	4770      	bx	lr
 8009252:	f803 1b01 	strb.w	r1, [r3], #1
 8009256:	e7f9      	b.n	800924c <memset+0x4>

08009258 <_free_r>:
 8009258:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800925a:	2900      	cmp	r1, #0
 800925c:	d048      	beq.n	80092f0 <_free_r+0x98>
 800925e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009262:	9001      	str	r0, [sp, #4]
 8009264:	2b00      	cmp	r3, #0
 8009266:	f1a1 0404 	sub.w	r4, r1, #4
 800926a:	bfb8      	it	lt
 800926c:	18e4      	addlt	r4, r4, r3
 800926e:	f000 fa69 	bl	8009744 <__malloc_lock>
 8009272:	4a20      	ldr	r2, [pc, #128]	; (80092f4 <_free_r+0x9c>)
 8009274:	9801      	ldr	r0, [sp, #4]
 8009276:	6813      	ldr	r3, [r2, #0]
 8009278:	4615      	mov	r5, r2
 800927a:	b933      	cbnz	r3, 800928a <_free_r+0x32>
 800927c:	6063      	str	r3, [r4, #4]
 800927e:	6014      	str	r4, [r2, #0]
 8009280:	b003      	add	sp, #12
 8009282:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009286:	f000 ba63 	b.w	8009750 <__malloc_unlock>
 800928a:	42a3      	cmp	r3, r4
 800928c:	d90b      	bls.n	80092a6 <_free_r+0x4e>
 800928e:	6821      	ldr	r1, [r4, #0]
 8009290:	1862      	adds	r2, r4, r1
 8009292:	4293      	cmp	r3, r2
 8009294:	bf04      	itt	eq
 8009296:	681a      	ldreq	r2, [r3, #0]
 8009298:	685b      	ldreq	r3, [r3, #4]
 800929a:	6063      	str	r3, [r4, #4]
 800929c:	bf04      	itt	eq
 800929e:	1852      	addeq	r2, r2, r1
 80092a0:	6022      	streq	r2, [r4, #0]
 80092a2:	602c      	str	r4, [r5, #0]
 80092a4:	e7ec      	b.n	8009280 <_free_r+0x28>
 80092a6:	461a      	mov	r2, r3
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	b10b      	cbz	r3, 80092b0 <_free_r+0x58>
 80092ac:	42a3      	cmp	r3, r4
 80092ae:	d9fa      	bls.n	80092a6 <_free_r+0x4e>
 80092b0:	6811      	ldr	r1, [r2, #0]
 80092b2:	1855      	adds	r5, r2, r1
 80092b4:	42a5      	cmp	r5, r4
 80092b6:	d10b      	bne.n	80092d0 <_free_r+0x78>
 80092b8:	6824      	ldr	r4, [r4, #0]
 80092ba:	4421      	add	r1, r4
 80092bc:	1854      	adds	r4, r2, r1
 80092be:	42a3      	cmp	r3, r4
 80092c0:	6011      	str	r1, [r2, #0]
 80092c2:	d1dd      	bne.n	8009280 <_free_r+0x28>
 80092c4:	681c      	ldr	r4, [r3, #0]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	6053      	str	r3, [r2, #4]
 80092ca:	4421      	add	r1, r4
 80092cc:	6011      	str	r1, [r2, #0]
 80092ce:	e7d7      	b.n	8009280 <_free_r+0x28>
 80092d0:	d902      	bls.n	80092d8 <_free_r+0x80>
 80092d2:	230c      	movs	r3, #12
 80092d4:	6003      	str	r3, [r0, #0]
 80092d6:	e7d3      	b.n	8009280 <_free_r+0x28>
 80092d8:	6825      	ldr	r5, [r4, #0]
 80092da:	1961      	adds	r1, r4, r5
 80092dc:	428b      	cmp	r3, r1
 80092de:	bf04      	itt	eq
 80092e0:	6819      	ldreq	r1, [r3, #0]
 80092e2:	685b      	ldreq	r3, [r3, #4]
 80092e4:	6063      	str	r3, [r4, #4]
 80092e6:	bf04      	itt	eq
 80092e8:	1949      	addeq	r1, r1, r5
 80092ea:	6021      	streq	r1, [r4, #0]
 80092ec:	6054      	str	r4, [r2, #4]
 80092ee:	e7c7      	b.n	8009280 <_free_r+0x28>
 80092f0:	b003      	add	sp, #12
 80092f2:	bd30      	pop	{r4, r5, pc}
 80092f4:	24004a8c 	.word	0x24004a8c

080092f8 <_malloc_r>:
 80092f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092fa:	1ccd      	adds	r5, r1, #3
 80092fc:	f025 0503 	bic.w	r5, r5, #3
 8009300:	3508      	adds	r5, #8
 8009302:	2d0c      	cmp	r5, #12
 8009304:	bf38      	it	cc
 8009306:	250c      	movcc	r5, #12
 8009308:	2d00      	cmp	r5, #0
 800930a:	4606      	mov	r6, r0
 800930c:	db01      	blt.n	8009312 <_malloc_r+0x1a>
 800930e:	42a9      	cmp	r1, r5
 8009310:	d903      	bls.n	800931a <_malloc_r+0x22>
 8009312:	230c      	movs	r3, #12
 8009314:	6033      	str	r3, [r6, #0]
 8009316:	2000      	movs	r0, #0
 8009318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800931a:	f000 fa13 	bl	8009744 <__malloc_lock>
 800931e:	4921      	ldr	r1, [pc, #132]	; (80093a4 <_malloc_r+0xac>)
 8009320:	680a      	ldr	r2, [r1, #0]
 8009322:	4614      	mov	r4, r2
 8009324:	b99c      	cbnz	r4, 800934e <_malloc_r+0x56>
 8009326:	4f20      	ldr	r7, [pc, #128]	; (80093a8 <_malloc_r+0xb0>)
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	b923      	cbnz	r3, 8009336 <_malloc_r+0x3e>
 800932c:	4621      	mov	r1, r4
 800932e:	4630      	mov	r0, r6
 8009330:	f000 f8be 	bl	80094b0 <_sbrk_r>
 8009334:	6038      	str	r0, [r7, #0]
 8009336:	4629      	mov	r1, r5
 8009338:	4630      	mov	r0, r6
 800933a:	f000 f8b9 	bl	80094b0 <_sbrk_r>
 800933e:	1c43      	adds	r3, r0, #1
 8009340:	d123      	bne.n	800938a <_malloc_r+0x92>
 8009342:	230c      	movs	r3, #12
 8009344:	6033      	str	r3, [r6, #0]
 8009346:	4630      	mov	r0, r6
 8009348:	f000 fa02 	bl	8009750 <__malloc_unlock>
 800934c:	e7e3      	b.n	8009316 <_malloc_r+0x1e>
 800934e:	6823      	ldr	r3, [r4, #0]
 8009350:	1b5b      	subs	r3, r3, r5
 8009352:	d417      	bmi.n	8009384 <_malloc_r+0x8c>
 8009354:	2b0b      	cmp	r3, #11
 8009356:	d903      	bls.n	8009360 <_malloc_r+0x68>
 8009358:	6023      	str	r3, [r4, #0]
 800935a:	441c      	add	r4, r3
 800935c:	6025      	str	r5, [r4, #0]
 800935e:	e004      	b.n	800936a <_malloc_r+0x72>
 8009360:	6863      	ldr	r3, [r4, #4]
 8009362:	42a2      	cmp	r2, r4
 8009364:	bf0c      	ite	eq
 8009366:	600b      	streq	r3, [r1, #0]
 8009368:	6053      	strne	r3, [r2, #4]
 800936a:	4630      	mov	r0, r6
 800936c:	f000 f9f0 	bl	8009750 <__malloc_unlock>
 8009370:	f104 000b 	add.w	r0, r4, #11
 8009374:	1d23      	adds	r3, r4, #4
 8009376:	f020 0007 	bic.w	r0, r0, #7
 800937a:	1ac2      	subs	r2, r0, r3
 800937c:	d0cc      	beq.n	8009318 <_malloc_r+0x20>
 800937e:	1a1b      	subs	r3, r3, r0
 8009380:	50a3      	str	r3, [r4, r2]
 8009382:	e7c9      	b.n	8009318 <_malloc_r+0x20>
 8009384:	4622      	mov	r2, r4
 8009386:	6864      	ldr	r4, [r4, #4]
 8009388:	e7cc      	b.n	8009324 <_malloc_r+0x2c>
 800938a:	1cc4      	adds	r4, r0, #3
 800938c:	f024 0403 	bic.w	r4, r4, #3
 8009390:	42a0      	cmp	r0, r4
 8009392:	d0e3      	beq.n	800935c <_malloc_r+0x64>
 8009394:	1a21      	subs	r1, r4, r0
 8009396:	4630      	mov	r0, r6
 8009398:	f000 f88a 	bl	80094b0 <_sbrk_r>
 800939c:	3001      	adds	r0, #1
 800939e:	d1dd      	bne.n	800935c <_malloc_r+0x64>
 80093a0:	e7cf      	b.n	8009342 <_malloc_r+0x4a>
 80093a2:	bf00      	nop
 80093a4:	24004a8c 	.word	0x24004a8c
 80093a8:	24004a90 	.word	0x24004a90

080093ac <iprintf>:
 80093ac:	b40f      	push	{r0, r1, r2, r3}
 80093ae:	4b0a      	ldr	r3, [pc, #40]	; (80093d8 <iprintf+0x2c>)
 80093b0:	b513      	push	{r0, r1, r4, lr}
 80093b2:	681c      	ldr	r4, [r3, #0]
 80093b4:	b124      	cbz	r4, 80093c0 <iprintf+0x14>
 80093b6:	69a3      	ldr	r3, [r4, #24]
 80093b8:	b913      	cbnz	r3, 80093c0 <iprintf+0x14>
 80093ba:	4620      	mov	r0, r4
 80093bc:	f7ff fe6c 	bl	8009098 <__sinit>
 80093c0:	ab05      	add	r3, sp, #20
 80093c2:	9a04      	ldr	r2, [sp, #16]
 80093c4:	68a1      	ldr	r1, [r4, #8]
 80093c6:	9301      	str	r3, [sp, #4]
 80093c8:	4620      	mov	r0, r4
 80093ca:	f000 f9f1 	bl	80097b0 <_vfiprintf_r>
 80093ce:	b002      	add	sp, #8
 80093d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093d4:	b004      	add	sp, #16
 80093d6:	4770      	bx	lr
 80093d8:	24000014 	.word	0x24000014

080093dc <cleanup_glue>:
 80093dc:	b538      	push	{r3, r4, r5, lr}
 80093de:	460c      	mov	r4, r1
 80093e0:	6809      	ldr	r1, [r1, #0]
 80093e2:	4605      	mov	r5, r0
 80093e4:	b109      	cbz	r1, 80093ea <cleanup_glue+0xe>
 80093e6:	f7ff fff9 	bl	80093dc <cleanup_glue>
 80093ea:	4621      	mov	r1, r4
 80093ec:	4628      	mov	r0, r5
 80093ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093f2:	f7ff bf31 	b.w	8009258 <_free_r>
	...

080093f8 <_reclaim_reent>:
 80093f8:	4b2c      	ldr	r3, [pc, #176]	; (80094ac <_reclaim_reent+0xb4>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4283      	cmp	r3, r0
 80093fe:	b570      	push	{r4, r5, r6, lr}
 8009400:	4604      	mov	r4, r0
 8009402:	d051      	beq.n	80094a8 <_reclaim_reent+0xb0>
 8009404:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009406:	b143      	cbz	r3, 800941a <_reclaim_reent+0x22>
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d14a      	bne.n	80094a4 <_reclaim_reent+0xac>
 800940e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009410:	6819      	ldr	r1, [r3, #0]
 8009412:	b111      	cbz	r1, 800941a <_reclaim_reent+0x22>
 8009414:	4620      	mov	r0, r4
 8009416:	f7ff ff1f 	bl	8009258 <_free_r>
 800941a:	6961      	ldr	r1, [r4, #20]
 800941c:	b111      	cbz	r1, 8009424 <_reclaim_reent+0x2c>
 800941e:	4620      	mov	r0, r4
 8009420:	f7ff ff1a 	bl	8009258 <_free_r>
 8009424:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009426:	b111      	cbz	r1, 800942e <_reclaim_reent+0x36>
 8009428:	4620      	mov	r0, r4
 800942a:	f7ff ff15 	bl	8009258 <_free_r>
 800942e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009430:	b111      	cbz	r1, 8009438 <_reclaim_reent+0x40>
 8009432:	4620      	mov	r0, r4
 8009434:	f7ff ff10 	bl	8009258 <_free_r>
 8009438:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800943a:	b111      	cbz	r1, 8009442 <_reclaim_reent+0x4a>
 800943c:	4620      	mov	r0, r4
 800943e:	f7ff ff0b 	bl	8009258 <_free_r>
 8009442:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009444:	b111      	cbz	r1, 800944c <_reclaim_reent+0x54>
 8009446:	4620      	mov	r0, r4
 8009448:	f7ff ff06 	bl	8009258 <_free_r>
 800944c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800944e:	b111      	cbz	r1, 8009456 <_reclaim_reent+0x5e>
 8009450:	4620      	mov	r0, r4
 8009452:	f7ff ff01 	bl	8009258 <_free_r>
 8009456:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009458:	b111      	cbz	r1, 8009460 <_reclaim_reent+0x68>
 800945a:	4620      	mov	r0, r4
 800945c:	f7ff fefc 	bl	8009258 <_free_r>
 8009460:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009462:	b111      	cbz	r1, 800946a <_reclaim_reent+0x72>
 8009464:	4620      	mov	r0, r4
 8009466:	f7ff fef7 	bl	8009258 <_free_r>
 800946a:	69a3      	ldr	r3, [r4, #24]
 800946c:	b1e3      	cbz	r3, 80094a8 <_reclaim_reent+0xb0>
 800946e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009470:	4620      	mov	r0, r4
 8009472:	4798      	blx	r3
 8009474:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009476:	b1b9      	cbz	r1, 80094a8 <_reclaim_reent+0xb0>
 8009478:	4620      	mov	r0, r4
 800947a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800947e:	f7ff bfad 	b.w	80093dc <cleanup_glue>
 8009482:	5949      	ldr	r1, [r1, r5]
 8009484:	b941      	cbnz	r1, 8009498 <_reclaim_reent+0xa0>
 8009486:	3504      	adds	r5, #4
 8009488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800948a:	2d80      	cmp	r5, #128	; 0x80
 800948c:	68d9      	ldr	r1, [r3, #12]
 800948e:	d1f8      	bne.n	8009482 <_reclaim_reent+0x8a>
 8009490:	4620      	mov	r0, r4
 8009492:	f7ff fee1 	bl	8009258 <_free_r>
 8009496:	e7ba      	b.n	800940e <_reclaim_reent+0x16>
 8009498:	680e      	ldr	r6, [r1, #0]
 800949a:	4620      	mov	r0, r4
 800949c:	f7ff fedc 	bl	8009258 <_free_r>
 80094a0:	4631      	mov	r1, r6
 80094a2:	e7ef      	b.n	8009484 <_reclaim_reent+0x8c>
 80094a4:	2500      	movs	r5, #0
 80094a6:	e7ef      	b.n	8009488 <_reclaim_reent+0x90>
 80094a8:	bd70      	pop	{r4, r5, r6, pc}
 80094aa:	bf00      	nop
 80094ac:	24000014 	.word	0x24000014

080094b0 <_sbrk_r>:
 80094b0:	b538      	push	{r3, r4, r5, lr}
 80094b2:	4d06      	ldr	r5, [pc, #24]	; (80094cc <_sbrk_r+0x1c>)
 80094b4:	2300      	movs	r3, #0
 80094b6:	4604      	mov	r4, r0
 80094b8:	4608      	mov	r0, r1
 80094ba:	602b      	str	r3, [r5, #0]
 80094bc:	f7f7 fd38 	bl	8000f30 <_sbrk>
 80094c0:	1c43      	adds	r3, r0, #1
 80094c2:	d102      	bne.n	80094ca <_sbrk_r+0x1a>
 80094c4:	682b      	ldr	r3, [r5, #0]
 80094c6:	b103      	cbz	r3, 80094ca <_sbrk_r+0x1a>
 80094c8:	6023      	str	r3, [r4, #0]
 80094ca:	bd38      	pop	{r3, r4, r5, pc}
 80094cc:	24004bfc 	.word	0x24004bfc

080094d0 <__sread>:
 80094d0:	b510      	push	{r4, lr}
 80094d2:	460c      	mov	r4, r1
 80094d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094d8:	f000 fc2e 	bl	8009d38 <_read_r>
 80094dc:	2800      	cmp	r0, #0
 80094de:	bfab      	itete	ge
 80094e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094e2:	89a3      	ldrhlt	r3, [r4, #12]
 80094e4:	181b      	addge	r3, r3, r0
 80094e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80094ea:	bfac      	ite	ge
 80094ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80094ee:	81a3      	strhlt	r3, [r4, #12]
 80094f0:	bd10      	pop	{r4, pc}

080094f2 <__swrite>:
 80094f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094f6:	461f      	mov	r7, r3
 80094f8:	898b      	ldrh	r3, [r1, #12]
 80094fa:	05db      	lsls	r3, r3, #23
 80094fc:	4605      	mov	r5, r0
 80094fe:	460c      	mov	r4, r1
 8009500:	4616      	mov	r6, r2
 8009502:	d505      	bpl.n	8009510 <__swrite+0x1e>
 8009504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009508:	2302      	movs	r3, #2
 800950a:	2200      	movs	r2, #0
 800950c:	f000 f908 	bl	8009720 <_lseek_r>
 8009510:	89a3      	ldrh	r3, [r4, #12]
 8009512:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009516:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800951a:	81a3      	strh	r3, [r4, #12]
 800951c:	4632      	mov	r2, r6
 800951e:	463b      	mov	r3, r7
 8009520:	4628      	mov	r0, r5
 8009522:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009526:	f000 b817 	b.w	8009558 <_write_r>

0800952a <__sseek>:
 800952a:	b510      	push	{r4, lr}
 800952c:	460c      	mov	r4, r1
 800952e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009532:	f000 f8f5 	bl	8009720 <_lseek_r>
 8009536:	1c43      	adds	r3, r0, #1
 8009538:	89a3      	ldrh	r3, [r4, #12]
 800953a:	bf15      	itete	ne
 800953c:	6560      	strne	r0, [r4, #84]	; 0x54
 800953e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009542:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009546:	81a3      	strheq	r3, [r4, #12]
 8009548:	bf18      	it	ne
 800954a:	81a3      	strhne	r3, [r4, #12]
 800954c:	bd10      	pop	{r4, pc}

0800954e <__sclose>:
 800954e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009552:	f000 b813 	b.w	800957c <_close_r>
	...

08009558 <_write_r>:
 8009558:	b538      	push	{r3, r4, r5, lr}
 800955a:	4d07      	ldr	r5, [pc, #28]	; (8009578 <_write_r+0x20>)
 800955c:	4604      	mov	r4, r0
 800955e:	4608      	mov	r0, r1
 8009560:	4611      	mov	r1, r2
 8009562:	2200      	movs	r2, #0
 8009564:	602a      	str	r2, [r5, #0]
 8009566:	461a      	mov	r2, r3
 8009568:	f7f7 fc91 	bl	8000e8e <_write>
 800956c:	1c43      	adds	r3, r0, #1
 800956e:	d102      	bne.n	8009576 <_write_r+0x1e>
 8009570:	682b      	ldr	r3, [r5, #0]
 8009572:	b103      	cbz	r3, 8009576 <_write_r+0x1e>
 8009574:	6023      	str	r3, [r4, #0]
 8009576:	bd38      	pop	{r3, r4, r5, pc}
 8009578:	24004bfc 	.word	0x24004bfc

0800957c <_close_r>:
 800957c:	b538      	push	{r3, r4, r5, lr}
 800957e:	4d06      	ldr	r5, [pc, #24]	; (8009598 <_close_r+0x1c>)
 8009580:	2300      	movs	r3, #0
 8009582:	4604      	mov	r4, r0
 8009584:	4608      	mov	r0, r1
 8009586:	602b      	str	r3, [r5, #0]
 8009588:	f7f7 fc9d 	bl	8000ec6 <_close>
 800958c:	1c43      	adds	r3, r0, #1
 800958e:	d102      	bne.n	8009596 <_close_r+0x1a>
 8009590:	682b      	ldr	r3, [r5, #0]
 8009592:	b103      	cbz	r3, 8009596 <_close_r+0x1a>
 8009594:	6023      	str	r3, [r4, #0]
 8009596:	bd38      	pop	{r3, r4, r5, pc}
 8009598:	24004bfc 	.word	0x24004bfc

0800959c <__sflush_r>:
 800959c:	898a      	ldrh	r2, [r1, #12]
 800959e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095a2:	4605      	mov	r5, r0
 80095a4:	0710      	lsls	r0, r2, #28
 80095a6:	460c      	mov	r4, r1
 80095a8:	d458      	bmi.n	800965c <__sflush_r+0xc0>
 80095aa:	684b      	ldr	r3, [r1, #4]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	dc05      	bgt.n	80095bc <__sflush_r+0x20>
 80095b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	dc02      	bgt.n	80095bc <__sflush_r+0x20>
 80095b6:	2000      	movs	r0, #0
 80095b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095be:	2e00      	cmp	r6, #0
 80095c0:	d0f9      	beq.n	80095b6 <__sflush_r+0x1a>
 80095c2:	2300      	movs	r3, #0
 80095c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80095c8:	682f      	ldr	r7, [r5, #0]
 80095ca:	602b      	str	r3, [r5, #0]
 80095cc:	d032      	beq.n	8009634 <__sflush_r+0x98>
 80095ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80095d0:	89a3      	ldrh	r3, [r4, #12]
 80095d2:	075a      	lsls	r2, r3, #29
 80095d4:	d505      	bpl.n	80095e2 <__sflush_r+0x46>
 80095d6:	6863      	ldr	r3, [r4, #4]
 80095d8:	1ac0      	subs	r0, r0, r3
 80095da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80095dc:	b10b      	cbz	r3, 80095e2 <__sflush_r+0x46>
 80095de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095e0:	1ac0      	subs	r0, r0, r3
 80095e2:	2300      	movs	r3, #0
 80095e4:	4602      	mov	r2, r0
 80095e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095e8:	6a21      	ldr	r1, [r4, #32]
 80095ea:	4628      	mov	r0, r5
 80095ec:	47b0      	blx	r6
 80095ee:	1c43      	adds	r3, r0, #1
 80095f0:	89a3      	ldrh	r3, [r4, #12]
 80095f2:	d106      	bne.n	8009602 <__sflush_r+0x66>
 80095f4:	6829      	ldr	r1, [r5, #0]
 80095f6:	291d      	cmp	r1, #29
 80095f8:	d82c      	bhi.n	8009654 <__sflush_r+0xb8>
 80095fa:	4a2a      	ldr	r2, [pc, #168]	; (80096a4 <__sflush_r+0x108>)
 80095fc:	40ca      	lsrs	r2, r1
 80095fe:	07d6      	lsls	r6, r2, #31
 8009600:	d528      	bpl.n	8009654 <__sflush_r+0xb8>
 8009602:	2200      	movs	r2, #0
 8009604:	6062      	str	r2, [r4, #4]
 8009606:	04d9      	lsls	r1, r3, #19
 8009608:	6922      	ldr	r2, [r4, #16]
 800960a:	6022      	str	r2, [r4, #0]
 800960c:	d504      	bpl.n	8009618 <__sflush_r+0x7c>
 800960e:	1c42      	adds	r2, r0, #1
 8009610:	d101      	bne.n	8009616 <__sflush_r+0x7a>
 8009612:	682b      	ldr	r3, [r5, #0]
 8009614:	b903      	cbnz	r3, 8009618 <__sflush_r+0x7c>
 8009616:	6560      	str	r0, [r4, #84]	; 0x54
 8009618:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800961a:	602f      	str	r7, [r5, #0]
 800961c:	2900      	cmp	r1, #0
 800961e:	d0ca      	beq.n	80095b6 <__sflush_r+0x1a>
 8009620:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009624:	4299      	cmp	r1, r3
 8009626:	d002      	beq.n	800962e <__sflush_r+0x92>
 8009628:	4628      	mov	r0, r5
 800962a:	f7ff fe15 	bl	8009258 <_free_r>
 800962e:	2000      	movs	r0, #0
 8009630:	6360      	str	r0, [r4, #52]	; 0x34
 8009632:	e7c1      	b.n	80095b8 <__sflush_r+0x1c>
 8009634:	6a21      	ldr	r1, [r4, #32]
 8009636:	2301      	movs	r3, #1
 8009638:	4628      	mov	r0, r5
 800963a:	47b0      	blx	r6
 800963c:	1c41      	adds	r1, r0, #1
 800963e:	d1c7      	bne.n	80095d0 <__sflush_r+0x34>
 8009640:	682b      	ldr	r3, [r5, #0]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d0c4      	beq.n	80095d0 <__sflush_r+0x34>
 8009646:	2b1d      	cmp	r3, #29
 8009648:	d001      	beq.n	800964e <__sflush_r+0xb2>
 800964a:	2b16      	cmp	r3, #22
 800964c:	d101      	bne.n	8009652 <__sflush_r+0xb6>
 800964e:	602f      	str	r7, [r5, #0]
 8009650:	e7b1      	b.n	80095b6 <__sflush_r+0x1a>
 8009652:	89a3      	ldrh	r3, [r4, #12]
 8009654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009658:	81a3      	strh	r3, [r4, #12]
 800965a:	e7ad      	b.n	80095b8 <__sflush_r+0x1c>
 800965c:	690f      	ldr	r7, [r1, #16]
 800965e:	2f00      	cmp	r7, #0
 8009660:	d0a9      	beq.n	80095b6 <__sflush_r+0x1a>
 8009662:	0793      	lsls	r3, r2, #30
 8009664:	680e      	ldr	r6, [r1, #0]
 8009666:	bf08      	it	eq
 8009668:	694b      	ldreq	r3, [r1, #20]
 800966a:	600f      	str	r7, [r1, #0]
 800966c:	bf18      	it	ne
 800966e:	2300      	movne	r3, #0
 8009670:	eba6 0807 	sub.w	r8, r6, r7
 8009674:	608b      	str	r3, [r1, #8]
 8009676:	f1b8 0f00 	cmp.w	r8, #0
 800967a:	dd9c      	ble.n	80095b6 <__sflush_r+0x1a>
 800967c:	6a21      	ldr	r1, [r4, #32]
 800967e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009680:	4643      	mov	r3, r8
 8009682:	463a      	mov	r2, r7
 8009684:	4628      	mov	r0, r5
 8009686:	47b0      	blx	r6
 8009688:	2800      	cmp	r0, #0
 800968a:	dc06      	bgt.n	800969a <__sflush_r+0xfe>
 800968c:	89a3      	ldrh	r3, [r4, #12]
 800968e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009692:	81a3      	strh	r3, [r4, #12]
 8009694:	f04f 30ff 	mov.w	r0, #4294967295
 8009698:	e78e      	b.n	80095b8 <__sflush_r+0x1c>
 800969a:	4407      	add	r7, r0
 800969c:	eba8 0800 	sub.w	r8, r8, r0
 80096a0:	e7e9      	b.n	8009676 <__sflush_r+0xda>
 80096a2:	bf00      	nop
 80096a4:	20400001 	.word	0x20400001

080096a8 <_fflush_r>:
 80096a8:	b538      	push	{r3, r4, r5, lr}
 80096aa:	690b      	ldr	r3, [r1, #16]
 80096ac:	4605      	mov	r5, r0
 80096ae:	460c      	mov	r4, r1
 80096b0:	b913      	cbnz	r3, 80096b8 <_fflush_r+0x10>
 80096b2:	2500      	movs	r5, #0
 80096b4:	4628      	mov	r0, r5
 80096b6:	bd38      	pop	{r3, r4, r5, pc}
 80096b8:	b118      	cbz	r0, 80096c2 <_fflush_r+0x1a>
 80096ba:	6983      	ldr	r3, [r0, #24]
 80096bc:	b90b      	cbnz	r3, 80096c2 <_fflush_r+0x1a>
 80096be:	f7ff fceb 	bl	8009098 <__sinit>
 80096c2:	4b14      	ldr	r3, [pc, #80]	; (8009714 <_fflush_r+0x6c>)
 80096c4:	429c      	cmp	r4, r3
 80096c6:	d11b      	bne.n	8009700 <_fflush_r+0x58>
 80096c8:	686c      	ldr	r4, [r5, #4]
 80096ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d0ef      	beq.n	80096b2 <_fflush_r+0xa>
 80096d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80096d4:	07d0      	lsls	r0, r2, #31
 80096d6:	d404      	bmi.n	80096e2 <_fflush_r+0x3a>
 80096d8:	0599      	lsls	r1, r3, #22
 80096da:	d402      	bmi.n	80096e2 <_fflush_r+0x3a>
 80096dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096de:	f7f7 fd27 	bl	8001130 <__retarget_lock_acquire_recursive>
 80096e2:	4628      	mov	r0, r5
 80096e4:	4621      	mov	r1, r4
 80096e6:	f7ff ff59 	bl	800959c <__sflush_r>
 80096ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096ec:	07da      	lsls	r2, r3, #31
 80096ee:	4605      	mov	r5, r0
 80096f0:	d4e0      	bmi.n	80096b4 <_fflush_r+0xc>
 80096f2:	89a3      	ldrh	r3, [r4, #12]
 80096f4:	059b      	lsls	r3, r3, #22
 80096f6:	d4dd      	bmi.n	80096b4 <_fflush_r+0xc>
 80096f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096fa:	f7f7 fd2d 	bl	8001158 <__retarget_lock_release_recursive>
 80096fe:	e7d9      	b.n	80096b4 <_fflush_r+0xc>
 8009700:	4b05      	ldr	r3, [pc, #20]	; (8009718 <_fflush_r+0x70>)
 8009702:	429c      	cmp	r4, r3
 8009704:	d101      	bne.n	800970a <_fflush_r+0x62>
 8009706:	68ac      	ldr	r4, [r5, #8]
 8009708:	e7df      	b.n	80096ca <_fflush_r+0x22>
 800970a:	4b04      	ldr	r3, [pc, #16]	; (800971c <_fflush_r+0x74>)
 800970c:	429c      	cmp	r4, r3
 800970e:	bf08      	it	eq
 8009710:	68ec      	ldreq	r4, [r5, #12]
 8009712:	e7da      	b.n	80096ca <_fflush_r+0x22>
 8009714:	0800a0b4 	.word	0x0800a0b4
 8009718:	0800a0d4 	.word	0x0800a0d4
 800971c:	0800a094 	.word	0x0800a094

08009720 <_lseek_r>:
 8009720:	b538      	push	{r3, r4, r5, lr}
 8009722:	4d07      	ldr	r5, [pc, #28]	; (8009740 <_lseek_r+0x20>)
 8009724:	4604      	mov	r4, r0
 8009726:	4608      	mov	r0, r1
 8009728:	4611      	mov	r1, r2
 800972a:	2200      	movs	r2, #0
 800972c:	602a      	str	r2, [r5, #0]
 800972e:	461a      	mov	r2, r3
 8009730:	f7f7 fbf0 	bl	8000f14 <_lseek>
 8009734:	1c43      	adds	r3, r0, #1
 8009736:	d102      	bne.n	800973e <_lseek_r+0x1e>
 8009738:	682b      	ldr	r3, [r5, #0]
 800973a:	b103      	cbz	r3, 800973e <_lseek_r+0x1e>
 800973c:	6023      	str	r3, [r4, #0]
 800973e:	bd38      	pop	{r3, r4, r5, pc}
 8009740:	24004bfc 	.word	0x24004bfc

08009744 <__malloc_lock>:
 8009744:	4801      	ldr	r0, [pc, #4]	; (800974c <__malloc_lock+0x8>)
 8009746:	f7f7 bcf3 	b.w	8001130 <__retarget_lock_acquire_recursive>
 800974a:	bf00      	nop
 800974c:	240000b0 	.word	0x240000b0

08009750 <__malloc_unlock>:
 8009750:	4801      	ldr	r0, [pc, #4]	; (8009758 <__malloc_unlock+0x8>)
 8009752:	f7f7 bd01 	b.w	8001158 <__retarget_lock_release_recursive>
 8009756:	bf00      	nop
 8009758:	240000b0 	.word	0x240000b0

0800975c <__sfputc_r>:
 800975c:	6893      	ldr	r3, [r2, #8]
 800975e:	3b01      	subs	r3, #1
 8009760:	2b00      	cmp	r3, #0
 8009762:	b410      	push	{r4}
 8009764:	6093      	str	r3, [r2, #8]
 8009766:	da08      	bge.n	800977a <__sfputc_r+0x1e>
 8009768:	6994      	ldr	r4, [r2, #24]
 800976a:	42a3      	cmp	r3, r4
 800976c:	db01      	blt.n	8009772 <__sfputc_r+0x16>
 800976e:	290a      	cmp	r1, #10
 8009770:	d103      	bne.n	800977a <__sfputc_r+0x1e>
 8009772:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009776:	f000 baf1 	b.w	8009d5c <__swbuf_r>
 800977a:	6813      	ldr	r3, [r2, #0]
 800977c:	1c58      	adds	r0, r3, #1
 800977e:	6010      	str	r0, [r2, #0]
 8009780:	7019      	strb	r1, [r3, #0]
 8009782:	4608      	mov	r0, r1
 8009784:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009788:	4770      	bx	lr

0800978a <__sfputs_r>:
 800978a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978c:	4606      	mov	r6, r0
 800978e:	460f      	mov	r7, r1
 8009790:	4614      	mov	r4, r2
 8009792:	18d5      	adds	r5, r2, r3
 8009794:	42ac      	cmp	r4, r5
 8009796:	d101      	bne.n	800979c <__sfputs_r+0x12>
 8009798:	2000      	movs	r0, #0
 800979a:	e007      	b.n	80097ac <__sfputs_r+0x22>
 800979c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097a0:	463a      	mov	r2, r7
 80097a2:	4630      	mov	r0, r6
 80097a4:	f7ff ffda 	bl	800975c <__sfputc_r>
 80097a8:	1c43      	adds	r3, r0, #1
 80097aa:	d1f3      	bne.n	8009794 <__sfputs_r+0xa>
 80097ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097b0 <_vfiprintf_r>:
 80097b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b4:	460d      	mov	r5, r1
 80097b6:	b09d      	sub	sp, #116	; 0x74
 80097b8:	4614      	mov	r4, r2
 80097ba:	4698      	mov	r8, r3
 80097bc:	4606      	mov	r6, r0
 80097be:	b118      	cbz	r0, 80097c8 <_vfiprintf_r+0x18>
 80097c0:	6983      	ldr	r3, [r0, #24]
 80097c2:	b90b      	cbnz	r3, 80097c8 <_vfiprintf_r+0x18>
 80097c4:	f7ff fc68 	bl	8009098 <__sinit>
 80097c8:	4b89      	ldr	r3, [pc, #548]	; (80099f0 <_vfiprintf_r+0x240>)
 80097ca:	429d      	cmp	r5, r3
 80097cc:	d11b      	bne.n	8009806 <_vfiprintf_r+0x56>
 80097ce:	6875      	ldr	r5, [r6, #4]
 80097d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097d2:	07d9      	lsls	r1, r3, #31
 80097d4:	d405      	bmi.n	80097e2 <_vfiprintf_r+0x32>
 80097d6:	89ab      	ldrh	r3, [r5, #12]
 80097d8:	059a      	lsls	r2, r3, #22
 80097da:	d402      	bmi.n	80097e2 <_vfiprintf_r+0x32>
 80097dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097de:	f7f7 fca7 	bl	8001130 <__retarget_lock_acquire_recursive>
 80097e2:	89ab      	ldrh	r3, [r5, #12]
 80097e4:	071b      	lsls	r3, r3, #28
 80097e6:	d501      	bpl.n	80097ec <_vfiprintf_r+0x3c>
 80097e8:	692b      	ldr	r3, [r5, #16]
 80097ea:	b9eb      	cbnz	r3, 8009828 <_vfiprintf_r+0x78>
 80097ec:	4629      	mov	r1, r5
 80097ee:	4630      	mov	r0, r6
 80097f0:	f000 fb06 	bl	8009e00 <__swsetup_r>
 80097f4:	b1c0      	cbz	r0, 8009828 <_vfiprintf_r+0x78>
 80097f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097f8:	07dc      	lsls	r4, r3, #31
 80097fa:	d50e      	bpl.n	800981a <_vfiprintf_r+0x6a>
 80097fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009800:	b01d      	add	sp, #116	; 0x74
 8009802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009806:	4b7b      	ldr	r3, [pc, #492]	; (80099f4 <_vfiprintf_r+0x244>)
 8009808:	429d      	cmp	r5, r3
 800980a:	d101      	bne.n	8009810 <_vfiprintf_r+0x60>
 800980c:	68b5      	ldr	r5, [r6, #8]
 800980e:	e7df      	b.n	80097d0 <_vfiprintf_r+0x20>
 8009810:	4b79      	ldr	r3, [pc, #484]	; (80099f8 <_vfiprintf_r+0x248>)
 8009812:	429d      	cmp	r5, r3
 8009814:	bf08      	it	eq
 8009816:	68f5      	ldreq	r5, [r6, #12]
 8009818:	e7da      	b.n	80097d0 <_vfiprintf_r+0x20>
 800981a:	89ab      	ldrh	r3, [r5, #12]
 800981c:	0598      	lsls	r0, r3, #22
 800981e:	d4ed      	bmi.n	80097fc <_vfiprintf_r+0x4c>
 8009820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009822:	f7f7 fc99 	bl	8001158 <__retarget_lock_release_recursive>
 8009826:	e7e9      	b.n	80097fc <_vfiprintf_r+0x4c>
 8009828:	2300      	movs	r3, #0
 800982a:	9309      	str	r3, [sp, #36]	; 0x24
 800982c:	2320      	movs	r3, #32
 800982e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009832:	f8cd 800c 	str.w	r8, [sp, #12]
 8009836:	2330      	movs	r3, #48	; 0x30
 8009838:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80099fc <_vfiprintf_r+0x24c>
 800983c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009840:	f04f 0901 	mov.w	r9, #1
 8009844:	4623      	mov	r3, r4
 8009846:	469a      	mov	sl, r3
 8009848:	f813 2b01 	ldrb.w	r2, [r3], #1
 800984c:	b10a      	cbz	r2, 8009852 <_vfiprintf_r+0xa2>
 800984e:	2a25      	cmp	r2, #37	; 0x25
 8009850:	d1f9      	bne.n	8009846 <_vfiprintf_r+0x96>
 8009852:	ebba 0b04 	subs.w	fp, sl, r4
 8009856:	d00b      	beq.n	8009870 <_vfiprintf_r+0xc0>
 8009858:	465b      	mov	r3, fp
 800985a:	4622      	mov	r2, r4
 800985c:	4629      	mov	r1, r5
 800985e:	4630      	mov	r0, r6
 8009860:	f7ff ff93 	bl	800978a <__sfputs_r>
 8009864:	3001      	adds	r0, #1
 8009866:	f000 80aa 	beq.w	80099be <_vfiprintf_r+0x20e>
 800986a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800986c:	445a      	add	r2, fp
 800986e:	9209      	str	r2, [sp, #36]	; 0x24
 8009870:	f89a 3000 	ldrb.w	r3, [sl]
 8009874:	2b00      	cmp	r3, #0
 8009876:	f000 80a2 	beq.w	80099be <_vfiprintf_r+0x20e>
 800987a:	2300      	movs	r3, #0
 800987c:	f04f 32ff 	mov.w	r2, #4294967295
 8009880:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009884:	f10a 0a01 	add.w	sl, sl, #1
 8009888:	9304      	str	r3, [sp, #16]
 800988a:	9307      	str	r3, [sp, #28]
 800988c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009890:	931a      	str	r3, [sp, #104]	; 0x68
 8009892:	4654      	mov	r4, sl
 8009894:	2205      	movs	r2, #5
 8009896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800989a:	4858      	ldr	r0, [pc, #352]	; (80099fc <_vfiprintf_r+0x24c>)
 800989c:	f7f6 fd20 	bl	80002e0 <memchr>
 80098a0:	9a04      	ldr	r2, [sp, #16]
 80098a2:	b9d8      	cbnz	r0, 80098dc <_vfiprintf_r+0x12c>
 80098a4:	06d1      	lsls	r1, r2, #27
 80098a6:	bf44      	itt	mi
 80098a8:	2320      	movmi	r3, #32
 80098aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098ae:	0713      	lsls	r3, r2, #28
 80098b0:	bf44      	itt	mi
 80098b2:	232b      	movmi	r3, #43	; 0x2b
 80098b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098b8:	f89a 3000 	ldrb.w	r3, [sl]
 80098bc:	2b2a      	cmp	r3, #42	; 0x2a
 80098be:	d015      	beq.n	80098ec <_vfiprintf_r+0x13c>
 80098c0:	9a07      	ldr	r2, [sp, #28]
 80098c2:	4654      	mov	r4, sl
 80098c4:	2000      	movs	r0, #0
 80098c6:	f04f 0c0a 	mov.w	ip, #10
 80098ca:	4621      	mov	r1, r4
 80098cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098d0:	3b30      	subs	r3, #48	; 0x30
 80098d2:	2b09      	cmp	r3, #9
 80098d4:	d94e      	bls.n	8009974 <_vfiprintf_r+0x1c4>
 80098d6:	b1b0      	cbz	r0, 8009906 <_vfiprintf_r+0x156>
 80098d8:	9207      	str	r2, [sp, #28]
 80098da:	e014      	b.n	8009906 <_vfiprintf_r+0x156>
 80098dc:	eba0 0308 	sub.w	r3, r0, r8
 80098e0:	fa09 f303 	lsl.w	r3, r9, r3
 80098e4:	4313      	orrs	r3, r2
 80098e6:	9304      	str	r3, [sp, #16]
 80098e8:	46a2      	mov	sl, r4
 80098ea:	e7d2      	b.n	8009892 <_vfiprintf_r+0xe2>
 80098ec:	9b03      	ldr	r3, [sp, #12]
 80098ee:	1d19      	adds	r1, r3, #4
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	9103      	str	r1, [sp, #12]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	bfbb      	ittet	lt
 80098f8:	425b      	neglt	r3, r3
 80098fa:	f042 0202 	orrlt.w	r2, r2, #2
 80098fe:	9307      	strge	r3, [sp, #28]
 8009900:	9307      	strlt	r3, [sp, #28]
 8009902:	bfb8      	it	lt
 8009904:	9204      	strlt	r2, [sp, #16]
 8009906:	7823      	ldrb	r3, [r4, #0]
 8009908:	2b2e      	cmp	r3, #46	; 0x2e
 800990a:	d10c      	bne.n	8009926 <_vfiprintf_r+0x176>
 800990c:	7863      	ldrb	r3, [r4, #1]
 800990e:	2b2a      	cmp	r3, #42	; 0x2a
 8009910:	d135      	bne.n	800997e <_vfiprintf_r+0x1ce>
 8009912:	9b03      	ldr	r3, [sp, #12]
 8009914:	1d1a      	adds	r2, r3, #4
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	9203      	str	r2, [sp, #12]
 800991a:	2b00      	cmp	r3, #0
 800991c:	bfb8      	it	lt
 800991e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009922:	3402      	adds	r4, #2
 8009924:	9305      	str	r3, [sp, #20]
 8009926:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009a0c <_vfiprintf_r+0x25c>
 800992a:	7821      	ldrb	r1, [r4, #0]
 800992c:	2203      	movs	r2, #3
 800992e:	4650      	mov	r0, sl
 8009930:	f7f6 fcd6 	bl	80002e0 <memchr>
 8009934:	b140      	cbz	r0, 8009948 <_vfiprintf_r+0x198>
 8009936:	2340      	movs	r3, #64	; 0x40
 8009938:	eba0 000a 	sub.w	r0, r0, sl
 800993c:	fa03 f000 	lsl.w	r0, r3, r0
 8009940:	9b04      	ldr	r3, [sp, #16]
 8009942:	4303      	orrs	r3, r0
 8009944:	3401      	adds	r4, #1
 8009946:	9304      	str	r3, [sp, #16]
 8009948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800994c:	482c      	ldr	r0, [pc, #176]	; (8009a00 <_vfiprintf_r+0x250>)
 800994e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009952:	2206      	movs	r2, #6
 8009954:	f7f6 fcc4 	bl	80002e0 <memchr>
 8009958:	2800      	cmp	r0, #0
 800995a:	d03f      	beq.n	80099dc <_vfiprintf_r+0x22c>
 800995c:	4b29      	ldr	r3, [pc, #164]	; (8009a04 <_vfiprintf_r+0x254>)
 800995e:	bb1b      	cbnz	r3, 80099a8 <_vfiprintf_r+0x1f8>
 8009960:	9b03      	ldr	r3, [sp, #12]
 8009962:	3307      	adds	r3, #7
 8009964:	f023 0307 	bic.w	r3, r3, #7
 8009968:	3308      	adds	r3, #8
 800996a:	9303      	str	r3, [sp, #12]
 800996c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800996e:	443b      	add	r3, r7
 8009970:	9309      	str	r3, [sp, #36]	; 0x24
 8009972:	e767      	b.n	8009844 <_vfiprintf_r+0x94>
 8009974:	fb0c 3202 	mla	r2, ip, r2, r3
 8009978:	460c      	mov	r4, r1
 800997a:	2001      	movs	r0, #1
 800997c:	e7a5      	b.n	80098ca <_vfiprintf_r+0x11a>
 800997e:	2300      	movs	r3, #0
 8009980:	3401      	adds	r4, #1
 8009982:	9305      	str	r3, [sp, #20]
 8009984:	4619      	mov	r1, r3
 8009986:	f04f 0c0a 	mov.w	ip, #10
 800998a:	4620      	mov	r0, r4
 800998c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009990:	3a30      	subs	r2, #48	; 0x30
 8009992:	2a09      	cmp	r2, #9
 8009994:	d903      	bls.n	800999e <_vfiprintf_r+0x1ee>
 8009996:	2b00      	cmp	r3, #0
 8009998:	d0c5      	beq.n	8009926 <_vfiprintf_r+0x176>
 800999a:	9105      	str	r1, [sp, #20]
 800999c:	e7c3      	b.n	8009926 <_vfiprintf_r+0x176>
 800999e:	fb0c 2101 	mla	r1, ip, r1, r2
 80099a2:	4604      	mov	r4, r0
 80099a4:	2301      	movs	r3, #1
 80099a6:	e7f0      	b.n	800998a <_vfiprintf_r+0x1da>
 80099a8:	ab03      	add	r3, sp, #12
 80099aa:	9300      	str	r3, [sp, #0]
 80099ac:	462a      	mov	r2, r5
 80099ae:	4b16      	ldr	r3, [pc, #88]	; (8009a08 <_vfiprintf_r+0x258>)
 80099b0:	a904      	add	r1, sp, #16
 80099b2:	4630      	mov	r0, r6
 80099b4:	f3af 8000 	nop.w
 80099b8:	4607      	mov	r7, r0
 80099ba:	1c78      	adds	r0, r7, #1
 80099bc:	d1d6      	bne.n	800996c <_vfiprintf_r+0x1bc>
 80099be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099c0:	07d9      	lsls	r1, r3, #31
 80099c2:	d405      	bmi.n	80099d0 <_vfiprintf_r+0x220>
 80099c4:	89ab      	ldrh	r3, [r5, #12]
 80099c6:	059a      	lsls	r2, r3, #22
 80099c8:	d402      	bmi.n	80099d0 <_vfiprintf_r+0x220>
 80099ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099cc:	f7f7 fbc4 	bl	8001158 <__retarget_lock_release_recursive>
 80099d0:	89ab      	ldrh	r3, [r5, #12]
 80099d2:	065b      	lsls	r3, r3, #25
 80099d4:	f53f af12 	bmi.w	80097fc <_vfiprintf_r+0x4c>
 80099d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099da:	e711      	b.n	8009800 <_vfiprintf_r+0x50>
 80099dc:	ab03      	add	r3, sp, #12
 80099de:	9300      	str	r3, [sp, #0]
 80099e0:	462a      	mov	r2, r5
 80099e2:	4b09      	ldr	r3, [pc, #36]	; (8009a08 <_vfiprintf_r+0x258>)
 80099e4:	a904      	add	r1, sp, #16
 80099e6:	4630      	mov	r0, r6
 80099e8:	f000 f880 	bl	8009aec <_printf_i>
 80099ec:	e7e4      	b.n	80099b8 <_vfiprintf_r+0x208>
 80099ee:	bf00      	nop
 80099f0:	0800a0b4 	.word	0x0800a0b4
 80099f4:	0800a0d4 	.word	0x0800a0d4
 80099f8:	0800a094 	.word	0x0800a094
 80099fc:	0800a0f8 	.word	0x0800a0f8
 8009a00:	0800a102 	.word	0x0800a102
 8009a04:	00000000 	.word	0x00000000
 8009a08:	0800978b 	.word	0x0800978b
 8009a0c:	0800a0fe 	.word	0x0800a0fe

08009a10 <_printf_common>:
 8009a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a14:	4616      	mov	r6, r2
 8009a16:	4699      	mov	r9, r3
 8009a18:	688a      	ldr	r2, [r1, #8]
 8009a1a:	690b      	ldr	r3, [r1, #16]
 8009a1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a20:	4293      	cmp	r3, r2
 8009a22:	bfb8      	it	lt
 8009a24:	4613      	movlt	r3, r2
 8009a26:	6033      	str	r3, [r6, #0]
 8009a28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a2c:	4607      	mov	r7, r0
 8009a2e:	460c      	mov	r4, r1
 8009a30:	b10a      	cbz	r2, 8009a36 <_printf_common+0x26>
 8009a32:	3301      	adds	r3, #1
 8009a34:	6033      	str	r3, [r6, #0]
 8009a36:	6823      	ldr	r3, [r4, #0]
 8009a38:	0699      	lsls	r1, r3, #26
 8009a3a:	bf42      	ittt	mi
 8009a3c:	6833      	ldrmi	r3, [r6, #0]
 8009a3e:	3302      	addmi	r3, #2
 8009a40:	6033      	strmi	r3, [r6, #0]
 8009a42:	6825      	ldr	r5, [r4, #0]
 8009a44:	f015 0506 	ands.w	r5, r5, #6
 8009a48:	d106      	bne.n	8009a58 <_printf_common+0x48>
 8009a4a:	f104 0a19 	add.w	sl, r4, #25
 8009a4e:	68e3      	ldr	r3, [r4, #12]
 8009a50:	6832      	ldr	r2, [r6, #0]
 8009a52:	1a9b      	subs	r3, r3, r2
 8009a54:	42ab      	cmp	r3, r5
 8009a56:	dc26      	bgt.n	8009aa6 <_printf_common+0x96>
 8009a58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a5c:	1e13      	subs	r3, r2, #0
 8009a5e:	6822      	ldr	r2, [r4, #0]
 8009a60:	bf18      	it	ne
 8009a62:	2301      	movne	r3, #1
 8009a64:	0692      	lsls	r2, r2, #26
 8009a66:	d42b      	bmi.n	8009ac0 <_printf_common+0xb0>
 8009a68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a6c:	4649      	mov	r1, r9
 8009a6e:	4638      	mov	r0, r7
 8009a70:	47c0      	blx	r8
 8009a72:	3001      	adds	r0, #1
 8009a74:	d01e      	beq.n	8009ab4 <_printf_common+0xa4>
 8009a76:	6823      	ldr	r3, [r4, #0]
 8009a78:	68e5      	ldr	r5, [r4, #12]
 8009a7a:	6832      	ldr	r2, [r6, #0]
 8009a7c:	f003 0306 	and.w	r3, r3, #6
 8009a80:	2b04      	cmp	r3, #4
 8009a82:	bf08      	it	eq
 8009a84:	1aad      	subeq	r5, r5, r2
 8009a86:	68a3      	ldr	r3, [r4, #8]
 8009a88:	6922      	ldr	r2, [r4, #16]
 8009a8a:	bf0c      	ite	eq
 8009a8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a90:	2500      	movne	r5, #0
 8009a92:	4293      	cmp	r3, r2
 8009a94:	bfc4      	itt	gt
 8009a96:	1a9b      	subgt	r3, r3, r2
 8009a98:	18ed      	addgt	r5, r5, r3
 8009a9a:	2600      	movs	r6, #0
 8009a9c:	341a      	adds	r4, #26
 8009a9e:	42b5      	cmp	r5, r6
 8009aa0:	d11a      	bne.n	8009ad8 <_printf_common+0xc8>
 8009aa2:	2000      	movs	r0, #0
 8009aa4:	e008      	b.n	8009ab8 <_printf_common+0xa8>
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	4652      	mov	r2, sl
 8009aaa:	4649      	mov	r1, r9
 8009aac:	4638      	mov	r0, r7
 8009aae:	47c0      	blx	r8
 8009ab0:	3001      	adds	r0, #1
 8009ab2:	d103      	bne.n	8009abc <_printf_common+0xac>
 8009ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009abc:	3501      	adds	r5, #1
 8009abe:	e7c6      	b.n	8009a4e <_printf_common+0x3e>
 8009ac0:	18e1      	adds	r1, r4, r3
 8009ac2:	1c5a      	adds	r2, r3, #1
 8009ac4:	2030      	movs	r0, #48	; 0x30
 8009ac6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009aca:	4422      	add	r2, r4
 8009acc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ad0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ad4:	3302      	adds	r3, #2
 8009ad6:	e7c7      	b.n	8009a68 <_printf_common+0x58>
 8009ad8:	2301      	movs	r3, #1
 8009ada:	4622      	mov	r2, r4
 8009adc:	4649      	mov	r1, r9
 8009ade:	4638      	mov	r0, r7
 8009ae0:	47c0      	blx	r8
 8009ae2:	3001      	adds	r0, #1
 8009ae4:	d0e6      	beq.n	8009ab4 <_printf_common+0xa4>
 8009ae6:	3601      	adds	r6, #1
 8009ae8:	e7d9      	b.n	8009a9e <_printf_common+0x8e>
	...

08009aec <_printf_i>:
 8009aec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009af0:	460c      	mov	r4, r1
 8009af2:	4691      	mov	r9, r2
 8009af4:	7e27      	ldrb	r7, [r4, #24]
 8009af6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009af8:	2f78      	cmp	r7, #120	; 0x78
 8009afa:	4680      	mov	r8, r0
 8009afc:	469a      	mov	sl, r3
 8009afe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b02:	d807      	bhi.n	8009b14 <_printf_i+0x28>
 8009b04:	2f62      	cmp	r7, #98	; 0x62
 8009b06:	d80a      	bhi.n	8009b1e <_printf_i+0x32>
 8009b08:	2f00      	cmp	r7, #0
 8009b0a:	f000 80d8 	beq.w	8009cbe <_printf_i+0x1d2>
 8009b0e:	2f58      	cmp	r7, #88	; 0x58
 8009b10:	f000 80a3 	beq.w	8009c5a <_printf_i+0x16e>
 8009b14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009b18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b1c:	e03a      	b.n	8009b94 <_printf_i+0xa8>
 8009b1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b22:	2b15      	cmp	r3, #21
 8009b24:	d8f6      	bhi.n	8009b14 <_printf_i+0x28>
 8009b26:	a001      	add	r0, pc, #4	; (adr r0, 8009b2c <_printf_i+0x40>)
 8009b28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009b2c:	08009b85 	.word	0x08009b85
 8009b30:	08009b99 	.word	0x08009b99
 8009b34:	08009b15 	.word	0x08009b15
 8009b38:	08009b15 	.word	0x08009b15
 8009b3c:	08009b15 	.word	0x08009b15
 8009b40:	08009b15 	.word	0x08009b15
 8009b44:	08009b99 	.word	0x08009b99
 8009b48:	08009b15 	.word	0x08009b15
 8009b4c:	08009b15 	.word	0x08009b15
 8009b50:	08009b15 	.word	0x08009b15
 8009b54:	08009b15 	.word	0x08009b15
 8009b58:	08009ca5 	.word	0x08009ca5
 8009b5c:	08009bc9 	.word	0x08009bc9
 8009b60:	08009c87 	.word	0x08009c87
 8009b64:	08009b15 	.word	0x08009b15
 8009b68:	08009b15 	.word	0x08009b15
 8009b6c:	08009cc7 	.word	0x08009cc7
 8009b70:	08009b15 	.word	0x08009b15
 8009b74:	08009bc9 	.word	0x08009bc9
 8009b78:	08009b15 	.word	0x08009b15
 8009b7c:	08009b15 	.word	0x08009b15
 8009b80:	08009c8f 	.word	0x08009c8f
 8009b84:	680b      	ldr	r3, [r1, #0]
 8009b86:	1d1a      	adds	r2, r3, #4
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	600a      	str	r2, [r1, #0]
 8009b8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009b90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b94:	2301      	movs	r3, #1
 8009b96:	e0a3      	b.n	8009ce0 <_printf_i+0x1f4>
 8009b98:	6825      	ldr	r5, [r4, #0]
 8009b9a:	6808      	ldr	r0, [r1, #0]
 8009b9c:	062e      	lsls	r6, r5, #24
 8009b9e:	f100 0304 	add.w	r3, r0, #4
 8009ba2:	d50a      	bpl.n	8009bba <_printf_i+0xce>
 8009ba4:	6805      	ldr	r5, [r0, #0]
 8009ba6:	600b      	str	r3, [r1, #0]
 8009ba8:	2d00      	cmp	r5, #0
 8009baa:	da03      	bge.n	8009bb4 <_printf_i+0xc8>
 8009bac:	232d      	movs	r3, #45	; 0x2d
 8009bae:	426d      	negs	r5, r5
 8009bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bb4:	485e      	ldr	r0, [pc, #376]	; (8009d30 <_printf_i+0x244>)
 8009bb6:	230a      	movs	r3, #10
 8009bb8:	e019      	b.n	8009bee <_printf_i+0x102>
 8009bba:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009bbe:	6805      	ldr	r5, [r0, #0]
 8009bc0:	600b      	str	r3, [r1, #0]
 8009bc2:	bf18      	it	ne
 8009bc4:	b22d      	sxthne	r5, r5
 8009bc6:	e7ef      	b.n	8009ba8 <_printf_i+0xbc>
 8009bc8:	680b      	ldr	r3, [r1, #0]
 8009bca:	6825      	ldr	r5, [r4, #0]
 8009bcc:	1d18      	adds	r0, r3, #4
 8009bce:	6008      	str	r0, [r1, #0]
 8009bd0:	0628      	lsls	r0, r5, #24
 8009bd2:	d501      	bpl.n	8009bd8 <_printf_i+0xec>
 8009bd4:	681d      	ldr	r5, [r3, #0]
 8009bd6:	e002      	b.n	8009bde <_printf_i+0xf2>
 8009bd8:	0669      	lsls	r1, r5, #25
 8009bda:	d5fb      	bpl.n	8009bd4 <_printf_i+0xe8>
 8009bdc:	881d      	ldrh	r5, [r3, #0]
 8009bde:	4854      	ldr	r0, [pc, #336]	; (8009d30 <_printf_i+0x244>)
 8009be0:	2f6f      	cmp	r7, #111	; 0x6f
 8009be2:	bf0c      	ite	eq
 8009be4:	2308      	moveq	r3, #8
 8009be6:	230a      	movne	r3, #10
 8009be8:	2100      	movs	r1, #0
 8009bea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009bee:	6866      	ldr	r6, [r4, #4]
 8009bf0:	60a6      	str	r6, [r4, #8]
 8009bf2:	2e00      	cmp	r6, #0
 8009bf4:	bfa2      	ittt	ge
 8009bf6:	6821      	ldrge	r1, [r4, #0]
 8009bf8:	f021 0104 	bicge.w	r1, r1, #4
 8009bfc:	6021      	strge	r1, [r4, #0]
 8009bfe:	b90d      	cbnz	r5, 8009c04 <_printf_i+0x118>
 8009c00:	2e00      	cmp	r6, #0
 8009c02:	d04d      	beq.n	8009ca0 <_printf_i+0x1b4>
 8009c04:	4616      	mov	r6, r2
 8009c06:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c0a:	fb03 5711 	mls	r7, r3, r1, r5
 8009c0e:	5dc7      	ldrb	r7, [r0, r7]
 8009c10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c14:	462f      	mov	r7, r5
 8009c16:	42bb      	cmp	r3, r7
 8009c18:	460d      	mov	r5, r1
 8009c1a:	d9f4      	bls.n	8009c06 <_printf_i+0x11a>
 8009c1c:	2b08      	cmp	r3, #8
 8009c1e:	d10b      	bne.n	8009c38 <_printf_i+0x14c>
 8009c20:	6823      	ldr	r3, [r4, #0]
 8009c22:	07df      	lsls	r7, r3, #31
 8009c24:	d508      	bpl.n	8009c38 <_printf_i+0x14c>
 8009c26:	6923      	ldr	r3, [r4, #16]
 8009c28:	6861      	ldr	r1, [r4, #4]
 8009c2a:	4299      	cmp	r1, r3
 8009c2c:	bfde      	ittt	le
 8009c2e:	2330      	movle	r3, #48	; 0x30
 8009c30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c38:	1b92      	subs	r2, r2, r6
 8009c3a:	6122      	str	r2, [r4, #16]
 8009c3c:	f8cd a000 	str.w	sl, [sp]
 8009c40:	464b      	mov	r3, r9
 8009c42:	aa03      	add	r2, sp, #12
 8009c44:	4621      	mov	r1, r4
 8009c46:	4640      	mov	r0, r8
 8009c48:	f7ff fee2 	bl	8009a10 <_printf_common>
 8009c4c:	3001      	adds	r0, #1
 8009c4e:	d14c      	bne.n	8009cea <_printf_i+0x1fe>
 8009c50:	f04f 30ff 	mov.w	r0, #4294967295
 8009c54:	b004      	add	sp, #16
 8009c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c5a:	4835      	ldr	r0, [pc, #212]	; (8009d30 <_printf_i+0x244>)
 8009c5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009c60:	6823      	ldr	r3, [r4, #0]
 8009c62:	680e      	ldr	r6, [r1, #0]
 8009c64:	061f      	lsls	r7, r3, #24
 8009c66:	f856 5b04 	ldr.w	r5, [r6], #4
 8009c6a:	600e      	str	r6, [r1, #0]
 8009c6c:	d514      	bpl.n	8009c98 <_printf_i+0x1ac>
 8009c6e:	07d9      	lsls	r1, r3, #31
 8009c70:	bf44      	itt	mi
 8009c72:	f043 0320 	orrmi.w	r3, r3, #32
 8009c76:	6023      	strmi	r3, [r4, #0]
 8009c78:	b91d      	cbnz	r5, 8009c82 <_printf_i+0x196>
 8009c7a:	6823      	ldr	r3, [r4, #0]
 8009c7c:	f023 0320 	bic.w	r3, r3, #32
 8009c80:	6023      	str	r3, [r4, #0]
 8009c82:	2310      	movs	r3, #16
 8009c84:	e7b0      	b.n	8009be8 <_printf_i+0xfc>
 8009c86:	6823      	ldr	r3, [r4, #0]
 8009c88:	f043 0320 	orr.w	r3, r3, #32
 8009c8c:	6023      	str	r3, [r4, #0]
 8009c8e:	2378      	movs	r3, #120	; 0x78
 8009c90:	4828      	ldr	r0, [pc, #160]	; (8009d34 <_printf_i+0x248>)
 8009c92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c96:	e7e3      	b.n	8009c60 <_printf_i+0x174>
 8009c98:	065e      	lsls	r6, r3, #25
 8009c9a:	bf48      	it	mi
 8009c9c:	b2ad      	uxthmi	r5, r5
 8009c9e:	e7e6      	b.n	8009c6e <_printf_i+0x182>
 8009ca0:	4616      	mov	r6, r2
 8009ca2:	e7bb      	b.n	8009c1c <_printf_i+0x130>
 8009ca4:	680b      	ldr	r3, [r1, #0]
 8009ca6:	6826      	ldr	r6, [r4, #0]
 8009ca8:	6960      	ldr	r0, [r4, #20]
 8009caa:	1d1d      	adds	r5, r3, #4
 8009cac:	600d      	str	r5, [r1, #0]
 8009cae:	0635      	lsls	r5, r6, #24
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	d501      	bpl.n	8009cb8 <_printf_i+0x1cc>
 8009cb4:	6018      	str	r0, [r3, #0]
 8009cb6:	e002      	b.n	8009cbe <_printf_i+0x1d2>
 8009cb8:	0671      	lsls	r1, r6, #25
 8009cba:	d5fb      	bpl.n	8009cb4 <_printf_i+0x1c8>
 8009cbc:	8018      	strh	r0, [r3, #0]
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	6123      	str	r3, [r4, #16]
 8009cc2:	4616      	mov	r6, r2
 8009cc4:	e7ba      	b.n	8009c3c <_printf_i+0x150>
 8009cc6:	680b      	ldr	r3, [r1, #0]
 8009cc8:	1d1a      	adds	r2, r3, #4
 8009cca:	600a      	str	r2, [r1, #0]
 8009ccc:	681e      	ldr	r6, [r3, #0]
 8009cce:	6862      	ldr	r2, [r4, #4]
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	4630      	mov	r0, r6
 8009cd4:	f7f6 fb04 	bl	80002e0 <memchr>
 8009cd8:	b108      	cbz	r0, 8009cde <_printf_i+0x1f2>
 8009cda:	1b80      	subs	r0, r0, r6
 8009cdc:	6060      	str	r0, [r4, #4]
 8009cde:	6863      	ldr	r3, [r4, #4]
 8009ce0:	6123      	str	r3, [r4, #16]
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ce8:	e7a8      	b.n	8009c3c <_printf_i+0x150>
 8009cea:	6923      	ldr	r3, [r4, #16]
 8009cec:	4632      	mov	r2, r6
 8009cee:	4649      	mov	r1, r9
 8009cf0:	4640      	mov	r0, r8
 8009cf2:	47d0      	blx	sl
 8009cf4:	3001      	adds	r0, #1
 8009cf6:	d0ab      	beq.n	8009c50 <_printf_i+0x164>
 8009cf8:	6823      	ldr	r3, [r4, #0]
 8009cfa:	079b      	lsls	r3, r3, #30
 8009cfc:	d413      	bmi.n	8009d26 <_printf_i+0x23a>
 8009cfe:	68e0      	ldr	r0, [r4, #12]
 8009d00:	9b03      	ldr	r3, [sp, #12]
 8009d02:	4298      	cmp	r0, r3
 8009d04:	bfb8      	it	lt
 8009d06:	4618      	movlt	r0, r3
 8009d08:	e7a4      	b.n	8009c54 <_printf_i+0x168>
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	4632      	mov	r2, r6
 8009d0e:	4649      	mov	r1, r9
 8009d10:	4640      	mov	r0, r8
 8009d12:	47d0      	blx	sl
 8009d14:	3001      	adds	r0, #1
 8009d16:	d09b      	beq.n	8009c50 <_printf_i+0x164>
 8009d18:	3501      	adds	r5, #1
 8009d1a:	68e3      	ldr	r3, [r4, #12]
 8009d1c:	9903      	ldr	r1, [sp, #12]
 8009d1e:	1a5b      	subs	r3, r3, r1
 8009d20:	42ab      	cmp	r3, r5
 8009d22:	dcf2      	bgt.n	8009d0a <_printf_i+0x21e>
 8009d24:	e7eb      	b.n	8009cfe <_printf_i+0x212>
 8009d26:	2500      	movs	r5, #0
 8009d28:	f104 0619 	add.w	r6, r4, #25
 8009d2c:	e7f5      	b.n	8009d1a <_printf_i+0x22e>
 8009d2e:	bf00      	nop
 8009d30:	0800a109 	.word	0x0800a109
 8009d34:	0800a11a 	.word	0x0800a11a

08009d38 <_read_r>:
 8009d38:	b538      	push	{r3, r4, r5, lr}
 8009d3a:	4d07      	ldr	r5, [pc, #28]	; (8009d58 <_read_r+0x20>)
 8009d3c:	4604      	mov	r4, r0
 8009d3e:	4608      	mov	r0, r1
 8009d40:	4611      	mov	r1, r2
 8009d42:	2200      	movs	r2, #0
 8009d44:	602a      	str	r2, [r5, #0]
 8009d46:	461a      	mov	r2, r3
 8009d48:	f7f7 f884 	bl	8000e54 <_read>
 8009d4c:	1c43      	adds	r3, r0, #1
 8009d4e:	d102      	bne.n	8009d56 <_read_r+0x1e>
 8009d50:	682b      	ldr	r3, [r5, #0]
 8009d52:	b103      	cbz	r3, 8009d56 <_read_r+0x1e>
 8009d54:	6023      	str	r3, [r4, #0]
 8009d56:	bd38      	pop	{r3, r4, r5, pc}
 8009d58:	24004bfc 	.word	0x24004bfc

08009d5c <__swbuf_r>:
 8009d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d5e:	460e      	mov	r6, r1
 8009d60:	4614      	mov	r4, r2
 8009d62:	4605      	mov	r5, r0
 8009d64:	b118      	cbz	r0, 8009d6e <__swbuf_r+0x12>
 8009d66:	6983      	ldr	r3, [r0, #24]
 8009d68:	b90b      	cbnz	r3, 8009d6e <__swbuf_r+0x12>
 8009d6a:	f7ff f995 	bl	8009098 <__sinit>
 8009d6e:	4b21      	ldr	r3, [pc, #132]	; (8009df4 <__swbuf_r+0x98>)
 8009d70:	429c      	cmp	r4, r3
 8009d72:	d12b      	bne.n	8009dcc <__swbuf_r+0x70>
 8009d74:	686c      	ldr	r4, [r5, #4]
 8009d76:	69a3      	ldr	r3, [r4, #24]
 8009d78:	60a3      	str	r3, [r4, #8]
 8009d7a:	89a3      	ldrh	r3, [r4, #12]
 8009d7c:	071a      	lsls	r2, r3, #28
 8009d7e:	d52f      	bpl.n	8009de0 <__swbuf_r+0x84>
 8009d80:	6923      	ldr	r3, [r4, #16]
 8009d82:	b36b      	cbz	r3, 8009de0 <__swbuf_r+0x84>
 8009d84:	6923      	ldr	r3, [r4, #16]
 8009d86:	6820      	ldr	r0, [r4, #0]
 8009d88:	1ac0      	subs	r0, r0, r3
 8009d8a:	6963      	ldr	r3, [r4, #20]
 8009d8c:	b2f6      	uxtb	r6, r6
 8009d8e:	4283      	cmp	r3, r0
 8009d90:	4637      	mov	r7, r6
 8009d92:	dc04      	bgt.n	8009d9e <__swbuf_r+0x42>
 8009d94:	4621      	mov	r1, r4
 8009d96:	4628      	mov	r0, r5
 8009d98:	f7ff fc86 	bl	80096a8 <_fflush_r>
 8009d9c:	bb30      	cbnz	r0, 8009dec <__swbuf_r+0x90>
 8009d9e:	68a3      	ldr	r3, [r4, #8]
 8009da0:	3b01      	subs	r3, #1
 8009da2:	60a3      	str	r3, [r4, #8]
 8009da4:	6823      	ldr	r3, [r4, #0]
 8009da6:	1c5a      	adds	r2, r3, #1
 8009da8:	6022      	str	r2, [r4, #0]
 8009daa:	701e      	strb	r6, [r3, #0]
 8009dac:	6963      	ldr	r3, [r4, #20]
 8009dae:	3001      	adds	r0, #1
 8009db0:	4283      	cmp	r3, r0
 8009db2:	d004      	beq.n	8009dbe <__swbuf_r+0x62>
 8009db4:	89a3      	ldrh	r3, [r4, #12]
 8009db6:	07db      	lsls	r3, r3, #31
 8009db8:	d506      	bpl.n	8009dc8 <__swbuf_r+0x6c>
 8009dba:	2e0a      	cmp	r6, #10
 8009dbc:	d104      	bne.n	8009dc8 <__swbuf_r+0x6c>
 8009dbe:	4621      	mov	r1, r4
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	f7ff fc71 	bl	80096a8 <_fflush_r>
 8009dc6:	b988      	cbnz	r0, 8009dec <__swbuf_r+0x90>
 8009dc8:	4638      	mov	r0, r7
 8009dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dcc:	4b0a      	ldr	r3, [pc, #40]	; (8009df8 <__swbuf_r+0x9c>)
 8009dce:	429c      	cmp	r4, r3
 8009dd0:	d101      	bne.n	8009dd6 <__swbuf_r+0x7a>
 8009dd2:	68ac      	ldr	r4, [r5, #8]
 8009dd4:	e7cf      	b.n	8009d76 <__swbuf_r+0x1a>
 8009dd6:	4b09      	ldr	r3, [pc, #36]	; (8009dfc <__swbuf_r+0xa0>)
 8009dd8:	429c      	cmp	r4, r3
 8009dda:	bf08      	it	eq
 8009ddc:	68ec      	ldreq	r4, [r5, #12]
 8009dde:	e7ca      	b.n	8009d76 <__swbuf_r+0x1a>
 8009de0:	4621      	mov	r1, r4
 8009de2:	4628      	mov	r0, r5
 8009de4:	f000 f80c 	bl	8009e00 <__swsetup_r>
 8009de8:	2800      	cmp	r0, #0
 8009dea:	d0cb      	beq.n	8009d84 <__swbuf_r+0x28>
 8009dec:	f04f 37ff 	mov.w	r7, #4294967295
 8009df0:	e7ea      	b.n	8009dc8 <__swbuf_r+0x6c>
 8009df2:	bf00      	nop
 8009df4:	0800a0b4 	.word	0x0800a0b4
 8009df8:	0800a0d4 	.word	0x0800a0d4
 8009dfc:	0800a094 	.word	0x0800a094

08009e00 <__swsetup_r>:
 8009e00:	4b32      	ldr	r3, [pc, #200]	; (8009ecc <__swsetup_r+0xcc>)
 8009e02:	b570      	push	{r4, r5, r6, lr}
 8009e04:	681d      	ldr	r5, [r3, #0]
 8009e06:	4606      	mov	r6, r0
 8009e08:	460c      	mov	r4, r1
 8009e0a:	b125      	cbz	r5, 8009e16 <__swsetup_r+0x16>
 8009e0c:	69ab      	ldr	r3, [r5, #24]
 8009e0e:	b913      	cbnz	r3, 8009e16 <__swsetup_r+0x16>
 8009e10:	4628      	mov	r0, r5
 8009e12:	f7ff f941 	bl	8009098 <__sinit>
 8009e16:	4b2e      	ldr	r3, [pc, #184]	; (8009ed0 <__swsetup_r+0xd0>)
 8009e18:	429c      	cmp	r4, r3
 8009e1a:	d10f      	bne.n	8009e3c <__swsetup_r+0x3c>
 8009e1c:	686c      	ldr	r4, [r5, #4]
 8009e1e:	89a3      	ldrh	r3, [r4, #12]
 8009e20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e24:	0719      	lsls	r1, r3, #28
 8009e26:	d42c      	bmi.n	8009e82 <__swsetup_r+0x82>
 8009e28:	06dd      	lsls	r5, r3, #27
 8009e2a:	d411      	bmi.n	8009e50 <__swsetup_r+0x50>
 8009e2c:	2309      	movs	r3, #9
 8009e2e:	6033      	str	r3, [r6, #0]
 8009e30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009e34:	81a3      	strh	r3, [r4, #12]
 8009e36:	f04f 30ff 	mov.w	r0, #4294967295
 8009e3a:	e03e      	b.n	8009eba <__swsetup_r+0xba>
 8009e3c:	4b25      	ldr	r3, [pc, #148]	; (8009ed4 <__swsetup_r+0xd4>)
 8009e3e:	429c      	cmp	r4, r3
 8009e40:	d101      	bne.n	8009e46 <__swsetup_r+0x46>
 8009e42:	68ac      	ldr	r4, [r5, #8]
 8009e44:	e7eb      	b.n	8009e1e <__swsetup_r+0x1e>
 8009e46:	4b24      	ldr	r3, [pc, #144]	; (8009ed8 <__swsetup_r+0xd8>)
 8009e48:	429c      	cmp	r4, r3
 8009e4a:	bf08      	it	eq
 8009e4c:	68ec      	ldreq	r4, [r5, #12]
 8009e4e:	e7e6      	b.n	8009e1e <__swsetup_r+0x1e>
 8009e50:	0758      	lsls	r0, r3, #29
 8009e52:	d512      	bpl.n	8009e7a <__swsetup_r+0x7a>
 8009e54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e56:	b141      	cbz	r1, 8009e6a <__swsetup_r+0x6a>
 8009e58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e5c:	4299      	cmp	r1, r3
 8009e5e:	d002      	beq.n	8009e66 <__swsetup_r+0x66>
 8009e60:	4630      	mov	r0, r6
 8009e62:	f7ff f9f9 	bl	8009258 <_free_r>
 8009e66:	2300      	movs	r3, #0
 8009e68:	6363      	str	r3, [r4, #52]	; 0x34
 8009e6a:	89a3      	ldrh	r3, [r4, #12]
 8009e6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e70:	81a3      	strh	r3, [r4, #12]
 8009e72:	2300      	movs	r3, #0
 8009e74:	6063      	str	r3, [r4, #4]
 8009e76:	6923      	ldr	r3, [r4, #16]
 8009e78:	6023      	str	r3, [r4, #0]
 8009e7a:	89a3      	ldrh	r3, [r4, #12]
 8009e7c:	f043 0308 	orr.w	r3, r3, #8
 8009e80:	81a3      	strh	r3, [r4, #12]
 8009e82:	6923      	ldr	r3, [r4, #16]
 8009e84:	b94b      	cbnz	r3, 8009e9a <__swsetup_r+0x9a>
 8009e86:	89a3      	ldrh	r3, [r4, #12]
 8009e88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e90:	d003      	beq.n	8009e9a <__swsetup_r+0x9a>
 8009e92:	4621      	mov	r1, r4
 8009e94:	4630      	mov	r0, r6
 8009e96:	f000 f845 	bl	8009f24 <__smakebuf_r>
 8009e9a:	89a0      	ldrh	r0, [r4, #12]
 8009e9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ea0:	f010 0301 	ands.w	r3, r0, #1
 8009ea4:	d00a      	beq.n	8009ebc <__swsetup_r+0xbc>
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	60a3      	str	r3, [r4, #8]
 8009eaa:	6963      	ldr	r3, [r4, #20]
 8009eac:	425b      	negs	r3, r3
 8009eae:	61a3      	str	r3, [r4, #24]
 8009eb0:	6923      	ldr	r3, [r4, #16]
 8009eb2:	b943      	cbnz	r3, 8009ec6 <__swsetup_r+0xc6>
 8009eb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009eb8:	d1ba      	bne.n	8009e30 <__swsetup_r+0x30>
 8009eba:	bd70      	pop	{r4, r5, r6, pc}
 8009ebc:	0781      	lsls	r1, r0, #30
 8009ebe:	bf58      	it	pl
 8009ec0:	6963      	ldrpl	r3, [r4, #20]
 8009ec2:	60a3      	str	r3, [r4, #8]
 8009ec4:	e7f4      	b.n	8009eb0 <__swsetup_r+0xb0>
 8009ec6:	2000      	movs	r0, #0
 8009ec8:	e7f7      	b.n	8009eba <__swsetup_r+0xba>
 8009eca:	bf00      	nop
 8009ecc:	24000014 	.word	0x24000014
 8009ed0:	0800a0b4 	.word	0x0800a0b4
 8009ed4:	0800a0d4 	.word	0x0800a0d4
 8009ed8:	0800a094 	.word	0x0800a094

08009edc <__swhatbuf_r>:
 8009edc:	b570      	push	{r4, r5, r6, lr}
 8009ede:	460e      	mov	r6, r1
 8009ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ee4:	2900      	cmp	r1, #0
 8009ee6:	b096      	sub	sp, #88	; 0x58
 8009ee8:	4614      	mov	r4, r2
 8009eea:	461d      	mov	r5, r3
 8009eec:	da07      	bge.n	8009efe <__swhatbuf_r+0x22>
 8009eee:	2300      	movs	r3, #0
 8009ef0:	602b      	str	r3, [r5, #0]
 8009ef2:	89b3      	ldrh	r3, [r6, #12]
 8009ef4:	061a      	lsls	r2, r3, #24
 8009ef6:	d410      	bmi.n	8009f1a <__swhatbuf_r+0x3e>
 8009ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009efc:	e00e      	b.n	8009f1c <__swhatbuf_r+0x40>
 8009efe:	466a      	mov	r2, sp
 8009f00:	f000 f850 	bl	8009fa4 <_fstat_r>
 8009f04:	2800      	cmp	r0, #0
 8009f06:	dbf2      	blt.n	8009eee <__swhatbuf_r+0x12>
 8009f08:	9a01      	ldr	r2, [sp, #4]
 8009f0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f12:	425a      	negs	r2, r3
 8009f14:	415a      	adcs	r2, r3
 8009f16:	602a      	str	r2, [r5, #0]
 8009f18:	e7ee      	b.n	8009ef8 <__swhatbuf_r+0x1c>
 8009f1a:	2340      	movs	r3, #64	; 0x40
 8009f1c:	2000      	movs	r0, #0
 8009f1e:	6023      	str	r3, [r4, #0]
 8009f20:	b016      	add	sp, #88	; 0x58
 8009f22:	bd70      	pop	{r4, r5, r6, pc}

08009f24 <__smakebuf_r>:
 8009f24:	898b      	ldrh	r3, [r1, #12]
 8009f26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f28:	079d      	lsls	r5, r3, #30
 8009f2a:	4606      	mov	r6, r0
 8009f2c:	460c      	mov	r4, r1
 8009f2e:	d507      	bpl.n	8009f40 <__smakebuf_r+0x1c>
 8009f30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f34:	6023      	str	r3, [r4, #0]
 8009f36:	6123      	str	r3, [r4, #16]
 8009f38:	2301      	movs	r3, #1
 8009f3a:	6163      	str	r3, [r4, #20]
 8009f3c:	b002      	add	sp, #8
 8009f3e:	bd70      	pop	{r4, r5, r6, pc}
 8009f40:	ab01      	add	r3, sp, #4
 8009f42:	466a      	mov	r2, sp
 8009f44:	f7ff ffca 	bl	8009edc <__swhatbuf_r>
 8009f48:	9900      	ldr	r1, [sp, #0]
 8009f4a:	4605      	mov	r5, r0
 8009f4c:	4630      	mov	r0, r6
 8009f4e:	f7ff f9d3 	bl	80092f8 <_malloc_r>
 8009f52:	b948      	cbnz	r0, 8009f68 <__smakebuf_r+0x44>
 8009f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f58:	059a      	lsls	r2, r3, #22
 8009f5a:	d4ef      	bmi.n	8009f3c <__smakebuf_r+0x18>
 8009f5c:	f023 0303 	bic.w	r3, r3, #3
 8009f60:	f043 0302 	orr.w	r3, r3, #2
 8009f64:	81a3      	strh	r3, [r4, #12]
 8009f66:	e7e3      	b.n	8009f30 <__smakebuf_r+0xc>
 8009f68:	4b0d      	ldr	r3, [pc, #52]	; (8009fa0 <__smakebuf_r+0x7c>)
 8009f6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009f6c:	89a3      	ldrh	r3, [r4, #12]
 8009f6e:	6020      	str	r0, [r4, #0]
 8009f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f74:	81a3      	strh	r3, [r4, #12]
 8009f76:	9b00      	ldr	r3, [sp, #0]
 8009f78:	6163      	str	r3, [r4, #20]
 8009f7a:	9b01      	ldr	r3, [sp, #4]
 8009f7c:	6120      	str	r0, [r4, #16]
 8009f7e:	b15b      	cbz	r3, 8009f98 <__smakebuf_r+0x74>
 8009f80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f84:	4630      	mov	r0, r6
 8009f86:	f000 f81f 	bl	8009fc8 <_isatty_r>
 8009f8a:	b128      	cbz	r0, 8009f98 <__smakebuf_r+0x74>
 8009f8c:	89a3      	ldrh	r3, [r4, #12]
 8009f8e:	f023 0303 	bic.w	r3, r3, #3
 8009f92:	f043 0301 	orr.w	r3, r3, #1
 8009f96:	81a3      	strh	r3, [r4, #12]
 8009f98:	89a0      	ldrh	r0, [r4, #12]
 8009f9a:	4305      	orrs	r5, r0
 8009f9c:	81a5      	strh	r5, [r4, #12]
 8009f9e:	e7cd      	b.n	8009f3c <__smakebuf_r+0x18>
 8009fa0:	08009031 	.word	0x08009031

08009fa4 <_fstat_r>:
 8009fa4:	b538      	push	{r3, r4, r5, lr}
 8009fa6:	4d07      	ldr	r5, [pc, #28]	; (8009fc4 <_fstat_r+0x20>)
 8009fa8:	2300      	movs	r3, #0
 8009faa:	4604      	mov	r4, r0
 8009fac:	4608      	mov	r0, r1
 8009fae:	4611      	mov	r1, r2
 8009fb0:	602b      	str	r3, [r5, #0]
 8009fb2:	f7f6 ff94 	bl	8000ede <_fstat>
 8009fb6:	1c43      	adds	r3, r0, #1
 8009fb8:	d102      	bne.n	8009fc0 <_fstat_r+0x1c>
 8009fba:	682b      	ldr	r3, [r5, #0]
 8009fbc:	b103      	cbz	r3, 8009fc0 <_fstat_r+0x1c>
 8009fbe:	6023      	str	r3, [r4, #0]
 8009fc0:	bd38      	pop	{r3, r4, r5, pc}
 8009fc2:	bf00      	nop
 8009fc4:	24004bfc 	.word	0x24004bfc

08009fc8 <_isatty_r>:
 8009fc8:	b538      	push	{r3, r4, r5, lr}
 8009fca:	4d06      	ldr	r5, [pc, #24]	; (8009fe4 <_isatty_r+0x1c>)
 8009fcc:	2300      	movs	r3, #0
 8009fce:	4604      	mov	r4, r0
 8009fd0:	4608      	mov	r0, r1
 8009fd2:	602b      	str	r3, [r5, #0]
 8009fd4:	f7f6 ff93 	bl	8000efe <_isatty>
 8009fd8:	1c43      	adds	r3, r0, #1
 8009fda:	d102      	bne.n	8009fe2 <_isatty_r+0x1a>
 8009fdc:	682b      	ldr	r3, [r5, #0]
 8009fde:	b103      	cbz	r3, 8009fe2 <_isatty_r+0x1a>
 8009fe0:	6023      	str	r3, [r4, #0]
 8009fe2:	bd38      	pop	{r3, r4, r5, pc}
 8009fe4:	24004bfc 	.word	0x24004bfc

08009fe8 <_init>:
 8009fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fea:	bf00      	nop
 8009fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fee:	bc08      	pop	{r3}
 8009ff0:	469e      	mov	lr, r3
 8009ff2:	4770      	bx	lr

08009ff4 <_fini>:
 8009ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ff6:	bf00      	nop
 8009ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ffa:	bc08      	pop	{r3}
 8009ffc:	469e      	mov	lr, r3
 8009ffe:	4770      	bx	lr
