
Splat2-H755-mz01_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087f0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08008a90  08008a90  00018a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bb4  08008bb4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008bb4  08008bb4  00018bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bbc  08008bbc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bbc  08008bbc  00018bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bc0  08008bc0  00018bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  08008bc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004af8  24000078  08008c3c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004b70  08008c3c  00024b70  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028aec  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004618  00000000  00000000  00048b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  0004d1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001320  00000000  00000000  0004e618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003bd77  00000000  00000000  0004f938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000181d3  00000000  00000000  0008b6af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001883ad  00000000  00000000  000a3882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022bc2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b90  00000000  00000000  0022bc84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008a78 	.word	0x08008a78

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08008a78 	.word	0x08008a78

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800067c:	4b3f      	ldr	r3, [pc, #252]	; (800077c <SystemInit+0x104>)
 800067e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000682:	4a3e      	ldr	r2, [pc, #248]	; (800077c <SystemInit+0x104>)
 8000684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800068c:	4b3b      	ldr	r3, [pc, #236]	; (800077c <SystemInit+0x104>)
 800068e:	691b      	ldr	r3, [r3, #16]
 8000690:	4a3a      	ldr	r2, [pc, #232]	; (800077c <SystemInit+0x104>)
 8000692:	f043 0310 	orr.w	r3, r3, #16
 8000696:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0x108>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f003 030f 	and.w	r3, r3, #15
 80006a0:	2b06      	cmp	r3, #6
 80006a2:	d807      	bhi.n	80006b4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006a4:	4b36      	ldr	r3, [pc, #216]	; (8000780 <SystemInit+0x108>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f023 030f 	bic.w	r3, r3, #15
 80006ac:	4a34      	ldr	r2, [pc, #208]	; (8000780 <SystemInit+0x108>)
 80006ae:	f043 0307 	orr.w	r3, r3, #7
 80006b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b4:	4b33      	ldr	r3, [pc, #204]	; (8000784 <SystemInit+0x10c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x10c>)
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c0:	4b30      	ldr	r3, [pc, #192]	; (8000784 <SystemInit+0x10c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006c6:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <SystemInit+0x10c>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	492e      	ldr	r1, [pc, #184]	; (8000784 <SystemInit+0x10c>)
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x110>)
 80006ce:	4013      	ands	r3, r2
 80006d0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d2:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <SystemInit+0x108>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f003 0308 	and.w	r3, r3, #8
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d007      	beq.n	80006ee <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006de:	4b28      	ldr	r3, [pc, #160]	; (8000780 <SystemInit+0x108>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f023 030f 	bic.w	r3, r3, #15
 80006e6:	4a26      	ldr	r2, [pc, #152]	; (8000780 <SystemInit+0x108>)
 80006e8:	f043 0307 	orr.w	r3, r3, #7
 80006ec:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <SystemInit+0x10c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <SystemInit+0x10c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <SystemInit+0x10c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <SystemInit+0x10c>)
 8000702:	4a22      	ldr	r2, [pc, #136]	; (800078c <SystemInit+0x114>)
 8000704:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <SystemInit+0x10c>)
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <SystemInit+0x118>)
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <SystemInit+0x10c>)
 800070e:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemInit+0x11c>)
 8000710:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <SystemInit+0x10c>)
 8000714:	2200      	movs	r2, #0
 8000716:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <SystemInit+0x10c>)
 800071a:	4a1e      	ldr	r2, [pc, #120]	; (8000794 <SystemInit+0x11c>)
 800071c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <SystemInit+0x10c>)
 8000720:	2200      	movs	r2, #0
 8000722:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <SystemInit+0x10c>)
 8000726:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <SystemInit+0x11c>)
 8000728:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <SystemInit+0x10c>)
 800072c:	2200      	movs	r2, #0
 800072e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <SystemInit+0x10c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a13      	ldr	r2, [pc, #76]	; (8000784 <SystemInit+0x10c>)
 8000736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800073a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <SystemInit+0x10c>)
 800073e:	2200      	movs	r2, #0
 8000740:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x120>)
 8000744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000746:	4a14      	ldr	r2, [pc, #80]	; (8000798 <SystemInit+0x120>)
 8000748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x124>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <SystemInit+0x128>)
 8000754:	4013      	ands	r3, r2
 8000756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800075a:	d202      	bcs.n	8000762 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x12c>)
 800075e:	2201      	movs	r2, #1
 8000760:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <SystemInit+0x130>)
 8000764:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000768:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <SystemInit+0x104>)
 800076c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000770:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007b8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d013      	beq.n	80007ec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80007c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007c8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80007cc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d00b      	beq.n	80007ec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80007d4:	e000      	b.n	80007d8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80007d6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80007d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d0f9      	beq.n	80007d6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80007e2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	b2d2      	uxtb	r2, r2
 80007ea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80007ec:	687b      	ldr	r3, [r7, #4]
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
	...

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000802:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000806:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000808:	bf00      	nop
 800080a:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <main+0xac>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000812:	2b00      	cmp	r3, #0
 8000814:	d004      	beq.n	8000820 <main+0x24>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	1e5a      	subs	r2, r3, #1
 800081a:	607a      	str	r2, [r7, #4]
 800081c:	2b00      	cmp	r3, #0
 800081e:	dcf4      	bgt.n	800080a <main+0xe>
		;
	if (timeout < 0) {
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b00      	cmp	r3, #0
 8000824:	da01      	bge.n	800082a <main+0x2e>
		Error_Handler();
 8000826:	f000 f9c3 	bl	8000bb0 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082a:	f000 fc01 	bl	8001030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082e:	f000 f843 	bl	80008b8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000832:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <main+0xac>)
 8000834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000838:	4a1b      	ldr	r2, [pc, #108]	; (80008a8 <main+0xac>)
 800083a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800083e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000842:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <main+0xac>)
 8000844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000850:	2000      	movs	r0, #0
 8000852:	f000 ff53 	bl	80016fc <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000856:	2100      	movs	r1, #0
 8000858:	2000      	movs	r0, #0
 800085a:	f000 ff69 	bl	8001730 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800085e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000862:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000864:	bf00      	nop
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <main+0xac>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800086e:	2b00      	cmp	r3, #0
 8000870:	d104      	bne.n	800087c <main+0x80>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	1e5a      	subs	r2, r3, #1
 8000876:	607a      	str	r2, [r7, #4]
 8000878:	2b00      	cmp	r3, #0
 800087a:	dcf4      	bgt.n	8000866 <main+0x6a>
		;
	if (timeout < 0) {
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b00      	cmp	r3, #0
 8000880:	da01      	bge.n	8000886 <main+0x8a>
		Error_Handler();
 8000882:	f000 f995 	bl	8000bb0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000886:	f000 f8df 	bl	8000a48 <MX_GPIO_Init>
  MX_UART7_Init();
 800088a:	f000 f891 	bl	80009b0 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800088e:	f004 fb73 	bl	8004f78 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000892:	4a06      	ldr	r2, [pc, #24]	; (80008ac <main+0xb0>)
 8000894:	2100      	movs	r1, #0
 8000896:	4806      	ldr	r0, [pc, #24]	; (80008b0 <main+0xb4>)
 8000898:	f004 fbb8 	bl	800500c <osThreadNew>
 800089c:	4603      	mov	r3, r0
 800089e:	4a05      	ldr	r2, [pc, #20]	; (80008b4 <main+0xb8>)
 80008a0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008a2:	f004 fb8d 	bl	8004fc0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80008a6:	e7fe      	b.n	80008a6 <main+0xaa>
 80008a8:	58024400 	.word	0x58024400
 80008ac:	08008ad0 	.word	0x08008ad0
 80008b0:	08000b7d 	.word	0x08000b7d
 80008b4:	24004a94 	.word	0x24004a94

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b09c      	sub	sp, #112	; 0x70
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c2:	224c      	movs	r2, #76	; 0x4c
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f007 fa06 	bl	8007cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2220      	movs	r2, #32
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f007 fa00 	bl	8007cd8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008d8:	2004      	movs	r0, #4
 80008da:	f000 ff3d 	bl	8001758 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	4b31      	ldr	r3, [pc, #196]	; (80009a8 <SystemClock_Config+0xf0>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	4a30      	ldr	r2, [pc, #192]	; (80009a8 <SystemClock_Config+0xf0>)
 80008e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ec:	6193      	str	r3, [r2, #24]
 80008ee:	4b2e      	ldr	r3, [pc, #184]	; (80009a8 <SystemClock_Config+0xf0>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	4b2c      	ldr	r3, [pc, #176]	; (80009ac <SystemClock_Config+0xf4>)
 80008fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008fc:	4a2b      	ldr	r2, [pc, #172]	; (80009ac <SystemClock_Config+0xf4>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000904:	4b29      	ldr	r3, [pc, #164]	; (80009ac <SystemClock_Config+0xf4>)
 8000906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000910:	bf00      	nop
 8000912:	4b25      	ldr	r3, [pc, #148]	; (80009a8 <SystemClock_Config+0xf0>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800091a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800091e:	d1f8      	bne.n	8000912 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000920:	2302      	movs	r3, #2
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000924:	2301      	movs	r3, #1
 8000926:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000928:	2340      	movs	r3, #64	; 0x40
 800092a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092c:	2302      	movs	r3, #2
 800092e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000930:	2300      	movs	r3, #0
 8000932:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000934:	2310      	movs	r3, #16
 8000936:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000938:	23f0      	movs	r3, #240	; 0xf0
 800093a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800093c:	2302      	movs	r3, #2
 800093e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000940:	2302      	movs	r3, #2
 8000942:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000944:	2302      	movs	r3, #2
 8000946:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000948:	2308      	movs	r3, #8
 800094a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800094c:	2300      	movs	r3, #0
 800094e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	4618      	mov	r0, r3
 800095a:	f000 ff57 	bl	800180c <HAL_RCC_OscConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000964:	f000 f924 	bl	8000bb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000968:	233f      	movs	r3, #63	; 0x3f
 800096a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096c:	2303      	movs	r3, #3
 800096e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000974:	2308      	movs	r3, #8
 8000976:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000978:	2340      	movs	r3, #64	; 0x40
 800097a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800097c:	2340      	movs	r3, #64	; 0x40
 800097e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000984:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000986:	2340      	movs	r3, #64	; 0x40
 8000988:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2104      	movs	r1, #4
 800098e:	4618      	mov	r0, r3
 8000990:	f001 fb68 	bl	8002064 <HAL_RCC_ClockConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800099a:	f000 f909 	bl	8000bb0 <Error_Handler>
  }
}
 800099e:	bf00      	nop
 80009a0:	3770      	adds	r7, #112	; 0x70
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	58024800 	.word	0x58024800
 80009ac:	58000400 	.word	0x58000400

080009b0 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80009b4:	4b22      	ldr	r3, [pc, #136]	; (8000a40 <MX_UART7_Init+0x90>)
 80009b6:	4a23      	ldr	r2, [pc, #140]	; (8000a44 <MX_UART7_Init+0x94>)
 80009b8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80009ba:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <MX_UART7_Init+0x90>)
 80009bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <MX_UART7_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <MX_UART7_Init+0x90>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80009ce:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <MX_UART7_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80009d4:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <MX_UART7_Init+0x90>)
 80009d6:	220c      	movs	r2, #12
 80009d8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009da:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <MX_UART7_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e0:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <MX_UART7_Init+0x90>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <MX_UART7_Init+0x90>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <MX_UART7_Init+0x90>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <MX_UART7_Init+0x90>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80009f8:	4811      	ldr	r0, [pc, #68]	; (8000a40 <MX_UART7_Init+0x90>)
 80009fa:	f003 fa21 	bl	8003e40 <HAL_UART_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000a04:	f000 f8d4 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a08:	2100      	movs	r1, #0
 8000a0a:	480d      	ldr	r0, [pc, #52]	; (8000a40 <MX_UART7_Init+0x90>)
 8000a0c:	f004 f9b6 	bl	8004d7c <HAL_UARTEx_SetTxFifoThreshold>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000a16:	f000 f8cb 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4808      	ldr	r0, [pc, #32]	; (8000a40 <MX_UART7_Init+0x90>)
 8000a1e:	f004 f9eb 	bl	8004df8 <HAL_UARTEx_SetRxFifoThreshold>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000a28:	f000 f8c2 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <MX_UART7_Init+0x90>)
 8000a2e:	f004 f96c 	bl	8004d0a <HAL_UARTEx_DisableFifoMode>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000a38:	f000 f8ba 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	24004a98 	.word	0x24004a98
 8000a44:	40007800 	.word	0x40007800

08000a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a5e:	4b3d      	ldr	r3, [pc, #244]	; (8000b54 <MX_GPIO_Init+0x10c>)
 8000a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a64:	4a3b      	ldr	r2, [pc, #236]	; (8000b54 <MX_GPIO_Init+0x10c>)
 8000a66:	f043 0320 	orr.w	r3, r3, #32
 8000a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a6e:	4b39      	ldr	r3, [pc, #228]	; (8000b54 <MX_GPIO_Init+0x10c>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a74:	f003 0320 	and.w	r3, r3, #32
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7c:	4b35      	ldr	r3, [pc, #212]	; (8000b54 <MX_GPIO_Init+0x10c>)
 8000a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a82:	4a34      	ldr	r2, [pc, #208]	; (8000b54 <MX_GPIO_Init+0x10c>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a8c:	4b31      	ldr	r3, [pc, #196]	; (8000b54 <MX_GPIO_Init+0x10c>)
 8000a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9a:	4b2e      	ldr	r3, [pc, #184]	; (8000b54 <MX_GPIO_Init+0x10c>)
 8000a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa0:	4a2c      	ldr	r2, [pc, #176]	; (8000b54 <MX_GPIO_Init+0x10c>)
 8000aa2:	f043 0308 	orr.w	r3, r3, #8
 8000aa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aaa:	4b2a      	ldr	r3, [pc, #168]	; (8000b54 <MX_GPIO_Init+0x10c>)
 8000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab0:	f003 0308 	and.w	r3, r3, #8
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab8:	4b26      	ldr	r3, [pc, #152]	; (8000b54 <MX_GPIO_Init+0x10c>)
 8000aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abe:	4a25      	ldr	r2, [pc, #148]	; (8000b54 <MX_GPIO_Init+0x10c>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac8:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <MX_GPIO_Init+0x10c>)
 8000aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GREEN_GPIO_Port, LD1_GREEN_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2101      	movs	r1, #1
 8000ada:	481f      	ldr	r0, [pc, #124]	; (8000b58 <MX_GPIO_Init+0x110>)
 8000adc:	f000 fdda 	bl	8001694 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD1_SPLAT_Pin|LD3_SPLAT_Pin|LD4_SPLAT_Pin, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 41d0 	mov.w	r1, #26624	; 0x6800
 8000ae6:	481d      	ldr	r0, [pc, #116]	; (8000b5c <MX_GPIO_Init+0x114>)
 8000ae8:	f000 fdd4 	bl	8001694 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD5_SPLAT_GPIO_Port, LD5_SPLAT_Pin, GPIO_PIN_SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af2:	481a      	ldr	r0, [pc, #104]	; (8000b5c <MX_GPIO_Init+0x114>)
 8000af4:	f000 fdce 	bl	8001694 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_GREEN_Pin */
  GPIO_InitStruct.Pin = LD1_GREEN_Pin;
 8000af8:	2301      	movs	r3, #1
 8000afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD1_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4812      	ldr	r0, [pc, #72]	; (8000b58 <MX_GPIO_Init+0x110>)
 8000b10:	f000 fc10 	bl	8001334 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_SPLAT_Pin LD3_SPLAT_Pin LD4_SPLAT_Pin LD5_SPLAT_Pin */
  GPIO_InitStruct.Pin = LD1_SPLAT_Pin|LD3_SPLAT_Pin|LD4_SPLAT_Pin|LD5_SPLAT_Pin;
 8000b14:	f44f 4368 	mov.w	r3, #59392	; 0xe800
 8000b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	480b      	ldr	r0, [pc, #44]	; (8000b5c <MX_GPIO_Init+0x114>)
 8000b2e:	f000 fc01 	bl	8001334 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_1_SPLAT_Pin */
  GPIO_InitStruct.Pin = SW1_1_SPLAT_Pin;
 8000b32:	2304      	movs	r3, #4
 8000b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_1_SPLAT_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_GPIO_Init+0x114>)
 8000b46:	f000 fbf5 	bl	8001334 <HAL_GPIO_Init>

}
 8000b4a:	bf00      	nop
 8000b4c:	3728      	adds	r7, #40	; 0x28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	58024400 	.word	0x58024400
 8000b58:	58020400 	.word	0x58020400
 8000b5c:	58020c00 	.word	0x58020c00

08000b60 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(char ch)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
    return ITM_SendChar(ch);
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fe1d 	bl	80007ac <ITM_SendChar>
 8000b72:	4603      	mov	r3, r0
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	unsigned int i;
	/* Infinite loop */
	for (i=0;;i++) {
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(LD4_SPLAT_GPIO_Port, LD4_SPLAT_Pin);
 8000b88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b8c:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <StartDefaultTask+0x2c>)
 8000b8e:	f000 fd9a 	bl	80016c6 <HAL_GPIO_TogglePin>
		osDelay(210);
 8000b92:	20d2      	movs	r0, #210	; 0xd2
 8000b94:	f004 facc 	bl	8005130 <osDelay>
		printf("%d hello\n",i);
 8000b98:	68f9      	ldr	r1, [r7, #12]
 8000b9a:	4804      	ldr	r0, [pc, #16]	; (8000bac <StartDefaultTask+0x30>)
 8000b9c:	f007 f94e 	bl	8007e3c <iprintf>
	for (i=0;;i++) {
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(LD4_SPLAT_GPIO_Port, LD4_SPLAT_Pin);
 8000ba6:	e7ef      	b.n	8000b88 <StartDefaultTask+0xc>
 8000ba8:	58020c00 	.word	0x58020c00
 8000bac:	08008a9c 	.word	0x08008a9c

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bb8:	e7fe      	b.n	8000bb8 <Error_Handler+0x8>
	...

08000bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <HAL_MspInit+0x38>)
 8000bc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <HAL_MspInit+0x38>)
 8000bca:	f043 0302 	orr.w	r3, r3, #2
 8000bce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <HAL_MspInit+0x38>)
 8000bd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	210f      	movs	r1, #15
 8000be4:	f06f 0001 	mvn.w	r0, #1
 8000be8:	f000 fb7d 	bl	80012e6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	58024400 	.word	0x58024400

08000bf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b0b8      	sub	sp, #224	; 0xe0
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	22bc      	movs	r2, #188	; 0xbc
 8000c16:	2100      	movs	r1, #0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f007 f85d 	bl	8007cd8 <memset>
  if(huart->Instance==UART7)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a24      	ldr	r2, [pc, #144]	; (8000cb4 <HAL_UART_MspInit+0xbc>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d141      	bne.n	8000cac <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c32:	f107 0310 	add.w	r3, r7, #16
 8000c36:	4618      	mov	r0, r3
 8000c38:	f001 fda0 	bl	800277c <HAL_RCCEx_PeriphCLKConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c42:	f7ff ffb5 	bl	8000bb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8000c46:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <HAL_UART_MspInit+0xc0>)
 8000c48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c4c:	4a1a      	ldr	r2, [pc, #104]	; (8000cb8 <HAL_UART_MspInit+0xc0>)
 8000c4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000c52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <HAL_UART_MspInit+0xc0>)
 8000c58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c64:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <HAL_UART_MspInit+0xc0>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6a:	4a13      	ldr	r2, [pc, #76]	; (8000cb8 <HAL_UART_MspInit+0xc0>)
 8000c6c:	f043 0320 	orr.w	r3, r3, #32
 8000c70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c74:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <HAL_UART_MspInit+0xc0>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7a:	f003 0320 	and.w	r3, r3, #32
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c82:	23c0      	movs	r3, #192	; 0xc0
 8000c84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8000c9a:	2307      	movs	r3, #7
 8000c9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ca0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <HAL_UART_MspInit+0xc4>)
 8000ca8:	f000 fb44 	bl	8001334 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8000cac:	bf00      	nop
 8000cae:	37e0      	adds	r7, #224	; 0xe0
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40007800 	.word	0x40007800
 8000cb8:	58024400 	.word	0x58024400
 8000cbc:	58021400 	.word	0x58021400

08000cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <NMI_Handler+0x4>

08000cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <HardFault_Handler+0x4>

08000ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <MemManage_Handler+0x4>

08000cd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <BusFault_Handler+0x4>

08000cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <UsageFault_Handler+0x4>

08000cde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf0:	f000 fa10 	bl	8001114 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000cf4:	f006 fa8c 	bl	8007210 <xTaskGetSchedulerState>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d001      	beq.n	8000d02 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000cfe:	f004 fec3 	bl	8005a88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b086      	sub	sp, #24
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	60f8      	str	r0, [r7, #12]
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	e00a      	b.n	8000d2e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d18:	f3af 8000 	nop.w
 8000d1c:	4601      	mov	r1, r0
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	1c5a      	adds	r2, r3, #1
 8000d22:	60ba      	str	r2, [r7, #8]
 8000d24:	b2ca      	uxtb	r2, r1
 8000d26:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	dbf0      	blt.n	8000d18 <_read+0x12>
	}

return len;
 8000d36:	687b      	ldr	r3, [r7, #4]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	e009      	b.n	8000d66 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	1c5a      	adds	r2, r3, #1
 8000d56:	60ba      	str	r2, [r7, #8]
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ff00 	bl	8000b60 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	3301      	adds	r3, #1
 8000d64:	617b      	str	r3, [r7, #20]
 8000d66:	697a      	ldr	r2, [r7, #20]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	dbf1      	blt.n	8000d52 <_write+0x12>
	}
	return len;
 8000d6e:	687b      	ldr	r3, [r7, #4]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <_close>:

int _close(int file)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	return -1;
 8000d80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000da0:	605a      	str	r2, [r3, #4]
	return 0;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <_isatty>:

int _isatty(int file)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	return 1;
 8000db8:	2301      	movs	r3, #1
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b085      	sub	sp, #20
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	60f8      	str	r0, [r7, #12]
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
	return 0;
 8000dd2:	2300      	movs	r3, #0
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f006 fe2c 	bl	8007a6c <__errno>
 8000e14:	4603      	mov	r3, r0
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <_sbrk+0x64>)
 8000e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	24080000 	.word	0x24080000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	24000094 	.word	0x24000094
 8000e48:	24004b70 	.word	0x24004b70

08000e4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e50:	f7ff fc12 	bl	8000678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e54:	480c      	ldr	r0, [pc, #48]	; (8000e88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e56:	490d      	ldr	r1, [pc, #52]	; (8000e8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e58:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e5c:	e002      	b.n	8000e64 <LoopCopyDataInit>

08000e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e62:	3304      	adds	r3, #4

08000e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e68:	d3f9      	bcc.n	8000e5e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e6c:	4c0a      	ldr	r4, [pc, #40]	; (8000e98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e70:	e001      	b.n	8000e76 <LoopFillZerobss>

08000e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e74:	3204      	adds	r2, #4

08000e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e78:	d3fb      	bcc.n	8000e72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e7a:	f006 fef3 	bl	8007c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7e:	f7ff fcbd 	bl	80007fc <main>
  bx  lr
 8000e82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e84:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e88:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e8c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000e90:	08008bc4 	.word	0x08008bc4
  ldr r2, =_sbss
 8000e94:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8000e98:	24004b70 	.word	0x24004b70

08000e9c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e9c:	e7fe      	b.n	8000e9c <ADC3_IRQHandler>

08000e9e <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b084      	sub	sp, #16
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d104      	bne.n	8000eb6 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000eac:	b672      	cpsid	i
}
 8000eae:	bf00      	nop
 8000eb0:	f7ff fe7e 	bl	8000bb0 <Error_Handler>
 8000eb4:	e7fe      	b.n	8000eb4 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	e007      	b.n	8000ecc <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d9f4      	bls.n	8000ebc <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	721a      	strb	r2, [r3, #8]
}
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d104      	bne.n	8000ef8 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000eee:	b672      	cpsid	i
}
 8000ef0:	bf00      	nop
 8000ef2:	f7ff fe5d 	bl	8000bb0 <Error_Handler>
 8000ef6:	e7fe      	b.n	8000ef6 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	7a1b      	ldrb	r3, [r3, #8]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d904      	bls.n	8000f0a <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000f00:	b672      	cpsid	i
}
 8000f02:	bf00      	nop
 8000f04:	f7ff fe54 	bl	8000bb0 <Error_Handler>
 8000f08:	e7fe      	b.n	8000f08 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	7a1b      	ldrb	r3, [r3, #8]
 8000f0e:	1c5a      	adds	r2, r3, #1
 8000f10:	b2d1      	uxtb	r1, r2
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	7211      	strb	r1, [r2, #8]
 8000f16:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000f18:	f3ef 8211 	mrs	r2, BASEPRI
 8000f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f20:	f383 8811 	msr	BASEPRI, r3
 8000f24:	f3bf 8f6f 	isb	sy
 8000f28:	f3bf 8f4f 	dsb	sy
 8000f2c:	60fa      	str	r2, [r7, #12]
 8000f2e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000f30:	68fa      	ldr	r2, [r7, #12]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d104      	bne.n	8000f58 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4e:	b672      	cpsid	i
}
 8000f50:	bf00      	nop
 8000f52:	f7ff fe2d 	bl	8000bb0 <Error_Handler>
 8000f56:	e7fe      	b.n	8000f56 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	7a1b      	ldrb	r3, [r3, #8]
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	7a1b      	ldrb	r3, [r3, #8]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d904      	bls.n	8000f76 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8000f6c:	b672      	cpsid	i
}
 8000f6e:	bf00      	nop
 8000f70:	f7ff fe1e 	bl	8000bb0 <Error_Handler>
 8000f74:	e7fe      	b.n	8000f74 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	7a1b      	ldrb	r3, [r3, #8]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f82:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000f8a:	bf00      	nop
}
 8000f8c:	bf00      	nop
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d105      	bne.n	8000fae <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8000fa2:	f006 fd63 	bl	8007a6c <__errno>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2216      	movs	r2, #22
 8000faa:	601a      	str	r2, [r3, #0]
    return;
 8000fac:	e015      	b.n	8000fda <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8000fae:	200c      	movs	r0, #12
 8000fb0:	f006 fe7c 	bl	8007cac <malloc>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d005      	beq.n	8000fd0 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff68 	bl	8000e9e <stm32_lock_init>
    return;
 8000fce:	e004      	b.n	8000fda <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd0:	b672      	cpsid	i
}
 8000fd2:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8000fd4:	f7ff fdec 	bl	8000bb0 <Error_Handler>
 8000fd8:	e7fe      	b.n	8000fd8 <__retarget_lock_init_recursive+0x44>
}
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d104      	bne.n	8000ff8 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000fee:	b672      	cpsid	i
}
 8000ff0:	bf00      	nop
 8000ff2:	f7ff fddd 	bl	8000bb0 <Error_Handler>
 8000ff6:	e7fe      	b.n	8000ff6 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ff70 	bl	8000ee0 <stm32_lock_acquire>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d104      	bne.n	8001020 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001016:	b672      	cpsid	i
}
 8001018:	bf00      	nop
 800101a:	f7ff fdc9 	bl	8000bb0 <Error_Handler>
 800101e:	e7fe      	b.n	800101e <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ff8c 	bl	8000f40 <stm32_lock_release>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001036:	2003      	movs	r0, #3
 8001038:	f000 f94a 	bl	80012d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800103c:	f001 f9c8 	bl	80023d0 <HAL_RCC_GetSysClockFreq>
 8001040:	4602      	mov	r2, r0
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <HAL_Init+0x68>)
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	0a1b      	lsrs	r3, r3, #8
 8001048:	f003 030f 	and.w	r3, r3, #15
 800104c:	4913      	ldr	r1, [pc, #76]	; (800109c <HAL_Init+0x6c>)
 800104e:	5ccb      	ldrb	r3, [r1, r3]
 8001050:	f003 031f 	and.w	r3, r3, #31
 8001054:	fa22 f303 	lsr.w	r3, r2, r3
 8001058:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <HAL_Init+0x68>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	4a0e      	ldr	r2, [pc, #56]	; (800109c <HAL_Init+0x6c>)
 8001064:	5cd3      	ldrb	r3, [r2, r3]
 8001066:	f003 031f 	and.w	r3, r3, #31
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	fa22 f303 	lsr.w	r3, r2, r3
 8001070:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <HAL_Init+0x70>)
 8001072:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001074:	4a0b      	ldr	r2, [pc, #44]	; (80010a4 <HAL_Init+0x74>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800107a:	200f      	movs	r0, #15
 800107c:	f000 f814 	bl	80010a8 <HAL_InitTick>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e002      	b.n	8001090 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800108a:	f7ff fd97 	bl	8000bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	58024400 	.word	0x58024400
 800109c:	08008ac0 	.word	0x08008ac0
 80010a0:	24000004 	.word	0x24000004
 80010a4:	24000000 	.word	0x24000000

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <HAL_InitTick+0x60>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d101      	bne.n	80010bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e021      	b.n	8001100 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010bc:	4b13      	ldr	r3, [pc, #76]	; (800110c <HAL_InitTick+0x64>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <HAL_InitTick+0x60>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4619      	mov	r1, r3
 80010c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f921 	bl	800131a <HAL_SYSTICK_Config>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e00e      	b.n	8001100 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b0f      	cmp	r3, #15
 80010e6:	d80a      	bhi.n	80010fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e8:	2200      	movs	r2, #0
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295
 80010f0:	f000 f8f9 	bl	80012e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f4:	4a06      	ldr	r2, [pc, #24]	; (8001110 <HAL_InitTick+0x68>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e000      	b.n	8001100 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	2400000c 	.word	0x2400000c
 800110c:	24000000 	.word	0x24000000
 8001110:	24000008 	.word	0x24000008

08001114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_IncTick+0x20>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_IncTick+0x24>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4413      	add	r3, r2
 8001124:	4a04      	ldr	r2, [pc, #16]	; (8001138 <HAL_IncTick+0x24>)
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	2400000c 	.word	0x2400000c
 8001138:	24004b28 	.word	0x24004b28

0800113c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return uwTick;
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <HAL_GetTick+0x14>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	24004b28 	.word	0x24004b28

08001154 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <HAL_GetREVID+0x14>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	0c1b      	lsrs	r3, r3, #16
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	5c001000 	.word	0x5c001000

0800116c <__NVIC_SetPriorityGrouping>:
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <__NVIC_SetPriorityGrouping+0x40>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001188:	4013      	ands	r3, r2
 800118a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 8001196:	4313      	orrs	r3, r2
 8001198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119a:	4a04      	ldr	r2, [pc, #16]	; (80011ac <__NVIC_SetPriorityGrouping+0x40>)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	60d3      	str	r3, [r2, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00
 80011b0:	05fa0000 	.word	0x05fa0000

080011b4 <__NVIC_GetPriorityGrouping>:
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <__NVIC_GetPriorityGrouping+0x18>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	f003 0307 	and.w	r3, r3, #7
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <__NVIC_SetPriority>:
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	db0a      	blt.n	80011fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	490c      	ldr	r1, [pc, #48]	; (800121c <__NVIC_SetPriority+0x4c>)
 80011ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ee:	0112      	lsls	r2, r2, #4
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	440b      	add	r3, r1
 80011f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80011f8:	e00a      	b.n	8001210 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4908      	ldr	r1, [pc, #32]	; (8001220 <__NVIC_SetPriority+0x50>)
 8001200:	88fb      	ldrh	r3, [r7, #6]
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	3b04      	subs	r3, #4
 8001208:	0112      	lsls	r2, r2, #4
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	440b      	add	r3, r1
 800120e:	761a      	strb	r2, [r3, #24]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000e100 	.word	0xe000e100
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <NVIC_EncodePriority>:
{
 8001224:	b480      	push	{r7}
 8001226:	b089      	sub	sp, #36	; 0x24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f1c3 0307 	rsb	r3, r3, #7
 800123e:	2b04      	cmp	r3, #4
 8001240:	bf28      	it	cs
 8001242:	2304      	movcs	r3, #4
 8001244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3304      	adds	r3, #4
 800124a:	2b06      	cmp	r3, #6
 800124c:	d902      	bls.n	8001254 <NVIC_EncodePriority+0x30>
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3b03      	subs	r3, #3
 8001252:	e000      	b.n	8001256 <NVIC_EncodePriority+0x32>
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	f04f 32ff 	mov.w	r2, #4294967295
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43da      	mvns	r2, r3
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	401a      	ands	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800126c:	f04f 31ff 	mov.w	r1, #4294967295
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	fa01 f303 	lsl.w	r3, r1, r3
 8001276:	43d9      	mvns	r1, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	4313      	orrs	r3, r2
}
 800127e:	4618      	mov	r0, r3
 8001280:	3724      	adds	r7, #36	; 0x24
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <SysTick_Config>:
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3b01      	subs	r3, #1
 8001298:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800129c:	d301      	bcc.n	80012a2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800129e:	2301      	movs	r3, #1
 80012a0:	e00f      	b.n	80012c2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a2:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <SysTick_Config+0x40>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012aa:	210f      	movs	r1, #15
 80012ac:	f04f 30ff 	mov.w	r0, #4294967295
 80012b0:	f7ff ff8e 	bl	80011d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <SysTick_Config+0x40>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ba:	4b04      	ldr	r3, [pc, #16]	; (80012cc <SysTick_Config+0x40>)
 80012bc:	2207      	movs	r2, #7
 80012be:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	e000e010 	.word	0xe000e010

080012d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff ff47 	bl	800116c <__NVIC_SetPriorityGrouping>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b086      	sub	sp, #24
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	4603      	mov	r3, r0
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	607a      	str	r2, [r7, #4]
 80012f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012f4:	f7ff ff5e 	bl	80011b4 <__NVIC_GetPriorityGrouping>
 80012f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	68b9      	ldr	r1, [r7, #8]
 80012fe:	6978      	ldr	r0, [r7, #20]
 8001300:	f7ff ff90 	bl	8001224 <NVIC_EncodePriority>
 8001304:	4602      	mov	r2, r0
 8001306:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff5f 	bl	80011d0 <__NVIC_SetPriority>
}
 8001312:	bf00      	nop
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ffb2 	bl	800128c <SysTick_Config>
 8001328:	4603      	mov	r3, r0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001334:	b480      	push	{r7}
 8001336:	b089      	sub	sp, #36	; 0x24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001342:	4b89      	ldr	r3, [pc, #548]	; (8001568 <HAL_GPIO_Init+0x234>)
 8001344:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001346:	e194      	b.n	8001672 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	2101      	movs	r1, #1
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	fa01 f303 	lsl.w	r3, r1, r3
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 8186 	beq.w	800166c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	2b01      	cmp	r3, #1
 800136a:	d005      	beq.n	8001378 <HAL_GPIO_Init+0x44>
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d130      	bne.n	80013da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	2203      	movs	r2, #3
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	68da      	ldr	r2, [r3, #12]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ae:	2201      	movs	r2, #1
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	091b      	lsrs	r3, r3, #4
 80013c4:	f003 0201 	and.w	r2, r3, #1
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	2b03      	cmp	r3, #3
 80013e4:	d017      	beq.n	8001416 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	2203      	movs	r2, #3
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 0303 	and.w	r3, r3, #3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d123      	bne.n	800146a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	08da      	lsrs	r2, r3, #3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3208      	adds	r2, #8
 800142a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	220f      	movs	r2, #15
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	691a      	ldr	r2, [r3, #16]
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	08da      	lsrs	r2, r3, #3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3208      	adds	r2, #8
 8001464:	69b9      	ldr	r1, [r7, #24]
 8001466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	2203      	movs	r2, #3
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 0203 	and.w	r2, r3, #3
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f000 80e0 	beq.w	800166c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ac:	4b2f      	ldr	r3, [pc, #188]	; (800156c <HAL_GPIO_Init+0x238>)
 80014ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014b2:	4a2e      	ldr	r2, [pc, #184]	; (800156c <HAL_GPIO_Init+0x238>)
 80014b4:	f043 0302 	orr.w	r3, r3, #2
 80014b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014bc:	4b2b      	ldr	r3, [pc, #172]	; (800156c <HAL_GPIO_Init+0x238>)
 80014be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ca:	4a29      	ldr	r2, [pc, #164]	; (8001570 <HAL_GPIO_Init+0x23c>)
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	089b      	lsrs	r3, r3, #2
 80014d0:	3302      	adds	r3, #2
 80014d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f003 0303 	and.w	r3, r3, #3
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	220f      	movs	r2, #15
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4013      	ands	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a20      	ldr	r2, [pc, #128]	; (8001574 <HAL_GPIO_Init+0x240>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d052      	beq.n	800159c <HAL_GPIO_Init+0x268>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a1f      	ldr	r2, [pc, #124]	; (8001578 <HAL_GPIO_Init+0x244>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d031      	beq.n	8001562 <HAL_GPIO_Init+0x22e>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a1e      	ldr	r2, [pc, #120]	; (800157c <HAL_GPIO_Init+0x248>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d02b      	beq.n	800155e <HAL_GPIO_Init+0x22a>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a1d      	ldr	r2, [pc, #116]	; (8001580 <HAL_GPIO_Init+0x24c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d025      	beq.n	800155a <HAL_GPIO_Init+0x226>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a1c      	ldr	r2, [pc, #112]	; (8001584 <HAL_GPIO_Init+0x250>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d01f      	beq.n	8001556 <HAL_GPIO_Init+0x222>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a1b      	ldr	r2, [pc, #108]	; (8001588 <HAL_GPIO_Init+0x254>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d019      	beq.n	8001552 <HAL_GPIO_Init+0x21e>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a1a      	ldr	r2, [pc, #104]	; (800158c <HAL_GPIO_Init+0x258>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d013      	beq.n	800154e <HAL_GPIO_Init+0x21a>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a19      	ldr	r2, [pc, #100]	; (8001590 <HAL_GPIO_Init+0x25c>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d00d      	beq.n	800154a <HAL_GPIO_Init+0x216>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a18      	ldr	r2, [pc, #96]	; (8001594 <HAL_GPIO_Init+0x260>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d007      	beq.n	8001546 <HAL_GPIO_Init+0x212>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a17      	ldr	r2, [pc, #92]	; (8001598 <HAL_GPIO_Init+0x264>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d101      	bne.n	8001542 <HAL_GPIO_Init+0x20e>
 800153e:	2309      	movs	r3, #9
 8001540:	e02d      	b.n	800159e <HAL_GPIO_Init+0x26a>
 8001542:	230a      	movs	r3, #10
 8001544:	e02b      	b.n	800159e <HAL_GPIO_Init+0x26a>
 8001546:	2308      	movs	r3, #8
 8001548:	e029      	b.n	800159e <HAL_GPIO_Init+0x26a>
 800154a:	2307      	movs	r3, #7
 800154c:	e027      	b.n	800159e <HAL_GPIO_Init+0x26a>
 800154e:	2306      	movs	r3, #6
 8001550:	e025      	b.n	800159e <HAL_GPIO_Init+0x26a>
 8001552:	2305      	movs	r3, #5
 8001554:	e023      	b.n	800159e <HAL_GPIO_Init+0x26a>
 8001556:	2304      	movs	r3, #4
 8001558:	e021      	b.n	800159e <HAL_GPIO_Init+0x26a>
 800155a:	2303      	movs	r3, #3
 800155c:	e01f      	b.n	800159e <HAL_GPIO_Init+0x26a>
 800155e:	2302      	movs	r3, #2
 8001560:	e01d      	b.n	800159e <HAL_GPIO_Init+0x26a>
 8001562:	2301      	movs	r3, #1
 8001564:	e01b      	b.n	800159e <HAL_GPIO_Init+0x26a>
 8001566:	bf00      	nop
 8001568:	58000080 	.word	0x58000080
 800156c:	58024400 	.word	0x58024400
 8001570:	58000400 	.word	0x58000400
 8001574:	58020000 	.word	0x58020000
 8001578:	58020400 	.word	0x58020400
 800157c:	58020800 	.word	0x58020800
 8001580:	58020c00 	.word	0x58020c00
 8001584:	58021000 	.word	0x58021000
 8001588:	58021400 	.word	0x58021400
 800158c:	58021800 	.word	0x58021800
 8001590:	58021c00 	.word	0x58021c00
 8001594:	58022000 	.word	0x58022000
 8001598:	58022400 	.word	0x58022400
 800159c:	2300      	movs	r3, #0
 800159e:	69fa      	ldr	r2, [r7, #28]
 80015a0:	f002 0203 	and.w	r2, r2, #3
 80015a4:	0092      	lsls	r2, r2, #2
 80015a6:	4093      	lsls	r3, r2
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015ae:	4938      	ldr	r1, [pc, #224]	; (8001690 <HAL_GPIO_Init+0x35c>)
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	089b      	lsrs	r3, r3, #2
 80015b4:	3302      	adds	r3, #2
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80015e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80015ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001610:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	43db      	mvns	r3, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	3301      	adds	r3, #1
 8001670:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	fa22 f303 	lsr.w	r3, r2, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	f47f ae63 	bne.w	8001348 <HAL_GPIO_Init+0x14>
  }
}
 8001682:	bf00      	nop
 8001684:	bf00      	nop
 8001686:	3724      	adds	r7, #36	; 0x24
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	58000400 	.word	0x58000400

08001694 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	807b      	strh	r3, [r7, #2]
 80016a0:	4613      	mov	r3, r2
 80016a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016a4:	787b      	ldrb	r3, [r7, #1]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016aa:	887a      	ldrh	r2, [r7, #2]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80016b0:	e003      	b.n	80016ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80016b2:	887b      	ldrh	r3, [r7, #2]
 80016b4:	041a      	lsls	r2, r3, #16
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	619a      	str	r2, [r3, #24]
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b085      	sub	sp, #20
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	460b      	mov	r3, r1
 80016d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016d8:	887a      	ldrh	r2, [r7, #2]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4013      	ands	r3, r2
 80016de:	041a      	lsls	r2, r3, #16
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	43d9      	mvns	r1, r3
 80016e4:	887b      	ldrh	r3, [r7, #2]
 80016e6:	400b      	ands	r3, r1
 80016e8:	431a      	orrs	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	619a      	str	r2, [r3, #24]
}
 80016ee:	bf00      	nop
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001704:	4a08      	ldr	r2, [pc, #32]	; (8001728 <HAL_HSEM_FastTake+0x2c>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3320      	adds	r3, #32
 800170a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800170e:	4a07      	ldr	r2, [pc, #28]	; (800172c <HAL_HSEM_FastTake+0x30>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d101      	bne.n	8001718 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	e000      	b.n	800171a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	58026400 	.word	0x58026400
 800172c:	80000300 	.word	0x80000300

08001730 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800173a:	4906      	ldr	r1, [pc, #24]	; (8001754 <HAL_HSEM_Release+0x24>)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	58026400 	.word	0x58026400

08001758 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001760:	4b29      	ldr	r3, [pc, #164]	; (8001808 <HAL_PWREx_ConfigSupply+0xb0>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	2b06      	cmp	r3, #6
 800176a:	d00a      	beq.n	8001782 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800176c:	4b26      	ldr	r3, [pc, #152]	; (8001808 <HAL_PWREx_ConfigSupply+0xb0>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	429a      	cmp	r2, r3
 8001778:	d001      	beq.n	800177e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e040      	b.n	8001800 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	e03e      	b.n	8001800 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001782:	4b21      	ldr	r3, [pc, #132]	; (8001808 <HAL_PWREx_ConfigSupply+0xb0>)
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800178a:	491f      	ldr	r1, [pc, #124]	; (8001808 <HAL_PWREx_ConfigSupply+0xb0>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4313      	orrs	r3, r2
 8001790:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001792:	f7ff fcd3 	bl	800113c <HAL_GetTick>
 8001796:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001798:	e009      	b.n	80017ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800179a:	f7ff fccf 	bl	800113c <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017a8:	d901      	bls.n	80017ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e028      	b.n	8001800 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80017ae:	4b16      	ldr	r3, [pc, #88]	; (8001808 <HAL_PWREx_ConfigSupply+0xb0>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017ba:	d1ee      	bne.n	800179a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b1e      	cmp	r3, #30
 80017c0:	d008      	beq.n	80017d4 <HAL_PWREx_ConfigSupply+0x7c>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b2e      	cmp	r3, #46	; 0x2e
 80017c6:	d005      	beq.n	80017d4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b1d      	cmp	r3, #29
 80017cc:	d002      	beq.n	80017d4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b2d      	cmp	r3, #45	; 0x2d
 80017d2:	d114      	bne.n	80017fe <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80017d4:	f7ff fcb2 	bl	800113c <HAL_GetTick>
 80017d8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80017da:	e009      	b.n	80017f0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80017dc:	f7ff fcae 	bl	800113c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017ea:	d901      	bls.n	80017f0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e007      	b.n	8001800 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <HAL_PWREx_ConfigSupply+0xb0>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017fc:	d1ee      	bne.n	80017dc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	58024800 	.word	0x58024800

0800180c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08c      	sub	sp, #48	; 0x30
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d102      	bne.n	8001820 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	f000 bc1c 	b.w	8002058 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 8087 	beq.w	800193c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800182e:	4b9e      	ldr	r3, [pc, #632]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001838:	4b9b      	ldr	r3, [pc, #620]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 800183a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800183e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001840:	2b10      	cmp	r3, #16
 8001842:	d007      	beq.n	8001854 <HAL_RCC_OscConfig+0x48>
 8001844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001846:	2b18      	cmp	r3, #24
 8001848:	d110      	bne.n	800186c <HAL_RCC_OscConfig+0x60>
 800184a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d10b      	bne.n	800186c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001854:	4b94      	ldr	r3, [pc, #592]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d06c      	beq.n	800193a <HAL_RCC_OscConfig+0x12e>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d168      	bne.n	800193a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e3f5      	b.n	8002058 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001874:	d106      	bne.n	8001884 <HAL_RCC_OscConfig+0x78>
 8001876:	4b8c      	ldr	r3, [pc, #560]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a8b      	ldr	r2, [pc, #556]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 800187c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	e02e      	b.n	80018e2 <HAL_RCC_OscConfig+0xd6>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10c      	bne.n	80018a6 <HAL_RCC_OscConfig+0x9a>
 800188c:	4b86      	ldr	r3, [pc, #536]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a85      	ldr	r2, [pc, #532]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	4b83      	ldr	r3, [pc, #524]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a82      	ldr	r2, [pc, #520]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 800189e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	e01d      	b.n	80018e2 <HAL_RCC_OscConfig+0xd6>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018ae:	d10c      	bne.n	80018ca <HAL_RCC_OscConfig+0xbe>
 80018b0:	4b7d      	ldr	r3, [pc, #500]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a7c      	ldr	r2, [pc, #496]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 80018b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	4b7a      	ldr	r3, [pc, #488]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a79      	ldr	r2, [pc, #484]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 80018c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	e00b      	b.n	80018e2 <HAL_RCC_OscConfig+0xd6>
 80018ca:	4b77      	ldr	r3, [pc, #476]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a76      	ldr	r2, [pc, #472]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 80018d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	4b74      	ldr	r3, [pc, #464]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a73      	ldr	r2, [pc, #460]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 80018dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d013      	beq.n	8001912 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ea:	f7ff fc27 	bl	800113c <HAL_GetTick>
 80018ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f2:	f7ff fc23 	bl	800113c <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b64      	cmp	r3, #100	; 0x64
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e3a9      	b.n	8002058 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001904:	4b68      	ldr	r3, [pc, #416]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0f0      	beq.n	80018f2 <HAL_RCC_OscConfig+0xe6>
 8001910:	e014      	b.n	800193c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001912:	f7ff fc13 	bl	800113c <HAL_GetTick>
 8001916:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800191a:	f7ff fc0f 	bl	800113c <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b64      	cmp	r3, #100	; 0x64
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e395      	b.n	8002058 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800192c:	4b5e      	ldr	r3, [pc, #376]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1f0      	bne.n	800191a <HAL_RCC_OscConfig+0x10e>
 8001938:	e000      	b.n	800193c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 80ca 	beq.w	8001ade <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800194a:	4b57      	ldr	r3, [pc, #348]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001952:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001954:	4b54      	ldr	r3, [pc, #336]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001958:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d007      	beq.n	8001970 <HAL_RCC_OscConfig+0x164>
 8001960:	6a3b      	ldr	r3, [r7, #32]
 8001962:	2b18      	cmp	r3, #24
 8001964:	d156      	bne.n	8001a14 <HAL_RCC_OscConfig+0x208>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	2b00      	cmp	r3, #0
 800196e:	d151      	bne.n	8001a14 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001970:	4b4d      	ldr	r3, [pc, #308]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_RCC_OscConfig+0x17c>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e367      	b.n	8002058 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001988:	4b47      	ldr	r3, [pc, #284]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f023 0219 	bic.w	r2, r3, #25
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	4944      	ldr	r1, [pc, #272]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001996:	4313      	orrs	r3, r2
 8001998:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800199a:	f7ff fbcf 	bl	800113c <HAL_GetTick>
 800199e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019a2:	f7ff fbcb 	bl	800113c <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e351      	b.n	8002058 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019b4:	4b3c      	ldr	r3, [pc, #240]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0f0      	beq.n	80019a2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c0:	f7ff fbc8 	bl	8001154 <HAL_GetREVID>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d817      	bhi.n	80019fe <HAL_RCC_OscConfig+0x1f2>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	2b40      	cmp	r3, #64	; 0x40
 80019d4:	d108      	bne.n	80019e8 <HAL_RCC_OscConfig+0x1dc>
 80019d6:	4b34      	ldr	r3, [pc, #208]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80019de:	4a32      	ldr	r2, [pc, #200]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 80019e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019e6:	e07a      	b.n	8001ade <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e8:	4b2f      	ldr	r3, [pc, #188]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	031b      	lsls	r3, r3, #12
 80019f6:	492c      	ldr	r1, [pc, #176]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019fc:	e06f      	b.n	8001ade <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fe:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	061b      	lsls	r3, r3, #24
 8001a0c:	4926      	ldr	r1, [pc, #152]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a12:	e064      	b.n	8001ade <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d047      	beq.n	8001aac <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a1c:	4b22      	ldr	r3, [pc, #136]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f023 0219 	bic.w	r2, r3, #25
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	491f      	ldr	r1, [pc, #124]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2e:	f7ff fb85 	bl	800113c <HAL_GetTick>
 8001a32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a36:	f7ff fb81 	bl	800113c <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e307      	b.n	8002058 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a48:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a54:	f7ff fb7e 	bl	8001154 <HAL_GetREVID>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d817      	bhi.n	8001a92 <HAL_RCC_OscConfig+0x286>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	2b40      	cmp	r3, #64	; 0x40
 8001a68:	d108      	bne.n	8001a7c <HAL_RCC_OscConfig+0x270>
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001a72:	4a0d      	ldr	r2, [pc, #52]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a78:	6053      	str	r3, [r2, #4]
 8001a7a:	e030      	b.n	8001ade <HAL_RCC_OscConfig+0x2d2>
 8001a7c:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	031b      	lsls	r3, r3, #12
 8001a8a:	4907      	ldr	r1, [pc, #28]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	604b      	str	r3, [r1, #4]
 8001a90:	e025      	b.n	8001ade <HAL_RCC_OscConfig+0x2d2>
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	061b      	lsls	r3, r3, #24
 8001aa0:	4901      	ldr	r1, [pc, #4]	; (8001aa8 <HAL_RCC_OscConfig+0x29c>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	604b      	str	r3, [r1, #4]
 8001aa6:	e01a      	b.n	8001ade <HAL_RCC_OscConfig+0x2d2>
 8001aa8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aac:	4b9e      	ldr	r3, [pc, #632]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a9d      	ldr	r2, [pc, #628]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001ab2:	f023 0301 	bic.w	r3, r3, #1
 8001ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab8:	f7ff fb40 	bl	800113c <HAL_GetTick>
 8001abc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ac0:	f7ff fb3c 	bl	800113c <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e2c2      	b.n	8002058 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ad2:	4b95      	ldr	r3, [pc, #596]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f0      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 80a9 	beq.w	8001c3e <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aec:	4b8e      	ldr	r3, [pc, #568]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001af4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001af6:	4b8c      	ldr	r3, [pc, #560]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afa:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d007      	beq.n	8001b12 <HAL_RCC_OscConfig+0x306>
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	2b18      	cmp	r3, #24
 8001b06:	d13a      	bne.n	8001b7e <HAL_RCC_OscConfig+0x372>
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d135      	bne.n	8001b7e <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b12:	4b85      	ldr	r3, [pc, #532]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d005      	beq.n	8001b2a <HAL_RCC_OscConfig+0x31e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	2b80      	cmp	r3, #128	; 0x80
 8001b24:	d001      	beq.n	8001b2a <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e296      	b.n	8002058 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b2a:	f7ff fb13 	bl	8001154 <HAL_GetREVID>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d817      	bhi.n	8001b68 <HAL_RCC_OscConfig+0x35c>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	2b20      	cmp	r3, #32
 8001b3e:	d108      	bne.n	8001b52 <HAL_RCC_OscConfig+0x346>
 8001b40:	4b79      	ldr	r3, [pc, #484]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001b48:	4a77      	ldr	r2, [pc, #476]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001b4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b4e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b50:	e075      	b.n	8001c3e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b52:	4b75      	ldr	r3, [pc, #468]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	069b      	lsls	r3, r3, #26
 8001b60:	4971      	ldr	r1, [pc, #452]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b66:	e06a      	b.n	8001c3e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b68:	4b6f      	ldr	r3, [pc, #444]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	061b      	lsls	r3, r3, #24
 8001b76:	496c      	ldr	r1, [pc, #432]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b7c:	e05f      	b.n	8001c3e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d042      	beq.n	8001c0c <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b86:	4b68      	ldr	r3, [pc, #416]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a67      	ldr	r2, [pc, #412]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b92:	f7ff fad3 	bl	800113c <HAL_GetTick>
 8001b96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001b9a:	f7ff facf 	bl	800113c <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e255      	b.n	8002058 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bac:	4b5e      	ldr	r3, [pc, #376]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0f0      	beq.n	8001b9a <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bb8:	f7ff facc 	bl	8001154 <HAL_GetREVID>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	f241 0203 	movw	r2, #4099	; 0x1003
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d817      	bhi.n	8001bf6 <HAL_RCC_OscConfig+0x3ea>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	2b20      	cmp	r3, #32
 8001bcc:	d108      	bne.n	8001be0 <HAL_RCC_OscConfig+0x3d4>
 8001bce:	4b56      	ldr	r3, [pc, #344]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001bd6:	4a54      	ldr	r2, [pc, #336]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001bd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001bdc:	6053      	str	r3, [r2, #4]
 8001bde:	e02e      	b.n	8001c3e <HAL_RCC_OscConfig+0x432>
 8001be0:	4b51      	ldr	r3, [pc, #324]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	069b      	lsls	r3, r3, #26
 8001bee:	494e      	ldr	r1, [pc, #312]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	604b      	str	r3, [r1, #4]
 8001bf4:	e023      	b.n	8001c3e <HAL_RCC_OscConfig+0x432>
 8001bf6:	4b4c      	ldr	r3, [pc, #304]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	061b      	lsls	r3, r3, #24
 8001c04:	4948      	ldr	r1, [pc, #288]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	60cb      	str	r3, [r1, #12]
 8001c0a:	e018      	b.n	8001c3e <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001c0c:	4b46      	ldr	r3, [pc, #280]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a45      	ldr	r2, [pc, #276]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c18:	f7ff fa90 	bl	800113c <HAL_GetTick>
 8001c1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001c20:	f7ff fa8c 	bl	800113c <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e212      	b.n	8002058 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c32:	4b3d      	ldr	r3, [pc, #244]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d036      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d019      	beq.n	8001c86 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c52:	4b35      	ldr	r3, [pc, #212]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c56:	4a34      	ldr	r2, [pc, #208]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c5e:	f7ff fa6d 	bl	800113c <HAL_GetTick>
 8001c62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c66:	f7ff fa69 	bl	800113c <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e1ef      	b.n	8002058 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c78:	4b2b      	ldr	r3, [pc, #172]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x45a>
 8001c84:	e018      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c86:	4b28      	ldr	r3, [pc, #160]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c8a:	4a27      	ldr	r2, [pc, #156]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001c8c:	f023 0301 	bic.w	r3, r3, #1
 8001c90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c92:	f7ff fa53 	bl	800113c <HAL_GetTick>
 8001c96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c9a:	f7ff fa4f 	bl	800113c <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e1d5      	b.n	8002058 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cac:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1f0      	bne.n	8001c9a <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0320 	and.w	r3, r3, #32
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d039      	beq.n	8001d38 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d019      	beq.n	8001d00 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ccc:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a15      	ldr	r2, [pc, #84]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001cd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cd6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001cd8:	f7ff fa30 	bl	800113c <HAL_GetTick>
 8001cdc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001ce0:	f7ff fa2c 	bl	800113c <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e1b2      	b.n	8002058 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001cf2:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x4d4>
 8001cfe:	e01b      	b.n	8001d38 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a08      	ldr	r2, [pc, #32]	; (8001d28 <HAL_RCC_OscConfig+0x51c>)
 8001d06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d0a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d0c:	f7ff fa16 	bl	800113c <HAL_GetTick>
 8001d10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d12:	e00b      	b.n	8001d2c <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001d14:	f7ff fa12 	bl	800113c <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d904      	bls.n	8001d2c <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e198      	b.n	8002058 <HAL_RCC_OscConfig+0x84c>
 8001d26:	bf00      	nop
 8001d28:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d2c:	4ba3      	ldr	r3, [pc, #652]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1ed      	bne.n	8001d14 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 8081 	beq.w	8001e48 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d46:	4b9e      	ldr	r3, [pc, #632]	; (8001fc0 <HAL_RCC_OscConfig+0x7b4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a9d      	ldr	r2, [pc, #628]	; (8001fc0 <HAL_RCC_OscConfig+0x7b4>)
 8001d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d52:	f7ff f9f3 	bl	800113c <HAL_GetTick>
 8001d56:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001d5a:	f7ff f9ef 	bl	800113c <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b64      	cmp	r3, #100	; 0x64
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e175      	b.n	8002058 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d6c:	4b94      	ldr	r3, [pc, #592]	; (8001fc0 <HAL_RCC_OscConfig+0x7b4>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d106      	bne.n	8001d8e <HAL_RCC_OscConfig+0x582>
 8001d80:	4b8e      	ldr	r3, [pc, #568]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d84:	4a8d      	ldr	r2, [pc, #564]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d8c:	e02d      	b.n	8001dea <HAL_RCC_OscConfig+0x5de>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10c      	bne.n	8001db0 <HAL_RCC_OscConfig+0x5a4>
 8001d96:	4b89      	ldr	r3, [pc, #548]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9a:	4a88      	ldr	r2, [pc, #544]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001d9c:	f023 0301 	bic.w	r3, r3, #1
 8001da0:	6713      	str	r3, [r2, #112]	; 0x70
 8001da2:	4b86      	ldr	r3, [pc, #536]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da6:	4a85      	ldr	r2, [pc, #532]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001da8:	f023 0304 	bic.w	r3, r3, #4
 8001dac:	6713      	str	r3, [r2, #112]	; 0x70
 8001dae:	e01c      	b.n	8001dea <HAL_RCC_OscConfig+0x5de>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	2b05      	cmp	r3, #5
 8001db6:	d10c      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x5c6>
 8001db8:	4b80      	ldr	r3, [pc, #512]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbc:	4a7f      	ldr	r2, [pc, #508]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001dbe:	f043 0304 	orr.w	r3, r3, #4
 8001dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc4:	4b7d      	ldr	r3, [pc, #500]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc8:	4a7c      	ldr	r2, [pc, #496]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd0:	e00b      	b.n	8001dea <HAL_RCC_OscConfig+0x5de>
 8001dd2:	4b7a      	ldr	r3, [pc, #488]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd6:	4a79      	ldr	r2, [pc, #484]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001dd8:	f023 0301 	bic.w	r3, r3, #1
 8001ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dde:	4b77      	ldr	r3, [pc, #476]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de2:	4a76      	ldr	r2, [pc, #472]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001de4:	f023 0304 	bic.w	r3, r3, #4
 8001de8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d015      	beq.n	8001e1e <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df2:	f7ff f9a3 	bl	800113c <HAL_GetTick>
 8001df6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001df8:	e00a      	b.n	8001e10 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dfa:	f7ff f99f 	bl	800113c <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e123      	b.n	8002058 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e10:	4b6a      	ldr	r3, [pc, #424]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0ee      	beq.n	8001dfa <HAL_RCC_OscConfig+0x5ee>
 8001e1c:	e014      	b.n	8001e48 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1e:	f7ff f98d 	bl	800113c <HAL_GetTick>
 8001e22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e24:	e00a      	b.n	8001e3c <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e26:	f7ff f989 	bl	800113c <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e10d      	b.n	8002058 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e3c:	4b5f      	ldr	r3, [pc, #380]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1ee      	bne.n	8001e26 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 8102 	beq.w	8002056 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001e52:	4b5a      	ldr	r3, [pc, #360]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e5a:	2b18      	cmp	r3, #24
 8001e5c:	f000 80bd 	beq.w	8001fda <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	f040 8095 	bne.w	8001f94 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e6a:	4b54      	ldr	r3, [pc, #336]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a53      	ldr	r2, [pc, #332]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001e70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e76:	f7ff f961 	bl	800113c <HAL_GetTick>
 8001e7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e7e:	f7ff f95d 	bl	800113c <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e0e3      	b.n	8002058 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e90:	4b4a      	ldr	r3, [pc, #296]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1f0      	bne.n	8001e7e <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e9c:	4b47      	ldr	r3, [pc, #284]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001e9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ea0:	4b48      	ldr	r3, [pc, #288]	; (8001fc4 <HAL_RCC_OscConfig+0x7b8>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001eac:	0112      	lsls	r2, r2, #4
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	4942      	ldr	r1, [pc, #264]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	628b      	str	r3, [r1, #40]	; 0x28
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	025b      	lsls	r3, r3, #9
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	041b      	lsls	r3, r3, #16
 8001ed4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	061b      	lsls	r3, r3, #24
 8001ee2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001ee6:	4935      	ldr	r1, [pc, #212]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001eec:	4b33      	ldr	r3, [pc, #204]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef0:	4a32      	ldr	r2, [pc, #200]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001ef2:	f023 0301 	bic.w	r3, r3, #1
 8001ef6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ef8:	4b30      	ldr	r3, [pc, #192]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001efa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001efc:	4b32      	ldr	r3, [pc, #200]	; (8001fc8 <HAL_RCC_OscConfig+0x7bc>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f04:	00d2      	lsls	r2, r2, #3
 8001f06:	492d      	ldr	r1, [pc, #180]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001f0c:	4b2b      	ldr	r3, [pc, #172]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f10:	f023 020c 	bic.w	r2, r3, #12
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	4928      	ldr	r1, [pc, #160]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001f1e:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f22:	f023 0202 	bic.w	r2, r3, #2
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	4924      	ldr	r1, [pc, #144]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001f30:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f34:	4a21      	ldr	r2, [pc, #132]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f3c:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f40:	4a1e      	ldr	r2, [pc, #120]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001f48:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4c:	4a1b      	ldr	r2, [pc, #108]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001f4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001f54:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f58:	4a18      	ldr	r2, [pc, #96]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f60:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a15      	ldr	r2, [pc, #84]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001f66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6c:	f7ff f8e6 	bl	800113c <HAL_GetTick>
 8001f70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f74:	f7ff f8e2 	bl	800113c <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e068      	b.n	8002058 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f86:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0f0      	beq.n	8001f74 <HAL_RCC_OscConfig+0x768>
 8001f92:	e060      	b.n	8002056 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a08      	ldr	r2, [pc, #32]	; (8001fbc <HAL_RCC_OscConfig+0x7b0>)
 8001f9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa0:	f7ff f8cc 	bl	800113c <HAL_GetTick>
 8001fa4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fa6:	e011      	b.n	8001fcc <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa8:	f7ff f8c8 	bl	800113c <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d90a      	bls.n	8001fcc <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e04e      	b.n	8002058 <HAL_RCC_OscConfig+0x84c>
 8001fba:	bf00      	nop
 8001fbc:	58024400 	.word	0x58024400
 8001fc0:	58024800 	.word	0x58024800
 8001fc4:	fffffc0c 	.word	0xfffffc0c
 8001fc8:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fcc:	4b24      	ldr	r3, [pc, #144]	; (8002060 <HAL_RCC_OscConfig+0x854>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1e7      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x79c>
 8001fd8:	e03d      	b.n	8002056 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001fda:	4b21      	ldr	r3, [pc, #132]	; (8002060 <HAL_RCC_OscConfig+0x854>)
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fde:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001fe0:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <HAL_RCC_OscConfig+0x854>)
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d031      	beq.n	8002052 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	f003 0203 	and.w	r2, r3, #3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d12a      	bne.n	8002052 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	091b      	lsrs	r3, r3, #4
 8002000:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002008:	429a      	cmp	r2, r3
 800200a:	d122      	bne.n	8002052 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002018:	429a      	cmp	r2, r3
 800201a:	d11a      	bne.n	8002052 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	0a5b      	lsrs	r3, r3, #9
 8002020:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002028:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800202a:	429a      	cmp	r2, r3
 800202c:	d111      	bne.n	8002052 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	0c1b      	lsrs	r3, r3, #16
 8002032:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800203c:	429a      	cmp	r2, r3
 800203e:	d108      	bne.n	8002052 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	0e1b      	lsrs	r3, r3, #24
 8002044:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800204e:	429a      	cmp	r2, r3
 8002050:	d001      	beq.n	8002056 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3730      	adds	r7, #48	; 0x30
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	58024400 	.word	0x58024400

08002064 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e19c      	b.n	80023b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002078:	4b8a      	ldr	r3, [pc, #552]	; (80022a4 <HAL_RCC_ClockConfig+0x240>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 030f 	and.w	r3, r3, #15
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d910      	bls.n	80020a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002086:	4b87      	ldr	r3, [pc, #540]	; (80022a4 <HAL_RCC_ClockConfig+0x240>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f023 020f 	bic.w	r2, r3, #15
 800208e:	4985      	ldr	r1, [pc, #532]	; (80022a4 <HAL_RCC_ClockConfig+0x240>)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	4313      	orrs	r3, r2
 8002094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002096:	4b83      	ldr	r3, [pc, #524]	; (80022a4 <HAL_RCC_ClockConfig+0x240>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d001      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e184      	b.n	80023b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d010      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	4b7b      	ldr	r3, [pc, #492]	; (80022a8 <HAL_RCC_ClockConfig+0x244>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d908      	bls.n	80020d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020c4:	4b78      	ldr	r3, [pc, #480]	; (80022a8 <HAL_RCC_ClockConfig+0x244>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	4975      	ldr	r1, [pc, #468]	; (80022a8 <HAL_RCC_ClockConfig+0x244>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d010      	beq.n	8002104 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695a      	ldr	r2, [r3, #20]
 80020e6:	4b70      	ldr	r3, [pc, #448]	; (80022a8 <HAL_RCC_ClockConfig+0x244>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d908      	bls.n	8002104 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020f2:	4b6d      	ldr	r3, [pc, #436]	; (80022a8 <HAL_RCC_ClockConfig+0x244>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	496a      	ldr	r1, [pc, #424]	; (80022a8 <HAL_RCC_ClockConfig+0x244>)
 8002100:	4313      	orrs	r3, r2
 8002102:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0310 	and.w	r3, r3, #16
 800210c:	2b00      	cmp	r3, #0
 800210e:	d010      	beq.n	8002132 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	699a      	ldr	r2, [r3, #24]
 8002114:	4b64      	ldr	r3, [pc, #400]	; (80022a8 <HAL_RCC_ClockConfig+0x244>)
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800211c:	429a      	cmp	r2, r3
 800211e:	d908      	bls.n	8002132 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002120:	4b61      	ldr	r3, [pc, #388]	; (80022a8 <HAL_RCC_ClockConfig+0x244>)
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	495e      	ldr	r1, [pc, #376]	; (80022a8 <HAL_RCC_ClockConfig+0x244>)
 800212e:	4313      	orrs	r3, r2
 8002130:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	2b00      	cmp	r3, #0
 800213c:	d010      	beq.n	8002160 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69da      	ldr	r2, [r3, #28]
 8002142:	4b59      	ldr	r3, [pc, #356]	; (80022a8 <HAL_RCC_ClockConfig+0x244>)
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800214a:	429a      	cmp	r2, r3
 800214c:	d908      	bls.n	8002160 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800214e:	4b56      	ldr	r3, [pc, #344]	; (80022a8 <HAL_RCC_ClockConfig+0x244>)
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	4953      	ldr	r1, [pc, #332]	; (80022a8 <HAL_RCC_ClockConfig+0x244>)
 800215c:	4313      	orrs	r3, r2
 800215e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d010      	beq.n	800218e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	4b4d      	ldr	r3, [pc, #308]	; (80022a8 <HAL_RCC_ClockConfig+0x244>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	f003 030f 	and.w	r3, r3, #15
 8002178:	429a      	cmp	r2, r3
 800217a:	d908      	bls.n	800218e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800217c:	4b4a      	ldr	r3, [pc, #296]	; (80022a8 <HAL_RCC_ClockConfig+0x244>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f023 020f 	bic.w	r2, r3, #15
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4947      	ldr	r1, [pc, #284]	; (80022a8 <HAL_RCC_ClockConfig+0x244>)
 800218a:	4313      	orrs	r3, r2
 800218c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d055      	beq.n	8002246 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800219a:	4b43      	ldr	r3, [pc, #268]	; (80022a8 <HAL_RCC_ClockConfig+0x244>)
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	4940      	ldr	r1, [pc, #256]	; (80022a8 <HAL_RCC_ClockConfig+0x244>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d107      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021b4:	4b3c      	ldr	r3, [pc, #240]	; (80022a8 <HAL_RCC_ClockConfig+0x244>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d121      	bne.n	8002204 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0f6      	b.n	80023b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d107      	bne.n	80021dc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021cc:	4b36      	ldr	r3, [pc, #216]	; (80022a8 <HAL_RCC_ClockConfig+0x244>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d115      	bne.n	8002204 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0ea      	b.n	80023b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d107      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021e4:	4b30      	ldr	r3, [pc, #192]	; (80022a8 <HAL_RCC_ClockConfig+0x244>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d109      	bne.n	8002204 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0de      	b.n	80023b2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021f4:	4b2c      	ldr	r3, [pc, #176]	; (80022a8 <HAL_RCC_ClockConfig+0x244>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0d6      	b.n	80023b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002204:	4b28      	ldr	r3, [pc, #160]	; (80022a8 <HAL_RCC_ClockConfig+0x244>)
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	f023 0207 	bic.w	r2, r3, #7
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	4925      	ldr	r1, [pc, #148]	; (80022a8 <HAL_RCC_ClockConfig+0x244>)
 8002212:	4313      	orrs	r3, r2
 8002214:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002216:	f7fe ff91 	bl	800113c <HAL_GetTick>
 800221a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221c:	e00a      	b.n	8002234 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800221e:	f7fe ff8d 	bl	800113c <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	f241 3288 	movw	r2, #5000	; 0x1388
 800222c:	4293      	cmp	r3, r2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e0be      	b.n	80023b2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002234:	4b1c      	ldr	r3, [pc, #112]	; (80022a8 <HAL_RCC_ClockConfig+0x244>)
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	429a      	cmp	r2, r3
 8002244:	d1eb      	bne.n	800221e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d010      	beq.n	8002274 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	4b14      	ldr	r3, [pc, #80]	; (80022a8 <HAL_RCC_ClockConfig+0x244>)
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	429a      	cmp	r2, r3
 8002260:	d208      	bcs.n	8002274 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002262:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <HAL_RCC_ClockConfig+0x244>)
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	f023 020f 	bic.w	r2, r3, #15
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	490e      	ldr	r1, [pc, #56]	; (80022a8 <HAL_RCC_ClockConfig+0x244>)
 8002270:	4313      	orrs	r3, r2
 8002272:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <HAL_RCC_ClockConfig+0x240>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 030f 	and.w	r3, r3, #15
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d214      	bcs.n	80022ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002282:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <HAL_RCC_ClockConfig+0x240>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 020f 	bic.w	r2, r3, #15
 800228a:	4906      	ldr	r1, [pc, #24]	; (80022a4 <HAL_RCC_ClockConfig+0x240>)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	4313      	orrs	r3, r2
 8002290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002292:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <HAL_RCC_ClockConfig+0x240>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	429a      	cmp	r2, r3
 800229e:	d005      	beq.n	80022ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e086      	b.n	80023b2 <HAL_RCC_ClockConfig+0x34e>
 80022a4:	52002000 	.word	0x52002000
 80022a8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d010      	beq.n	80022da <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	4b3f      	ldr	r3, [pc, #252]	; (80023bc <HAL_RCC_ClockConfig+0x358>)
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d208      	bcs.n	80022da <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022c8:	4b3c      	ldr	r3, [pc, #240]	; (80023bc <HAL_RCC_ClockConfig+0x358>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	4939      	ldr	r1, [pc, #228]	; (80023bc <HAL_RCC_ClockConfig+0x358>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d010      	beq.n	8002308 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695a      	ldr	r2, [r3, #20]
 80022ea:	4b34      	ldr	r3, [pc, #208]	; (80023bc <HAL_RCC_ClockConfig+0x358>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d208      	bcs.n	8002308 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022f6:	4b31      	ldr	r3, [pc, #196]	; (80023bc <HAL_RCC_ClockConfig+0x358>)
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	492e      	ldr	r1, [pc, #184]	; (80023bc <HAL_RCC_ClockConfig+0x358>)
 8002304:	4313      	orrs	r3, r2
 8002306:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0310 	and.w	r3, r3, #16
 8002310:	2b00      	cmp	r3, #0
 8002312:	d010      	beq.n	8002336 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	699a      	ldr	r2, [r3, #24]
 8002318:	4b28      	ldr	r3, [pc, #160]	; (80023bc <HAL_RCC_ClockConfig+0x358>)
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002320:	429a      	cmp	r2, r3
 8002322:	d208      	bcs.n	8002336 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002324:	4b25      	ldr	r3, [pc, #148]	; (80023bc <HAL_RCC_ClockConfig+0x358>)
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	4922      	ldr	r1, [pc, #136]	; (80023bc <HAL_RCC_ClockConfig+0x358>)
 8002332:	4313      	orrs	r3, r2
 8002334:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0320 	and.w	r3, r3, #32
 800233e:	2b00      	cmp	r3, #0
 8002340:	d010      	beq.n	8002364 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69da      	ldr	r2, [r3, #28]
 8002346:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <HAL_RCC_ClockConfig+0x358>)
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800234e:	429a      	cmp	r2, r3
 8002350:	d208      	bcs.n	8002364 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002352:	4b1a      	ldr	r3, [pc, #104]	; (80023bc <HAL_RCC_ClockConfig+0x358>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	4917      	ldr	r1, [pc, #92]	; (80023bc <HAL_RCC_ClockConfig+0x358>)
 8002360:	4313      	orrs	r3, r2
 8002362:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002364:	f000 f834 	bl	80023d0 <HAL_RCC_GetSysClockFreq>
 8002368:	4602      	mov	r2, r0
 800236a:	4b14      	ldr	r3, [pc, #80]	; (80023bc <HAL_RCC_ClockConfig+0x358>)
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	0a1b      	lsrs	r3, r3, #8
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	4912      	ldr	r1, [pc, #72]	; (80023c0 <HAL_RCC_ClockConfig+0x35c>)
 8002376:	5ccb      	ldrb	r3, [r1, r3]
 8002378:	f003 031f 	and.w	r3, r3, #31
 800237c:	fa22 f303 	lsr.w	r3, r2, r3
 8002380:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002382:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <HAL_RCC_ClockConfig+0x358>)
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	4a0d      	ldr	r2, [pc, #52]	; (80023c0 <HAL_RCC_ClockConfig+0x35c>)
 800238c:	5cd3      	ldrb	r3, [r2, r3]
 800238e:	f003 031f 	and.w	r3, r3, #31
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	fa22 f303 	lsr.w	r3, r2, r3
 8002398:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <HAL_RCC_ClockConfig+0x360>)
 800239a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800239c:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <HAL_RCC_ClockConfig+0x364>)
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80023a2:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <HAL_RCC_ClockConfig+0x368>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe fe7e 	bl	80010a8 <HAL_InitTick>
 80023ac:	4603      	mov	r3, r0
 80023ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	58024400 	.word	0x58024400
 80023c0:	08008ac0 	.word	0x08008ac0
 80023c4:	24000004 	.word	0x24000004
 80023c8:	24000000 	.word	0x24000000
 80023cc:	24000008 	.word	0x24000008

080023d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b089      	sub	sp, #36	; 0x24
 80023d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023d6:	4bb3      	ldr	r3, [pc, #716]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023de:	2b18      	cmp	r3, #24
 80023e0:	f200 8155 	bhi.w	800268e <HAL_RCC_GetSysClockFreq+0x2be>
 80023e4:	a201      	add	r2, pc, #4	; (adr r2, 80023ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80023e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ea:	bf00      	nop
 80023ec:	08002451 	.word	0x08002451
 80023f0:	0800268f 	.word	0x0800268f
 80023f4:	0800268f 	.word	0x0800268f
 80023f8:	0800268f 	.word	0x0800268f
 80023fc:	0800268f 	.word	0x0800268f
 8002400:	0800268f 	.word	0x0800268f
 8002404:	0800268f 	.word	0x0800268f
 8002408:	0800268f 	.word	0x0800268f
 800240c:	08002477 	.word	0x08002477
 8002410:	0800268f 	.word	0x0800268f
 8002414:	0800268f 	.word	0x0800268f
 8002418:	0800268f 	.word	0x0800268f
 800241c:	0800268f 	.word	0x0800268f
 8002420:	0800268f 	.word	0x0800268f
 8002424:	0800268f 	.word	0x0800268f
 8002428:	0800268f 	.word	0x0800268f
 800242c:	0800247d 	.word	0x0800247d
 8002430:	0800268f 	.word	0x0800268f
 8002434:	0800268f 	.word	0x0800268f
 8002438:	0800268f 	.word	0x0800268f
 800243c:	0800268f 	.word	0x0800268f
 8002440:	0800268f 	.word	0x0800268f
 8002444:	0800268f 	.word	0x0800268f
 8002448:	0800268f 	.word	0x0800268f
 800244c:	08002483 	.word	0x08002483
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002450:	4b94      	ldr	r3, [pc, #592]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0320 	and.w	r3, r3, #32
 8002458:	2b00      	cmp	r3, #0
 800245a:	d009      	beq.n	8002470 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800245c:	4b91      	ldr	r3, [pc, #580]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	08db      	lsrs	r3, r3, #3
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	4a90      	ldr	r2, [pc, #576]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002468:	fa22 f303 	lsr.w	r3, r2, r3
 800246c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800246e:	e111      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002470:	4b8d      	ldr	r3, [pc, #564]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002472:	61bb      	str	r3, [r7, #24]
    break;
 8002474:	e10e      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002476:	4b8d      	ldr	r3, [pc, #564]	; (80026ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002478:	61bb      	str	r3, [r7, #24]
    break;
 800247a:	e10b      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800247c:	4b8c      	ldr	r3, [pc, #560]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800247e:	61bb      	str	r3, [r7, #24]
    break;
 8002480:	e108      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002482:	4b88      	ldr	r3, [pc, #544]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800248c:	4b85      	ldr	r3, [pc, #532]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800248e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002496:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002498:	4b82      	ldr	r3, [pc, #520]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800249a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80024a2:	4b80      	ldr	r3, [pc, #512]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a6:	08db      	lsrs	r3, r3, #3
 80024a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	fb02 f303 	mul.w	r3, r2, r3
 80024b2:	ee07 3a90 	vmov	s15, r3
 80024b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ba:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80e1 	beq.w	8002688 <HAL_RCC_GetSysClockFreq+0x2b8>
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	f000 8083 	beq.w	80025d4 <HAL_RCC_GetSysClockFreq+0x204>
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	f200 80a1 	bhi.w	8002618 <HAL_RCC_GetSysClockFreq+0x248>
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_RCC_GetSysClockFreq+0x114>
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d056      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0x1c0>
 80024e2:	e099      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024e4:	4b6f      	ldr	r3, [pc, #444]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0320 	and.w	r3, r3, #32
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d02d      	beq.n	800254c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80024f0:	4b6c      	ldr	r3, [pc, #432]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	08db      	lsrs	r3, r3, #3
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	4a6b      	ldr	r2, [pc, #428]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002500:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	ee07 3a90 	vmov	s15, r3
 8002508:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	ee07 3a90 	vmov	s15, r3
 8002512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800251a:	4b62      	ldr	r3, [pc, #392]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002522:	ee07 3a90 	vmov	s15, r3
 8002526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800252a:	ed97 6a02 	vldr	s12, [r7, #8]
 800252e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80026b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800253a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800253e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002546:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800254a:	e087      	b.n	800265c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	ee07 3a90 	vmov	s15, r3
 8002552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002556:	eddf 6a58 	vldr	s13, [pc, #352]	; 80026b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800255a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800255e:	4b51      	ldr	r3, [pc, #324]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002566:	ee07 3a90 	vmov	s15, r3
 800256a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800256e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002572:	eddf 5a50 	vldr	s11, [pc, #320]	; 80026b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800257a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800257e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800258a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800258e:	e065      	b.n	800265c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	ee07 3a90 	vmov	s15, r3
 8002596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800259a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80026bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800259e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025a2:	4b40      	ldr	r3, [pc, #256]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025aa:	ee07 3a90 	vmov	s15, r3
 80025ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80025b6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80026b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80025d2:	e043      	b.n	800265c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	ee07 3a90 	vmov	s15, r3
 80025da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025de:	eddf 6a38 	vldr	s13, [pc, #224]	; 80026c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80025e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025e6:	4b2f      	ldr	r3, [pc, #188]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ee:	ee07 3a90 	vmov	s15, r3
 80025f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80025fa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80026b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800260a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800260e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002612:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002616:	e021      	b.n	800265c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	ee07 3a90 	vmov	s15, r3
 800261e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002622:	eddf 6a26 	vldr	s13, [pc, #152]	; 80026bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800262a:	4b1e      	ldr	r3, [pc, #120]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002632:	ee07 3a90 	vmov	s15, r3
 8002636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800263a:	ed97 6a02 	vldr	s12, [r7, #8]
 800263e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80026b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800264a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800264e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002656:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800265a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800265c:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800265e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002660:	0a5b      	lsrs	r3, r3, #9
 8002662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002666:	3301      	adds	r3, #1
 8002668:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	ee07 3a90 	vmov	s15, r3
 8002670:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002674:	edd7 6a07 	vldr	s13, [r7, #28]
 8002678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800267c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002680:	ee17 3a90 	vmov	r3, s15
 8002684:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002686:	e005      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	61bb      	str	r3, [r7, #24]
    break;
 800268c:	e002      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800268e:	4b07      	ldr	r3, [pc, #28]	; (80026ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002690:	61bb      	str	r3, [r7, #24]
    break;
 8002692:	bf00      	nop
  }

  return sysclockfreq;
 8002694:	69bb      	ldr	r3, [r7, #24]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3724      	adds	r7, #36	; 0x24
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	58024400 	.word	0x58024400
 80026a8:	03d09000 	.word	0x03d09000
 80026ac:	003d0900 	.word	0x003d0900
 80026b0:	017d7840 	.word	0x017d7840
 80026b4:	46000000 	.word	0x46000000
 80026b8:	4c742400 	.word	0x4c742400
 80026bc:	4a742400 	.word	0x4a742400
 80026c0:	4bbebc20 	.word	0x4bbebc20

080026c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80026ca:	f7ff fe81 	bl	80023d0 <HAL_RCC_GetSysClockFreq>
 80026ce:	4602      	mov	r2, r0
 80026d0:	4b10      	ldr	r3, [pc, #64]	; (8002714 <HAL_RCC_GetHCLKFreq+0x50>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	0a1b      	lsrs	r3, r3, #8
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	490f      	ldr	r1, [pc, #60]	; (8002718 <HAL_RCC_GetHCLKFreq+0x54>)
 80026dc:	5ccb      	ldrb	r3, [r1, r3]
 80026de:	f003 031f 	and.w	r3, r3, #31
 80026e2:	fa22 f303 	lsr.w	r3, r2, r3
 80026e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026e8:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <HAL_RCC_GetHCLKFreq+0x50>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	f003 030f 	and.w	r3, r3, #15
 80026f0:	4a09      	ldr	r2, [pc, #36]	; (8002718 <HAL_RCC_GetHCLKFreq+0x54>)
 80026f2:	5cd3      	ldrb	r3, [r2, r3]
 80026f4:	f003 031f 	and.w	r3, r3, #31
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	fa22 f303 	lsr.w	r3, r2, r3
 80026fe:	4a07      	ldr	r2, [pc, #28]	; (800271c <HAL_RCC_GetHCLKFreq+0x58>)
 8002700:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002702:	4a07      	ldr	r2, [pc, #28]	; (8002720 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002708:	4b04      	ldr	r3, [pc, #16]	; (800271c <HAL_RCC_GetHCLKFreq+0x58>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	58024400 	.word	0x58024400
 8002718:	08008ac0 	.word	0x08008ac0
 800271c:	24000004 	.word	0x24000004
 8002720:	24000000 	.word	0x24000000

08002724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002728:	f7ff ffcc 	bl	80026c4 <HAL_RCC_GetHCLKFreq>
 800272c:	4602      	mov	r2, r0
 800272e:	4b06      	ldr	r3, [pc, #24]	; (8002748 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	091b      	lsrs	r3, r3, #4
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	4904      	ldr	r1, [pc, #16]	; (800274c <HAL_RCC_GetPCLK1Freq+0x28>)
 800273a:	5ccb      	ldrb	r3, [r1, r3]
 800273c:	f003 031f 	and.w	r3, r3, #31
 8002740:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002744:	4618      	mov	r0, r3
 8002746:	bd80      	pop	{r7, pc}
 8002748:	58024400 	.word	0x58024400
 800274c:	08008ac0 	.word	0x08008ac0

08002750 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002754:	f7ff ffb6 	bl	80026c4 <HAL_RCC_GetHCLKFreq>
 8002758:	4602      	mov	r2, r0
 800275a:	4b06      	ldr	r3, [pc, #24]	; (8002774 <HAL_RCC_GetPCLK2Freq+0x24>)
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	0a1b      	lsrs	r3, r3, #8
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	4904      	ldr	r1, [pc, #16]	; (8002778 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002766:	5ccb      	ldrb	r3, [r1, r3]
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002770:	4618      	mov	r0, r3
 8002772:	bd80      	pop	{r7, pc}
 8002774:	58024400 	.word	0x58024400
 8002778:	08008ac0 	.word	0x08008ac0

0800277c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002784:	2300      	movs	r3, #0
 8002786:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002788:	2300      	movs	r3, #0
 800278a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d03f      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800279c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80027a0:	d02a      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80027a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80027a6:	d824      	bhi.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027ac:	d018      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027b2:	d81e      	bhi.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027bc:	d007      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80027be:	e018      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027c0:	4bab      	ldr	r3, [pc, #684]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	4aaa      	ldr	r2, [pc, #680]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80027cc:	e015      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3304      	adds	r3, #4
 80027d2:	2102      	movs	r1, #2
 80027d4:	4618      	mov	r0, r3
 80027d6:	f001 f9cf 	bl	8003b78 <RCCEx_PLL2_Config>
 80027da:	4603      	mov	r3, r0
 80027dc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80027de:	e00c      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3324      	adds	r3, #36	; 0x24
 80027e4:	2102      	movs	r1, #2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f001 fa78 	bl	8003cdc <RCCEx_PLL3_Config>
 80027ec:	4603      	mov	r3, r0
 80027ee:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80027f0:	e003      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	75fb      	strb	r3, [r7, #23]
      break;
 80027f6:	e000      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80027f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027fa:	7dfb      	ldrb	r3, [r7, #23]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d109      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002800:	4b9b      	ldr	r3, [pc, #620]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002804:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800280c:	4998      	ldr	r1, [pc, #608]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800280e:	4313      	orrs	r3, r2
 8002810:	650b      	str	r3, [r1, #80]	; 0x50
 8002812:	e001      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002814:	7dfb      	ldrb	r3, [r7, #23]
 8002816:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d03d      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002828:	2b04      	cmp	r3, #4
 800282a:	d826      	bhi.n	800287a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800282c:	a201      	add	r2, pc, #4	; (adr r2, 8002834 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800282e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002832:	bf00      	nop
 8002834:	08002849 	.word	0x08002849
 8002838:	08002857 	.word	0x08002857
 800283c:	08002869 	.word	0x08002869
 8002840:	08002881 	.word	0x08002881
 8002844:	08002881 	.word	0x08002881
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002848:	4b89      	ldr	r3, [pc, #548]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	4a88      	ldr	r2, [pc, #544]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800284e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002852:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002854:	e015      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3304      	adds	r3, #4
 800285a:	2100      	movs	r1, #0
 800285c:	4618      	mov	r0, r3
 800285e:	f001 f98b 	bl	8003b78 <RCCEx_PLL2_Config>
 8002862:	4603      	mov	r3, r0
 8002864:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002866:	e00c      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3324      	adds	r3, #36	; 0x24
 800286c:	2100      	movs	r1, #0
 800286e:	4618      	mov	r0, r3
 8002870:	f001 fa34 	bl	8003cdc <RCCEx_PLL3_Config>
 8002874:	4603      	mov	r3, r0
 8002876:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002878:	e003      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	75fb      	strb	r3, [r7, #23]
      break;
 800287e:	e000      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002882:	7dfb      	ldrb	r3, [r7, #23]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d109      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002888:	4b79      	ldr	r3, [pc, #484]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800288a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800288c:	f023 0207 	bic.w	r2, r3, #7
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002894:	4976      	ldr	r1, [pc, #472]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002896:	4313      	orrs	r3, r2
 8002898:	650b      	str	r3, [r1, #80]	; 0x50
 800289a:	e001      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800289c:	7dfb      	ldrb	r3, [r7, #23]
 800289e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d042      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028b4:	d02b      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80028b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ba:	d825      	bhi.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80028bc:	2bc0      	cmp	r3, #192	; 0xc0
 80028be:	d028      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80028c0:	2bc0      	cmp	r3, #192	; 0xc0
 80028c2:	d821      	bhi.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80028c4:	2b80      	cmp	r3, #128	; 0x80
 80028c6:	d016      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80028c8:	2b80      	cmp	r3, #128	; 0x80
 80028ca:	d81d      	bhi.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d002      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80028d0:	2b40      	cmp	r3, #64	; 0x40
 80028d2:	d007      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80028d4:	e018      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028d6:	4b66      	ldr	r3, [pc, #408]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028da:	4a65      	ldr	r2, [pc, #404]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80028e2:	e017      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3304      	adds	r3, #4
 80028e8:	2100      	movs	r1, #0
 80028ea:	4618      	mov	r0, r3
 80028ec:	f001 f944 	bl	8003b78 <RCCEx_PLL2_Config>
 80028f0:	4603      	mov	r3, r0
 80028f2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80028f4:	e00e      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3324      	adds	r3, #36	; 0x24
 80028fa:	2100      	movs	r1, #0
 80028fc:	4618      	mov	r0, r3
 80028fe:	f001 f9ed 	bl	8003cdc <RCCEx_PLL3_Config>
 8002902:	4603      	mov	r3, r0
 8002904:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002906:	e005      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	75fb      	strb	r3, [r7, #23]
      break;
 800290c:	e002      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800290e:	bf00      	nop
 8002910:	e000      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002912:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002914:	7dfb      	ldrb	r3, [r7, #23]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d109      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800291a:	4b55      	ldr	r3, [pc, #340]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800291c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800291e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002926:	4952      	ldr	r1, [pc, #328]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002928:	4313      	orrs	r3, r2
 800292a:	650b      	str	r3, [r1, #80]	; 0x50
 800292c:	e001      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800292e:	7dfb      	ldrb	r3, [r7, #23]
 8002930:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293a:	2b00      	cmp	r3, #0
 800293c:	d049      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002944:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002948:	d030      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x230>
 800294a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800294e:	d82a      	bhi.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002950:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002954:	d02c      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002956:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800295a:	d824      	bhi.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800295c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002960:	d018      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002962:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002966:	d81e      	bhi.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800296c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002970:	d007      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002972:	e018      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002974:	4b3e      	ldr	r3, [pc, #248]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002978:	4a3d      	ldr	r2, [pc, #244]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800297a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800297e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002980:	e017      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3304      	adds	r3, #4
 8002986:	2100      	movs	r1, #0
 8002988:	4618      	mov	r0, r3
 800298a:	f001 f8f5 	bl	8003b78 <RCCEx_PLL2_Config>
 800298e:	4603      	mov	r3, r0
 8002990:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002992:	e00e      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3324      	adds	r3, #36	; 0x24
 8002998:	2100      	movs	r1, #0
 800299a:	4618      	mov	r0, r3
 800299c:	f001 f99e 	bl	8003cdc <RCCEx_PLL3_Config>
 80029a0:	4603      	mov	r3, r0
 80029a2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029a4:	e005      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	75fb      	strb	r3, [r7, #23]
      break;
 80029aa:	e002      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80029ac:	bf00      	nop
 80029ae:	e000      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80029b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029b2:	7dfb      	ldrb	r3, [r7, #23]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10a      	bne.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80029b8:	4b2d      	ldr	r3, [pc, #180]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029bc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80029c6:	492a      	ldr	r1, [pc, #168]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	658b      	str	r3, [r1, #88]	; 0x58
 80029cc:	e001      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ce:	7dfb      	ldrb	r3, [r7, #23]
 80029d0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d04c      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80029e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029e8:	d030      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80029ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029ee:	d82a      	bhi.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80029f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029f4:	d02c      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80029f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029fa:	d824      	bhi.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80029fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a00:	d018      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002a02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a06:	d81e      	bhi.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a10:	d007      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002a12:	e018      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a14:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a18:	4a15      	ldr	r2, [pc, #84]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a20:	e017      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3304      	adds	r3, #4
 8002a26:	2100      	movs	r1, #0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f001 f8a5 	bl	8003b78 <RCCEx_PLL2_Config>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002a32:	e00e      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3324      	adds	r3, #36	; 0x24
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f001 f94e 	bl	8003cdc <RCCEx_PLL3_Config>
 8002a40:	4603      	mov	r3, r0
 8002a42:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a44:	e005      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	75fb      	strb	r3, [r7, #23]
      break;
 8002a4a:	e002      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002a4c:	bf00      	nop
 8002a4e:	e000      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002a50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a52:	7dfb      	ldrb	r3, [r7, #23]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10d      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002a66:	4902      	ldr	r1, [pc, #8]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	658b      	str	r3, [r1, #88]	; 0x58
 8002a6c:	e004      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002a6e:	bf00      	nop
 8002a70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a74:	7dfb      	ldrb	r3, [r7, #23]
 8002a76:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d032      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a88:	2b30      	cmp	r3, #48	; 0x30
 8002a8a:	d01c      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002a8c:	2b30      	cmp	r3, #48	; 0x30
 8002a8e:	d817      	bhi.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002a90:	2b20      	cmp	r3, #32
 8002a92:	d00c      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002a94:	2b20      	cmp	r3, #32
 8002a96:	d813      	bhi.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d016      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002a9c:	2b10      	cmp	r3, #16
 8002a9e:	d10f      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aa0:	4baf      	ldr	r3, [pc, #700]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	4aae      	ldr	r2, [pc, #696]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aaa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002aac:	e00e      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	2102      	movs	r1, #2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f001 f85f 	bl	8003b78 <RCCEx_PLL2_Config>
 8002aba:	4603      	mov	r3, r0
 8002abc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002abe:	e005      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ac4:	e002      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002ac6:	bf00      	nop
 8002ac8:	e000      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002aca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002acc:	7dfb      	ldrb	r3, [r7, #23]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d109      	bne.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002ad2:	4ba3      	ldr	r3, [pc, #652]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ade:	49a0      	ldr	r1, [pc, #640]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002ae4:	e001      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae6:	7dfb      	ldrb	r3, [r7, #23]
 8002ae8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d047      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002afe:	d030      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8002b00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b04:	d82a      	bhi.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002b06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b0a:	d02c      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002b0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b10:	d824      	bhi.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b16:	d018      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8002b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b1c:	d81e      	bhi.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b26:	d007      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002b28:	e018      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b2a:	4b8d      	ldr	r3, [pc, #564]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2e:	4a8c      	ldr	r2, [pc, #560]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b34:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002b36:	e017      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f001 f81a 	bl	8003b78 <RCCEx_PLL2_Config>
 8002b44:	4603      	mov	r3, r0
 8002b46:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002b48:	e00e      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3324      	adds	r3, #36	; 0x24
 8002b4e:	2100      	movs	r1, #0
 8002b50:	4618      	mov	r0, r3
 8002b52:	f001 f8c3 	bl	8003cdc <RCCEx_PLL3_Config>
 8002b56:	4603      	mov	r3, r0
 8002b58:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002b5a:	e005      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8002b60:	e002      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002b62:	bf00      	nop
 8002b64:	e000      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002b66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b68:	7dfb      	ldrb	r3, [r7, #23]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d109      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002b6e:	4b7c      	ldr	r3, [pc, #496]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b72:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7a:	4979      	ldr	r1, [pc, #484]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	650b      	str	r3, [r1, #80]	; 0x50
 8002b80:	e001      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b82:	7dfb      	ldrb	r3, [r7, #23]
 8002b84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d049      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b9a:	d02e      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8002b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ba0:	d828      	bhi.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002ba2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ba6:	d02a      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x482>
 8002ba8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bac:	d822      	bhi.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002bae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bb2:	d026      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002bb4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bb8:	d81c      	bhi.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002bba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bbe:	d010      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8002bc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bc4:	d816      	bhi.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d01d      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8002bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bce:	d111      	bne.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 ffce 	bl	8003b78 <RCCEx_PLL2_Config>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002be0:	e012      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	3324      	adds	r3, #36	; 0x24
 8002be6:	2101      	movs	r1, #1
 8002be8:	4618      	mov	r0, r3
 8002bea:	f001 f877 	bl	8003cdc <RCCEx_PLL3_Config>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002bf2:	e009      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8002bf8:	e006      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002bfa:	bf00      	nop
 8002bfc:	e004      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002bfe:	bf00      	nop
 8002c00:	e002      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002c02:	bf00      	nop
 8002c04:	e000      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002c06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c08:	7dfb      	ldrb	r3, [r7, #23]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d109      	bne.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002c0e:	4b54      	ldr	r3, [pc, #336]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c12:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c1a:	4951      	ldr	r1, [pc, #324]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	650b      	str	r3, [r1, #80]	; 0x50
 8002c20:	e001      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c22:	7dfb      	ldrb	r3, [r7, #23]
 8002c24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d04b      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002c38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c3c:	d02e      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002c3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c42:	d828      	bhi.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c48:	d02a      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c4e:	d822      	bhi.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002c50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c54:	d026      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002c56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c5a:	d81c      	bhi.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002c5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c60:	d010      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002c62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c66:	d816      	bhi.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d01d      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8002c6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c70:	d111      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3304      	adds	r3, #4
 8002c76:	2101      	movs	r1, #1
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 ff7d 	bl	8003b78 <RCCEx_PLL2_Config>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002c82:	e012      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3324      	adds	r3, #36	; 0x24
 8002c88:	2101      	movs	r1, #1
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f001 f826 	bl	8003cdc <RCCEx_PLL3_Config>
 8002c90:	4603      	mov	r3, r0
 8002c92:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002c94:	e009      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	75fb      	strb	r3, [r7, #23]
      break;
 8002c9a:	e006      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002c9c:	bf00      	nop
 8002c9e:	e004      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002ca0:	bf00      	nop
 8002ca2:	e002      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002ca4:	bf00      	nop
 8002ca6:	e000      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002ca8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002caa:	7dfb      	ldrb	r3, [r7, #23]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10a      	bne.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002cb0:	4b2b      	ldr	r3, [pc, #172]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002cbe:	4928      	ldr	r1, [pc, #160]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	658b      	str	r3, [r1, #88]	; 0x58
 8002cc4:	e001      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc6:	7dfb      	ldrb	r3, [r7, #23]
 8002cc8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d02f      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cde:	d00e      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x582>
 8002ce0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ce4:	d814      	bhi.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d015      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002cea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cee:	d10f      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	4a1a      	ldr	r2, [pc, #104]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002cfc:	e00c      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3304      	adds	r3, #4
 8002d02:	2101      	movs	r1, #1
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 ff37 	bl	8003b78 <RCCEx_PLL2_Config>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002d0e:	e003      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	75fb      	strb	r3, [r7, #23]
      break;
 8002d14:	e000      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8002d16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d18:	7dfb      	ldrb	r3, [r7, #23]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d109      	bne.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d1e:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d2a:	490d      	ldr	r1, [pc, #52]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	650b      	str	r3, [r1, #80]	; 0x50
 8002d30:	e001      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d32:	7dfb      	ldrb	r3, [r7, #23]
 8002d34:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d033      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	d81c      	bhi.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002d4a:	a201      	add	r2, pc, #4	; (adr r2, 8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8002d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d50:	08002d8b 	.word	0x08002d8b
 8002d54:	08002d65 	.word	0x08002d65
 8002d58:	08002d73 	.word	0x08002d73
 8002d5c:	08002d8b 	.word	0x08002d8b
 8002d60:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d64:	4bb8      	ldr	r3, [pc, #736]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	4ab7      	ldr	r2, [pc, #732]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002d70:	e00c      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	3304      	adds	r3, #4
 8002d76:	2102      	movs	r1, #2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 fefd 	bl	8003b78 <RCCEx_PLL2_Config>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002d82:	e003      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	75fb      	strb	r3, [r7, #23]
      break;
 8002d88:	e000      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002d8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d8c:	7dfb      	ldrb	r3, [r7, #23]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d109      	bne.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002d92:	4bad      	ldr	r3, [pc, #692]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d96:	f023 0203 	bic.w	r2, r3, #3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9e:	49aa      	ldr	r1, [pc, #680]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002da4:	e001      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da6:	7dfb      	ldrb	r3, [r7, #23]
 8002da8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 8086 	beq.w	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002db8:	4ba4      	ldr	r3, [pc, #656]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4aa3      	ldr	r2, [pc, #652]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dc4:	f7fe f9ba 	bl	800113c <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dca:	e009      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dcc:	f7fe f9b6 	bl	800113c <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b64      	cmp	r3, #100	; 0x64
 8002dd8:	d902      	bls.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	75fb      	strb	r3, [r7, #23]
        break;
 8002dde:	e005      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002de0:	4b9a      	ldr	r3, [pc, #616]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0ef      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002dec:	7dfb      	ldrb	r3, [r7, #23]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d166      	bne.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002df2:	4b95      	ldr	r3, [pc, #596]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002df4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002dfc:	4053      	eors	r3, r2
 8002dfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d013      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e06:	4b90      	ldr	r3, [pc, #576]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e0e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e10:	4b8d      	ldr	r3, [pc, #564]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e14:	4a8c      	ldr	r2, [pc, #560]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e1a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e1c:	4b8a      	ldr	r3, [pc, #552]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e20:	4a89      	ldr	r2, [pc, #548]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e26:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002e28:	4a87      	ldr	r2, [pc, #540]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e38:	d115      	bne.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3a:	f7fe f97f 	bl	800113c <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e40:	e00b      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e42:	f7fe f97b 	bl	800113c <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d902      	bls.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	75fb      	strb	r3, [r7, #23]
            break;
 8002e58:	e005      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e5a:	4b7b      	ldr	r3, [pc, #492]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0ed      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002e66:	7dfb      	ldrb	r3, [r7, #23]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d126      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e7a:	d10d      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002e7c:	4b72      	ldr	r3, [pc, #456]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e8a:	0919      	lsrs	r1, r3, #4
 8002e8c:	4b70      	ldr	r3, [pc, #448]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8002e8e:	400b      	ands	r3, r1
 8002e90:	496d      	ldr	r1, [pc, #436]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	610b      	str	r3, [r1, #16]
 8002e96:	e005      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002e98:	4b6b      	ldr	r3, [pc, #428]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	4a6a      	ldr	r2, [pc, #424]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e9e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002ea2:	6113      	str	r3, [r2, #16]
 8002ea4:	4b68      	ldr	r3, [pc, #416]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ea6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb2:	4965      	ldr	r1, [pc, #404]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	670b      	str	r3, [r1, #112]	; 0x70
 8002eb8:	e004      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002eba:	7dfb      	ldrb	r3, [r7, #23]
 8002ebc:	75bb      	strb	r3, [r7, #22]
 8002ebe:	e001      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec0:	7dfb      	ldrb	r3, [r7, #23]
 8002ec2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d07e      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ed4:	2b28      	cmp	r3, #40	; 0x28
 8002ed6:	d867      	bhi.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002ed8:	a201      	add	r2, pc, #4	; (adr r2, 8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ede:	bf00      	nop
 8002ee0:	08002faf 	.word	0x08002faf
 8002ee4:	08002fa9 	.word	0x08002fa9
 8002ee8:	08002fa9 	.word	0x08002fa9
 8002eec:	08002fa9 	.word	0x08002fa9
 8002ef0:	08002fa9 	.word	0x08002fa9
 8002ef4:	08002fa9 	.word	0x08002fa9
 8002ef8:	08002fa9 	.word	0x08002fa9
 8002efc:	08002fa9 	.word	0x08002fa9
 8002f00:	08002f85 	.word	0x08002f85
 8002f04:	08002fa9 	.word	0x08002fa9
 8002f08:	08002fa9 	.word	0x08002fa9
 8002f0c:	08002fa9 	.word	0x08002fa9
 8002f10:	08002fa9 	.word	0x08002fa9
 8002f14:	08002fa9 	.word	0x08002fa9
 8002f18:	08002fa9 	.word	0x08002fa9
 8002f1c:	08002fa9 	.word	0x08002fa9
 8002f20:	08002f97 	.word	0x08002f97
 8002f24:	08002fa9 	.word	0x08002fa9
 8002f28:	08002fa9 	.word	0x08002fa9
 8002f2c:	08002fa9 	.word	0x08002fa9
 8002f30:	08002fa9 	.word	0x08002fa9
 8002f34:	08002fa9 	.word	0x08002fa9
 8002f38:	08002fa9 	.word	0x08002fa9
 8002f3c:	08002fa9 	.word	0x08002fa9
 8002f40:	08002faf 	.word	0x08002faf
 8002f44:	08002fa9 	.word	0x08002fa9
 8002f48:	08002fa9 	.word	0x08002fa9
 8002f4c:	08002fa9 	.word	0x08002fa9
 8002f50:	08002fa9 	.word	0x08002fa9
 8002f54:	08002fa9 	.word	0x08002fa9
 8002f58:	08002fa9 	.word	0x08002fa9
 8002f5c:	08002fa9 	.word	0x08002fa9
 8002f60:	08002faf 	.word	0x08002faf
 8002f64:	08002fa9 	.word	0x08002fa9
 8002f68:	08002fa9 	.word	0x08002fa9
 8002f6c:	08002fa9 	.word	0x08002fa9
 8002f70:	08002fa9 	.word	0x08002fa9
 8002f74:	08002fa9 	.word	0x08002fa9
 8002f78:	08002fa9 	.word	0x08002fa9
 8002f7c:	08002fa9 	.word	0x08002fa9
 8002f80:	08002faf 	.word	0x08002faf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3304      	adds	r3, #4
 8002f88:	2101      	movs	r1, #1
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fdf4 	bl	8003b78 <RCCEx_PLL2_Config>
 8002f90:	4603      	mov	r3, r0
 8002f92:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002f94:	e00c      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3324      	adds	r3, #36	; 0x24
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 fe9d 	bl	8003cdc <RCCEx_PLL3_Config>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002fa6:	e003      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	75fb      	strb	r3, [r7, #23]
      break;
 8002fac:	e000      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8002fae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fb0:	7dfb      	ldrb	r3, [r7, #23]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d109      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002fb6:	4b24      	ldr	r3, [pc, #144]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fba:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fc2:	4921      	ldr	r1, [pc, #132]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	654b      	str	r3, [r1, #84]	; 0x54
 8002fc8:	e001      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fca:	7dfb      	ldrb	r3, [r7, #23]
 8002fcc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d03e      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fde:	2b05      	cmp	r3, #5
 8002fe0:	d820      	bhi.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8002fe2:	a201      	add	r2, pc, #4	; (adr r2, 8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8002fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe8:	0800302b 	.word	0x0800302b
 8002fec:	08003001 	.word	0x08003001
 8002ff0:	08003013 	.word	0x08003013
 8002ff4:	0800302b 	.word	0x0800302b
 8002ff8:	0800302b 	.word	0x0800302b
 8002ffc:	0800302b 	.word	0x0800302b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3304      	adds	r3, #4
 8003004:	2101      	movs	r1, #1
 8003006:	4618      	mov	r0, r3
 8003008:	f000 fdb6 	bl	8003b78 <RCCEx_PLL2_Config>
 800300c:	4603      	mov	r3, r0
 800300e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003010:	e00c      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3324      	adds	r3, #36	; 0x24
 8003016:	2101      	movs	r1, #1
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fe5f 	bl	8003cdc <RCCEx_PLL3_Config>
 800301e:	4603      	mov	r3, r0
 8003020:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003022:	e003      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	75fb      	strb	r3, [r7, #23]
      break;
 8003028:	e000      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800302a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800302c:	7dfb      	ldrb	r3, [r7, #23]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d110      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003032:	4b05      	ldr	r3, [pc, #20]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003036:	f023 0207 	bic.w	r2, r3, #7
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800303e:	4902      	ldr	r1, [pc, #8]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003040:	4313      	orrs	r3, r2
 8003042:	654b      	str	r3, [r1, #84]	; 0x54
 8003044:	e008      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003046:	bf00      	nop
 8003048:	58024400 	.word	0x58024400
 800304c:	58024800 	.word	0x58024800
 8003050:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003054:	7dfb      	ldrb	r3, [r7, #23]
 8003056:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d039      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306a:	2b05      	cmp	r3, #5
 800306c:	d820      	bhi.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800306e:	a201      	add	r2, pc, #4	; (adr r2, 8003074 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003074:	080030b7 	.word	0x080030b7
 8003078:	0800308d 	.word	0x0800308d
 800307c:	0800309f 	.word	0x0800309f
 8003080:	080030b7 	.word	0x080030b7
 8003084:	080030b7 	.word	0x080030b7
 8003088:	080030b7 	.word	0x080030b7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3304      	adds	r3, #4
 8003090:	2101      	movs	r1, #1
 8003092:	4618      	mov	r0, r3
 8003094:	f000 fd70 	bl	8003b78 <RCCEx_PLL2_Config>
 8003098:	4603      	mov	r3, r0
 800309a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800309c:	e00c      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3324      	adds	r3, #36	; 0x24
 80030a2:	2101      	movs	r1, #1
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 fe19 	bl	8003cdc <RCCEx_PLL3_Config>
 80030aa:	4603      	mov	r3, r0
 80030ac:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80030ae:	e003      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	75fb      	strb	r3, [r7, #23]
      break;
 80030b4:	e000      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80030b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030b8:	7dfb      	ldrb	r3, [r7, #23]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10a      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030be:	4bb7      	ldr	r3, [pc, #732]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80030c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c2:	f023 0207 	bic.w	r2, r3, #7
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030cc:	49b3      	ldr	r1, [pc, #716]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	658b      	str	r3, [r1, #88]	; 0x58
 80030d2:	e001      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d4:	7dfb      	ldrb	r3, [r7, #23]
 80030d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0320 	and.w	r3, r3, #32
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d04b      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030ee:	d02e      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80030f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030f4:	d828      	bhi.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80030f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030fa:	d02a      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80030fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003100:	d822      	bhi.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003102:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003106:	d026      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003108:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800310c:	d81c      	bhi.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800310e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003112:	d010      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003114:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003118:	d816      	bhi.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800311a:	2b00      	cmp	r3, #0
 800311c:	d01d      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800311e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003122:	d111      	bne.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3304      	adds	r3, #4
 8003128:	2100      	movs	r1, #0
 800312a:	4618      	mov	r0, r3
 800312c:	f000 fd24 	bl	8003b78 <RCCEx_PLL2_Config>
 8003130:	4603      	mov	r3, r0
 8003132:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003134:	e012      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3324      	adds	r3, #36	; 0x24
 800313a:	2102      	movs	r1, #2
 800313c:	4618      	mov	r0, r3
 800313e:	f000 fdcd 	bl	8003cdc <RCCEx_PLL3_Config>
 8003142:	4603      	mov	r3, r0
 8003144:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003146:	e009      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	75fb      	strb	r3, [r7, #23]
      break;
 800314c:	e006      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800314e:	bf00      	nop
 8003150:	e004      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003152:	bf00      	nop
 8003154:	e002      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003156:	bf00      	nop
 8003158:	e000      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800315a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800315c:	7dfb      	ldrb	r3, [r7, #23]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10a      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003162:	4b8e      	ldr	r3, [pc, #568]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003166:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003170:	498a      	ldr	r1, [pc, #552]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003172:	4313      	orrs	r3, r2
 8003174:	654b      	str	r3, [r1, #84]	; 0x54
 8003176:	e001      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003178:	7dfb      	ldrb	r3, [r7, #23]
 800317a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003184:	2b00      	cmp	r3, #0
 8003186:	d04b      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800318e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003192:	d02e      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003194:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003198:	d828      	bhi.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800319a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800319e:	d02a      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80031a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a4:	d822      	bhi.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80031a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031aa:	d026      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80031ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031b0:	d81c      	bhi.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80031b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031b6:	d010      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80031b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031bc:	d816      	bhi.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d01d      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80031c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c6:	d111      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3304      	adds	r3, #4
 80031cc:	2100      	movs	r1, #0
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 fcd2 	bl	8003b78 <RCCEx_PLL2_Config>
 80031d4:	4603      	mov	r3, r0
 80031d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80031d8:	e012      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3324      	adds	r3, #36	; 0x24
 80031de:	2102      	movs	r1, #2
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 fd7b 	bl	8003cdc <RCCEx_PLL3_Config>
 80031e6:	4603      	mov	r3, r0
 80031e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80031ea:	e009      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	75fb      	strb	r3, [r7, #23]
      break;
 80031f0:	e006      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80031f2:	bf00      	nop
 80031f4:	e004      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80031f6:	bf00      	nop
 80031f8:	e002      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80031fa:	bf00      	nop
 80031fc:	e000      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80031fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003200:	7dfb      	ldrb	r3, [r7, #23]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10a      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003206:	4b65      	ldr	r3, [pc, #404]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003214:	4961      	ldr	r1, [pc, #388]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003216:	4313      	orrs	r3, r2
 8003218:	658b      	str	r3, [r1, #88]	; 0x58
 800321a:	e001      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800321c:	7dfb      	ldrb	r3, [r7, #23]
 800321e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003228:	2b00      	cmp	r3, #0
 800322a:	d04b      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003232:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003236:	d02e      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003238:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800323c:	d828      	bhi.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800323e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003242:	d02a      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003248:	d822      	bhi.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800324a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800324e:	d026      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003250:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003254:	d81c      	bhi.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003256:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800325a:	d010      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800325c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003260:	d816      	bhi.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003262:	2b00      	cmp	r3, #0
 8003264:	d01d      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800326a:	d111      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3304      	adds	r3, #4
 8003270:	2100      	movs	r1, #0
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fc80 	bl	8003b78 <RCCEx_PLL2_Config>
 8003278:	4603      	mov	r3, r0
 800327a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800327c:	e012      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	3324      	adds	r3, #36	; 0x24
 8003282:	2102      	movs	r1, #2
 8003284:	4618      	mov	r0, r3
 8003286:	f000 fd29 	bl	8003cdc <RCCEx_PLL3_Config>
 800328a:	4603      	mov	r3, r0
 800328c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800328e:	e009      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	75fb      	strb	r3, [r7, #23]
      break;
 8003294:	e006      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003296:	bf00      	nop
 8003298:	e004      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800329a:	bf00      	nop
 800329c:	e002      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800329e:	bf00      	nop
 80032a0:	e000      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80032a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032a4:	7dfb      	ldrb	r3, [r7, #23]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10a      	bne.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80032aa:	4b3c      	ldr	r3, [pc, #240]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80032ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032b8:	4938      	ldr	r1, [pc, #224]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	658b      	str	r3, [r1, #88]	; 0x58
 80032be:	e001      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c0:	7dfb      	ldrb	r3, [r7, #23]
 80032c2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0308 	and.w	r3, r3, #8
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d01a      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032da:	d10a      	bne.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3324      	adds	r3, #36	; 0x24
 80032e0:	2102      	movs	r1, #2
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fcfa 	bl	8003cdc <RCCEx_PLL3_Config>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80032f2:	4b2a      	ldr	r3, [pc, #168]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80032f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003300:	4926      	ldr	r1, [pc, #152]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003302:	4313      	orrs	r3, r2
 8003304:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0310 	and.w	r3, r3, #16
 800330e:	2b00      	cmp	r3, #0
 8003310:	d01a      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800331c:	d10a      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3324      	adds	r3, #36	; 0x24
 8003322:	2102      	movs	r1, #2
 8003324:	4618      	mov	r0, r3
 8003326:	f000 fcd9 	bl	8003cdc <RCCEx_PLL3_Config>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003334:	4b19      	ldr	r3, [pc, #100]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003338:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003342:	4916      	ldr	r1, [pc, #88]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003344:	4313      	orrs	r3, r2
 8003346:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d036      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800335a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800335e:	d01f      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003360:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003364:	d817      	bhi.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800336a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336e:	d009      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003370:	e011      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3304      	adds	r3, #4
 8003376:	2100      	movs	r1, #0
 8003378:	4618      	mov	r0, r3
 800337a:	f000 fbfd 	bl	8003b78 <RCCEx_PLL2_Config>
 800337e:	4603      	mov	r3, r0
 8003380:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003382:	e00e      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3324      	adds	r3, #36	; 0x24
 8003388:	2102      	movs	r1, #2
 800338a:	4618      	mov	r0, r3
 800338c:	f000 fca6 	bl	8003cdc <RCCEx_PLL3_Config>
 8003390:	4603      	mov	r3, r0
 8003392:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003394:	e005      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	75fb      	strb	r3, [r7, #23]
      break;
 800339a:	e002      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800339c:	58024400 	.word	0x58024400
      break;
 80033a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033a2:	7dfb      	ldrb	r3, [r7, #23]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10a      	bne.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033a8:	4b93      	ldr	r3, [pc, #588]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80033aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80033b6:	4990      	ldr	r1, [pc, #576]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	658b      	str	r3, [r1, #88]	; 0x58
 80033bc:	e001      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033be:	7dfb      	ldrb	r3, [r7, #23]
 80033c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d033      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033d8:	d01c      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80033da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033de:	d816      	bhi.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80033e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033e4:	d003      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80033e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033ea:	d007      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80033ec:	e00f      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033ee:	4b82      	ldr	r3, [pc, #520]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80033f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f2:	4a81      	ldr	r2, [pc, #516]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80033f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80033fa:	e00c      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3324      	adds	r3, #36	; 0x24
 8003400:	2101      	movs	r1, #1
 8003402:	4618      	mov	r0, r3
 8003404:	f000 fc6a 	bl	8003cdc <RCCEx_PLL3_Config>
 8003408:	4603      	mov	r3, r0
 800340a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800340c:	e003      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	75fb      	strb	r3, [r7, #23]
      break;
 8003412:	e000      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8003414:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003416:	7dfb      	ldrb	r3, [r7, #23]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10a      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800341c:	4b76      	ldr	r3, [pc, #472]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800341e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003420:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800342a:	4973      	ldr	r1, [pc, #460]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800342c:	4313      	orrs	r3, r2
 800342e:	654b      	str	r3, [r1, #84]	; 0x54
 8003430:	e001      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003432:	7dfb      	ldrb	r3, [r7, #23]
 8003434:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d029      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800344a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800344e:	d007      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8003450:	e00f      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003452:	4b69      	ldr	r3, [pc, #420]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003456:	4a68      	ldr	r2, [pc, #416]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800345c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800345e:	e00b      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3304      	adds	r3, #4
 8003464:	2102      	movs	r1, #2
 8003466:	4618      	mov	r0, r3
 8003468:	f000 fb86 	bl	8003b78 <RCCEx_PLL2_Config>
 800346c:	4603      	mov	r3, r0
 800346e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003470:	e002      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	75fb      	strb	r3, [r7, #23]
      break;
 8003476:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003478:	7dfb      	ldrb	r3, [r7, #23]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d109      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800347e:	4b5e      	ldr	r3, [pc, #376]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003482:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348a:	495b      	ldr	r1, [pc, #364]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800348c:	4313      	orrs	r3, r2
 800348e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003490:	e001      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003492:	7dfb      	ldrb	r3, [r7, #23]
 8003494:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3324      	adds	r3, #36	; 0x24
 80034a6:	2102      	movs	r1, #2
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 fc17 	bl	8003cdc <RCCEx_PLL3_Config>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d030      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034cc:	d017      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80034ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034d2:	d811      	bhi.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80034d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034d8:	d013      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80034da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034de:	d80b      	bhi.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d010      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80034e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034e8:	d106      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ea:	4b43      	ldr	r3, [pc, #268]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	4a42      	ldr	r2, [pc, #264]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80034f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80034f6:	e007      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	75fb      	strb	r3, [r7, #23]
      break;
 80034fc:	e004      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80034fe:	bf00      	nop
 8003500:	e002      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003502:	bf00      	nop
 8003504:	e000      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003506:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003508:	7dfb      	ldrb	r3, [r7, #23]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d109      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800350e:	4b3a      	ldr	r3, [pc, #232]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003512:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800351a:	4937      	ldr	r1, [pc, #220]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800351c:	4313      	orrs	r3, r2
 800351e:	654b      	str	r3, [r1, #84]	; 0x54
 8003520:	e001      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003522:	7dfb      	ldrb	r3, [r7, #23]
 8003524:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d008      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003532:	4b31      	ldr	r3, [pc, #196]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003536:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353e:	492e      	ldr	r1, [pc, #184]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003540:	4313      	orrs	r3, r2
 8003542:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d009      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003550:	4b29      	ldr	r3, [pc, #164]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800355e:	4926      	ldr	r1, [pc, #152]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003560:	4313      	orrs	r3, r2
 8003562:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003570:	4b21      	ldr	r3, [pc, #132]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003574:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800357c:	491e      	ldr	r1, [pc, #120]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800357e:	4313      	orrs	r3, r2
 8003580:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00d      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800358e:	4b1a      	ldr	r3, [pc, #104]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	4a19      	ldr	r2, [pc, #100]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003594:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003598:	6113      	str	r3, [r2, #16]
 800359a:	4b17      	ldr	r3, [pc, #92]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800359c:	691a      	ldr	r2, [r3, #16]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80035a4:	4914      	ldr	r1, [pc, #80]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	da08      	bge.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80035b2:	4b11      	ldr	r3, [pc, #68]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035be:	490e      	ldr	r1, [pc, #56]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d009      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035d0:	4b09      	ldr	r3, [pc, #36]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035de:	4906      	ldr	r1, [pc, #24]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80035e4:	7dbb      	ldrb	r3, [r7, #22]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	e000      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	58024400 	.word	0x58024400

080035fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003600:	f7ff f860 	bl	80026c4 <HAL_RCC_GetHCLKFreq>
 8003604:	4602      	mov	r2, r0
 8003606:	4b06      	ldr	r3, [pc, #24]	; (8003620 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	091b      	lsrs	r3, r3, #4
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	4904      	ldr	r1, [pc, #16]	; (8003624 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003612:	5ccb      	ldrb	r3, [r1, r3]
 8003614:	f003 031f 	and.w	r3, r3, #31
 8003618:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800361c:	4618      	mov	r0, r3
 800361e:	bd80      	pop	{r7, pc}
 8003620:	58024400 	.word	0x58024400
 8003624:	08008ac0 	.word	0x08008ac0

08003628 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003628:	b480      	push	{r7}
 800362a:	b089      	sub	sp, #36	; 0x24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003630:	4ba1      	ldr	r3, [pc, #644]	; (80038b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003634:	f003 0303 	and.w	r3, r3, #3
 8003638:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800363a:	4b9f      	ldr	r3, [pc, #636]	; (80038b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800363c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363e:	0b1b      	lsrs	r3, r3, #12
 8003640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003644:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003646:	4b9c      	ldr	r3, [pc, #624]	; (80038b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	091b      	lsrs	r3, r3, #4
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003652:	4b99      	ldr	r3, [pc, #612]	; (80038b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003656:	08db      	lsrs	r3, r3, #3
 8003658:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	fb02 f303 	mul.w	r3, r2, r3
 8003662:	ee07 3a90 	vmov	s15, r3
 8003666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800366a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 8111 	beq.w	8003898 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	2b02      	cmp	r3, #2
 800367a:	f000 8083 	beq.w	8003784 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	2b02      	cmp	r3, #2
 8003682:	f200 80a1 	bhi.w	80037c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d056      	beq.n	8003740 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003692:	e099      	b.n	80037c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003694:	4b88      	ldr	r3, [pc, #544]	; (80038b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	d02d      	beq.n	80036fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80036a0:	4b85      	ldr	r3, [pc, #532]	; (80038b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	08db      	lsrs	r3, r3, #3
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	4a84      	ldr	r2, [pc, #528]	; (80038bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80036ac:	fa22 f303 	lsr.w	r3, r2, r3
 80036b0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	ee07 3a90 	vmov	s15, r3
 80036b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	ee07 3a90 	vmov	s15, r3
 80036c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ca:	4b7b      	ldr	r3, [pc, #492]	; (80038b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d2:	ee07 3a90 	vmov	s15, r3
 80036d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036da:	ed97 6a03 	vldr	s12, [r7, #12]
 80036de:	eddf 5a78 	vldr	s11, [pc, #480]	; 80038c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80036e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036f6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80036fa:	e087      	b.n	800380c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	ee07 3a90 	vmov	s15, r3
 8003702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003706:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80038c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800370a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800370e:	4b6a      	ldr	r3, [pc, #424]	; (80038b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003716:	ee07 3a90 	vmov	s15, r3
 800371a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800371e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003722:	eddf 5a67 	vldr	s11, [pc, #412]	; 80038c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800372a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800372e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800373a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800373e:	e065      	b.n	800380c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	ee07 3a90 	vmov	s15, r3
 8003746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800374a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80038c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800374e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003752:	4b59      	ldr	r3, [pc, #356]	; (80038b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800375a:	ee07 3a90 	vmov	s15, r3
 800375e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003762:	ed97 6a03 	vldr	s12, [r7, #12]
 8003766:	eddf 5a56 	vldr	s11, [pc, #344]	; 80038c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800376a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800376e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800377a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800377e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003782:	e043      	b.n	800380c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	ee07 3a90 	vmov	s15, r3
 800378a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800378e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80038cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003796:	4b48      	ldr	r3, [pc, #288]	; (80038b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800379e:	ee07 3a90 	vmov	s15, r3
 80037a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80037aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 80038c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80037ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037c6:	e021      	b.n	800380c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	ee07 3a90 	vmov	s15, r3
 80037ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80038c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80037d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037da:	4b37      	ldr	r3, [pc, #220]	; (80038b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e2:	ee07 3a90 	vmov	s15, r3
 80037e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80037ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 80038c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80037f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003806:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800380a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800380c:	4b2a      	ldr	r3, [pc, #168]	; (80038b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800380e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003810:	0a5b      	lsrs	r3, r3, #9
 8003812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003816:	ee07 3a90 	vmov	s15, r3
 800381a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800381e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003822:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003826:	edd7 6a07 	vldr	s13, [r7, #28]
 800382a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800382e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003832:	ee17 2a90 	vmov	r2, s15
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800383a:	4b1f      	ldr	r3, [pc, #124]	; (80038b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800383c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383e:	0c1b      	lsrs	r3, r3, #16
 8003840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003844:	ee07 3a90 	vmov	s15, r3
 8003848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800384c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003850:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003854:	edd7 6a07 	vldr	s13, [r7, #28]
 8003858:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800385c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003860:	ee17 2a90 	vmov	r2, s15
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003868:	4b13      	ldr	r3, [pc, #76]	; (80038b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800386a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386c:	0e1b      	lsrs	r3, r3, #24
 800386e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003872:	ee07 3a90 	vmov	s15, r3
 8003876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800387a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800387e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003882:	edd7 6a07 	vldr	s13, [r7, #28]
 8003886:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800388a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800388e:	ee17 2a90 	vmov	r2, s15
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003896:	e008      	b.n	80038aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	609a      	str	r2, [r3, #8]
}
 80038aa:	bf00      	nop
 80038ac:	3724      	adds	r7, #36	; 0x24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	58024400 	.word	0x58024400
 80038bc:	03d09000 	.word	0x03d09000
 80038c0:	46000000 	.word	0x46000000
 80038c4:	4c742400 	.word	0x4c742400
 80038c8:	4a742400 	.word	0x4a742400
 80038cc:	4bbebc20 	.word	0x4bbebc20

080038d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b089      	sub	sp, #36	; 0x24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038d8:	4ba1      	ldr	r3, [pc, #644]	; (8003b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038dc:	f003 0303 	and.w	r3, r3, #3
 80038e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80038e2:	4b9f      	ldr	r3, [pc, #636]	; (8003b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e6:	0d1b      	lsrs	r3, r3, #20
 80038e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80038ee:	4b9c      	ldr	r3, [pc, #624]	; (8003b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f2:	0a1b      	lsrs	r3, r3, #8
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80038fa:	4b99      	ldr	r3, [pc, #612]	; (8003b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	08db      	lsrs	r3, r3, #3
 8003900:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	fb02 f303 	mul.w	r3, r2, r3
 800390a:	ee07 3a90 	vmov	s15, r3
 800390e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003912:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 8111 	beq.w	8003b40 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	2b02      	cmp	r3, #2
 8003922:	f000 8083 	beq.w	8003a2c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	2b02      	cmp	r3, #2
 800392a:	f200 80a1 	bhi.w	8003a70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d056      	beq.n	80039e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800393a:	e099      	b.n	8003a70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800393c:	4b88      	ldr	r3, [pc, #544]	; (8003b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0320 	and.w	r3, r3, #32
 8003944:	2b00      	cmp	r3, #0
 8003946:	d02d      	beq.n	80039a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003948:	4b85      	ldr	r3, [pc, #532]	; (8003b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	08db      	lsrs	r3, r3, #3
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	4a84      	ldr	r2, [pc, #528]	; (8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003954:	fa22 f303 	lsr.w	r3, r2, r3
 8003958:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	ee07 3a90 	vmov	s15, r3
 8003960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	ee07 3a90 	vmov	s15, r3
 800396a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800396e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003972:	4b7b      	ldr	r3, [pc, #492]	; (8003b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800397a:	ee07 3a90 	vmov	s15, r3
 800397e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003982:	ed97 6a03 	vldr	s12, [r7, #12]
 8003986:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003b68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800398a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800398e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800399a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80039a2:	e087      	b.n	8003ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	ee07 3a90 	vmov	s15, r3
 80039aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003b6c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80039b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039b6:	4b6a      	ldr	r3, [pc, #424]	; (8003b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039be:	ee07 3a90 	vmov	s15, r3
 80039c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80039ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003b68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80039ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039e6:	e065      	b.n	8003ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	ee07 3a90 	vmov	s15, r3
 80039ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003b70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80039f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039fa:	4b59      	ldr	r3, [pc, #356]	; (8003b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a02:	ee07 3a90 	vmov	s15, r3
 8003a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003b68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a2a:	e043      	b.n	8003ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	ee07 3a90 	vmov	s15, r3
 8003a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003b74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a3e:	4b48      	ldr	r3, [pc, #288]	; (8003b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a46:	ee07 3a90 	vmov	s15, r3
 8003a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a52:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003b68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a6e:	e021      	b.n	8003ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	ee07 3a90 	vmov	s15, r3
 8003a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003b70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a82:	4b37      	ldr	r3, [pc, #220]	; (8003b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a8a:	ee07 3a90 	vmov	s15, r3
 8003a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a96:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003b68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ab2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003ab4:	4b2a      	ldr	r3, [pc, #168]	; (8003b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	0a5b      	lsrs	r3, r3, #9
 8003aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003abe:	ee07 3a90 	vmov	s15, r3
 8003ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ac6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003aca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ace:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ada:	ee17 2a90 	vmov	r2, s15
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003ae2:	4b1f      	ldr	r3, [pc, #124]	; (8003b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	0c1b      	lsrs	r3, r3, #16
 8003ae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aec:	ee07 3a90 	vmov	s15, r3
 8003af0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003af8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003afc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b08:	ee17 2a90 	vmov	r2, s15
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003b10:	4b13      	ldr	r3, [pc, #76]	; (8003b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	0e1b      	lsrs	r3, r3, #24
 8003b16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b1a:	ee07 3a90 	vmov	s15, r3
 8003b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b36:	ee17 2a90 	vmov	r2, s15
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003b3e:	e008      	b.n	8003b52 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	609a      	str	r2, [r3, #8]
}
 8003b52:	bf00      	nop
 8003b54:	3724      	adds	r7, #36	; 0x24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	58024400 	.word	0x58024400
 8003b64:	03d09000 	.word	0x03d09000
 8003b68:	46000000 	.word	0x46000000
 8003b6c:	4c742400 	.word	0x4c742400
 8003b70:	4a742400 	.word	0x4a742400
 8003b74:	4bbebc20 	.word	0x4bbebc20

08003b78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b86:	4b53      	ldr	r3, [pc, #332]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	2b03      	cmp	r3, #3
 8003b90:	d101      	bne.n	8003b96 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e099      	b.n	8003cca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003b96:	4b4f      	ldr	r3, [pc, #316]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a4e      	ldr	r2, [pc, #312]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003b9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ba2:	f7fd facb 	bl	800113c <HAL_GetTick>
 8003ba6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ba8:	e008      	b.n	8003bbc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003baa:	f7fd fac7 	bl	800113c <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e086      	b.n	8003cca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003bbc:	4b45      	ldr	r3, [pc, #276]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1f0      	bne.n	8003baa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003bc8:	4b42      	ldr	r3, [pc, #264]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bcc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	031b      	lsls	r3, r3, #12
 8003bd6:	493f      	ldr	r1, [pc, #252]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	628b      	str	r3, [r1, #40]	; 0x28
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	3b01      	subs	r3, #1
 8003be2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	025b      	lsls	r3, r3, #9
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	041b      	lsls	r3, r3, #16
 8003bfa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	3b01      	subs	r3, #1
 8003c06:	061b      	lsls	r3, r3, #24
 8003c08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c0c:	4931      	ldr	r1, [pc, #196]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003c12:	4b30      	ldr	r3, [pc, #192]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	492d      	ldr	r1, [pc, #180]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003c24:	4b2b      	ldr	r3, [pc, #172]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c28:	f023 0220 	bic.w	r2, r3, #32
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	4928      	ldr	r1, [pc, #160]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003c36:	4b27      	ldr	r3, [pc, #156]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3a:	4a26      	ldr	r2, [pc, #152]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c3c:	f023 0310 	bic.w	r3, r3, #16
 8003c40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003c42:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c46:	4b24      	ldr	r3, [pc, #144]	; (8003cd8 <RCCEx_PLL2_Config+0x160>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	69d2      	ldr	r2, [r2, #28]
 8003c4e:	00d2      	lsls	r2, r2, #3
 8003c50:	4920      	ldr	r1, [pc, #128]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003c56:	4b1f      	ldr	r3, [pc, #124]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5a:	4a1e      	ldr	r2, [pc, #120]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c5c:	f043 0310 	orr.w	r3, r3, #16
 8003c60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d106      	bne.n	8003c76 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003c68:	4b1a      	ldr	r3, [pc, #104]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	4a19      	ldr	r2, [pc, #100]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c74:	e00f      	b.n	8003c96 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d106      	bne.n	8003c8a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003c7c:	4b15      	ldr	r3, [pc, #84]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c80:	4a14      	ldr	r2, [pc, #80]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c88:	e005      	b.n	8003c96 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003c8a:	4b12      	ldr	r3, [pc, #72]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8e:	4a11      	ldr	r2, [pc, #68]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003c96:	4b0f      	ldr	r3, [pc, #60]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a0e      	ldr	r2, [pc, #56]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ca2:	f7fd fa4b 	bl	800113c <HAL_GetTick>
 8003ca6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ca8:	e008      	b.n	8003cbc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003caa:	f7fd fa47 	bl	800113c <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e006      	b.n	8003cca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003cbc:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0f0      	beq.n	8003caa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	58024400 	.word	0x58024400
 8003cd8:	ffff0007 	.word	0xffff0007

08003cdc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003cea:	4b53      	ldr	r3, [pc, #332]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d101      	bne.n	8003cfa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e099      	b.n	8003e2e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003cfa:	4b4f      	ldr	r3, [pc, #316]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a4e      	ldr	r2, [pc, #312]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d06:	f7fd fa19 	bl	800113c <HAL_GetTick>
 8003d0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d0c:	e008      	b.n	8003d20 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003d0e:	f7fd fa15 	bl	800113c <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e086      	b.n	8003e2e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d20:	4b45      	ldr	r3, [pc, #276]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1f0      	bne.n	8003d0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003d2c:	4b42      	ldr	r3, [pc, #264]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	051b      	lsls	r3, r3, #20
 8003d3a:	493f      	ldr	r1, [pc, #252]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	628b      	str	r3, [r1, #40]	; 0x28
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	3b01      	subs	r3, #1
 8003d46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	025b      	lsls	r3, r3, #9
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	431a      	orrs	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	041b      	lsls	r3, r3, #16
 8003d5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	061b      	lsls	r3, r3, #24
 8003d6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d70:	4931      	ldr	r1, [pc, #196]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003d76:	4b30      	ldr	r3, [pc, #192]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	492d      	ldr	r1, [pc, #180]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003d88:	4b2b      	ldr	r3, [pc, #172]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	4928      	ldr	r1, [pc, #160]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003d9a:	4b27      	ldr	r3, [pc, #156]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9e:	4a26      	ldr	r2, [pc, #152]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003da4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003da6:	4b24      	ldr	r3, [pc, #144]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003daa:	4b24      	ldr	r3, [pc, #144]	; (8003e3c <RCCEx_PLL3_Config+0x160>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	69d2      	ldr	r2, [r2, #28]
 8003db2:	00d2      	lsls	r2, r2, #3
 8003db4:	4920      	ldr	r1, [pc, #128]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003dba:	4b1f      	ldr	r3, [pc, #124]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	4a1e      	ldr	r2, [pc, #120]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d106      	bne.n	8003dda <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003dcc:	4b1a      	ldr	r3, [pc, #104]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd0:	4a19      	ldr	r2, [pc, #100]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003dd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003dd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003dd8:	e00f      	b.n	8003dfa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d106      	bne.n	8003dee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003de0:	4b15      	ldr	r3, [pc, #84]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	4a14      	ldr	r2, [pc, #80]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003de6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003dea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003dec:	e005      	b.n	8003dfa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003dee:	4b12      	ldr	r3, [pc, #72]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df2:	4a11      	ldr	r2, [pc, #68]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003df4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003df8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003dfa:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a0e      	ldr	r2, [pc, #56]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e06:	f7fd f999 	bl	800113c <HAL_GetTick>
 8003e0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e0c:	e008      	b.n	8003e20 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003e0e:	f7fd f995 	bl	800113c <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e006      	b.n	8003e2e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e20:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0f0      	beq.n	8003e0e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	58024400 	.word	0x58024400
 8003e3c:	ffff0007 	.word	0xffff0007

08003e40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e042      	b.n	8003ed8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d106      	bne.n	8003e6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f7fc fec7 	bl	8000bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2224      	movs	r2, #36	; 0x24
 8003e6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0201 	bic.w	r2, r2, #1
 8003e80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f82c 	bl	8003ee0 <UART_SetConfig>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e022      	b.n	8003ed8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 fd80 	bl	80049a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ebe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0201 	orr.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 fe07 	bl	8004ae4 <UART_CheckIdleState>
 8003ed6:	4603      	mov	r3, r0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ee0:	b5b0      	push	{r4, r5, r7, lr}
 8003ee2:	b08e      	sub	sp, #56	; 0x38
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	431a      	orrs	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	4bbf      	ldr	r3, [pc, #764]	; (800420c <UART_SetConfig+0x32c>)
 8003f0e:	4013      	ands	r3, r2
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003f16:	430b      	orrs	r3, r1
 8003f18:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4ab5      	ldr	r2, [pc, #724]	; (8004210 <UART_SetConfig+0x330>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d004      	beq.n	8003f4a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f46:	4313      	orrs	r3, r2
 8003f48:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	4bb0      	ldr	r3, [pc, #704]	; (8004214 <UART_SetConfig+0x334>)
 8003f52:	4013      	ands	r3, r2
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6812      	ldr	r2, [r2, #0]
 8003f58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003f5a:	430b      	orrs	r3, r1
 8003f5c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	f023 010f 	bic.w	r1, r3, #15
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4aa7      	ldr	r2, [pc, #668]	; (8004218 <UART_SetConfig+0x338>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d176      	bne.n	800406c <UART_SetConfig+0x18c>
 8003f7e:	4ba7      	ldr	r3, [pc, #668]	; (800421c <UART_SetConfig+0x33c>)
 8003f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f86:	2b28      	cmp	r3, #40	; 0x28
 8003f88:	d86c      	bhi.n	8004064 <UART_SetConfig+0x184>
 8003f8a:	a201      	add	r2, pc, #4	; (adr r2, 8003f90 <UART_SetConfig+0xb0>)
 8003f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f90:	08004035 	.word	0x08004035
 8003f94:	08004065 	.word	0x08004065
 8003f98:	08004065 	.word	0x08004065
 8003f9c:	08004065 	.word	0x08004065
 8003fa0:	08004065 	.word	0x08004065
 8003fa4:	08004065 	.word	0x08004065
 8003fa8:	08004065 	.word	0x08004065
 8003fac:	08004065 	.word	0x08004065
 8003fb0:	0800403d 	.word	0x0800403d
 8003fb4:	08004065 	.word	0x08004065
 8003fb8:	08004065 	.word	0x08004065
 8003fbc:	08004065 	.word	0x08004065
 8003fc0:	08004065 	.word	0x08004065
 8003fc4:	08004065 	.word	0x08004065
 8003fc8:	08004065 	.word	0x08004065
 8003fcc:	08004065 	.word	0x08004065
 8003fd0:	08004045 	.word	0x08004045
 8003fd4:	08004065 	.word	0x08004065
 8003fd8:	08004065 	.word	0x08004065
 8003fdc:	08004065 	.word	0x08004065
 8003fe0:	08004065 	.word	0x08004065
 8003fe4:	08004065 	.word	0x08004065
 8003fe8:	08004065 	.word	0x08004065
 8003fec:	08004065 	.word	0x08004065
 8003ff0:	0800404d 	.word	0x0800404d
 8003ff4:	08004065 	.word	0x08004065
 8003ff8:	08004065 	.word	0x08004065
 8003ffc:	08004065 	.word	0x08004065
 8004000:	08004065 	.word	0x08004065
 8004004:	08004065 	.word	0x08004065
 8004008:	08004065 	.word	0x08004065
 800400c:	08004065 	.word	0x08004065
 8004010:	08004055 	.word	0x08004055
 8004014:	08004065 	.word	0x08004065
 8004018:	08004065 	.word	0x08004065
 800401c:	08004065 	.word	0x08004065
 8004020:	08004065 	.word	0x08004065
 8004024:	08004065 	.word	0x08004065
 8004028:	08004065 	.word	0x08004065
 800402c:	08004065 	.word	0x08004065
 8004030:	0800405d 	.word	0x0800405d
 8004034:	2301      	movs	r3, #1
 8004036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800403a:	e222      	b.n	8004482 <UART_SetConfig+0x5a2>
 800403c:	2304      	movs	r3, #4
 800403e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004042:	e21e      	b.n	8004482 <UART_SetConfig+0x5a2>
 8004044:	2308      	movs	r3, #8
 8004046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800404a:	e21a      	b.n	8004482 <UART_SetConfig+0x5a2>
 800404c:	2310      	movs	r3, #16
 800404e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004052:	e216      	b.n	8004482 <UART_SetConfig+0x5a2>
 8004054:	2320      	movs	r3, #32
 8004056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800405a:	e212      	b.n	8004482 <UART_SetConfig+0x5a2>
 800405c:	2340      	movs	r3, #64	; 0x40
 800405e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004062:	e20e      	b.n	8004482 <UART_SetConfig+0x5a2>
 8004064:	2380      	movs	r3, #128	; 0x80
 8004066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800406a:	e20a      	b.n	8004482 <UART_SetConfig+0x5a2>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a6b      	ldr	r2, [pc, #428]	; (8004220 <UART_SetConfig+0x340>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d130      	bne.n	80040d8 <UART_SetConfig+0x1f8>
 8004076:	4b69      	ldr	r3, [pc, #420]	; (800421c <UART_SetConfig+0x33c>)
 8004078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	2b05      	cmp	r3, #5
 8004080:	d826      	bhi.n	80040d0 <UART_SetConfig+0x1f0>
 8004082:	a201      	add	r2, pc, #4	; (adr r2, 8004088 <UART_SetConfig+0x1a8>)
 8004084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004088:	080040a1 	.word	0x080040a1
 800408c:	080040a9 	.word	0x080040a9
 8004090:	080040b1 	.word	0x080040b1
 8004094:	080040b9 	.word	0x080040b9
 8004098:	080040c1 	.word	0x080040c1
 800409c:	080040c9 	.word	0x080040c9
 80040a0:	2300      	movs	r3, #0
 80040a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040a6:	e1ec      	b.n	8004482 <UART_SetConfig+0x5a2>
 80040a8:	2304      	movs	r3, #4
 80040aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ae:	e1e8      	b.n	8004482 <UART_SetConfig+0x5a2>
 80040b0:	2308      	movs	r3, #8
 80040b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040b6:	e1e4      	b.n	8004482 <UART_SetConfig+0x5a2>
 80040b8:	2310      	movs	r3, #16
 80040ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040be:	e1e0      	b.n	8004482 <UART_SetConfig+0x5a2>
 80040c0:	2320      	movs	r3, #32
 80040c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040c6:	e1dc      	b.n	8004482 <UART_SetConfig+0x5a2>
 80040c8:	2340      	movs	r3, #64	; 0x40
 80040ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ce:	e1d8      	b.n	8004482 <UART_SetConfig+0x5a2>
 80040d0:	2380      	movs	r3, #128	; 0x80
 80040d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040d6:	e1d4      	b.n	8004482 <UART_SetConfig+0x5a2>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a51      	ldr	r2, [pc, #324]	; (8004224 <UART_SetConfig+0x344>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d130      	bne.n	8004144 <UART_SetConfig+0x264>
 80040e2:	4b4e      	ldr	r3, [pc, #312]	; (800421c <UART_SetConfig+0x33c>)
 80040e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	2b05      	cmp	r3, #5
 80040ec:	d826      	bhi.n	800413c <UART_SetConfig+0x25c>
 80040ee:	a201      	add	r2, pc, #4	; (adr r2, 80040f4 <UART_SetConfig+0x214>)
 80040f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f4:	0800410d 	.word	0x0800410d
 80040f8:	08004115 	.word	0x08004115
 80040fc:	0800411d 	.word	0x0800411d
 8004100:	08004125 	.word	0x08004125
 8004104:	0800412d 	.word	0x0800412d
 8004108:	08004135 	.word	0x08004135
 800410c:	2300      	movs	r3, #0
 800410e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004112:	e1b6      	b.n	8004482 <UART_SetConfig+0x5a2>
 8004114:	2304      	movs	r3, #4
 8004116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800411a:	e1b2      	b.n	8004482 <UART_SetConfig+0x5a2>
 800411c:	2308      	movs	r3, #8
 800411e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004122:	e1ae      	b.n	8004482 <UART_SetConfig+0x5a2>
 8004124:	2310      	movs	r3, #16
 8004126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800412a:	e1aa      	b.n	8004482 <UART_SetConfig+0x5a2>
 800412c:	2320      	movs	r3, #32
 800412e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004132:	e1a6      	b.n	8004482 <UART_SetConfig+0x5a2>
 8004134:	2340      	movs	r3, #64	; 0x40
 8004136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800413a:	e1a2      	b.n	8004482 <UART_SetConfig+0x5a2>
 800413c:	2380      	movs	r3, #128	; 0x80
 800413e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004142:	e19e      	b.n	8004482 <UART_SetConfig+0x5a2>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a37      	ldr	r2, [pc, #220]	; (8004228 <UART_SetConfig+0x348>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d130      	bne.n	80041b0 <UART_SetConfig+0x2d0>
 800414e:	4b33      	ldr	r3, [pc, #204]	; (800421c <UART_SetConfig+0x33c>)
 8004150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	2b05      	cmp	r3, #5
 8004158:	d826      	bhi.n	80041a8 <UART_SetConfig+0x2c8>
 800415a:	a201      	add	r2, pc, #4	; (adr r2, 8004160 <UART_SetConfig+0x280>)
 800415c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004160:	08004179 	.word	0x08004179
 8004164:	08004181 	.word	0x08004181
 8004168:	08004189 	.word	0x08004189
 800416c:	08004191 	.word	0x08004191
 8004170:	08004199 	.word	0x08004199
 8004174:	080041a1 	.word	0x080041a1
 8004178:	2300      	movs	r3, #0
 800417a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800417e:	e180      	b.n	8004482 <UART_SetConfig+0x5a2>
 8004180:	2304      	movs	r3, #4
 8004182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004186:	e17c      	b.n	8004482 <UART_SetConfig+0x5a2>
 8004188:	2308      	movs	r3, #8
 800418a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800418e:	e178      	b.n	8004482 <UART_SetConfig+0x5a2>
 8004190:	2310      	movs	r3, #16
 8004192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004196:	e174      	b.n	8004482 <UART_SetConfig+0x5a2>
 8004198:	2320      	movs	r3, #32
 800419a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800419e:	e170      	b.n	8004482 <UART_SetConfig+0x5a2>
 80041a0:	2340      	movs	r3, #64	; 0x40
 80041a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041a6:	e16c      	b.n	8004482 <UART_SetConfig+0x5a2>
 80041a8:	2380      	movs	r3, #128	; 0x80
 80041aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041ae:	e168      	b.n	8004482 <UART_SetConfig+0x5a2>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a1d      	ldr	r2, [pc, #116]	; (800422c <UART_SetConfig+0x34c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d142      	bne.n	8004240 <UART_SetConfig+0x360>
 80041ba:	4b18      	ldr	r3, [pc, #96]	; (800421c <UART_SetConfig+0x33c>)
 80041bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	2b05      	cmp	r3, #5
 80041c4:	d838      	bhi.n	8004238 <UART_SetConfig+0x358>
 80041c6:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <UART_SetConfig+0x2ec>)
 80041c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041cc:	080041e5 	.word	0x080041e5
 80041d0:	080041ed 	.word	0x080041ed
 80041d4:	080041f5 	.word	0x080041f5
 80041d8:	080041fd 	.word	0x080041fd
 80041dc:	08004205 	.word	0x08004205
 80041e0:	08004231 	.word	0x08004231
 80041e4:	2300      	movs	r3, #0
 80041e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041ea:	e14a      	b.n	8004482 <UART_SetConfig+0x5a2>
 80041ec:	2304      	movs	r3, #4
 80041ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041f2:	e146      	b.n	8004482 <UART_SetConfig+0x5a2>
 80041f4:	2308      	movs	r3, #8
 80041f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041fa:	e142      	b.n	8004482 <UART_SetConfig+0x5a2>
 80041fc:	2310      	movs	r3, #16
 80041fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004202:	e13e      	b.n	8004482 <UART_SetConfig+0x5a2>
 8004204:	2320      	movs	r3, #32
 8004206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800420a:	e13a      	b.n	8004482 <UART_SetConfig+0x5a2>
 800420c:	cfff69f3 	.word	0xcfff69f3
 8004210:	58000c00 	.word	0x58000c00
 8004214:	11fff4ff 	.word	0x11fff4ff
 8004218:	40011000 	.word	0x40011000
 800421c:	58024400 	.word	0x58024400
 8004220:	40004400 	.word	0x40004400
 8004224:	40004800 	.word	0x40004800
 8004228:	40004c00 	.word	0x40004c00
 800422c:	40005000 	.word	0x40005000
 8004230:	2340      	movs	r3, #64	; 0x40
 8004232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004236:	e124      	b.n	8004482 <UART_SetConfig+0x5a2>
 8004238:	2380      	movs	r3, #128	; 0x80
 800423a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800423e:	e120      	b.n	8004482 <UART_SetConfig+0x5a2>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4acc      	ldr	r2, [pc, #816]	; (8004578 <UART_SetConfig+0x698>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d176      	bne.n	8004338 <UART_SetConfig+0x458>
 800424a:	4bcc      	ldr	r3, [pc, #816]	; (800457c <UART_SetConfig+0x69c>)
 800424c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004252:	2b28      	cmp	r3, #40	; 0x28
 8004254:	d86c      	bhi.n	8004330 <UART_SetConfig+0x450>
 8004256:	a201      	add	r2, pc, #4	; (adr r2, 800425c <UART_SetConfig+0x37c>)
 8004258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425c:	08004301 	.word	0x08004301
 8004260:	08004331 	.word	0x08004331
 8004264:	08004331 	.word	0x08004331
 8004268:	08004331 	.word	0x08004331
 800426c:	08004331 	.word	0x08004331
 8004270:	08004331 	.word	0x08004331
 8004274:	08004331 	.word	0x08004331
 8004278:	08004331 	.word	0x08004331
 800427c:	08004309 	.word	0x08004309
 8004280:	08004331 	.word	0x08004331
 8004284:	08004331 	.word	0x08004331
 8004288:	08004331 	.word	0x08004331
 800428c:	08004331 	.word	0x08004331
 8004290:	08004331 	.word	0x08004331
 8004294:	08004331 	.word	0x08004331
 8004298:	08004331 	.word	0x08004331
 800429c:	08004311 	.word	0x08004311
 80042a0:	08004331 	.word	0x08004331
 80042a4:	08004331 	.word	0x08004331
 80042a8:	08004331 	.word	0x08004331
 80042ac:	08004331 	.word	0x08004331
 80042b0:	08004331 	.word	0x08004331
 80042b4:	08004331 	.word	0x08004331
 80042b8:	08004331 	.word	0x08004331
 80042bc:	08004319 	.word	0x08004319
 80042c0:	08004331 	.word	0x08004331
 80042c4:	08004331 	.word	0x08004331
 80042c8:	08004331 	.word	0x08004331
 80042cc:	08004331 	.word	0x08004331
 80042d0:	08004331 	.word	0x08004331
 80042d4:	08004331 	.word	0x08004331
 80042d8:	08004331 	.word	0x08004331
 80042dc:	08004321 	.word	0x08004321
 80042e0:	08004331 	.word	0x08004331
 80042e4:	08004331 	.word	0x08004331
 80042e8:	08004331 	.word	0x08004331
 80042ec:	08004331 	.word	0x08004331
 80042f0:	08004331 	.word	0x08004331
 80042f4:	08004331 	.word	0x08004331
 80042f8:	08004331 	.word	0x08004331
 80042fc:	08004329 	.word	0x08004329
 8004300:	2301      	movs	r3, #1
 8004302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004306:	e0bc      	b.n	8004482 <UART_SetConfig+0x5a2>
 8004308:	2304      	movs	r3, #4
 800430a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800430e:	e0b8      	b.n	8004482 <UART_SetConfig+0x5a2>
 8004310:	2308      	movs	r3, #8
 8004312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004316:	e0b4      	b.n	8004482 <UART_SetConfig+0x5a2>
 8004318:	2310      	movs	r3, #16
 800431a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800431e:	e0b0      	b.n	8004482 <UART_SetConfig+0x5a2>
 8004320:	2320      	movs	r3, #32
 8004322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004326:	e0ac      	b.n	8004482 <UART_SetConfig+0x5a2>
 8004328:	2340      	movs	r3, #64	; 0x40
 800432a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800432e:	e0a8      	b.n	8004482 <UART_SetConfig+0x5a2>
 8004330:	2380      	movs	r3, #128	; 0x80
 8004332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004336:	e0a4      	b.n	8004482 <UART_SetConfig+0x5a2>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a90      	ldr	r2, [pc, #576]	; (8004580 <UART_SetConfig+0x6a0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d130      	bne.n	80043a4 <UART_SetConfig+0x4c4>
 8004342:	4b8e      	ldr	r3, [pc, #568]	; (800457c <UART_SetConfig+0x69c>)
 8004344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004346:	f003 0307 	and.w	r3, r3, #7
 800434a:	2b05      	cmp	r3, #5
 800434c:	d826      	bhi.n	800439c <UART_SetConfig+0x4bc>
 800434e:	a201      	add	r2, pc, #4	; (adr r2, 8004354 <UART_SetConfig+0x474>)
 8004350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004354:	0800436d 	.word	0x0800436d
 8004358:	08004375 	.word	0x08004375
 800435c:	0800437d 	.word	0x0800437d
 8004360:	08004385 	.word	0x08004385
 8004364:	0800438d 	.word	0x0800438d
 8004368:	08004395 	.word	0x08004395
 800436c:	2300      	movs	r3, #0
 800436e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004372:	e086      	b.n	8004482 <UART_SetConfig+0x5a2>
 8004374:	2304      	movs	r3, #4
 8004376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800437a:	e082      	b.n	8004482 <UART_SetConfig+0x5a2>
 800437c:	2308      	movs	r3, #8
 800437e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004382:	e07e      	b.n	8004482 <UART_SetConfig+0x5a2>
 8004384:	2310      	movs	r3, #16
 8004386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800438a:	e07a      	b.n	8004482 <UART_SetConfig+0x5a2>
 800438c:	2320      	movs	r3, #32
 800438e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004392:	e076      	b.n	8004482 <UART_SetConfig+0x5a2>
 8004394:	2340      	movs	r3, #64	; 0x40
 8004396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800439a:	e072      	b.n	8004482 <UART_SetConfig+0x5a2>
 800439c:	2380      	movs	r3, #128	; 0x80
 800439e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043a2:	e06e      	b.n	8004482 <UART_SetConfig+0x5a2>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a76      	ldr	r2, [pc, #472]	; (8004584 <UART_SetConfig+0x6a4>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d130      	bne.n	8004410 <UART_SetConfig+0x530>
 80043ae:	4b73      	ldr	r3, [pc, #460]	; (800457c <UART_SetConfig+0x69c>)
 80043b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	2b05      	cmp	r3, #5
 80043b8:	d826      	bhi.n	8004408 <UART_SetConfig+0x528>
 80043ba:	a201      	add	r2, pc, #4	; (adr r2, 80043c0 <UART_SetConfig+0x4e0>)
 80043bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c0:	080043d9 	.word	0x080043d9
 80043c4:	080043e1 	.word	0x080043e1
 80043c8:	080043e9 	.word	0x080043e9
 80043cc:	080043f1 	.word	0x080043f1
 80043d0:	080043f9 	.word	0x080043f9
 80043d4:	08004401 	.word	0x08004401
 80043d8:	2300      	movs	r3, #0
 80043da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043de:	e050      	b.n	8004482 <UART_SetConfig+0x5a2>
 80043e0:	2304      	movs	r3, #4
 80043e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043e6:	e04c      	b.n	8004482 <UART_SetConfig+0x5a2>
 80043e8:	2308      	movs	r3, #8
 80043ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043ee:	e048      	b.n	8004482 <UART_SetConfig+0x5a2>
 80043f0:	2310      	movs	r3, #16
 80043f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043f6:	e044      	b.n	8004482 <UART_SetConfig+0x5a2>
 80043f8:	2320      	movs	r3, #32
 80043fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043fe:	e040      	b.n	8004482 <UART_SetConfig+0x5a2>
 8004400:	2340      	movs	r3, #64	; 0x40
 8004402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004406:	e03c      	b.n	8004482 <UART_SetConfig+0x5a2>
 8004408:	2380      	movs	r3, #128	; 0x80
 800440a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800440e:	e038      	b.n	8004482 <UART_SetConfig+0x5a2>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a5c      	ldr	r2, [pc, #368]	; (8004588 <UART_SetConfig+0x6a8>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d130      	bne.n	800447c <UART_SetConfig+0x59c>
 800441a:	4b58      	ldr	r3, [pc, #352]	; (800457c <UART_SetConfig+0x69c>)
 800441c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	2b05      	cmp	r3, #5
 8004424:	d826      	bhi.n	8004474 <UART_SetConfig+0x594>
 8004426:	a201      	add	r2, pc, #4	; (adr r2, 800442c <UART_SetConfig+0x54c>)
 8004428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442c:	08004445 	.word	0x08004445
 8004430:	0800444d 	.word	0x0800444d
 8004434:	08004455 	.word	0x08004455
 8004438:	0800445d 	.word	0x0800445d
 800443c:	08004465 	.word	0x08004465
 8004440:	0800446d 	.word	0x0800446d
 8004444:	2302      	movs	r3, #2
 8004446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800444a:	e01a      	b.n	8004482 <UART_SetConfig+0x5a2>
 800444c:	2304      	movs	r3, #4
 800444e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004452:	e016      	b.n	8004482 <UART_SetConfig+0x5a2>
 8004454:	2308      	movs	r3, #8
 8004456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800445a:	e012      	b.n	8004482 <UART_SetConfig+0x5a2>
 800445c:	2310      	movs	r3, #16
 800445e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004462:	e00e      	b.n	8004482 <UART_SetConfig+0x5a2>
 8004464:	2320      	movs	r3, #32
 8004466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800446a:	e00a      	b.n	8004482 <UART_SetConfig+0x5a2>
 800446c:	2340      	movs	r3, #64	; 0x40
 800446e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004472:	e006      	b.n	8004482 <UART_SetConfig+0x5a2>
 8004474:	2380      	movs	r3, #128	; 0x80
 8004476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800447a:	e002      	b.n	8004482 <UART_SetConfig+0x5a2>
 800447c:	2380      	movs	r3, #128	; 0x80
 800447e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a40      	ldr	r2, [pc, #256]	; (8004588 <UART_SetConfig+0x6a8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	f040 80ef 	bne.w	800466c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800448e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004492:	2b20      	cmp	r3, #32
 8004494:	dc46      	bgt.n	8004524 <UART_SetConfig+0x644>
 8004496:	2b02      	cmp	r3, #2
 8004498:	f2c0 8081 	blt.w	800459e <UART_SetConfig+0x6be>
 800449c:	3b02      	subs	r3, #2
 800449e:	2b1e      	cmp	r3, #30
 80044a0:	d87d      	bhi.n	800459e <UART_SetConfig+0x6be>
 80044a2:	a201      	add	r2, pc, #4	; (adr r2, 80044a8 <UART_SetConfig+0x5c8>)
 80044a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a8:	0800452b 	.word	0x0800452b
 80044ac:	0800459f 	.word	0x0800459f
 80044b0:	08004533 	.word	0x08004533
 80044b4:	0800459f 	.word	0x0800459f
 80044b8:	0800459f 	.word	0x0800459f
 80044bc:	0800459f 	.word	0x0800459f
 80044c0:	08004543 	.word	0x08004543
 80044c4:	0800459f 	.word	0x0800459f
 80044c8:	0800459f 	.word	0x0800459f
 80044cc:	0800459f 	.word	0x0800459f
 80044d0:	0800459f 	.word	0x0800459f
 80044d4:	0800459f 	.word	0x0800459f
 80044d8:	0800459f 	.word	0x0800459f
 80044dc:	0800459f 	.word	0x0800459f
 80044e0:	08004553 	.word	0x08004553
 80044e4:	0800459f 	.word	0x0800459f
 80044e8:	0800459f 	.word	0x0800459f
 80044ec:	0800459f 	.word	0x0800459f
 80044f0:	0800459f 	.word	0x0800459f
 80044f4:	0800459f 	.word	0x0800459f
 80044f8:	0800459f 	.word	0x0800459f
 80044fc:	0800459f 	.word	0x0800459f
 8004500:	0800459f 	.word	0x0800459f
 8004504:	0800459f 	.word	0x0800459f
 8004508:	0800459f 	.word	0x0800459f
 800450c:	0800459f 	.word	0x0800459f
 8004510:	0800459f 	.word	0x0800459f
 8004514:	0800459f 	.word	0x0800459f
 8004518:	0800459f 	.word	0x0800459f
 800451c:	0800459f 	.word	0x0800459f
 8004520:	08004591 	.word	0x08004591
 8004524:	2b40      	cmp	r3, #64	; 0x40
 8004526:	d036      	beq.n	8004596 <UART_SetConfig+0x6b6>
 8004528:	e039      	b.n	800459e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800452a:	f7ff f867 	bl	80035fc <HAL_RCCEx_GetD3PCLK1Freq>
 800452e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004530:	e03b      	b.n	80045aa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004532:	f107 0314 	add.w	r3, r7, #20
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff f876 	bl	8003628 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004540:	e033      	b.n	80045aa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004542:	f107 0308 	add.w	r3, r7, #8
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff f9c2 	bl	80038d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004550:	e02b      	b.n	80045aa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004552:	4b0a      	ldr	r3, [pc, #40]	; (800457c <UART_SetConfig+0x69c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0320 	and.w	r3, r3, #32
 800455a:	2b00      	cmp	r3, #0
 800455c:	d009      	beq.n	8004572 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800455e:	4b07      	ldr	r3, [pc, #28]	; (800457c <UART_SetConfig+0x69c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	08db      	lsrs	r3, r3, #3
 8004564:	f003 0303 	and.w	r3, r3, #3
 8004568:	4a08      	ldr	r2, [pc, #32]	; (800458c <UART_SetConfig+0x6ac>)
 800456a:	fa22 f303 	lsr.w	r3, r2, r3
 800456e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004570:	e01b      	b.n	80045aa <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8004572:	4b06      	ldr	r3, [pc, #24]	; (800458c <UART_SetConfig+0x6ac>)
 8004574:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004576:	e018      	b.n	80045aa <UART_SetConfig+0x6ca>
 8004578:	40011400 	.word	0x40011400
 800457c:	58024400 	.word	0x58024400
 8004580:	40007800 	.word	0x40007800
 8004584:	40007c00 	.word	0x40007c00
 8004588:	58000c00 	.word	0x58000c00
 800458c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004590:	4bc4      	ldr	r3, [pc, #784]	; (80048a4 <UART_SetConfig+0x9c4>)
 8004592:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004594:	e009      	b.n	80045aa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800459a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800459c:	e005      	b.n	80045aa <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80045a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 81da 	beq.w	8004966 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	4abc      	ldr	r2, [pc, #752]	; (80048a8 <UART_SetConfig+0x9c8>)
 80045b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045bc:	461a      	mov	r2, r3
 80045be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80045c4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	4613      	mov	r3, r2
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	4413      	add	r3, r2
 80045d0:	6a3a      	ldr	r2, [r7, #32]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d305      	bcc.n	80045e2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045dc:	6a3a      	ldr	r2, [r7, #32]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d903      	bls.n	80045ea <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80045e8:	e1bd      	b.n	8004966 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ec:	4618      	mov	r0, r3
 80045ee:	f04f 0100 	mov.w	r1, #0
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	4aac      	ldr	r2, [pc, #688]	; (80048a8 <UART_SetConfig+0x9c8>)
 80045f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	f04f 0300 	mov.w	r3, #0
 8004602:	f7fb febd 	bl	8000380 <__aeabi_uldivmod>
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	4610      	mov	r0, r2
 800460c:	4619      	mov	r1, r3
 800460e:	f04f 0200 	mov.w	r2, #0
 8004612:	f04f 0300 	mov.w	r3, #0
 8004616:	020b      	lsls	r3, r1, #8
 8004618:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800461c:	0202      	lsls	r2, r0, #8
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	6849      	ldr	r1, [r1, #4]
 8004622:	0849      	lsrs	r1, r1, #1
 8004624:	4608      	mov	r0, r1
 8004626:	f04f 0100 	mov.w	r1, #0
 800462a:	1814      	adds	r4, r2, r0
 800462c:	eb43 0501 	adc.w	r5, r3, r1
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	461a      	mov	r2, r3
 8004636:	f04f 0300 	mov.w	r3, #0
 800463a:	4620      	mov	r0, r4
 800463c:	4629      	mov	r1, r5
 800463e:	f7fb fe9f 	bl	8000380 <__aeabi_uldivmod>
 8004642:	4602      	mov	r2, r0
 8004644:	460b      	mov	r3, r1
 8004646:	4613      	mov	r3, r2
 8004648:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800464a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004650:	d308      	bcc.n	8004664 <UART_SetConfig+0x784>
 8004652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004654:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004658:	d204      	bcs.n	8004664 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004660:	60da      	str	r2, [r3, #12]
 8004662:	e180      	b.n	8004966 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800466a:	e17c      	b.n	8004966 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004674:	f040 80be 	bne.w	80047f4 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8004678:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800467c:	2b20      	cmp	r3, #32
 800467e:	dc49      	bgt.n	8004714 <UART_SetConfig+0x834>
 8004680:	2b00      	cmp	r3, #0
 8004682:	db7c      	blt.n	800477e <UART_SetConfig+0x89e>
 8004684:	2b20      	cmp	r3, #32
 8004686:	d87a      	bhi.n	800477e <UART_SetConfig+0x89e>
 8004688:	a201      	add	r2, pc, #4	; (adr r2, 8004690 <UART_SetConfig+0x7b0>)
 800468a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468e:	bf00      	nop
 8004690:	0800471b 	.word	0x0800471b
 8004694:	08004723 	.word	0x08004723
 8004698:	0800477f 	.word	0x0800477f
 800469c:	0800477f 	.word	0x0800477f
 80046a0:	0800472b 	.word	0x0800472b
 80046a4:	0800477f 	.word	0x0800477f
 80046a8:	0800477f 	.word	0x0800477f
 80046ac:	0800477f 	.word	0x0800477f
 80046b0:	0800473b 	.word	0x0800473b
 80046b4:	0800477f 	.word	0x0800477f
 80046b8:	0800477f 	.word	0x0800477f
 80046bc:	0800477f 	.word	0x0800477f
 80046c0:	0800477f 	.word	0x0800477f
 80046c4:	0800477f 	.word	0x0800477f
 80046c8:	0800477f 	.word	0x0800477f
 80046cc:	0800477f 	.word	0x0800477f
 80046d0:	0800474b 	.word	0x0800474b
 80046d4:	0800477f 	.word	0x0800477f
 80046d8:	0800477f 	.word	0x0800477f
 80046dc:	0800477f 	.word	0x0800477f
 80046e0:	0800477f 	.word	0x0800477f
 80046e4:	0800477f 	.word	0x0800477f
 80046e8:	0800477f 	.word	0x0800477f
 80046ec:	0800477f 	.word	0x0800477f
 80046f0:	0800477f 	.word	0x0800477f
 80046f4:	0800477f 	.word	0x0800477f
 80046f8:	0800477f 	.word	0x0800477f
 80046fc:	0800477f 	.word	0x0800477f
 8004700:	0800477f 	.word	0x0800477f
 8004704:	0800477f 	.word	0x0800477f
 8004708:	0800477f 	.word	0x0800477f
 800470c:	0800477f 	.word	0x0800477f
 8004710:	08004771 	.word	0x08004771
 8004714:	2b40      	cmp	r3, #64	; 0x40
 8004716:	d02e      	beq.n	8004776 <UART_SetConfig+0x896>
 8004718:	e031      	b.n	800477e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800471a:	f7fe f803 	bl	8002724 <HAL_RCC_GetPCLK1Freq>
 800471e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004720:	e033      	b.n	800478a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004722:	f7fe f815 	bl	8002750 <HAL_RCC_GetPCLK2Freq>
 8004726:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004728:	e02f      	b.n	800478a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800472a:	f107 0314 	add.w	r3, r7, #20
 800472e:	4618      	mov	r0, r3
 8004730:	f7fe ff7a 	bl	8003628 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004738:	e027      	b.n	800478a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800473a:	f107 0308 	add.w	r3, r7, #8
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff f8c6 	bl	80038d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004748:	e01f      	b.n	800478a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800474a:	4b58      	ldr	r3, [pc, #352]	; (80048ac <UART_SetConfig+0x9cc>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b00      	cmp	r3, #0
 8004754:	d009      	beq.n	800476a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004756:	4b55      	ldr	r3, [pc, #340]	; (80048ac <UART_SetConfig+0x9cc>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	08db      	lsrs	r3, r3, #3
 800475c:	f003 0303 	and.w	r3, r3, #3
 8004760:	4a53      	ldr	r2, [pc, #332]	; (80048b0 <UART_SetConfig+0x9d0>)
 8004762:	fa22 f303 	lsr.w	r3, r2, r3
 8004766:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004768:	e00f      	b.n	800478a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800476a:	4b51      	ldr	r3, [pc, #324]	; (80048b0 <UART_SetConfig+0x9d0>)
 800476c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800476e:	e00c      	b.n	800478a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004770:	4b4c      	ldr	r3, [pc, #304]	; (80048a4 <UART_SetConfig+0x9c4>)
 8004772:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004774:	e009      	b.n	800478a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800477a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800477c:	e005      	b.n	800478a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004788:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800478a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80ea 	beq.w	8004966 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	4a44      	ldr	r2, [pc, #272]	; (80048a8 <UART_SetConfig+0x9c8>)
 8004798:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800479c:	461a      	mov	r2, r3
 800479e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80047a4:	005a      	lsls	r2, r3, #1
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	085b      	lsrs	r3, r3, #1
 80047ac:	441a      	add	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ba:	2b0f      	cmp	r3, #15
 80047bc:	d916      	bls.n	80047ec <UART_SetConfig+0x90c>
 80047be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c4:	d212      	bcs.n	80047ec <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	f023 030f 	bic.w	r3, r3, #15
 80047ce:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d2:	085b      	lsrs	r3, r3, #1
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	b29a      	uxth	r2, r3
 80047dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80047de:	4313      	orrs	r3, r2
 80047e0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80047e8:	60da      	str	r2, [r3, #12]
 80047ea:	e0bc      	b.n	8004966 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80047f2:	e0b8      	b.n	8004966 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80047f8:	2b20      	cmp	r3, #32
 80047fa:	dc4b      	bgt.n	8004894 <UART_SetConfig+0x9b4>
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f2c0 8087 	blt.w	8004910 <UART_SetConfig+0xa30>
 8004802:	2b20      	cmp	r3, #32
 8004804:	f200 8084 	bhi.w	8004910 <UART_SetConfig+0xa30>
 8004808:	a201      	add	r2, pc, #4	; (adr r2, 8004810 <UART_SetConfig+0x930>)
 800480a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480e:	bf00      	nop
 8004810:	0800489b 	.word	0x0800489b
 8004814:	080048b5 	.word	0x080048b5
 8004818:	08004911 	.word	0x08004911
 800481c:	08004911 	.word	0x08004911
 8004820:	080048bd 	.word	0x080048bd
 8004824:	08004911 	.word	0x08004911
 8004828:	08004911 	.word	0x08004911
 800482c:	08004911 	.word	0x08004911
 8004830:	080048cd 	.word	0x080048cd
 8004834:	08004911 	.word	0x08004911
 8004838:	08004911 	.word	0x08004911
 800483c:	08004911 	.word	0x08004911
 8004840:	08004911 	.word	0x08004911
 8004844:	08004911 	.word	0x08004911
 8004848:	08004911 	.word	0x08004911
 800484c:	08004911 	.word	0x08004911
 8004850:	080048dd 	.word	0x080048dd
 8004854:	08004911 	.word	0x08004911
 8004858:	08004911 	.word	0x08004911
 800485c:	08004911 	.word	0x08004911
 8004860:	08004911 	.word	0x08004911
 8004864:	08004911 	.word	0x08004911
 8004868:	08004911 	.word	0x08004911
 800486c:	08004911 	.word	0x08004911
 8004870:	08004911 	.word	0x08004911
 8004874:	08004911 	.word	0x08004911
 8004878:	08004911 	.word	0x08004911
 800487c:	08004911 	.word	0x08004911
 8004880:	08004911 	.word	0x08004911
 8004884:	08004911 	.word	0x08004911
 8004888:	08004911 	.word	0x08004911
 800488c:	08004911 	.word	0x08004911
 8004890:	08004903 	.word	0x08004903
 8004894:	2b40      	cmp	r3, #64	; 0x40
 8004896:	d037      	beq.n	8004908 <UART_SetConfig+0xa28>
 8004898:	e03a      	b.n	8004910 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800489a:	f7fd ff43 	bl	8002724 <HAL_RCC_GetPCLK1Freq>
 800489e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80048a0:	e03c      	b.n	800491c <UART_SetConfig+0xa3c>
 80048a2:	bf00      	nop
 80048a4:	003d0900 	.word	0x003d0900
 80048a8:	08008af4 	.word	0x08008af4
 80048ac:	58024400 	.word	0x58024400
 80048b0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048b4:	f7fd ff4c 	bl	8002750 <HAL_RCC_GetPCLK2Freq>
 80048b8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80048ba:	e02f      	b.n	800491c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048bc:	f107 0314 	add.w	r3, r7, #20
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7fe feb1 	bl	8003628 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048ca:	e027      	b.n	800491c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048cc:	f107 0308 	add.w	r3, r7, #8
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7fe fffd 	bl	80038d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048da:	e01f      	b.n	800491c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048dc:	4b2c      	ldr	r3, [pc, #176]	; (8004990 <UART_SetConfig+0xab0>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0320 	and.w	r3, r3, #32
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d009      	beq.n	80048fc <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80048e8:	4b29      	ldr	r3, [pc, #164]	; (8004990 <UART_SetConfig+0xab0>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	08db      	lsrs	r3, r3, #3
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	4a28      	ldr	r2, [pc, #160]	; (8004994 <UART_SetConfig+0xab4>)
 80048f4:	fa22 f303 	lsr.w	r3, r2, r3
 80048f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80048fa:	e00f      	b.n	800491c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80048fc:	4b25      	ldr	r3, [pc, #148]	; (8004994 <UART_SetConfig+0xab4>)
 80048fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004900:	e00c      	b.n	800491c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004902:	4b25      	ldr	r3, [pc, #148]	; (8004998 <UART_SetConfig+0xab8>)
 8004904:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004906:	e009      	b.n	800491c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004908:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800490c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800490e:	e005      	b.n	800491c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800491a:	bf00      	nop
    }

    if (pclk != 0U)
 800491c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491e:	2b00      	cmp	r3, #0
 8004920:	d021      	beq.n	8004966 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	4a1d      	ldr	r2, [pc, #116]	; (800499c <UART_SetConfig+0xabc>)
 8004928:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800492c:	461a      	mov	r2, r3
 800492e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004930:	fbb3 f2f2 	udiv	r2, r3, r2
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	085b      	lsrs	r3, r3, #1
 800493a:	441a      	add	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	fbb2 f3f3 	udiv	r3, r2, r3
 8004944:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004948:	2b0f      	cmp	r3, #15
 800494a:	d909      	bls.n	8004960 <UART_SetConfig+0xa80>
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004952:	d205      	bcs.n	8004960 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004956:	b29a      	uxth	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	60da      	str	r2, [r3, #12]
 800495e:	e002      	b.n	8004966 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004982:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8004986:	4618      	mov	r0, r3
 8004988:	3738      	adds	r7, #56	; 0x38
 800498a:	46bd      	mov	sp, r7
 800498c:	bdb0      	pop	{r4, r5, r7, pc}
 800498e:	bf00      	nop
 8004990:	58024400 	.word	0x58024400
 8004994:	03d09000 	.word	0x03d09000
 8004998:	003d0900 	.word	0x003d0900
 800499c:	08008af4 	.word	0x08008af4

080049a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00a      	beq.n	80049ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a12:	f003 0308 	and.w	r3, r3, #8
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a34:	f003 0310 	and.w	r3, r3, #16
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a56:	f003 0320 	and.w	r3, r3, #32
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d01a      	beq.n	8004ab6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a9e:	d10a      	bne.n	8004ab6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00a      	beq.n	8004ad8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	605a      	str	r2, [r3, #4]
  }
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af02      	add	r7, sp, #8
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004af4:	f7fc fb22 	bl	800113c <HAL_GetTick>
 8004af8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0308 	and.w	r3, r3, #8
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d10e      	bne.n	8004b26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f82f 	bl	8004b7a <UART_WaitOnFlagUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e025      	b.n	8004b72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d10e      	bne.n	8004b52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f819 	bl	8004b7a <UART_WaitOnFlagUntilTimeout>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e00f      	b.n	8004b72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2220      	movs	r2, #32
 8004b56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b09c      	sub	sp, #112	; 0x70
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	60f8      	str	r0, [r7, #12]
 8004b82:	60b9      	str	r1, [r7, #8]
 8004b84:	603b      	str	r3, [r7, #0]
 8004b86:	4613      	mov	r3, r2
 8004b88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b8a:	e0a9      	b.n	8004ce0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b92:	f000 80a5 	beq.w	8004ce0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b96:	f7fc fad1 	bl	800113c <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d302      	bcc.n	8004bac <UART_WaitOnFlagUntilTimeout+0x32>
 8004ba6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d140      	bne.n	8004c2e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bb4:	e853 3f00 	ldrex	r3, [r3]
 8004bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bc0:	667b      	str	r3, [r7, #100]	; 0x64
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bcc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004bd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004bd2:	e841 2300 	strex	r3, r2, [r1]
 8004bd6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1e6      	bne.n	8004bac <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3308      	adds	r3, #8
 8004be4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be8:	e853 3f00 	ldrex	r3, [r3]
 8004bec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf0:	f023 0301 	bic.w	r3, r3, #1
 8004bf4:	663b      	str	r3, [r7, #96]	; 0x60
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3308      	adds	r3, #8
 8004bfc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004bfe:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c06:	e841 2300 	strex	r3, r2, [r1]
 8004c0a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1e5      	bne.n	8004bde <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2220      	movs	r2, #32
 8004c16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e069      	b.n	8004d02 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d051      	beq.n	8004ce0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c4a:	d149      	bne.n	8004ce0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5e:	e853 3f00 	ldrex	r3, [r3]
 8004c62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	461a      	mov	r2, r3
 8004c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c74:	637b      	str	r3, [r7, #52]	; 0x34
 8004c76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c7c:	e841 2300 	strex	r3, r2, [r1]
 8004c80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1e6      	bne.n	8004c56 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3308      	adds	r3, #8
 8004c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	e853 3f00 	ldrex	r3, [r3]
 8004c96:	613b      	str	r3, [r7, #16]
   return(result);
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f023 0301 	bic.w	r3, r3, #1
 8004c9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3308      	adds	r3, #8
 8004ca6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ca8:	623a      	str	r2, [r7, #32]
 8004caa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cac:	69f9      	ldr	r1, [r7, #28]
 8004cae:	6a3a      	ldr	r2, [r7, #32]
 8004cb0:	e841 2300 	strex	r3, r2, [r1]
 8004cb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1e5      	bne.n	8004c88 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e010      	b.n	8004d02 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	69da      	ldr	r2, [r3, #28]
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	bf0c      	ite	eq
 8004cf0:	2301      	moveq	r3, #1
 8004cf2:	2300      	movne	r3, #0
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	79fb      	ldrb	r3, [r7, #7]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	f43f af46 	beq.w	8004b8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3770      	adds	r7, #112	; 0x70
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b085      	sub	sp, #20
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d101      	bne.n	8004d20 <HAL_UARTEx_DisableFifoMode+0x16>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e027      	b.n	8004d70 <HAL_UARTEx_DisableFifoMode+0x66>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2224      	movs	r2, #36	; 0x24
 8004d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0201 	bic.w	r2, r2, #1
 8004d46:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d4e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3714      	adds	r7, #20
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d101      	bne.n	8004d94 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004d90:	2302      	movs	r3, #2
 8004d92:	e02d      	b.n	8004df0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2224      	movs	r2, #36	; 0x24
 8004da0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0201 	bic.w	r2, r2, #1
 8004dba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 f84f 	bl	8004e74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2220      	movs	r2, #32
 8004de2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d101      	bne.n	8004e10 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e02d      	b.n	8004e6c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2224      	movs	r2, #36	; 0x24
 8004e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 0201 	bic.w	r2, r2, #1
 8004e36:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f811 	bl	8004e74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d108      	bne.n	8004e96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e94:	e031      	b.n	8004efa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e96:	2310      	movs	r3, #16
 8004e98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e9a:	2310      	movs	r3, #16
 8004e9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	0e5b      	lsrs	r3, r3, #25
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	0f5b      	lsrs	r3, r3, #29
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ebe:	7bbb      	ldrb	r3, [r7, #14]
 8004ec0:	7b3a      	ldrb	r2, [r7, #12]
 8004ec2:	4911      	ldr	r1, [pc, #68]	; (8004f08 <UARTEx_SetNbDataToProcess+0x94>)
 8004ec4:	5c8a      	ldrb	r2, [r1, r2]
 8004ec6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004eca:	7b3a      	ldrb	r2, [r7, #12]
 8004ecc:	490f      	ldr	r1, [pc, #60]	; (8004f0c <UARTEx_SetNbDataToProcess+0x98>)
 8004ece:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ed0:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
 8004ede:	7b7a      	ldrb	r2, [r7, #13]
 8004ee0:	4909      	ldr	r1, [pc, #36]	; (8004f08 <UARTEx_SetNbDataToProcess+0x94>)
 8004ee2:	5c8a      	ldrb	r2, [r1, r2]
 8004ee4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ee8:	7b7a      	ldrb	r2, [r7, #13]
 8004eea:	4908      	ldr	r1, [pc, #32]	; (8004f0c <UARTEx_SetNbDataToProcess+0x98>)
 8004eec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004eee:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004efa:	bf00      	nop
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	08008b0c 	.word	0x08008b0c
 8004f0c:	08008b14 	.word	0x08008b14

08004f10 <__NVIC_SetPriority>:
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	4603      	mov	r3, r0
 8004f18:	6039      	str	r1, [r7, #0]
 8004f1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	db0a      	blt.n	8004f3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	490c      	ldr	r1, [pc, #48]	; (8004f5c <__NVIC_SetPriority+0x4c>)
 8004f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f2e:	0112      	lsls	r2, r2, #4
 8004f30:	b2d2      	uxtb	r2, r2
 8004f32:	440b      	add	r3, r1
 8004f34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004f38:	e00a      	b.n	8004f50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	4908      	ldr	r1, [pc, #32]	; (8004f60 <__NVIC_SetPriority+0x50>)
 8004f40:	88fb      	ldrh	r3, [r7, #6]
 8004f42:	f003 030f 	and.w	r3, r3, #15
 8004f46:	3b04      	subs	r3, #4
 8004f48:	0112      	lsls	r2, r2, #4
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	440b      	add	r3, r1
 8004f4e:	761a      	strb	r2, [r3, #24]
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	e000e100 	.word	0xe000e100
 8004f60:	e000ed00 	.word	0xe000ed00

08004f64 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004f68:	2100      	movs	r1, #0
 8004f6a:	f06f 0004 	mvn.w	r0, #4
 8004f6e:	f7ff ffcf 	bl	8004f10 <__NVIC_SetPriority>
#endif
}
 8004f72:	bf00      	nop
 8004f74:	bd80      	pop	{r7, pc}
	...

08004f78 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f7e:	f3ef 8305 	mrs	r3, IPSR
 8004f82:	603b      	str	r3, [r7, #0]
  return(result);
 8004f84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004f8a:	f06f 0305 	mvn.w	r3, #5
 8004f8e:	607b      	str	r3, [r7, #4]
 8004f90:	e00c      	b.n	8004fac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004f92:	4b0a      	ldr	r3, [pc, #40]	; (8004fbc <osKernelInitialize+0x44>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d105      	bne.n	8004fa6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004f9a:	4b08      	ldr	r3, [pc, #32]	; (8004fbc <osKernelInitialize+0x44>)
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	607b      	str	r3, [r7, #4]
 8004fa4:	e002      	b.n	8004fac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8004faa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004fac:	687b      	ldr	r3, [r7, #4]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	240000bc 	.word	0x240000bc

08004fc0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fc6:	f3ef 8305 	mrs	r3, IPSR
 8004fca:	603b      	str	r3, [r7, #0]
  return(result);
 8004fcc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <osKernelStart+0x1a>
    stat = osErrorISR;
 8004fd2:	f06f 0305 	mvn.w	r3, #5
 8004fd6:	607b      	str	r3, [r7, #4]
 8004fd8:	e010      	b.n	8004ffc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004fda:	4b0b      	ldr	r3, [pc, #44]	; (8005008 <osKernelStart+0x48>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d109      	bne.n	8004ff6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004fe2:	f7ff ffbf 	bl	8004f64 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004fe6:	4b08      	ldr	r3, [pc, #32]	; (8005008 <osKernelStart+0x48>)
 8004fe8:	2202      	movs	r2, #2
 8004fea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004fec:	f001 fcb4 	bl	8006958 <vTaskStartScheduler>
      stat = osOK;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	607b      	str	r3, [r7, #4]
 8004ff4:	e002      	b.n	8004ffc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8004ffa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ffc:	687b      	ldr	r3, [r7, #4]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	240000bc 	.word	0x240000bc

0800500c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800500c:	b580      	push	{r7, lr}
 800500e:	b08e      	sub	sp, #56	; 0x38
 8005010:	af04      	add	r7, sp, #16
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005018:	2300      	movs	r3, #0
 800501a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800501c:	f3ef 8305 	mrs	r3, IPSR
 8005020:	617b      	str	r3, [r7, #20]
  return(result);
 8005022:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005024:	2b00      	cmp	r3, #0
 8005026:	d17e      	bne.n	8005126 <osThreadNew+0x11a>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d07b      	beq.n	8005126 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800502e:	2380      	movs	r3, #128	; 0x80
 8005030:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005032:	2318      	movs	r3, #24
 8005034:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005036:	2300      	movs	r3, #0
 8005038:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800503a:	f04f 33ff 	mov.w	r3, #4294967295
 800503e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d045      	beq.n	80050d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d002      	beq.n	8005054 <osThreadNew+0x48>
        name = attr->name;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d002      	beq.n	8005062 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d008      	beq.n	800507a <osThreadNew+0x6e>
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	2b38      	cmp	r3, #56	; 0x38
 800506c:	d805      	bhi.n	800507a <osThreadNew+0x6e>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <osThreadNew+0x72>
        return (NULL);
 800507a:	2300      	movs	r3, #0
 800507c:	e054      	b.n	8005128 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	089b      	lsrs	r3, r3, #2
 800508c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00e      	beq.n	80050b4 <osThreadNew+0xa8>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	2bbb      	cmp	r3, #187	; 0xbb
 800509c:	d90a      	bls.n	80050b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d006      	beq.n	80050b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d002      	beq.n	80050b4 <osThreadNew+0xa8>
        mem = 1;
 80050ae:	2301      	movs	r3, #1
 80050b0:	61bb      	str	r3, [r7, #24]
 80050b2:	e010      	b.n	80050d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10c      	bne.n	80050d6 <osThreadNew+0xca>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d108      	bne.n	80050d6 <osThreadNew+0xca>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d104      	bne.n	80050d6 <osThreadNew+0xca>
          mem = 0;
 80050cc:	2300      	movs	r3, #0
 80050ce:	61bb      	str	r3, [r7, #24]
 80050d0:	e001      	b.n	80050d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80050d2:	2300      	movs	r3, #0
 80050d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d110      	bne.n	80050fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80050e4:	9202      	str	r2, [sp, #8]
 80050e6:	9301      	str	r3, [sp, #4]
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	6a3a      	ldr	r2, [r7, #32]
 80050f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f001 fa44 	bl	8006580 <xTaskCreateStatic>
 80050f8:	4603      	mov	r3, r0
 80050fa:	613b      	str	r3, [r7, #16]
 80050fc:	e013      	b.n	8005126 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d110      	bne.n	8005126 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	b29a      	uxth	r2, r3
 8005108:	f107 0310 	add.w	r3, r7, #16
 800510c:	9301      	str	r3, [sp, #4]
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f001 fa8f 	bl	800663a <xTaskCreate>
 800511c:	4603      	mov	r3, r0
 800511e:	2b01      	cmp	r3, #1
 8005120:	d001      	beq.n	8005126 <osThreadNew+0x11a>
            hTask = NULL;
 8005122:	2300      	movs	r3, #0
 8005124:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005126:	693b      	ldr	r3, [r7, #16]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3728      	adds	r7, #40	; 0x28
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005138:	f3ef 8305 	mrs	r3, IPSR
 800513c:	60bb      	str	r3, [r7, #8]
  return(result);
 800513e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005140:	2b00      	cmp	r3, #0
 8005142:	d003      	beq.n	800514c <osDelay+0x1c>
    stat = osErrorISR;
 8005144:	f06f 0305 	mvn.w	r3, #5
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	e007      	b.n	800515c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800514c:	2300      	movs	r3, #0
 800514e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d002      	beq.n	800515c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f001 fbca 	bl	80068f0 <vTaskDelay>
    }
  }

  return (stat);
 800515c:	68fb      	ldr	r3, [r7, #12]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4a07      	ldr	r2, [pc, #28]	; (8005194 <vApplicationGetIdleTaskMemory+0x2c>)
 8005178:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	4a06      	ldr	r2, [pc, #24]	; (8005198 <vApplicationGetIdleTaskMemory+0x30>)
 800517e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2280      	movs	r2, #128	; 0x80
 8005184:	601a      	str	r2, [r3, #0]
}
 8005186:	bf00      	nop
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	240000c0 	.word	0x240000c0
 8005198:	2400017c 	.word	0x2400017c

0800519c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4a07      	ldr	r2, [pc, #28]	; (80051c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80051ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	4a06      	ldr	r2, [pc, #24]	; (80051cc <vApplicationGetTimerTaskMemory+0x30>)
 80051b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051ba:	601a      	str	r2, [r3, #0]
}
 80051bc:	bf00      	nop
 80051be:	3714      	adds	r7, #20
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr
 80051c8:	2400037c 	.word	0x2400037c
 80051cc:	24000438 	.word	0x24000438

080051d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b08a      	sub	sp, #40	; 0x28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80051d8:	2300      	movs	r3, #0
 80051da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80051dc:	f001 fc2c 	bl	8006a38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80051e0:	4b5b      	ldr	r3, [pc, #364]	; (8005350 <pvPortMalloc+0x180>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051e8:	f000 f920 	bl	800542c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051ec:	4b59      	ldr	r3, [pc, #356]	; (8005354 <pvPortMalloc+0x184>)
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4013      	ands	r3, r2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f040 8093 	bne.w	8005320 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d01d      	beq.n	800523c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005200:	2208      	movs	r2, #8
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4413      	add	r3, r2
 8005206:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f003 0307 	and.w	r3, r3, #7
 800520e:	2b00      	cmp	r3, #0
 8005210:	d014      	beq.n	800523c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f023 0307 	bic.w	r3, r3, #7
 8005218:	3308      	adds	r3, #8
 800521a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f003 0307 	and.w	r3, r3, #7
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00a      	beq.n	800523c <pvPortMalloc+0x6c>
	__asm volatile
 8005226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	617b      	str	r3, [r7, #20]
}
 8005238:	bf00      	nop
 800523a:	e7fe      	b.n	800523a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d06e      	beq.n	8005320 <pvPortMalloc+0x150>
 8005242:	4b45      	ldr	r3, [pc, #276]	; (8005358 <pvPortMalloc+0x188>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	429a      	cmp	r2, r3
 800524a:	d869      	bhi.n	8005320 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800524c:	4b43      	ldr	r3, [pc, #268]	; (800535c <pvPortMalloc+0x18c>)
 800524e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005250:	4b42      	ldr	r3, [pc, #264]	; (800535c <pvPortMalloc+0x18c>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005256:	e004      	b.n	8005262 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	429a      	cmp	r2, r3
 800526a:	d903      	bls.n	8005274 <pvPortMalloc+0xa4>
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1f1      	bne.n	8005258 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005274:	4b36      	ldr	r3, [pc, #216]	; (8005350 <pvPortMalloc+0x180>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800527a:	429a      	cmp	r2, r3
 800527c:	d050      	beq.n	8005320 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2208      	movs	r2, #8
 8005284:	4413      	add	r3, r2
 8005286:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	1ad2      	subs	r2, r2, r3
 8005298:	2308      	movs	r3, #8
 800529a:	005b      	lsls	r3, r3, #1
 800529c:	429a      	cmp	r2, r3
 800529e:	d91f      	bls.n	80052e0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80052a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4413      	add	r3, r2
 80052a6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	f003 0307 	and.w	r3, r3, #7
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00a      	beq.n	80052c8 <pvPortMalloc+0xf8>
	__asm volatile
 80052b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b6:	f383 8811 	msr	BASEPRI, r3
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	613b      	str	r3, [r7, #16]
}
 80052c4:	bf00      	nop
 80052c6:	e7fe      	b.n	80052c6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	1ad2      	subs	r2, r2, r3
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80052da:	69b8      	ldr	r0, [r7, #24]
 80052dc:	f000 f908 	bl	80054f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052e0:	4b1d      	ldr	r3, [pc, #116]	; (8005358 <pvPortMalloc+0x188>)
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	4a1b      	ldr	r2, [pc, #108]	; (8005358 <pvPortMalloc+0x188>)
 80052ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052ee:	4b1a      	ldr	r3, [pc, #104]	; (8005358 <pvPortMalloc+0x188>)
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	4b1b      	ldr	r3, [pc, #108]	; (8005360 <pvPortMalloc+0x190>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d203      	bcs.n	8005302 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052fa:	4b17      	ldr	r3, [pc, #92]	; (8005358 <pvPortMalloc+0x188>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a18      	ldr	r2, [pc, #96]	; (8005360 <pvPortMalloc+0x190>)
 8005300:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	4b13      	ldr	r3, [pc, #76]	; (8005354 <pvPortMalloc+0x184>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	431a      	orrs	r2, r3
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	2200      	movs	r2, #0
 8005314:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005316:	4b13      	ldr	r3, [pc, #76]	; (8005364 <pvPortMalloc+0x194>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3301      	adds	r3, #1
 800531c:	4a11      	ldr	r2, [pc, #68]	; (8005364 <pvPortMalloc+0x194>)
 800531e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005320:	f001 fb98 	bl	8006a54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <pvPortMalloc+0x174>
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	60fb      	str	r3, [r7, #12]
}
 8005340:	bf00      	nop
 8005342:	e7fe      	b.n	8005342 <pvPortMalloc+0x172>
	return pvReturn;
 8005344:	69fb      	ldr	r3, [r7, #28]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3728      	adds	r7, #40	; 0x28
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	24004440 	.word	0x24004440
 8005354:	24004454 	.word	0x24004454
 8005358:	24004444 	.word	0x24004444
 800535c:	24004438 	.word	0x24004438
 8005360:	24004448 	.word	0x24004448
 8005364:	2400444c 	.word	0x2400444c

08005368 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d04d      	beq.n	8005416 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800537a:	2308      	movs	r3, #8
 800537c:	425b      	negs	r3, r3
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	4413      	add	r3, r2
 8005382:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	4b24      	ldr	r3, [pc, #144]	; (8005420 <vPortFree+0xb8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4013      	ands	r3, r2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10a      	bne.n	80053ac <vPortFree+0x44>
	__asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	60fb      	str	r3, [r7, #12]
}
 80053a8:	bf00      	nop
 80053aa:	e7fe      	b.n	80053aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00a      	beq.n	80053ca <vPortFree+0x62>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	60bb      	str	r3, [r7, #8]
}
 80053c6:	bf00      	nop
 80053c8:	e7fe      	b.n	80053c8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	4b14      	ldr	r3, [pc, #80]	; (8005420 <vPortFree+0xb8>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4013      	ands	r3, r2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d01e      	beq.n	8005416 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d11a      	bne.n	8005416 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	4b0e      	ldr	r3, [pc, #56]	; (8005420 <vPortFree+0xb8>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	43db      	mvns	r3, r3
 80053ea:	401a      	ands	r2, r3
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053f0:	f001 fb22 	bl	8006a38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	4b0a      	ldr	r3, [pc, #40]	; (8005424 <vPortFree+0xbc>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4413      	add	r3, r2
 80053fe:	4a09      	ldr	r2, [pc, #36]	; (8005424 <vPortFree+0xbc>)
 8005400:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005402:	6938      	ldr	r0, [r7, #16]
 8005404:	f000 f874 	bl	80054f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005408:	4b07      	ldr	r3, [pc, #28]	; (8005428 <vPortFree+0xc0>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3301      	adds	r3, #1
 800540e:	4a06      	ldr	r2, [pc, #24]	; (8005428 <vPortFree+0xc0>)
 8005410:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005412:	f001 fb1f 	bl	8006a54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005416:	bf00      	nop
 8005418:	3718      	adds	r7, #24
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	24004454 	.word	0x24004454
 8005424:	24004444 	.word	0x24004444
 8005428:	24004450 	.word	0x24004450

0800542c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005432:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005436:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005438:	4b27      	ldr	r3, [pc, #156]	; (80054d8 <prvHeapInit+0xac>)
 800543a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00c      	beq.n	8005460 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	3307      	adds	r3, #7
 800544a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f023 0307 	bic.w	r3, r3, #7
 8005452:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	4a1f      	ldr	r2, [pc, #124]	; (80054d8 <prvHeapInit+0xac>)
 800545c:	4413      	add	r3, r2
 800545e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005464:	4a1d      	ldr	r2, [pc, #116]	; (80054dc <prvHeapInit+0xb0>)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800546a:	4b1c      	ldr	r3, [pc, #112]	; (80054dc <prvHeapInit+0xb0>)
 800546c:	2200      	movs	r2, #0
 800546e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	4413      	add	r3, r2
 8005476:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005478:	2208      	movs	r2, #8
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	1a9b      	subs	r3, r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f023 0307 	bic.w	r3, r3, #7
 8005486:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4a15      	ldr	r2, [pc, #84]	; (80054e0 <prvHeapInit+0xb4>)
 800548c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800548e:	4b14      	ldr	r3, [pc, #80]	; (80054e0 <prvHeapInit+0xb4>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2200      	movs	r2, #0
 8005494:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005496:	4b12      	ldr	r3, [pc, #72]	; (80054e0 <prvHeapInit+0xb4>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2200      	movs	r2, #0
 800549c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	1ad2      	subs	r2, r2, r3
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80054ac:	4b0c      	ldr	r3, [pc, #48]	; (80054e0 <prvHeapInit+0xb4>)
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	4a0a      	ldr	r2, [pc, #40]	; (80054e4 <prvHeapInit+0xb8>)
 80054ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	4a09      	ldr	r2, [pc, #36]	; (80054e8 <prvHeapInit+0xbc>)
 80054c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80054c4:	4b09      	ldr	r3, [pc, #36]	; (80054ec <prvHeapInit+0xc0>)
 80054c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80054ca:	601a      	str	r2, [r3, #0]
}
 80054cc:	bf00      	nop
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	24000838 	.word	0x24000838
 80054dc:	24004438 	.word	0x24004438
 80054e0:	24004440 	.word	0x24004440
 80054e4:	24004448 	.word	0x24004448
 80054e8:	24004444 	.word	0x24004444
 80054ec:	24004454 	.word	0x24004454

080054f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054f8:	4b28      	ldr	r3, [pc, #160]	; (800559c <prvInsertBlockIntoFreeList+0xac>)
 80054fa:	60fb      	str	r3, [r7, #12]
 80054fc:	e002      	b.n	8005504 <prvInsertBlockIntoFreeList+0x14>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	429a      	cmp	r2, r3
 800550c:	d8f7      	bhi.n	80054fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	4413      	add	r3, r2
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	429a      	cmp	r2, r3
 800551e:	d108      	bne.n	8005532 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	441a      	add	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	441a      	add	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	429a      	cmp	r2, r3
 8005544:	d118      	bne.n	8005578 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	4b15      	ldr	r3, [pc, #84]	; (80055a0 <prvInsertBlockIntoFreeList+0xb0>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	429a      	cmp	r2, r3
 8005550:	d00d      	beq.n	800556e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	441a      	add	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	601a      	str	r2, [r3, #0]
 800556c:	e008      	b.n	8005580 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800556e:	4b0c      	ldr	r3, [pc, #48]	; (80055a0 <prvInsertBlockIntoFreeList+0xb0>)
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	e003      	b.n	8005580 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	429a      	cmp	r2, r3
 8005586:	d002      	beq.n	800558e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800558e:	bf00      	nop
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	24004438 	.word	0x24004438
 80055a0:	24004440 	.word	0x24004440

080055a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f103 0208 	add.w	r2, r3, #8
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f04f 32ff 	mov.w	r2, #4294967295
 80055bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f103 0208 	add.w	r2, r3, #8
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f103 0208 	add.w	r2, r3, #8
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055f2:	bf00      	nop
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055fe:	b480      	push	{r7}
 8005600:	b085      	sub	sp, #20
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
 8005606:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	689a      	ldr	r2, [r3, #8]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	1c5a      	adds	r2, r3, #1
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	601a      	str	r2, [r3, #0]
}
 800563a:	bf00      	nop
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005646:	b480      	push	{r7}
 8005648:	b085      	sub	sp, #20
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
 800564e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800565c:	d103      	bne.n	8005666 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	e00c      	b.n	8005680 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	3308      	adds	r3, #8
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	e002      	b.n	8005674 <vListInsert+0x2e>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	429a      	cmp	r2, r3
 800567e:	d2f6      	bcs.n	800566e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	601a      	str	r2, [r3, #0]
}
 80056ac:	bf00      	nop
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	6892      	ldr	r2, [r2, #8]
 80056ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	6852      	ldr	r2, [r2, #4]
 80056d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d103      	bne.n	80056ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689a      	ldr	r2, [r3, #8]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	1e5a      	subs	r2, r3, #1
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
}
 8005700:	4618      	mov	r0, r3
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	3b04      	subs	r3, #4
 800571c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005724:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	3b04      	subs	r3, #4
 800572a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	f023 0201 	bic.w	r2, r3, #1
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	3b04      	subs	r3, #4
 800573a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800573c:	4a0c      	ldr	r2, [pc, #48]	; (8005770 <pxPortInitialiseStack+0x64>)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	3b14      	subs	r3, #20
 8005746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	3b04      	subs	r3, #4
 8005752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f06f 0202 	mvn.w	r2, #2
 800575a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	3b20      	subs	r3, #32
 8005760:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005762:	68fb      	ldr	r3, [r7, #12]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	08005775 	.word	0x08005775

08005774 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800577a:	2300      	movs	r3, #0
 800577c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800577e:	4b12      	ldr	r3, [pc, #72]	; (80057c8 <prvTaskExitError+0x54>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005786:	d00a      	beq.n	800579e <prvTaskExitError+0x2a>
	__asm volatile
 8005788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578c:	f383 8811 	msr	BASEPRI, r3
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	60fb      	str	r3, [r7, #12]
}
 800579a:	bf00      	nop
 800579c:	e7fe      	b.n	800579c <prvTaskExitError+0x28>
	__asm volatile
 800579e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	60bb      	str	r3, [r7, #8]
}
 80057b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80057b2:	bf00      	nop
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d0fc      	beq.n	80057b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80057ba:	bf00      	nop
 80057bc:	bf00      	nop
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	24000010 	.word	0x24000010
 80057cc:	00000000 	.word	0x00000000

080057d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80057d0:	4b07      	ldr	r3, [pc, #28]	; (80057f0 <pxCurrentTCBConst2>)
 80057d2:	6819      	ldr	r1, [r3, #0]
 80057d4:	6808      	ldr	r0, [r1, #0]
 80057d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057da:	f380 8809 	msr	PSP, r0
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f04f 0000 	mov.w	r0, #0
 80057e6:	f380 8811 	msr	BASEPRI, r0
 80057ea:	4770      	bx	lr
 80057ec:	f3af 8000 	nop.w

080057f0 <pxCurrentTCBConst2>:
 80057f0:	24004460 	.word	0x24004460
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80057f4:	bf00      	nop
 80057f6:	bf00      	nop

080057f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80057f8:	4808      	ldr	r0, [pc, #32]	; (800581c <prvPortStartFirstTask+0x24>)
 80057fa:	6800      	ldr	r0, [r0, #0]
 80057fc:	6800      	ldr	r0, [r0, #0]
 80057fe:	f380 8808 	msr	MSP, r0
 8005802:	f04f 0000 	mov.w	r0, #0
 8005806:	f380 8814 	msr	CONTROL, r0
 800580a:	b662      	cpsie	i
 800580c:	b661      	cpsie	f
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	df00      	svc	0
 8005818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800581a:	bf00      	nop
 800581c:	e000ed08 	.word	0xe000ed08

08005820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005826:	4b46      	ldr	r3, [pc, #280]	; (8005940 <xPortStartScheduler+0x120>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a46      	ldr	r2, [pc, #280]	; (8005944 <xPortStartScheduler+0x124>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d10a      	bne.n	8005846 <xPortStartScheduler+0x26>
	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	613b      	str	r3, [r7, #16]
}
 8005842:	bf00      	nop
 8005844:	e7fe      	b.n	8005844 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005846:	4b3e      	ldr	r3, [pc, #248]	; (8005940 <xPortStartScheduler+0x120>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a3f      	ldr	r2, [pc, #252]	; (8005948 <xPortStartScheduler+0x128>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d10a      	bne.n	8005866 <xPortStartScheduler+0x46>
	__asm volatile
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	60fb      	str	r3, [r7, #12]
}
 8005862:	bf00      	nop
 8005864:	e7fe      	b.n	8005864 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005866:	4b39      	ldr	r3, [pc, #228]	; (800594c <xPortStartScheduler+0x12c>)
 8005868:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	b2db      	uxtb	r3, r3
 8005870:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	22ff      	movs	r2, #255	; 0xff
 8005876:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	b2db      	uxtb	r3, r3
 800587e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005880:	78fb      	ldrb	r3, [r7, #3]
 8005882:	b2db      	uxtb	r3, r3
 8005884:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005888:	b2da      	uxtb	r2, r3
 800588a:	4b31      	ldr	r3, [pc, #196]	; (8005950 <xPortStartScheduler+0x130>)
 800588c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800588e:	4b31      	ldr	r3, [pc, #196]	; (8005954 <xPortStartScheduler+0x134>)
 8005890:	2207      	movs	r2, #7
 8005892:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005894:	e009      	b.n	80058aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005896:	4b2f      	ldr	r3, [pc, #188]	; (8005954 <xPortStartScheduler+0x134>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3b01      	subs	r3, #1
 800589c:	4a2d      	ldr	r2, [pc, #180]	; (8005954 <xPortStartScheduler+0x134>)
 800589e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80058a0:	78fb      	ldrb	r3, [r7, #3]
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058aa:	78fb      	ldrb	r3, [r7, #3]
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b2:	2b80      	cmp	r3, #128	; 0x80
 80058b4:	d0ef      	beq.n	8005896 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80058b6:	4b27      	ldr	r3, [pc, #156]	; (8005954 <xPortStartScheduler+0x134>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f1c3 0307 	rsb	r3, r3, #7
 80058be:	2b04      	cmp	r3, #4
 80058c0:	d00a      	beq.n	80058d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80058c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	60bb      	str	r3, [r7, #8]
}
 80058d4:	bf00      	nop
 80058d6:	e7fe      	b.n	80058d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80058d8:	4b1e      	ldr	r3, [pc, #120]	; (8005954 <xPortStartScheduler+0x134>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	021b      	lsls	r3, r3, #8
 80058de:	4a1d      	ldr	r2, [pc, #116]	; (8005954 <xPortStartScheduler+0x134>)
 80058e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80058e2:	4b1c      	ldr	r3, [pc, #112]	; (8005954 <xPortStartScheduler+0x134>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058ea:	4a1a      	ldr	r2, [pc, #104]	; (8005954 <xPortStartScheduler+0x134>)
 80058ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80058f6:	4b18      	ldr	r3, [pc, #96]	; (8005958 <xPortStartScheduler+0x138>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a17      	ldr	r2, [pc, #92]	; (8005958 <xPortStartScheduler+0x138>)
 80058fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005900:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005902:	4b15      	ldr	r3, [pc, #84]	; (8005958 <xPortStartScheduler+0x138>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a14      	ldr	r2, [pc, #80]	; (8005958 <xPortStartScheduler+0x138>)
 8005908:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800590c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800590e:	f000 f8dd 	bl	8005acc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005912:	4b12      	ldr	r3, [pc, #72]	; (800595c <xPortStartScheduler+0x13c>)
 8005914:	2200      	movs	r2, #0
 8005916:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005918:	f000 f8fc 	bl	8005b14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800591c:	4b10      	ldr	r3, [pc, #64]	; (8005960 <xPortStartScheduler+0x140>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a0f      	ldr	r2, [pc, #60]	; (8005960 <xPortStartScheduler+0x140>)
 8005922:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005926:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005928:	f7ff ff66 	bl	80057f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800592c:	f001 f9fa 	bl	8006d24 <vTaskSwitchContext>
	prvTaskExitError();
 8005930:	f7ff ff20 	bl	8005774 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	e000ed00 	.word	0xe000ed00
 8005944:	410fc271 	.word	0x410fc271
 8005948:	410fc270 	.word	0x410fc270
 800594c:	e000e400 	.word	0xe000e400
 8005950:	24004458 	.word	0x24004458
 8005954:	2400445c 	.word	0x2400445c
 8005958:	e000ed20 	.word	0xe000ed20
 800595c:	24000010 	.word	0x24000010
 8005960:	e000ef34 	.word	0xe000ef34

08005964 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
	__asm volatile
 800596a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596e:	f383 8811 	msr	BASEPRI, r3
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	607b      	str	r3, [r7, #4]
}
 800597c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800597e:	4b0f      	ldr	r3, [pc, #60]	; (80059bc <vPortEnterCritical+0x58>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3301      	adds	r3, #1
 8005984:	4a0d      	ldr	r2, [pc, #52]	; (80059bc <vPortEnterCritical+0x58>)
 8005986:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005988:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <vPortEnterCritical+0x58>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d10f      	bne.n	80059b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005990:	4b0b      	ldr	r3, [pc, #44]	; (80059c0 <vPortEnterCritical+0x5c>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00a      	beq.n	80059b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800599a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599e:	f383 8811 	msr	BASEPRI, r3
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	603b      	str	r3, [r7, #0]
}
 80059ac:	bf00      	nop
 80059ae:	e7fe      	b.n	80059ae <vPortEnterCritical+0x4a>
	}
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	24000010 	.word	0x24000010
 80059c0:	e000ed04 	.word	0xe000ed04

080059c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80059ca:	4b12      	ldr	r3, [pc, #72]	; (8005a14 <vPortExitCritical+0x50>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10a      	bne.n	80059e8 <vPortExitCritical+0x24>
	__asm volatile
 80059d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	607b      	str	r3, [r7, #4]
}
 80059e4:	bf00      	nop
 80059e6:	e7fe      	b.n	80059e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80059e8:	4b0a      	ldr	r3, [pc, #40]	; (8005a14 <vPortExitCritical+0x50>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3b01      	subs	r3, #1
 80059ee:	4a09      	ldr	r2, [pc, #36]	; (8005a14 <vPortExitCritical+0x50>)
 80059f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80059f2:	4b08      	ldr	r3, [pc, #32]	; (8005a14 <vPortExitCritical+0x50>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d105      	bne.n	8005a06 <vPortExitCritical+0x42>
 80059fa:	2300      	movs	r3, #0
 80059fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	f383 8811 	msr	BASEPRI, r3
}
 8005a04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a06:	bf00      	nop
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	24000010 	.word	0x24000010
	...

08005a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a20:	f3ef 8009 	mrs	r0, PSP
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	4b15      	ldr	r3, [pc, #84]	; (8005a80 <pxCurrentTCBConst>)
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	f01e 0f10 	tst.w	lr, #16
 8005a30:	bf08      	it	eq
 8005a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a3a:	6010      	str	r0, [r2, #0]
 8005a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a44:	f380 8811 	msr	BASEPRI, r0
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f001 f968 	bl	8006d24 <vTaskSwitchContext>
 8005a54:	f04f 0000 	mov.w	r0, #0
 8005a58:	f380 8811 	msr	BASEPRI, r0
 8005a5c:	bc09      	pop	{r0, r3}
 8005a5e:	6819      	ldr	r1, [r3, #0]
 8005a60:	6808      	ldr	r0, [r1, #0]
 8005a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a66:	f01e 0f10 	tst.w	lr, #16
 8005a6a:	bf08      	it	eq
 8005a6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a70:	f380 8809 	msr	PSP, r0
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	f3af 8000 	nop.w

08005a80 <pxCurrentTCBConst>:
 8005a80:	24004460 	.word	0x24004460
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a84:	bf00      	nop
 8005a86:	bf00      	nop

08005a88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a92:	f383 8811 	msr	BASEPRI, r3
 8005a96:	f3bf 8f6f 	isb	sy
 8005a9a:	f3bf 8f4f 	dsb	sy
 8005a9e:	607b      	str	r3, [r7, #4]
}
 8005aa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005aa2:	f001 f885 	bl	8006bb0 <xTaskIncrementTick>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005aac:	4b06      	ldr	r3, [pc, #24]	; (8005ac8 <xPortSysTickHandler+0x40>)
 8005aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	f383 8811 	msr	BASEPRI, r3
}
 8005abe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ac0:	bf00      	nop
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	e000ed04 	.word	0xe000ed04

08005acc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005acc:	b480      	push	{r7}
 8005ace:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ad0:	4b0b      	ldr	r3, [pc, #44]	; (8005b00 <vPortSetupTimerInterrupt+0x34>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ad6:	4b0b      	ldr	r3, [pc, #44]	; (8005b04 <vPortSetupTimerInterrupt+0x38>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005adc:	4b0a      	ldr	r3, [pc, #40]	; (8005b08 <vPortSetupTimerInterrupt+0x3c>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a0a      	ldr	r2, [pc, #40]	; (8005b0c <vPortSetupTimerInterrupt+0x40>)
 8005ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae6:	099b      	lsrs	r3, r3, #6
 8005ae8:	4a09      	ldr	r2, [pc, #36]	; (8005b10 <vPortSetupTimerInterrupt+0x44>)
 8005aea:	3b01      	subs	r3, #1
 8005aec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005aee:	4b04      	ldr	r3, [pc, #16]	; (8005b00 <vPortSetupTimerInterrupt+0x34>)
 8005af0:	2207      	movs	r2, #7
 8005af2:	601a      	str	r2, [r3, #0]
}
 8005af4:	bf00      	nop
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	e000e010 	.word	0xe000e010
 8005b04:	e000e018 	.word	0xe000e018
 8005b08:	24000000 	.word	0x24000000
 8005b0c:	10624dd3 	.word	0x10624dd3
 8005b10:	e000e014 	.word	0xe000e014

08005b14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005b24 <vPortEnableVFP+0x10>
 8005b18:	6801      	ldr	r1, [r0, #0]
 8005b1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005b1e:	6001      	str	r1, [r0, #0]
 8005b20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b22:	bf00      	nop
 8005b24:	e000ed88 	.word	0xe000ed88

08005b28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b2e:	f3ef 8305 	mrs	r3, IPSR
 8005b32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2b0f      	cmp	r3, #15
 8005b38:	d914      	bls.n	8005b64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b3a:	4a17      	ldr	r2, [pc, #92]	; (8005b98 <vPortValidateInterruptPriority+0x70>)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4413      	add	r3, r2
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005b44:	4b15      	ldr	r3, [pc, #84]	; (8005b9c <vPortValidateInterruptPriority+0x74>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	7afa      	ldrb	r2, [r7, #11]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d20a      	bcs.n	8005b64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	607b      	str	r3, [r7, #4]
}
 8005b60:	bf00      	nop
 8005b62:	e7fe      	b.n	8005b62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b64:	4b0e      	ldr	r3, [pc, #56]	; (8005ba0 <vPortValidateInterruptPriority+0x78>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b6c:	4b0d      	ldr	r3, [pc, #52]	; (8005ba4 <vPortValidateInterruptPriority+0x7c>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d90a      	bls.n	8005b8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b78:	f383 8811 	msr	BASEPRI, r3
 8005b7c:	f3bf 8f6f 	isb	sy
 8005b80:	f3bf 8f4f 	dsb	sy
 8005b84:	603b      	str	r3, [r7, #0]
}
 8005b86:	bf00      	nop
 8005b88:	e7fe      	b.n	8005b88 <vPortValidateInterruptPriority+0x60>
	}
 8005b8a:	bf00      	nop
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	e000e3f0 	.word	0xe000e3f0
 8005b9c:	24004458 	.word	0x24004458
 8005ba0:	e000ed0c 	.word	0xe000ed0c
 8005ba4:	2400445c 	.word	0x2400445c

08005ba8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10a      	bne.n	8005bd2 <xQueueGenericReset+0x2a>
	__asm volatile
 8005bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	60bb      	str	r3, [r7, #8]
}
 8005bce:	bf00      	nop
 8005bd0:	e7fe      	b.n	8005bd0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005bd2:	f7ff fec7 	bl	8005964 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bde:	68f9      	ldr	r1, [r7, #12]
 8005be0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005be2:	fb01 f303 	mul.w	r3, r1, r3
 8005be6:	441a      	add	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c02:	3b01      	subs	r3, #1
 8005c04:	68f9      	ldr	r1, [r7, #12]
 8005c06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c08:	fb01 f303 	mul.w	r3, r1, r3
 8005c0c:	441a      	add	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	22ff      	movs	r2, #255	; 0xff
 8005c16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	22ff      	movs	r2, #255	; 0xff
 8005c1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d114      	bne.n	8005c52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d01a      	beq.n	8005c66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	3310      	adds	r3, #16
 8005c34:	4618      	mov	r0, r3
 8005c36:	f001 f929 	bl	8006e8c <xTaskRemoveFromEventList>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d012      	beq.n	8005c66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005c40:	4b0c      	ldr	r3, [pc, #48]	; (8005c74 <xQueueGenericReset+0xcc>)
 8005c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c46:	601a      	str	r2, [r3, #0]
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	e009      	b.n	8005c66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	3310      	adds	r3, #16
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7ff fca4 	bl	80055a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	3324      	adds	r3, #36	; 0x24
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7ff fc9f 	bl	80055a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005c66:	f7ff fead 	bl	80059c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005c6a:	2301      	movs	r3, #1
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	e000ed04 	.word	0xe000ed04

08005c78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08e      	sub	sp, #56	; 0x38
 8005c7c:	af02      	add	r7, sp, #8
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
 8005c84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10a      	bne.n	8005ca2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c90:	f383 8811 	msr	BASEPRI, r3
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c9e:	bf00      	nop
 8005ca0:	e7fe      	b.n	8005ca0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10a      	bne.n	8005cbe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005cba:	bf00      	nop
 8005cbc:	e7fe      	b.n	8005cbc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <xQueueGenericCreateStatic+0x52>
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <xQueueGenericCreateStatic+0x56>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e000      	b.n	8005cd0 <xQueueGenericCreateStatic+0x58>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10a      	bne.n	8005cea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd8:	f383 8811 	msr	BASEPRI, r3
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	623b      	str	r3, [r7, #32]
}
 8005ce6:	bf00      	nop
 8005ce8:	e7fe      	b.n	8005ce8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d102      	bne.n	8005cf6 <xQueueGenericCreateStatic+0x7e>
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <xQueueGenericCreateStatic+0x82>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e000      	b.n	8005cfc <xQueueGenericCreateStatic+0x84>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10a      	bne.n	8005d16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	61fb      	str	r3, [r7, #28]
}
 8005d12:	bf00      	nop
 8005d14:	e7fe      	b.n	8005d14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d16:	2350      	movs	r3, #80	; 0x50
 8005d18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2b50      	cmp	r3, #80	; 0x50
 8005d1e:	d00a      	beq.n	8005d36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d24:	f383 8811 	msr	BASEPRI, r3
 8005d28:	f3bf 8f6f 	isb	sy
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	61bb      	str	r3, [r7, #24]
}
 8005d32:	bf00      	nop
 8005d34:	e7fe      	b.n	8005d34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005d36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00d      	beq.n	8005d5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	4613      	mov	r3, r2
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	68b9      	ldr	r1, [r7, #8]
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 f805 	bl	8005d68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3730      	adds	r7, #48	; 0x30
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
 8005d74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d103      	bne.n	8005d84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	e002      	b.n	8005d8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d96:	2101      	movs	r1, #1
 8005d98:	69b8      	ldr	r0, [r7, #24]
 8005d9a:	f7ff ff05 	bl	8005ba8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	78fa      	ldrb	r2, [r7, #3]
 8005da2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005da6:	bf00      	nop
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
	...

08005db0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b08e      	sub	sp, #56	; 0x38
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
 8005dbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10a      	bne.n	8005de2 <xQueueGenericSend+0x32>
	__asm volatile
 8005dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005dde:	bf00      	nop
 8005de0:	e7fe      	b.n	8005de0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d103      	bne.n	8005df0 <xQueueGenericSend+0x40>
 8005de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d101      	bne.n	8005df4 <xQueueGenericSend+0x44>
 8005df0:	2301      	movs	r3, #1
 8005df2:	e000      	b.n	8005df6 <xQueueGenericSend+0x46>
 8005df4:	2300      	movs	r3, #0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10a      	bne.n	8005e10 <xQueueGenericSend+0x60>
	__asm volatile
 8005dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfe:	f383 8811 	msr	BASEPRI, r3
 8005e02:	f3bf 8f6f 	isb	sy
 8005e06:	f3bf 8f4f 	dsb	sy
 8005e0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e0c:	bf00      	nop
 8005e0e:	e7fe      	b.n	8005e0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d103      	bne.n	8005e1e <xQueueGenericSend+0x6e>
 8005e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d101      	bne.n	8005e22 <xQueueGenericSend+0x72>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e000      	b.n	8005e24 <xQueueGenericSend+0x74>
 8005e22:	2300      	movs	r3, #0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10a      	bne.n	8005e3e <xQueueGenericSend+0x8e>
	__asm volatile
 8005e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	623b      	str	r3, [r7, #32]
}
 8005e3a:	bf00      	nop
 8005e3c:	e7fe      	b.n	8005e3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e3e:	f001 f9e7 	bl	8007210 <xTaskGetSchedulerState>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d102      	bne.n	8005e4e <xQueueGenericSend+0x9e>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <xQueueGenericSend+0xa2>
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e000      	b.n	8005e54 <xQueueGenericSend+0xa4>
 8005e52:	2300      	movs	r3, #0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10a      	bne.n	8005e6e <xQueueGenericSend+0xbe>
	__asm volatile
 8005e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5c:	f383 8811 	msr	BASEPRI, r3
 8005e60:	f3bf 8f6f 	isb	sy
 8005e64:	f3bf 8f4f 	dsb	sy
 8005e68:	61fb      	str	r3, [r7, #28]
}
 8005e6a:	bf00      	nop
 8005e6c:	e7fe      	b.n	8005e6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e6e:	f7ff fd79 	bl	8005964 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d302      	bcc.n	8005e84 <xQueueGenericSend+0xd4>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d129      	bne.n	8005ed8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	68b9      	ldr	r1, [r7, #8]
 8005e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e8a:	f000 fa0b 	bl	80062a4 <prvCopyDataToQueue>
 8005e8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d010      	beq.n	8005eba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9a:	3324      	adds	r3, #36	; 0x24
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f000 fff5 	bl	8006e8c <xTaskRemoveFromEventList>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d013      	beq.n	8005ed0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ea8:	4b3f      	ldr	r3, [pc, #252]	; (8005fa8 <xQueueGenericSend+0x1f8>)
 8005eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eae:	601a      	str	r2, [r3, #0]
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	e00a      	b.n	8005ed0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d007      	beq.n	8005ed0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ec0:	4b39      	ldr	r3, [pc, #228]	; (8005fa8 <xQueueGenericSend+0x1f8>)
 8005ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ec6:	601a      	str	r2, [r3, #0]
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ed0:	f7ff fd78 	bl	80059c4 <vPortExitCritical>
				return pdPASS;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e063      	b.n	8005fa0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d103      	bne.n	8005ee6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ede:	f7ff fd71 	bl	80059c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	e05c      	b.n	8005fa0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d106      	bne.n	8005efa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005eec:	f107 0314 	add.w	r3, r7, #20
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f001 f82f 	bl	8006f54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005efa:	f7ff fd63 	bl	80059c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005efe:	f000 fd9b 	bl	8006a38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f02:	f7ff fd2f 	bl	8005964 <vPortEnterCritical>
 8005f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f0c:	b25b      	sxtb	r3, r3
 8005f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f12:	d103      	bne.n	8005f1c <xQueueGenericSend+0x16c>
 8005f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f22:	b25b      	sxtb	r3, r3
 8005f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f28:	d103      	bne.n	8005f32 <xQueueGenericSend+0x182>
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f32:	f7ff fd47 	bl	80059c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f36:	1d3a      	adds	r2, r7, #4
 8005f38:	f107 0314 	add.w	r3, r7, #20
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f001 f81e 	bl	8006f80 <xTaskCheckForTimeOut>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d124      	bne.n	8005f94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f4c:	f000 faa2 	bl	8006494 <prvIsQueueFull>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d018      	beq.n	8005f88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f58:	3310      	adds	r3, #16
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	4611      	mov	r1, r2
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 ff44 	bl	8006dec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f66:	f000 fa2d 	bl	80063c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f6a:	f000 fd73 	bl	8006a54 <xTaskResumeAll>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f47f af7c 	bne.w	8005e6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005f76:	4b0c      	ldr	r3, [pc, #48]	; (8005fa8 <xQueueGenericSend+0x1f8>)
 8005f78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	f3bf 8f6f 	isb	sy
 8005f86:	e772      	b.n	8005e6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f8a:	f000 fa1b 	bl	80063c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f8e:	f000 fd61 	bl	8006a54 <xTaskResumeAll>
 8005f92:	e76c      	b.n	8005e6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f96:	f000 fa15 	bl	80063c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f9a:	f000 fd5b 	bl	8006a54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3738      	adds	r7, #56	; 0x38
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	e000ed04 	.word	0xe000ed04

08005fac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b090      	sub	sp, #64	; 0x40
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
 8005fb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10a      	bne.n	8005fda <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005fd6:	bf00      	nop
 8005fd8:	e7fe      	b.n	8005fd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d103      	bne.n	8005fe8 <xQueueGenericSendFromISR+0x3c>
 8005fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d101      	bne.n	8005fec <xQueueGenericSendFromISR+0x40>
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e000      	b.n	8005fee <xQueueGenericSendFromISR+0x42>
 8005fec:	2300      	movs	r3, #0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10a      	bne.n	8006008 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006004:	bf00      	nop
 8006006:	e7fe      	b.n	8006006 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	2b02      	cmp	r3, #2
 800600c:	d103      	bne.n	8006016 <xQueueGenericSendFromISR+0x6a>
 800600e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006012:	2b01      	cmp	r3, #1
 8006014:	d101      	bne.n	800601a <xQueueGenericSendFromISR+0x6e>
 8006016:	2301      	movs	r3, #1
 8006018:	e000      	b.n	800601c <xQueueGenericSendFromISR+0x70>
 800601a:	2300      	movs	r3, #0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10a      	bne.n	8006036 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006024:	f383 8811 	msr	BASEPRI, r3
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	623b      	str	r3, [r7, #32]
}
 8006032:	bf00      	nop
 8006034:	e7fe      	b.n	8006034 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006036:	f7ff fd77 	bl	8005b28 <vPortValidateInterruptPriority>
	__asm volatile
 800603a:	f3ef 8211 	mrs	r2, BASEPRI
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	61fa      	str	r2, [r7, #28]
 8006050:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006052:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006054:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800605a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800605c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605e:	429a      	cmp	r2, r3
 8006060:	d302      	bcc.n	8006068 <xQueueGenericSendFromISR+0xbc>
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	2b02      	cmp	r3, #2
 8006066:	d12f      	bne.n	80060c8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800606e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006076:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	68b9      	ldr	r1, [r7, #8]
 800607c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800607e:	f000 f911 	bl	80062a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006082:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608a:	d112      	bne.n	80060b2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800608c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006090:	2b00      	cmp	r3, #0
 8006092:	d016      	beq.n	80060c2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006096:	3324      	adds	r3, #36	; 0x24
 8006098:	4618      	mov	r0, r3
 800609a:	f000 fef7 	bl	8006e8c <xTaskRemoveFromEventList>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00e      	beq.n	80060c2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00b      	beq.n	80060c2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	601a      	str	r2, [r3, #0]
 80060b0:	e007      	b.n	80060c2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80060b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80060b6:	3301      	adds	r3, #1
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	b25a      	sxtb	r2, r3
 80060bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80060c2:	2301      	movs	r3, #1
 80060c4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80060c6:	e001      	b.n	80060cc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80060c8:	2300      	movs	r3, #0
 80060ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ce:	617b      	str	r3, [r7, #20]
	__asm volatile
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f383 8811 	msr	BASEPRI, r3
}
 80060d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80060d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3740      	adds	r7, #64	; 0x40
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
	...

080060e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b08c      	sub	sp, #48	; 0x30
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80060f0:	2300      	movs	r3, #0
 80060f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80060f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10a      	bne.n	8006114 <xQueueReceive+0x30>
	__asm volatile
 80060fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	623b      	str	r3, [r7, #32]
}
 8006110:	bf00      	nop
 8006112:	e7fe      	b.n	8006112 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d103      	bne.n	8006122 <xQueueReceive+0x3e>
 800611a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <xQueueReceive+0x42>
 8006122:	2301      	movs	r3, #1
 8006124:	e000      	b.n	8006128 <xQueueReceive+0x44>
 8006126:	2300      	movs	r3, #0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10a      	bne.n	8006142 <xQueueReceive+0x5e>
	__asm volatile
 800612c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	61fb      	str	r3, [r7, #28]
}
 800613e:	bf00      	nop
 8006140:	e7fe      	b.n	8006140 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006142:	f001 f865 	bl	8007210 <xTaskGetSchedulerState>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d102      	bne.n	8006152 <xQueueReceive+0x6e>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <xQueueReceive+0x72>
 8006152:	2301      	movs	r3, #1
 8006154:	e000      	b.n	8006158 <xQueueReceive+0x74>
 8006156:	2300      	movs	r3, #0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10a      	bne.n	8006172 <xQueueReceive+0x8e>
	__asm volatile
 800615c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006160:	f383 8811 	msr	BASEPRI, r3
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	61bb      	str	r3, [r7, #24]
}
 800616e:	bf00      	nop
 8006170:	e7fe      	b.n	8006170 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006172:	f7ff fbf7 	bl	8005964 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	2b00      	cmp	r3, #0
 8006180:	d01f      	beq.n	80061c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006182:	68b9      	ldr	r1, [r7, #8]
 8006184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006186:	f000 f8f7 	bl	8006378 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	1e5a      	subs	r2, r3, #1
 800618e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006190:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00f      	beq.n	80061ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619c:	3310      	adds	r3, #16
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 fe74 	bl	8006e8c <xTaskRemoveFromEventList>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d007      	beq.n	80061ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80061aa:	4b3d      	ldr	r3, [pc, #244]	; (80062a0 <xQueueReceive+0x1bc>)
 80061ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061b0:	601a      	str	r2, [r3, #0]
 80061b2:	f3bf 8f4f 	dsb	sy
 80061b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80061ba:	f7ff fc03 	bl	80059c4 <vPortExitCritical>
				return pdPASS;
 80061be:	2301      	movs	r3, #1
 80061c0:	e069      	b.n	8006296 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d103      	bne.n	80061d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061c8:	f7ff fbfc 	bl	80059c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80061cc:	2300      	movs	r3, #0
 80061ce:	e062      	b.n	8006296 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d106      	bne.n	80061e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061d6:	f107 0310 	add.w	r3, r7, #16
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 feba 	bl	8006f54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061e0:	2301      	movs	r3, #1
 80061e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061e4:	f7ff fbee 	bl	80059c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061e8:	f000 fc26 	bl	8006a38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061ec:	f7ff fbba 	bl	8005964 <vPortEnterCritical>
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061f6:	b25b      	sxtb	r3, r3
 80061f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fc:	d103      	bne.n	8006206 <xQueueReceive+0x122>
 80061fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006200:	2200      	movs	r2, #0
 8006202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006208:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800620c:	b25b      	sxtb	r3, r3
 800620e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006212:	d103      	bne.n	800621c <xQueueReceive+0x138>
 8006214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006216:	2200      	movs	r2, #0
 8006218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800621c:	f7ff fbd2 	bl	80059c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006220:	1d3a      	adds	r2, r7, #4
 8006222:	f107 0310 	add.w	r3, r7, #16
 8006226:	4611      	mov	r1, r2
 8006228:	4618      	mov	r0, r3
 800622a:	f000 fea9 	bl	8006f80 <xTaskCheckForTimeOut>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d123      	bne.n	800627c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006236:	f000 f917 	bl	8006468 <prvIsQueueEmpty>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d017      	beq.n	8006270 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006242:	3324      	adds	r3, #36	; 0x24
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	4611      	mov	r1, r2
 8006248:	4618      	mov	r0, r3
 800624a:	f000 fdcf 	bl	8006dec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800624e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006250:	f000 f8b8 	bl	80063c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006254:	f000 fbfe 	bl	8006a54 <xTaskResumeAll>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d189      	bne.n	8006172 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800625e:	4b10      	ldr	r3, [pc, #64]	; (80062a0 <xQueueReceive+0x1bc>)
 8006260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006264:	601a      	str	r2, [r3, #0]
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	e780      	b.n	8006172 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006272:	f000 f8a7 	bl	80063c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006276:	f000 fbed 	bl	8006a54 <xTaskResumeAll>
 800627a:	e77a      	b.n	8006172 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800627c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800627e:	f000 f8a1 	bl	80063c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006282:	f000 fbe7 	bl	8006a54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006286:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006288:	f000 f8ee 	bl	8006468 <prvIsQueueEmpty>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	f43f af6f 	beq.w	8006172 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006294:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006296:	4618      	mov	r0, r3
 8006298:	3730      	adds	r7, #48	; 0x30
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	e000ed04 	.word	0xe000ed04

080062a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80062b0:	2300      	movs	r3, #0
 80062b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10d      	bne.n	80062de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d14d      	bne.n	8006366 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 ffbc 	bl	800724c <xTaskPriorityDisinherit>
 80062d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	609a      	str	r2, [r3, #8]
 80062dc:	e043      	b.n	8006366 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d119      	bne.n	8006318 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6858      	ldr	r0, [r3, #4]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ec:	461a      	mov	r2, r3
 80062ee:	68b9      	ldr	r1, [r7, #8]
 80062f0:	f001 fce4 	bl	8007cbc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	441a      	add	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	429a      	cmp	r2, r3
 800630c:	d32b      	bcc.n	8006366 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	605a      	str	r2, [r3, #4]
 8006316:	e026      	b.n	8006366 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	68d8      	ldr	r0, [r3, #12]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006320:	461a      	mov	r2, r3
 8006322:	68b9      	ldr	r1, [r7, #8]
 8006324:	f001 fcca 	bl	8007cbc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	68da      	ldr	r2, [r3, #12]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006330:	425b      	negs	r3, r3
 8006332:	441a      	add	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	429a      	cmp	r2, r3
 8006342:	d207      	bcs.n	8006354 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	689a      	ldr	r2, [r3, #8]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634c:	425b      	negs	r3, r3
 800634e:	441a      	add	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b02      	cmp	r3, #2
 8006358:	d105      	bne.n	8006366 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d002      	beq.n	8006366 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	3b01      	subs	r3, #1
 8006364:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	1c5a      	adds	r2, r3, #1
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800636e:	697b      	ldr	r3, [r7, #20]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3718      	adds	r7, #24
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006386:	2b00      	cmp	r3, #0
 8006388:	d018      	beq.n	80063bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68da      	ldr	r2, [r3, #12]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	441a      	add	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68da      	ldr	r2, [r3, #12]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d303      	bcc.n	80063ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	68d9      	ldr	r1, [r3, #12]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b4:	461a      	mov	r2, r3
 80063b6:	6838      	ldr	r0, [r7, #0]
 80063b8:	f001 fc80 	bl	8007cbc <memcpy>
	}
}
 80063bc:	bf00      	nop
 80063be:	3708      	adds	r7, #8
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80063cc:	f7ff faca 	bl	8005964 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063d8:	e011      	b.n	80063fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d012      	beq.n	8006408 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	3324      	adds	r3, #36	; 0x24
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 fd50 	bl	8006e8c <xTaskRemoveFromEventList>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80063f2:	f000 fe27 	bl	8007044 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	3b01      	subs	r3, #1
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006402:	2b00      	cmp	r3, #0
 8006404:	dce9      	bgt.n	80063da <prvUnlockQueue+0x16>
 8006406:	e000      	b.n	800640a <prvUnlockQueue+0x46>
					break;
 8006408:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	22ff      	movs	r2, #255	; 0xff
 800640e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006412:	f7ff fad7 	bl	80059c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006416:	f7ff faa5 	bl	8005964 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006420:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006422:	e011      	b.n	8006448 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d012      	beq.n	8006452 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	3310      	adds	r3, #16
 8006430:	4618      	mov	r0, r3
 8006432:	f000 fd2b 	bl	8006e8c <xTaskRemoveFromEventList>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800643c:	f000 fe02 	bl	8007044 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006440:	7bbb      	ldrb	r3, [r7, #14]
 8006442:	3b01      	subs	r3, #1
 8006444:	b2db      	uxtb	r3, r3
 8006446:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006448:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800644c:	2b00      	cmp	r3, #0
 800644e:	dce9      	bgt.n	8006424 <prvUnlockQueue+0x60>
 8006450:	e000      	b.n	8006454 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006452:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	22ff      	movs	r2, #255	; 0xff
 8006458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800645c:	f7ff fab2 	bl	80059c4 <vPortExitCritical>
}
 8006460:	bf00      	nop
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006470:	f7ff fa78 	bl	8005964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006478:	2b00      	cmp	r3, #0
 800647a:	d102      	bne.n	8006482 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800647c:	2301      	movs	r3, #1
 800647e:	60fb      	str	r3, [r7, #12]
 8006480:	e001      	b.n	8006486 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006482:	2300      	movs	r3, #0
 8006484:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006486:	f7ff fa9d 	bl	80059c4 <vPortExitCritical>

	return xReturn;
 800648a:	68fb      	ldr	r3, [r7, #12]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800649c:	f7ff fa62 	bl	8005964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d102      	bne.n	80064b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80064ac:	2301      	movs	r3, #1
 80064ae:	60fb      	str	r3, [r7, #12]
 80064b0:	e001      	b.n	80064b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80064b2:	2300      	movs	r3, #0
 80064b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064b6:	f7ff fa85 	bl	80059c4 <vPortExitCritical>

	return xReturn;
 80064ba:	68fb      	ldr	r3, [r7, #12]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064ce:	2300      	movs	r3, #0
 80064d0:	60fb      	str	r3, [r7, #12]
 80064d2:	e014      	b.n	80064fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80064d4:	4a0f      	ldr	r2, [pc, #60]	; (8006514 <vQueueAddToRegistry+0x50>)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10b      	bne.n	80064f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80064e0:	490c      	ldr	r1, [pc, #48]	; (8006514 <vQueueAddToRegistry+0x50>)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80064ea:	4a0a      	ldr	r2, [pc, #40]	; (8006514 <vQueueAddToRegistry+0x50>)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	00db      	lsls	r3, r3, #3
 80064f0:	4413      	add	r3, r2
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80064f6:	e006      	b.n	8006506 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	3301      	adds	r3, #1
 80064fc:	60fb      	str	r3, [r7, #12]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2b07      	cmp	r3, #7
 8006502:	d9e7      	bls.n	80064d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006504:	bf00      	nop
 8006506:	bf00      	nop
 8006508:	3714      	adds	r7, #20
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	24004b2c 	.word	0x24004b2c

08006518 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006528:	f7ff fa1c 	bl	8005964 <vPortEnterCritical>
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006532:	b25b      	sxtb	r3, r3
 8006534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006538:	d103      	bne.n	8006542 <vQueueWaitForMessageRestricted+0x2a>
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006548:	b25b      	sxtb	r3, r3
 800654a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654e:	d103      	bne.n	8006558 <vQueueWaitForMessageRestricted+0x40>
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006558:	f7ff fa34 	bl	80059c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006560:	2b00      	cmp	r3, #0
 8006562:	d106      	bne.n	8006572 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	3324      	adds	r3, #36	; 0x24
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	68b9      	ldr	r1, [r7, #8]
 800656c:	4618      	mov	r0, r3
 800656e:	f000 fc61 	bl	8006e34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006572:	6978      	ldr	r0, [r7, #20]
 8006574:	f7ff ff26 	bl	80063c4 <prvUnlockQueue>
	}
 8006578:	bf00      	nop
 800657a:	3718      	adds	r7, #24
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006580:	b580      	push	{r7, lr}
 8006582:	b08e      	sub	sp, #56	; 0x38
 8006584:	af04      	add	r7, sp, #16
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
 800658c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800658e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10a      	bne.n	80065aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8006594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006598:	f383 8811 	msr	BASEPRI, r3
 800659c:	f3bf 8f6f 	isb	sy
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	623b      	str	r3, [r7, #32]
}
 80065a6:	bf00      	nop
 80065a8:	e7fe      	b.n	80065a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80065aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10a      	bne.n	80065c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80065b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	61fb      	str	r3, [r7, #28]
}
 80065c2:	bf00      	nop
 80065c4:	e7fe      	b.n	80065c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80065c6:	23bc      	movs	r3, #188	; 0xbc
 80065c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	2bbc      	cmp	r3, #188	; 0xbc
 80065ce:	d00a      	beq.n	80065e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80065d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d4:	f383 8811 	msr	BASEPRI, r3
 80065d8:	f3bf 8f6f 	isb	sy
 80065dc:	f3bf 8f4f 	dsb	sy
 80065e0:	61bb      	str	r3, [r7, #24]
}
 80065e2:	bf00      	nop
 80065e4:	e7fe      	b.n	80065e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80065e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80065e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d01e      	beq.n	800662c <xTaskCreateStatic+0xac>
 80065ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d01b      	beq.n	800662c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80065f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80065f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	2202      	movs	r2, #2
 8006602:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006606:	2300      	movs	r3, #0
 8006608:	9303      	str	r3, [sp, #12]
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	9302      	str	r3, [sp, #8]
 800660e:	f107 0314 	add.w	r3, r7, #20
 8006612:	9301      	str	r3, [sp, #4]
 8006614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	68b9      	ldr	r1, [r7, #8]
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f000 f850 	bl	80066c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006624:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006626:	f000 f8f3 	bl	8006810 <prvAddNewTaskToReadyList>
 800662a:	e001      	b.n	8006630 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800662c:	2300      	movs	r3, #0
 800662e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006630:	697b      	ldr	r3, [r7, #20]
	}
 8006632:	4618      	mov	r0, r3
 8006634:	3728      	adds	r7, #40	; 0x28
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800663a:	b580      	push	{r7, lr}
 800663c:	b08c      	sub	sp, #48	; 0x30
 800663e:	af04      	add	r7, sp, #16
 8006640:	60f8      	str	r0, [r7, #12]
 8006642:	60b9      	str	r1, [r7, #8]
 8006644:	603b      	str	r3, [r7, #0]
 8006646:	4613      	mov	r3, r2
 8006648:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800664a:	88fb      	ldrh	r3, [r7, #6]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4618      	mov	r0, r3
 8006650:	f7fe fdbe 	bl	80051d0 <pvPortMalloc>
 8006654:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00e      	beq.n	800667a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800665c:	20bc      	movs	r0, #188	; 0xbc
 800665e:	f7fe fdb7 	bl	80051d0 <pvPortMalloc>
 8006662:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	631a      	str	r2, [r3, #48]	; 0x30
 8006670:	e005      	b.n	800667e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006672:	6978      	ldr	r0, [r7, #20]
 8006674:	f7fe fe78 	bl	8005368 <vPortFree>
 8006678:	e001      	b.n	800667e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800667a:	2300      	movs	r3, #0
 800667c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d017      	beq.n	80066b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800668c:	88fa      	ldrh	r2, [r7, #6]
 800668e:	2300      	movs	r3, #0
 8006690:	9303      	str	r3, [sp, #12]
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	9302      	str	r3, [sp, #8]
 8006696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006698:	9301      	str	r3, [sp, #4]
 800669a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	68b9      	ldr	r1, [r7, #8]
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f000 f80e 	bl	80066c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066a8:	69f8      	ldr	r0, [r7, #28]
 80066aa:	f000 f8b1 	bl	8006810 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80066ae:	2301      	movs	r3, #1
 80066b0:	61bb      	str	r3, [r7, #24]
 80066b2:	e002      	b.n	80066ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80066b4:	f04f 33ff 	mov.w	r3, #4294967295
 80066b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80066ba:	69bb      	ldr	r3, [r7, #24]
	}
 80066bc:	4618      	mov	r0, r3
 80066be:	3720      	adds	r7, #32
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b088      	sub	sp, #32
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
 80066d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80066d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	461a      	mov	r2, r3
 80066dc:	21a5      	movs	r1, #165	; 0xa5
 80066de:	f001 fafb 	bl	8007cd8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80066e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066e6:	6879      	ldr	r1, [r7, #4]
 80066e8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80066ec:	440b      	add	r3, r1
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	f023 0307 	bic.w	r3, r3, #7
 80066fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	f003 0307 	and.w	r3, r3, #7
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00a      	beq.n	800671c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	617b      	str	r3, [r7, #20]
}
 8006718:	bf00      	nop
 800671a:	e7fe      	b.n	800671a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d01f      	beq.n	8006762 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006722:	2300      	movs	r3, #0
 8006724:	61fb      	str	r3, [r7, #28]
 8006726:	e012      	b.n	800674e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	4413      	add	r3, r2
 800672e:	7819      	ldrb	r1, [r3, #0]
 8006730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	4413      	add	r3, r2
 8006736:	3334      	adds	r3, #52	; 0x34
 8006738:	460a      	mov	r2, r1
 800673a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	4413      	add	r3, r2
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d006      	beq.n	8006756 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	3301      	adds	r3, #1
 800674c:	61fb      	str	r3, [r7, #28]
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	2b0f      	cmp	r3, #15
 8006752:	d9e9      	bls.n	8006728 <prvInitialiseNewTask+0x64>
 8006754:	e000      	b.n	8006758 <prvInitialiseNewTask+0x94>
			{
				break;
 8006756:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006760:	e003      	b.n	800676a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800676a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676c:	2b37      	cmp	r3, #55	; 0x37
 800676e:	d901      	bls.n	8006774 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006770:	2337      	movs	r3, #55	; 0x37
 8006772:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006778:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800677a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800677e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006782:	2200      	movs	r2, #0
 8006784:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006788:	3304      	adds	r3, #4
 800678a:	4618      	mov	r0, r3
 800678c:	f7fe ff2a 	bl	80055e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006792:	3318      	adds	r3, #24
 8006794:	4618      	mov	r0, r3
 8006796:	f7fe ff25 	bl	80055e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800679a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800679e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80067a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80067aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80067b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b2:	2200      	movs	r2, #0
 80067b4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80067b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80067c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c2:	3354      	adds	r3, #84	; 0x54
 80067c4:	2260      	movs	r2, #96	; 0x60
 80067c6:	2100      	movs	r1, #0
 80067c8:	4618      	mov	r0, r3
 80067ca:	f001 fa85 	bl	8007cd8 <memset>
 80067ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d0:	4a0c      	ldr	r2, [pc, #48]	; (8006804 <prvInitialiseNewTask+0x140>)
 80067d2:	659a      	str	r2, [r3, #88]	; 0x58
 80067d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d6:	4a0c      	ldr	r2, [pc, #48]	; (8006808 <prvInitialiseNewTask+0x144>)
 80067d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80067da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067dc:	4a0b      	ldr	r2, [pc, #44]	; (800680c <prvInitialiseNewTask+0x148>)
 80067de:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	68f9      	ldr	r1, [r7, #12]
 80067e4:	69b8      	ldr	r0, [r7, #24]
 80067e6:	f7fe ff91 	bl	800570c <pxPortInitialiseStack>
 80067ea:	4602      	mov	r2, r0
 80067ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80067f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d002      	beq.n	80067fc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80067f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067fc:	bf00      	nop
 80067fe:	3720      	adds	r7, #32
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	08008b3c 	.word	0x08008b3c
 8006808:	08008b5c 	.word	0x08008b5c
 800680c:	08008b1c 	.word	0x08008b1c

08006810 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006818:	f7ff f8a4 	bl	8005964 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800681c:	4b2d      	ldr	r3, [pc, #180]	; (80068d4 <prvAddNewTaskToReadyList+0xc4>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	3301      	adds	r3, #1
 8006822:	4a2c      	ldr	r2, [pc, #176]	; (80068d4 <prvAddNewTaskToReadyList+0xc4>)
 8006824:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006826:	4b2c      	ldr	r3, [pc, #176]	; (80068d8 <prvAddNewTaskToReadyList+0xc8>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d109      	bne.n	8006842 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800682e:	4a2a      	ldr	r2, [pc, #168]	; (80068d8 <prvAddNewTaskToReadyList+0xc8>)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006834:	4b27      	ldr	r3, [pc, #156]	; (80068d4 <prvAddNewTaskToReadyList+0xc4>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d110      	bne.n	800685e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800683c:	f000 fc26 	bl	800708c <prvInitialiseTaskLists>
 8006840:	e00d      	b.n	800685e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006842:	4b26      	ldr	r3, [pc, #152]	; (80068dc <prvAddNewTaskToReadyList+0xcc>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d109      	bne.n	800685e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800684a:	4b23      	ldr	r3, [pc, #140]	; (80068d8 <prvAddNewTaskToReadyList+0xc8>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006854:	429a      	cmp	r2, r3
 8006856:	d802      	bhi.n	800685e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006858:	4a1f      	ldr	r2, [pc, #124]	; (80068d8 <prvAddNewTaskToReadyList+0xc8>)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800685e:	4b20      	ldr	r3, [pc, #128]	; (80068e0 <prvAddNewTaskToReadyList+0xd0>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	3301      	adds	r3, #1
 8006864:	4a1e      	ldr	r2, [pc, #120]	; (80068e0 <prvAddNewTaskToReadyList+0xd0>)
 8006866:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006868:	4b1d      	ldr	r3, [pc, #116]	; (80068e0 <prvAddNewTaskToReadyList+0xd0>)
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006874:	4b1b      	ldr	r3, [pc, #108]	; (80068e4 <prvAddNewTaskToReadyList+0xd4>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	429a      	cmp	r2, r3
 800687a:	d903      	bls.n	8006884 <prvAddNewTaskToReadyList+0x74>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006880:	4a18      	ldr	r2, [pc, #96]	; (80068e4 <prvAddNewTaskToReadyList+0xd4>)
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006888:	4613      	mov	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4a15      	ldr	r2, [pc, #84]	; (80068e8 <prvAddNewTaskToReadyList+0xd8>)
 8006892:	441a      	add	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	3304      	adds	r3, #4
 8006898:	4619      	mov	r1, r3
 800689a:	4610      	mov	r0, r2
 800689c:	f7fe feaf 	bl	80055fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068a0:	f7ff f890 	bl	80059c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068a4:	4b0d      	ldr	r3, [pc, #52]	; (80068dc <prvAddNewTaskToReadyList+0xcc>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00e      	beq.n	80068ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068ac:	4b0a      	ldr	r3, [pc, #40]	; (80068d8 <prvAddNewTaskToReadyList+0xc8>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d207      	bcs.n	80068ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80068ba:	4b0c      	ldr	r3, [pc, #48]	; (80068ec <prvAddNewTaskToReadyList+0xdc>)
 80068bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068ca:	bf00      	nop
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	24004934 	.word	0x24004934
 80068d8:	24004460 	.word	0x24004460
 80068dc:	24004940 	.word	0x24004940
 80068e0:	24004950 	.word	0x24004950
 80068e4:	2400493c 	.word	0x2400493c
 80068e8:	24004464 	.word	0x24004464
 80068ec:	e000ed04 	.word	0xe000ed04

080068f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80068f8:	2300      	movs	r3, #0
 80068fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d017      	beq.n	8006932 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006902:	4b13      	ldr	r3, [pc, #76]	; (8006950 <vTaskDelay+0x60>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <vTaskDelay+0x30>
	__asm volatile
 800690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	60bb      	str	r3, [r7, #8]
}
 800691c:	bf00      	nop
 800691e:	e7fe      	b.n	800691e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006920:	f000 f88a 	bl	8006a38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006924:	2100      	movs	r1, #0
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fcfe 	bl	8007328 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800692c:	f000 f892 	bl	8006a54 <xTaskResumeAll>
 8006930:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d107      	bne.n	8006948 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006938:	4b06      	ldr	r3, [pc, #24]	; (8006954 <vTaskDelay+0x64>)
 800693a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800693e:	601a      	str	r2, [r3, #0]
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006948:	bf00      	nop
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	2400495c 	.word	0x2400495c
 8006954:	e000ed04 	.word	0xe000ed04

08006958 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b08a      	sub	sp, #40	; 0x28
 800695c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800695e:	2300      	movs	r3, #0
 8006960:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006962:	2300      	movs	r3, #0
 8006964:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006966:	463a      	mov	r2, r7
 8006968:	1d39      	adds	r1, r7, #4
 800696a:	f107 0308 	add.w	r3, r7, #8
 800696e:	4618      	mov	r0, r3
 8006970:	f7fe fbfa 	bl	8005168 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006974:	6839      	ldr	r1, [r7, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	9202      	str	r2, [sp, #8]
 800697c:	9301      	str	r3, [sp, #4]
 800697e:	2300      	movs	r3, #0
 8006980:	9300      	str	r3, [sp, #0]
 8006982:	2300      	movs	r3, #0
 8006984:	460a      	mov	r2, r1
 8006986:	4924      	ldr	r1, [pc, #144]	; (8006a18 <vTaskStartScheduler+0xc0>)
 8006988:	4824      	ldr	r0, [pc, #144]	; (8006a1c <vTaskStartScheduler+0xc4>)
 800698a:	f7ff fdf9 	bl	8006580 <xTaskCreateStatic>
 800698e:	4603      	mov	r3, r0
 8006990:	4a23      	ldr	r2, [pc, #140]	; (8006a20 <vTaskStartScheduler+0xc8>)
 8006992:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006994:	4b22      	ldr	r3, [pc, #136]	; (8006a20 <vTaskStartScheduler+0xc8>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d002      	beq.n	80069a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800699c:	2301      	movs	r3, #1
 800699e:	617b      	str	r3, [r7, #20]
 80069a0:	e001      	b.n	80069a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d102      	bne.n	80069b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80069ac:	f000 fd10 	bl	80073d0 <xTimerCreateTimerTask>
 80069b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d11b      	bne.n	80069f0 <vTaskStartScheduler+0x98>
	__asm volatile
 80069b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069bc:	f383 8811 	msr	BASEPRI, r3
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	613b      	str	r3, [r7, #16]
}
 80069ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80069cc:	4b15      	ldr	r3, [pc, #84]	; (8006a24 <vTaskStartScheduler+0xcc>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3354      	adds	r3, #84	; 0x54
 80069d2:	4a15      	ldr	r2, [pc, #84]	; (8006a28 <vTaskStartScheduler+0xd0>)
 80069d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80069d6:	4b15      	ldr	r3, [pc, #84]	; (8006a2c <vTaskStartScheduler+0xd4>)
 80069d8:	f04f 32ff 	mov.w	r2, #4294967295
 80069dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80069de:	4b14      	ldr	r3, [pc, #80]	; (8006a30 <vTaskStartScheduler+0xd8>)
 80069e0:	2201      	movs	r2, #1
 80069e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80069e4:	4b13      	ldr	r3, [pc, #76]	; (8006a34 <vTaskStartScheduler+0xdc>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80069ea:	f7fe ff19 	bl	8005820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80069ee:	e00e      	b.n	8006a0e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f6:	d10a      	bne.n	8006a0e <vTaskStartScheduler+0xb6>
	__asm volatile
 80069f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fc:	f383 8811 	msr	BASEPRI, r3
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	60fb      	str	r3, [r7, #12]
}
 8006a0a:	bf00      	nop
 8006a0c:	e7fe      	b.n	8006a0c <vTaskStartScheduler+0xb4>
}
 8006a0e:	bf00      	nop
 8006a10:	3718      	adds	r7, #24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	08008aa8 	.word	0x08008aa8
 8006a1c:	0800705d 	.word	0x0800705d
 8006a20:	24004958 	.word	0x24004958
 8006a24:	24004460 	.word	0x24004460
 8006a28:	24000014 	.word	0x24000014
 8006a2c:	24004954 	.word	0x24004954
 8006a30:	24004940 	.word	0x24004940
 8006a34:	24004938 	.word	0x24004938

08006a38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a38:	b480      	push	{r7}
 8006a3a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006a3c:	4b04      	ldr	r3, [pc, #16]	; (8006a50 <vTaskSuspendAll+0x18>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	3301      	adds	r3, #1
 8006a42:	4a03      	ldr	r2, [pc, #12]	; (8006a50 <vTaskSuspendAll+0x18>)
 8006a44:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006a46:	bf00      	nop
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	2400495c 	.word	0x2400495c

08006a54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a62:	4b42      	ldr	r3, [pc, #264]	; (8006b6c <xTaskResumeAll+0x118>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10a      	bne.n	8006a80 <xTaskResumeAll+0x2c>
	__asm volatile
 8006a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	603b      	str	r3, [r7, #0]
}
 8006a7c:	bf00      	nop
 8006a7e:	e7fe      	b.n	8006a7e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a80:	f7fe ff70 	bl	8005964 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a84:	4b39      	ldr	r3, [pc, #228]	; (8006b6c <xTaskResumeAll+0x118>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	4a38      	ldr	r2, [pc, #224]	; (8006b6c <xTaskResumeAll+0x118>)
 8006a8c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a8e:	4b37      	ldr	r3, [pc, #220]	; (8006b6c <xTaskResumeAll+0x118>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d162      	bne.n	8006b5c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a96:	4b36      	ldr	r3, [pc, #216]	; (8006b70 <xTaskResumeAll+0x11c>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d05e      	beq.n	8006b5c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a9e:	e02f      	b.n	8006b00 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aa0:	4b34      	ldr	r3, [pc, #208]	; (8006b74 <xTaskResumeAll+0x120>)
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	3318      	adds	r3, #24
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7fe fe03 	bl	80056b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	3304      	adds	r3, #4
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7fe fdfe 	bl	80056b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac0:	4b2d      	ldr	r3, [pc, #180]	; (8006b78 <xTaskResumeAll+0x124>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d903      	bls.n	8006ad0 <xTaskResumeAll+0x7c>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006acc:	4a2a      	ldr	r2, [pc, #168]	; (8006b78 <xTaskResumeAll+0x124>)
 8006ace:	6013      	str	r3, [r2, #0]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4a27      	ldr	r2, [pc, #156]	; (8006b7c <xTaskResumeAll+0x128>)
 8006ade:	441a      	add	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	4610      	mov	r0, r2
 8006ae8:	f7fe fd89 	bl	80055fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af0:	4b23      	ldr	r3, [pc, #140]	; (8006b80 <xTaskResumeAll+0x12c>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d302      	bcc.n	8006b00 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006afa:	4b22      	ldr	r3, [pc, #136]	; (8006b84 <xTaskResumeAll+0x130>)
 8006afc:	2201      	movs	r2, #1
 8006afe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b00:	4b1c      	ldr	r3, [pc, #112]	; (8006b74 <xTaskResumeAll+0x120>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1cb      	bne.n	8006aa0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d001      	beq.n	8006b12 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b0e:	f000 fb5f 	bl	80071d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006b12:	4b1d      	ldr	r3, [pc, #116]	; (8006b88 <xTaskResumeAll+0x134>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d010      	beq.n	8006b40 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b1e:	f000 f847 	bl	8006bb0 <xTaskIncrementTick>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d002      	beq.n	8006b2e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006b28:	4b16      	ldr	r3, [pc, #88]	; (8006b84 <xTaskResumeAll+0x130>)
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	3b01      	subs	r3, #1
 8006b32:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1f1      	bne.n	8006b1e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006b3a:	4b13      	ldr	r3, [pc, #76]	; (8006b88 <xTaskResumeAll+0x134>)
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b40:	4b10      	ldr	r3, [pc, #64]	; (8006b84 <xTaskResumeAll+0x130>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d009      	beq.n	8006b5c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b4c:	4b0f      	ldr	r3, [pc, #60]	; (8006b8c <xTaskResumeAll+0x138>)
 8006b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b5c:	f7fe ff32 	bl	80059c4 <vPortExitCritical>

	return xAlreadyYielded;
 8006b60:	68bb      	ldr	r3, [r7, #8]
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	2400495c 	.word	0x2400495c
 8006b70:	24004934 	.word	0x24004934
 8006b74:	240048f4 	.word	0x240048f4
 8006b78:	2400493c 	.word	0x2400493c
 8006b7c:	24004464 	.word	0x24004464
 8006b80:	24004460 	.word	0x24004460
 8006b84:	24004948 	.word	0x24004948
 8006b88:	24004944 	.word	0x24004944
 8006b8c:	e000ed04 	.word	0xe000ed04

08006b90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006b96:	4b05      	ldr	r3, [pc, #20]	; (8006bac <xTaskGetTickCount+0x1c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006b9c:	687b      	ldr	r3, [r7, #4]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	370c      	adds	r7, #12
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	24004938 	.word	0x24004938

08006bb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bba:	4b4f      	ldr	r3, [pc, #316]	; (8006cf8 <xTaskIncrementTick+0x148>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f040 808f 	bne.w	8006ce2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006bc4:	4b4d      	ldr	r3, [pc, #308]	; (8006cfc <xTaskIncrementTick+0x14c>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006bcc:	4a4b      	ldr	r2, [pc, #300]	; (8006cfc <xTaskIncrementTick+0x14c>)
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d120      	bne.n	8006c1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006bd8:	4b49      	ldr	r3, [pc, #292]	; (8006d00 <xTaskIncrementTick+0x150>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00a      	beq.n	8006bf8 <xTaskIncrementTick+0x48>
	__asm volatile
 8006be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be6:	f383 8811 	msr	BASEPRI, r3
 8006bea:	f3bf 8f6f 	isb	sy
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	603b      	str	r3, [r7, #0]
}
 8006bf4:	bf00      	nop
 8006bf6:	e7fe      	b.n	8006bf6 <xTaskIncrementTick+0x46>
 8006bf8:	4b41      	ldr	r3, [pc, #260]	; (8006d00 <xTaskIncrementTick+0x150>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	60fb      	str	r3, [r7, #12]
 8006bfe:	4b41      	ldr	r3, [pc, #260]	; (8006d04 <xTaskIncrementTick+0x154>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a3f      	ldr	r2, [pc, #252]	; (8006d00 <xTaskIncrementTick+0x150>)
 8006c04:	6013      	str	r3, [r2, #0]
 8006c06:	4a3f      	ldr	r2, [pc, #252]	; (8006d04 <xTaskIncrementTick+0x154>)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6013      	str	r3, [r2, #0]
 8006c0c:	4b3e      	ldr	r3, [pc, #248]	; (8006d08 <xTaskIncrementTick+0x158>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3301      	adds	r3, #1
 8006c12:	4a3d      	ldr	r2, [pc, #244]	; (8006d08 <xTaskIncrementTick+0x158>)
 8006c14:	6013      	str	r3, [r2, #0]
 8006c16:	f000 fadb 	bl	80071d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c1a:	4b3c      	ldr	r3, [pc, #240]	; (8006d0c <xTaskIncrementTick+0x15c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d349      	bcc.n	8006cb8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c24:	4b36      	ldr	r3, [pc, #216]	; (8006d00 <xTaskIncrementTick+0x150>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d104      	bne.n	8006c38 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c2e:	4b37      	ldr	r3, [pc, #220]	; (8006d0c <xTaskIncrementTick+0x15c>)
 8006c30:	f04f 32ff 	mov.w	r2, #4294967295
 8006c34:	601a      	str	r2, [r3, #0]
					break;
 8006c36:	e03f      	b.n	8006cb8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c38:	4b31      	ldr	r3, [pc, #196]	; (8006d00 <xTaskIncrementTick+0x150>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d203      	bcs.n	8006c58 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c50:	4a2e      	ldr	r2, [pc, #184]	; (8006d0c <xTaskIncrementTick+0x15c>)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c56:	e02f      	b.n	8006cb8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fe fd2b 	bl	80056b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d004      	beq.n	8006c74 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	3318      	adds	r3, #24
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7fe fd22 	bl	80056b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c78:	4b25      	ldr	r3, [pc, #148]	; (8006d10 <xTaskIncrementTick+0x160>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d903      	bls.n	8006c88 <xTaskIncrementTick+0xd8>
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c84:	4a22      	ldr	r2, [pc, #136]	; (8006d10 <xTaskIncrementTick+0x160>)
 8006c86:	6013      	str	r3, [r2, #0]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4a1f      	ldr	r2, [pc, #124]	; (8006d14 <xTaskIncrementTick+0x164>)
 8006c96:	441a      	add	r2, r3
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	3304      	adds	r3, #4
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	4610      	mov	r0, r2
 8006ca0:	f7fe fcad 	bl	80055fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca8:	4b1b      	ldr	r3, [pc, #108]	; (8006d18 <xTaskIncrementTick+0x168>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d3b8      	bcc.n	8006c24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cb6:	e7b5      	b.n	8006c24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006cb8:	4b17      	ldr	r3, [pc, #92]	; (8006d18 <xTaskIncrementTick+0x168>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cbe:	4915      	ldr	r1, [pc, #84]	; (8006d14 <xTaskIncrementTick+0x164>)
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	440b      	add	r3, r1
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d901      	bls.n	8006cd4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006cd4:	4b11      	ldr	r3, [pc, #68]	; (8006d1c <xTaskIncrementTick+0x16c>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d007      	beq.n	8006cec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	617b      	str	r3, [r7, #20]
 8006ce0:	e004      	b.n	8006cec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006ce2:	4b0f      	ldr	r3, [pc, #60]	; (8006d20 <xTaskIncrementTick+0x170>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	4a0d      	ldr	r2, [pc, #52]	; (8006d20 <xTaskIncrementTick+0x170>)
 8006cea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006cec:	697b      	ldr	r3, [r7, #20]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3718      	adds	r7, #24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	2400495c 	.word	0x2400495c
 8006cfc:	24004938 	.word	0x24004938
 8006d00:	240048ec 	.word	0x240048ec
 8006d04:	240048f0 	.word	0x240048f0
 8006d08:	2400494c 	.word	0x2400494c
 8006d0c:	24004954 	.word	0x24004954
 8006d10:	2400493c 	.word	0x2400493c
 8006d14:	24004464 	.word	0x24004464
 8006d18:	24004460 	.word	0x24004460
 8006d1c:	24004948 	.word	0x24004948
 8006d20:	24004944 	.word	0x24004944

08006d24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d2a:	4b2a      	ldr	r3, [pc, #168]	; (8006dd4 <vTaskSwitchContext+0xb0>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d003      	beq.n	8006d3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d32:	4b29      	ldr	r3, [pc, #164]	; (8006dd8 <vTaskSwitchContext+0xb4>)
 8006d34:	2201      	movs	r2, #1
 8006d36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d38:	e046      	b.n	8006dc8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006d3a:	4b27      	ldr	r3, [pc, #156]	; (8006dd8 <vTaskSwitchContext+0xb4>)
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d40:	4b26      	ldr	r3, [pc, #152]	; (8006ddc <vTaskSwitchContext+0xb8>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	60fb      	str	r3, [r7, #12]
 8006d46:	e010      	b.n	8006d6a <vTaskSwitchContext+0x46>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10a      	bne.n	8006d64 <vTaskSwitchContext+0x40>
	__asm volatile
 8006d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	607b      	str	r3, [r7, #4]
}
 8006d60:	bf00      	nop
 8006d62:	e7fe      	b.n	8006d62 <vTaskSwitchContext+0x3e>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	3b01      	subs	r3, #1
 8006d68:	60fb      	str	r3, [r7, #12]
 8006d6a:	491d      	ldr	r1, [pc, #116]	; (8006de0 <vTaskSwitchContext+0xbc>)
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	440b      	add	r3, r1
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d0e4      	beq.n	8006d48 <vTaskSwitchContext+0x24>
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	4613      	mov	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4413      	add	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4a15      	ldr	r2, [pc, #84]	; (8006de0 <vTaskSwitchContext+0xbc>)
 8006d8a:	4413      	add	r3, r2
 8006d8c:	60bb      	str	r3, [r7, #8]
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	605a      	str	r2, [r3, #4]
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	3308      	adds	r3, #8
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d104      	bne.n	8006dae <vTaskSwitchContext+0x8a>
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	685a      	ldr	r2, [r3, #4]
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	605a      	str	r2, [r3, #4]
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	4a0b      	ldr	r2, [pc, #44]	; (8006de4 <vTaskSwitchContext+0xc0>)
 8006db6:	6013      	str	r3, [r2, #0]
 8006db8:	4a08      	ldr	r2, [pc, #32]	; (8006ddc <vTaskSwitchContext+0xb8>)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006dbe:	4b09      	ldr	r3, [pc, #36]	; (8006de4 <vTaskSwitchContext+0xc0>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	3354      	adds	r3, #84	; 0x54
 8006dc4:	4a08      	ldr	r2, [pc, #32]	; (8006de8 <vTaskSwitchContext+0xc4>)
 8006dc6:	6013      	str	r3, [r2, #0]
}
 8006dc8:	bf00      	nop
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr
 8006dd4:	2400495c 	.word	0x2400495c
 8006dd8:	24004948 	.word	0x24004948
 8006ddc:	2400493c 	.word	0x2400493c
 8006de0:	24004464 	.word	0x24004464
 8006de4:	24004460 	.word	0x24004460
 8006de8:	24000014 	.word	0x24000014

08006dec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10a      	bne.n	8006e12 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	60fb      	str	r3, [r7, #12]
}
 8006e0e:	bf00      	nop
 8006e10:	e7fe      	b.n	8006e10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e12:	4b07      	ldr	r3, [pc, #28]	; (8006e30 <vTaskPlaceOnEventList+0x44>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	3318      	adds	r3, #24
 8006e18:	4619      	mov	r1, r3
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7fe fc13 	bl	8005646 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e20:	2101      	movs	r1, #1
 8006e22:	6838      	ldr	r0, [r7, #0]
 8006e24:	f000 fa80 	bl	8007328 <prvAddCurrentTaskToDelayedList>
}
 8006e28:	bf00      	nop
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	24004460 	.word	0x24004460

08006e34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d10a      	bne.n	8006e5c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4a:	f383 8811 	msr	BASEPRI, r3
 8006e4e:	f3bf 8f6f 	isb	sy
 8006e52:	f3bf 8f4f 	dsb	sy
 8006e56:	617b      	str	r3, [r7, #20]
}
 8006e58:	bf00      	nop
 8006e5a:	e7fe      	b.n	8006e5a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e5c:	4b0a      	ldr	r3, [pc, #40]	; (8006e88 <vTaskPlaceOnEventListRestricted+0x54>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3318      	adds	r3, #24
 8006e62:	4619      	mov	r1, r3
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f7fe fbca 	bl	80055fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006e70:	f04f 33ff 	mov.w	r3, #4294967295
 8006e74:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006e76:	6879      	ldr	r1, [r7, #4]
 8006e78:	68b8      	ldr	r0, [r7, #8]
 8006e7a:	f000 fa55 	bl	8007328 <prvAddCurrentTaskToDelayedList>
	}
 8006e7e:	bf00      	nop
 8006e80:	3718      	adds	r7, #24
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	24004460 	.word	0x24004460

08006e8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b086      	sub	sp, #24
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d10a      	bne.n	8006eb8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea6:	f383 8811 	msr	BASEPRI, r3
 8006eaa:	f3bf 8f6f 	isb	sy
 8006eae:	f3bf 8f4f 	dsb	sy
 8006eb2:	60fb      	str	r3, [r7, #12]
}
 8006eb4:	bf00      	nop
 8006eb6:	e7fe      	b.n	8006eb6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	3318      	adds	r3, #24
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7fe fbfb 	bl	80056b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ec2:	4b1e      	ldr	r3, [pc, #120]	; (8006f3c <xTaskRemoveFromEventList+0xb0>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d11d      	bne.n	8006f06 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	3304      	adds	r3, #4
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7fe fbf2 	bl	80056b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed8:	4b19      	ldr	r3, [pc, #100]	; (8006f40 <xTaskRemoveFromEventList+0xb4>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d903      	bls.n	8006ee8 <xTaskRemoveFromEventList+0x5c>
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee4:	4a16      	ldr	r2, [pc, #88]	; (8006f40 <xTaskRemoveFromEventList+0xb4>)
 8006ee6:	6013      	str	r3, [r2, #0]
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eec:	4613      	mov	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4413      	add	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4a13      	ldr	r2, [pc, #76]	; (8006f44 <xTaskRemoveFromEventList+0xb8>)
 8006ef6:	441a      	add	r2, r3
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	3304      	adds	r3, #4
 8006efc:	4619      	mov	r1, r3
 8006efe:	4610      	mov	r0, r2
 8006f00:	f7fe fb7d 	bl	80055fe <vListInsertEnd>
 8006f04:	e005      	b.n	8006f12 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	3318      	adds	r3, #24
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	480e      	ldr	r0, [pc, #56]	; (8006f48 <xTaskRemoveFromEventList+0xbc>)
 8006f0e:	f7fe fb76 	bl	80055fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f16:	4b0d      	ldr	r3, [pc, #52]	; (8006f4c <xTaskRemoveFromEventList+0xc0>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d905      	bls.n	8006f2c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f20:	2301      	movs	r3, #1
 8006f22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006f24:	4b0a      	ldr	r3, [pc, #40]	; (8006f50 <xTaskRemoveFromEventList+0xc4>)
 8006f26:	2201      	movs	r2, #1
 8006f28:	601a      	str	r2, [r3, #0]
 8006f2a:	e001      	b.n	8006f30 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006f30:	697b      	ldr	r3, [r7, #20]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3718      	adds	r7, #24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	2400495c 	.word	0x2400495c
 8006f40:	2400493c 	.word	0x2400493c
 8006f44:	24004464 	.word	0x24004464
 8006f48:	240048f4 	.word	0x240048f4
 8006f4c:	24004460 	.word	0x24004460
 8006f50:	24004948 	.word	0x24004948

08006f54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f5c:	4b06      	ldr	r3, [pc, #24]	; (8006f78 <vTaskInternalSetTimeOutState+0x24>)
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006f64:	4b05      	ldr	r3, [pc, #20]	; (8006f7c <vTaskInternalSetTimeOutState+0x28>)
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	605a      	str	r2, [r3, #4]
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr
 8006f78:	2400494c 	.word	0x2400494c
 8006f7c:	24004938 	.word	0x24004938

08006f80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b088      	sub	sp, #32
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10a      	bne.n	8006fa6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f94:	f383 8811 	msr	BASEPRI, r3
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	613b      	str	r3, [r7, #16]
}
 8006fa2:	bf00      	nop
 8006fa4:	e7fe      	b.n	8006fa4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10a      	bne.n	8006fc2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	60fb      	str	r3, [r7, #12]
}
 8006fbe:	bf00      	nop
 8006fc0:	e7fe      	b.n	8006fc0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006fc2:	f7fe fccf 	bl	8005964 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006fc6:	4b1d      	ldr	r3, [pc, #116]	; (800703c <xTaskCheckForTimeOut+0xbc>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	69ba      	ldr	r2, [r7, #24]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fde:	d102      	bne.n	8006fe6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	61fb      	str	r3, [r7, #28]
 8006fe4:	e023      	b.n	800702e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	4b15      	ldr	r3, [pc, #84]	; (8007040 <xTaskCheckForTimeOut+0xc0>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d007      	beq.n	8007002 <xTaskCheckForTimeOut+0x82>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	69ba      	ldr	r2, [r7, #24]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d302      	bcc.n	8007002 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	61fb      	str	r3, [r7, #28]
 8007000:	e015      	b.n	800702e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	429a      	cmp	r2, r3
 800700a:	d20b      	bcs.n	8007024 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	1ad2      	subs	r2, r2, r3
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f7ff ff9b 	bl	8006f54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800701e:	2300      	movs	r3, #0
 8007020:	61fb      	str	r3, [r7, #28]
 8007022:	e004      	b.n	800702e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	2200      	movs	r2, #0
 8007028:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800702a:	2301      	movs	r3, #1
 800702c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800702e:	f7fe fcc9 	bl	80059c4 <vPortExitCritical>

	return xReturn;
 8007032:	69fb      	ldr	r3, [r7, #28]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3720      	adds	r7, #32
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	24004938 	.word	0x24004938
 8007040:	2400494c 	.word	0x2400494c

08007044 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007044:	b480      	push	{r7}
 8007046:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007048:	4b03      	ldr	r3, [pc, #12]	; (8007058 <vTaskMissedYield+0x14>)
 800704a:	2201      	movs	r2, #1
 800704c:	601a      	str	r2, [r3, #0]
}
 800704e:	bf00      	nop
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	24004948 	.word	0x24004948

0800705c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007064:	f000 f852 	bl	800710c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007068:	4b06      	ldr	r3, [pc, #24]	; (8007084 <prvIdleTask+0x28>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d9f9      	bls.n	8007064 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007070:	4b05      	ldr	r3, [pc, #20]	; (8007088 <prvIdleTask+0x2c>)
 8007072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007076:	601a      	str	r2, [r3, #0]
 8007078:	f3bf 8f4f 	dsb	sy
 800707c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007080:	e7f0      	b.n	8007064 <prvIdleTask+0x8>
 8007082:	bf00      	nop
 8007084:	24004464 	.word	0x24004464
 8007088:	e000ed04 	.word	0xe000ed04

0800708c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007092:	2300      	movs	r3, #0
 8007094:	607b      	str	r3, [r7, #4]
 8007096:	e00c      	b.n	80070b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	4613      	mov	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4413      	add	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4a12      	ldr	r2, [pc, #72]	; (80070ec <prvInitialiseTaskLists+0x60>)
 80070a4:	4413      	add	r3, r2
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fe fa7c 	bl	80055a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	3301      	adds	r3, #1
 80070b0:	607b      	str	r3, [r7, #4]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2b37      	cmp	r3, #55	; 0x37
 80070b6:	d9ef      	bls.n	8007098 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80070b8:	480d      	ldr	r0, [pc, #52]	; (80070f0 <prvInitialiseTaskLists+0x64>)
 80070ba:	f7fe fa73 	bl	80055a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80070be:	480d      	ldr	r0, [pc, #52]	; (80070f4 <prvInitialiseTaskLists+0x68>)
 80070c0:	f7fe fa70 	bl	80055a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80070c4:	480c      	ldr	r0, [pc, #48]	; (80070f8 <prvInitialiseTaskLists+0x6c>)
 80070c6:	f7fe fa6d 	bl	80055a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80070ca:	480c      	ldr	r0, [pc, #48]	; (80070fc <prvInitialiseTaskLists+0x70>)
 80070cc:	f7fe fa6a 	bl	80055a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80070d0:	480b      	ldr	r0, [pc, #44]	; (8007100 <prvInitialiseTaskLists+0x74>)
 80070d2:	f7fe fa67 	bl	80055a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80070d6:	4b0b      	ldr	r3, [pc, #44]	; (8007104 <prvInitialiseTaskLists+0x78>)
 80070d8:	4a05      	ldr	r2, [pc, #20]	; (80070f0 <prvInitialiseTaskLists+0x64>)
 80070da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80070dc:	4b0a      	ldr	r3, [pc, #40]	; (8007108 <prvInitialiseTaskLists+0x7c>)
 80070de:	4a05      	ldr	r2, [pc, #20]	; (80070f4 <prvInitialiseTaskLists+0x68>)
 80070e0:	601a      	str	r2, [r3, #0]
}
 80070e2:	bf00      	nop
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	24004464 	.word	0x24004464
 80070f0:	240048c4 	.word	0x240048c4
 80070f4:	240048d8 	.word	0x240048d8
 80070f8:	240048f4 	.word	0x240048f4
 80070fc:	24004908 	.word	0x24004908
 8007100:	24004920 	.word	0x24004920
 8007104:	240048ec 	.word	0x240048ec
 8007108:	240048f0 	.word	0x240048f0

0800710c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007112:	e019      	b.n	8007148 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007114:	f7fe fc26 	bl	8005964 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007118:	4b10      	ldr	r3, [pc, #64]	; (800715c <prvCheckTasksWaitingTermination+0x50>)
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	3304      	adds	r3, #4
 8007124:	4618      	mov	r0, r3
 8007126:	f7fe fac7 	bl	80056b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800712a:	4b0d      	ldr	r3, [pc, #52]	; (8007160 <prvCheckTasksWaitingTermination+0x54>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	3b01      	subs	r3, #1
 8007130:	4a0b      	ldr	r2, [pc, #44]	; (8007160 <prvCheckTasksWaitingTermination+0x54>)
 8007132:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007134:	4b0b      	ldr	r3, [pc, #44]	; (8007164 <prvCheckTasksWaitingTermination+0x58>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	3b01      	subs	r3, #1
 800713a:	4a0a      	ldr	r2, [pc, #40]	; (8007164 <prvCheckTasksWaitingTermination+0x58>)
 800713c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800713e:	f7fe fc41 	bl	80059c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f810 	bl	8007168 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007148:	4b06      	ldr	r3, [pc, #24]	; (8007164 <prvCheckTasksWaitingTermination+0x58>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1e1      	bne.n	8007114 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007150:	bf00      	nop
 8007152:	bf00      	nop
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	24004908 	.word	0x24004908
 8007160:	24004934 	.word	0x24004934
 8007164:	2400491c 	.word	0x2400491c

08007168 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	3354      	adds	r3, #84	; 0x54
 8007174:	4618      	mov	r0, r3
 8007176:	f000 fe87 	bl	8007e88 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007180:	2b00      	cmp	r3, #0
 8007182:	d108      	bne.n	8007196 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007188:	4618      	mov	r0, r3
 800718a:	f7fe f8ed 	bl	8005368 <vPortFree>
				vPortFree( pxTCB );
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7fe f8ea 	bl	8005368 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007194:	e018      	b.n	80071c8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800719c:	2b01      	cmp	r3, #1
 800719e:	d103      	bne.n	80071a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7fe f8e1 	bl	8005368 <vPortFree>
	}
 80071a6:	e00f      	b.n	80071c8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d00a      	beq.n	80071c8 <prvDeleteTCB+0x60>
	__asm volatile
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	f383 8811 	msr	BASEPRI, r3
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	60fb      	str	r3, [r7, #12]
}
 80071c4:	bf00      	nop
 80071c6:	e7fe      	b.n	80071c6 <prvDeleteTCB+0x5e>
	}
 80071c8:	bf00      	nop
 80071ca:	3710      	adds	r7, #16
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071d6:	4b0c      	ldr	r3, [pc, #48]	; (8007208 <prvResetNextTaskUnblockTime+0x38>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d104      	bne.n	80071ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80071e0:	4b0a      	ldr	r3, [pc, #40]	; (800720c <prvResetNextTaskUnblockTime+0x3c>)
 80071e2:	f04f 32ff 	mov.w	r2, #4294967295
 80071e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80071e8:	e008      	b.n	80071fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071ea:	4b07      	ldr	r3, [pc, #28]	; (8007208 <prvResetNextTaskUnblockTime+0x38>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	4a04      	ldr	r2, [pc, #16]	; (800720c <prvResetNextTaskUnblockTime+0x3c>)
 80071fa:	6013      	str	r3, [r2, #0]
}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr
 8007208:	240048ec 	.word	0x240048ec
 800720c:	24004954 	.word	0x24004954

08007210 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007216:	4b0b      	ldr	r3, [pc, #44]	; (8007244 <xTaskGetSchedulerState+0x34>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d102      	bne.n	8007224 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800721e:	2301      	movs	r3, #1
 8007220:	607b      	str	r3, [r7, #4]
 8007222:	e008      	b.n	8007236 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007224:	4b08      	ldr	r3, [pc, #32]	; (8007248 <xTaskGetSchedulerState+0x38>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d102      	bne.n	8007232 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800722c:	2302      	movs	r3, #2
 800722e:	607b      	str	r3, [r7, #4]
 8007230:	e001      	b.n	8007236 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007232:	2300      	movs	r3, #0
 8007234:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007236:	687b      	ldr	r3, [r7, #4]
	}
 8007238:	4618      	mov	r0, r3
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr
 8007244:	24004940 	.word	0x24004940
 8007248:	2400495c 	.word	0x2400495c

0800724c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800724c:	b580      	push	{r7, lr}
 800724e:	b086      	sub	sp, #24
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007258:	2300      	movs	r3, #0
 800725a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d056      	beq.n	8007310 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007262:	4b2e      	ldr	r3, [pc, #184]	; (800731c <xTaskPriorityDisinherit+0xd0>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	429a      	cmp	r2, r3
 800726a:	d00a      	beq.n	8007282 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800726c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007270:	f383 8811 	msr	BASEPRI, r3
 8007274:	f3bf 8f6f 	isb	sy
 8007278:	f3bf 8f4f 	dsb	sy
 800727c:	60fb      	str	r3, [r7, #12]
}
 800727e:	bf00      	nop
 8007280:	e7fe      	b.n	8007280 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10a      	bne.n	80072a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	60bb      	str	r3, [r7, #8]
}
 800729c:	bf00      	nop
 800729e:	e7fe      	b.n	800729e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a4:	1e5a      	subs	r2, r3, #1
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d02c      	beq.n	8007310 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d128      	bne.n	8007310 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	3304      	adds	r3, #4
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fe f9f8 	bl	80056b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e0:	4b0f      	ldr	r3, [pc, #60]	; (8007320 <xTaskPriorityDisinherit+0xd4>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d903      	bls.n	80072f0 <xTaskPriorityDisinherit+0xa4>
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ec:	4a0c      	ldr	r2, [pc, #48]	; (8007320 <xTaskPriorityDisinherit+0xd4>)
 80072ee:	6013      	str	r3, [r2, #0]
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f4:	4613      	mov	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4a09      	ldr	r2, [pc, #36]	; (8007324 <xTaskPriorityDisinherit+0xd8>)
 80072fe:	441a      	add	r2, r3
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	3304      	adds	r3, #4
 8007304:	4619      	mov	r1, r3
 8007306:	4610      	mov	r0, r2
 8007308:	f7fe f979 	bl	80055fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800730c:	2301      	movs	r3, #1
 800730e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007310:	697b      	ldr	r3, [r7, #20]
	}
 8007312:	4618      	mov	r0, r3
 8007314:	3718      	adds	r7, #24
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	24004460 	.word	0x24004460
 8007320:	2400493c 	.word	0x2400493c
 8007324:	24004464 	.word	0x24004464

08007328 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007332:	4b21      	ldr	r3, [pc, #132]	; (80073b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007338:	4b20      	ldr	r3, [pc, #128]	; (80073bc <prvAddCurrentTaskToDelayedList+0x94>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	3304      	adds	r3, #4
 800733e:	4618      	mov	r0, r3
 8007340:	f7fe f9ba 	bl	80056b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800734a:	d10a      	bne.n	8007362 <prvAddCurrentTaskToDelayedList+0x3a>
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d007      	beq.n	8007362 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007352:	4b1a      	ldr	r3, [pc, #104]	; (80073bc <prvAddCurrentTaskToDelayedList+0x94>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	3304      	adds	r3, #4
 8007358:	4619      	mov	r1, r3
 800735a:	4819      	ldr	r0, [pc, #100]	; (80073c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800735c:	f7fe f94f 	bl	80055fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007360:	e026      	b.n	80073b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4413      	add	r3, r2
 8007368:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800736a:	4b14      	ldr	r3, [pc, #80]	; (80073bc <prvAddCurrentTaskToDelayedList+0x94>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	429a      	cmp	r2, r3
 8007378:	d209      	bcs.n	800738e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800737a:	4b12      	ldr	r3, [pc, #72]	; (80073c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	4b0f      	ldr	r3, [pc, #60]	; (80073bc <prvAddCurrentTaskToDelayedList+0x94>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	3304      	adds	r3, #4
 8007384:	4619      	mov	r1, r3
 8007386:	4610      	mov	r0, r2
 8007388:	f7fe f95d 	bl	8005646 <vListInsert>
}
 800738c:	e010      	b.n	80073b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800738e:	4b0e      	ldr	r3, [pc, #56]	; (80073c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	4b0a      	ldr	r3, [pc, #40]	; (80073bc <prvAddCurrentTaskToDelayedList+0x94>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	3304      	adds	r3, #4
 8007398:	4619      	mov	r1, r3
 800739a:	4610      	mov	r0, r2
 800739c:	f7fe f953 	bl	8005646 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80073a0:	4b0a      	ldr	r3, [pc, #40]	; (80073cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d202      	bcs.n	80073b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80073aa:	4a08      	ldr	r2, [pc, #32]	; (80073cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	6013      	str	r3, [r2, #0]
}
 80073b0:	bf00      	nop
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	24004938 	.word	0x24004938
 80073bc:	24004460 	.word	0x24004460
 80073c0:	24004920 	.word	0x24004920
 80073c4:	240048f0 	.word	0x240048f0
 80073c8:	240048ec 	.word	0x240048ec
 80073cc:	24004954 	.word	0x24004954

080073d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b08a      	sub	sp, #40	; 0x28
 80073d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80073d6:	2300      	movs	r3, #0
 80073d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80073da:	f000 fb07 	bl	80079ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80073de:	4b1c      	ldr	r3, [pc, #112]	; (8007450 <xTimerCreateTimerTask+0x80>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d021      	beq.n	800742a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80073e6:	2300      	movs	r3, #0
 80073e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80073ea:	2300      	movs	r3, #0
 80073ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80073ee:	1d3a      	adds	r2, r7, #4
 80073f0:	f107 0108 	add.w	r1, r7, #8
 80073f4:	f107 030c 	add.w	r3, r7, #12
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7fd fecf 	bl	800519c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80073fe:	6879      	ldr	r1, [r7, #4]
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	9202      	str	r2, [sp, #8]
 8007406:	9301      	str	r3, [sp, #4]
 8007408:	2302      	movs	r3, #2
 800740a:	9300      	str	r3, [sp, #0]
 800740c:	2300      	movs	r3, #0
 800740e:	460a      	mov	r2, r1
 8007410:	4910      	ldr	r1, [pc, #64]	; (8007454 <xTimerCreateTimerTask+0x84>)
 8007412:	4811      	ldr	r0, [pc, #68]	; (8007458 <xTimerCreateTimerTask+0x88>)
 8007414:	f7ff f8b4 	bl	8006580 <xTaskCreateStatic>
 8007418:	4603      	mov	r3, r0
 800741a:	4a10      	ldr	r2, [pc, #64]	; (800745c <xTimerCreateTimerTask+0x8c>)
 800741c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800741e:	4b0f      	ldr	r3, [pc, #60]	; (800745c <xTimerCreateTimerTask+0x8c>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d001      	beq.n	800742a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007426:	2301      	movs	r3, #1
 8007428:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10a      	bne.n	8007446 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	613b      	str	r3, [r7, #16]
}
 8007442:	bf00      	nop
 8007444:	e7fe      	b.n	8007444 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007446:	697b      	ldr	r3, [r7, #20]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3718      	adds	r7, #24
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	24004990 	.word	0x24004990
 8007454:	08008ab0 	.word	0x08008ab0
 8007458:	08007595 	.word	0x08007595
 800745c:	24004994 	.word	0x24004994

08007460 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b08a      	sub	sp, #40	; 0x28
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
 800746c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800746e:	2300      	movs	r3, #0
 8007470:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d10a      	bne.n	800748e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747c:	f383 8811 	msr	BASEPRI, r3
 8007480:	f3bf 8f6f 	isb	sy
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	623b      	str	r3, [r7, #32]
}
 800748a:	bf00      	nop
 800748c:	e7fe      	b.n	800748c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800748e:	4b1a      	ldr	r3, [pc, #104]	; (80074f8 <xTimerGenericCommand+0x98>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d02a      	beq.n	80074ec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	2b05      	cmp	r3, #5
 80074a6:	dc18      	bgt.n	80074da <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80074a8:	f7ff feb2 	bl	8007210 <xTaskGetSchedulerState>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d109      	bne.n	80074c6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80074b2:	4b11      	ldr	r3, [pc, #68]	; (80074f8 <xTimerGenericCommand+0x98>)
 80074b4:	6818      	ldr	r0, [r3, #0]
 80074b6:	f107 0110 	add.w	r1, r7, #16
 80074ba:	2300      	movs	r3, #0
 80074bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074be:	f7fe fc77 	bl	8005db0 <xQueueGenericSend>
 80074c2:	6278      	str	r0, [r7, #36]	; 0x24
 80074c4:	e012      	b.n	80074ec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80074c6:	4b0c      	ldr	r3, [pc, #48]	; (80074f8 <xTimerGenericCommand+0x98>)
 80074c8:	6818      	ldr	r0, [r3, #0]
 80074ca:	f107 0110 	add.w	r1, r7, #16
 80074ce:	2300      	movs	r3, #0
 80074d0:	2200      	movs	r2, #0
 80074d2:	f7fe fc6d 	bl	8005db0 <xQueueGenericSend>
 80074d6:	6278      	str	r0, [r7, #36]	; 0x24
 80074d8:	e008      	b.n	80074ec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80074da:	4b07      	ldr	r3, [pc, #28]	; (80074f8 <xTimerGenericCommand+0x98>)
 80074dc:	6818      	ldr	r0, [r3, #0]
 80074de:	f107 0110 	add.w	r1, r7, #16
 80074e2:	2300      	movs	r3, #0
 80074e4:	683a      	ldr	r2, [r7, #0]
 80074e6:	f7fe fd61 	bl	8005fac <xQueueGenericSendFromISR>
 80074ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3728      	adds	r7, #40	; 0x28
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	24004990 	.word	0x24004990

080074fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b088      	sub	sp, #32
 8007500:	af02      	add	r7, sp, #8
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007506:	4b22      	ldr	r3, [pc, #136]	; (8007590 <prvProcessExpiredTimer+0x94>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	3304      	adds	r3, #4
 8007514:	4618      	mov	r0, r3
 8007516:	f7fe f8cf 	bl	80056b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007520:	f003 0304 	and.w	r3, r3, #4
 8007524:	2b00      	cmp	r3, #0
 8007526:	d022      	beq.n	800756e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	699a      	ldr	r2, [r3, #24]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	18d1      	adds	r1, r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	6978      	ldr	r0, [r7, #20]
 8007536:	f000 f8d1 	bl	80076dc <prvInsertTimerInActiveList>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d01f      	beq.n	8007580 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007540:	2300      	movs	r3, #0
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	2300      	movs	r3, #0
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	2100      	movs	r1, #0
 800754a:	6978      	ldr	r0, [r7, #20]
 800754c:	f7ff ff88 	bl	8007460 <xTimerGenericCommand>
 8007550:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d113      	bne.n	8007580 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755c:	f383 8811 	msr	BASEPRI, r3
 8007560:	f3bf 8f6f 	isb	sy
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	60fb      	str	r3, [r7, #12]
}
 800756a:	bf00      	nop
 800756c:	e7fe      	b.n	800756c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007574:	f023 0301 	bic.w	r3, r3, #1
 8007578:	b2da      	uxtb	r2, r3
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	6a1b      	ldr	r3, [r3, #32]
 8007584:	6978      	ldr	r0, [r7, #20]
 8007586:	4798      	blx	r3
}
 8007588:	bf00      	nop
 800758a:	3718      	adds	r7, #24
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	24004988 	.word	0x24004988

08007594 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800759c:	f107 0308 	add.w	r3, r7, #8
 80075a0:	4618      	mov	r0, r3
 80075a2:	f000 f857 	bl	8007654 <prvGetNextExpireTime>
 80075a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	4619      	mov	r1, r3
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f000 f803 	bl	80075b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80075b2:	f000 f8d5 	bl	8007760 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075b6:	e7f1      	b.n	800759c <prvTimerTask+0x8>

080075b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80075c2:	f7ff fa39 	bl	8006a38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075c6:	f107 0308 	add.w	r3, r7, #8
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 f866 	bl	800769c <prvSampleTimeNow>
 80075d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d130      	bne.n	800763a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d10a      	bne.n	80075f4 <prvProcessTimerOrBlockTask+0x3c>
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d806      	bhi.n	80075f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80075e6:	f7ff fa35 	bl	8006a54 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80075ea:	68f9      	ldr	r1, [r7, #12]
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f7ff ff85 	bl	80074fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80075f2:	e024      	b.n	800763e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d008      	beq.n	800760c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80075fa:	4b13      	ldr	r3, [pc, #76]	; (8007648 <prvProcessTimerOrBlockTask+0x90>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <prvProcessTimerOrBlockTask+0x50>
 8007604:	2301      	movs	r3, #1
 8007606:	e000      	b.n	800760a <prvProcessTimerOrBlockTask+0x52>
 8007608:	2300      	movs	r3, #0
 800760a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800760c:	4b0f      	ldr	r3, [pc, #60]	; (800764c <prvProcessTimerOrBlockTask+0x94>)
 800760e:	6818      	ldr	r0, [r3, #0]
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	683a      	ldr	r2, [r7, #0]
 8007618:	4619      	mov	r1, r3
 800761a:	f7fe ff7d 	bl	8006518 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800761e:	f7ff fa19 	bl	8006a54 <xTaskResumeAll>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10a      	bne.n	800763e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007628:	4b09      	ldr	r3, [pc, #36]	; (8007650 <prvProcessTimerOrBlockTask+0x98>)
 800762a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800762e:	601a      	str	r2, [r3, #0]
 8007630:	f3bf 8f4f 	dsb	sy
 8007634:	f3bf 8f6f 	isb	sy
}
 8007638:	e001      	b.n	800763e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800763a:	f7ff fa0b 	bl	8006a54 <xTaskResumeAll>
}
 800763e:	bf00      	nop
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	2400498c 	.word	0x2400498c
 800764c:	24004990 	.word	0x24004990
 8007650:	e000ed04 	.word	0xe000ed04

08007654 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800765c:	4b0e      	ldr	r3, [pc, #56]	; (8007698 <prvGetNextExpireTime+0x44>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <prvGetNextExpireTime+0x16>
 8007666:	2201      	movs	r2, #1
 8007668:	e000      	b.n	800766c <prvGetNextExpireTime+0x18>
 800766a:	2200      	movs	r2, #0
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d105      	bne.n	8007684 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007678:	4b07      	ldr	r3, [pc, #28]	; (8007698 <prvGetNextExpireTime+0x44>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	60fb      	str	r3, [r7, #12]
 8007682:	e001      	b.n	8007688 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007684:	2300      	movs	r3, #0
 8007686:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007688:	68fb      	ldr	r3, [r7, #12]
}
 800768a:	4618      	mov	r0, r3
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	24004988 	.word	0x24004988

0800769c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80076a4:	f7ff fa74 	bl	8006b90 <xTaskGetTickCount>
 80076a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80076aa:	4b0b      	ldr	r3, [pc, #44]	; (80076d8 <prvSampleTimeNow+0x3c>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d205      	bcs.n	80076c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80076b4:	f000 f936 	bl	8007924 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	e002      	b.n	80076c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80076c6:	4a04      	ldr	r2, [pc, #16]	; (80076d8 <prvSampleTimeNow+0x3c>)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80076cc:	68fb      	ldr	r3, [r7, #12]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	24004998 	.word	0x24004998

080076dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b086      	sub	sp, #24
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
 80076e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80076ea:	2300      	movs	r3, #0
 80076ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d812      	bhi.n	8007728 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	1ad2      	subs	r2, r2, r3
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	429a      	cmp	r2, r3
 800770e:	d302      	bcc.n	8007716 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007710:	2301      	movs	r3, #1
 8007712:	617b      	str	r3, [r7, #20]
 8007714:	e01b      	b.n	800774e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007716:	4b10      	ldr	r3, [pc, #64]	; (8007758 <prvInsertTimerInActiveList+0x7c>)
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	3304      	adds	r3, #4
 800771e:	4619      	mov	r1, r3
 8007720:	4610      	mov	r0, r2
 8007722:	f7fd ff90 	bl	8005646 <vListInsert>
 8007726:	e012      	b.n	800774e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	429a      	cmp	r2, r3
 800772e:	d206      	bcs.n	800773e <prvInsertTimerInActiveList+0x62>
 8007730:	68ba      	ldr	r2, [r7, #8]
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	429a      	cmp	r2, r3
 8007736:	d302      	bcc.n	800773e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007738:	2301      	movs	r3, #1
 800773a:	617b      	str	r3, [r7, #20]
 800773c:	e007      	b.n	800774e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800773e:	4b07      	ldr	r3, [pc, #28]	; (800775c <prvInsertTimerInActiveList+0x80>)
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	3304      	adds	r3, #4
 8007746:	4619      	mov	r1, r3
 8007748:	4610      	mov	r0, r2
 800774a:	f7fd ff7c 	bl	8005646 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800774e:	697b      	ldr	r3, [r7, #20]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3718      	adds	r7, #24
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	2400498c 	.word	0x2400498c
 800775c:	24004988 	.word	0x24004988

08007760 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b08e      	sub	sp, #56	; 0x38
 8007764:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007766:	e0ca      	b.n	80078fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	da18      	bge.n	80077a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800776e:	1d3b      	adds	r3, r7, #4
 8007770:	3304      	adds	r3, #4
 8007772:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007776:	2b00      	cmp	r3, #0
 8007778:	d10a      	bne.n	8007790 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800777a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777e:	f383 8811 	msr	BASEPRI, r3
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	61fb      	str	r3, [r7, #28]
}
 800778c:	bf00      	nop
 800778e:	e7fe      	b.n	800778e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007796:	6850      	ldr	r0, [r2, #4]
 8007798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800779a:	6892      	ldr	r2, [r2, #8]
 800779c:	4611      	mov	r1, r2
 800779e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	f2c0 80aa 	blt.w	80078fc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80077ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ae:	695b      	ldr	r3, [r3, #20]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d004      	beq.n	80077be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b6:	3304      	adds	r3, #4
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7fd ff7d 	bl	80056b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80077be:	463b      	mov	r3, r7
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7ff ff6b 	bl	800769c <prvSampleTimeNow>
 80077c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2b09      	cmp	r3, #9
 80077cc:	f200 8097 	bhi.w	80078fe <prvProcessReceivedCommands+0x19e>
 80077d0:	a201      	add	r2, pc, #4	; (adr r2, 80077d8 <prvProcessReceivedCommands+0x78>)
 80077d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d6:	bf00      	nop
 80077d8:	08007801 	.word	0x08007801
 80077dc:	08007801 	.word	0x08007801
 80077e0:	08007801 	.word	0x08007801
 80077e4:	08007875 	.word	0x08007875
 80077e8:	08007889 	.word	0x08007889
 80077ec:	080078d3 	.word	0x080078d3
 80077f0:	08007801 	.word	0x08007801
 80077f4:	08007801 	.word	0x08007801
 80077f8:	08007875 	.word	0x08007875
 80077fc:	08007889 	.word	0x08007889
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007802:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007806:	f043 0301 	orr.w	r3, r3, #1
 800780a:	b2da      	uxtb	r2, r3
 800780c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007812:	68ba      	ldr	r2, [r7, #8]
 8007814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	18d1      	adds	r1, r2, r3
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800781e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007820:	f7ff ff5c 	bl	80076dc <prvInsertTimerInActiveList>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d069      	beq.n	80078fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800782a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007830:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007834:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007838:	f003 0304 	and.w	r3, r3, #4
 800783c:	2b00      	cmp	r3, #0
 800783e:	d05e      	beq.n	80078fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	441a      	add	r2, r3
 8007848:	2300      	movs	r3, #0
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	2300      	movs	r3, #0
 800784e:	2100      	movs	r1, #0
 8007850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007852:	f7ff fe05 	bl	8007460 <xTimerGenericCommand>
 8007856:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007858:	6a3b      	ldr	r3, [r7, #32]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d14f      	bne.n	80078fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	61bb      	str	r3, [r7, #24]
}
 8007870:	bf00      	nop
 8007872:	e7fe      	b.n	8007872 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007876:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800787a:	f023 0301 	bic.w	r3, r3, #1
 800787e:	b2da      	uxtb	r2, r3
 8007880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007882:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007886:	e03a      	b.n	80078fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800788e:	f043 0301 	orr.w	r3, r3, #1
 8007892:	b2da      	uxtb	r2, r3
 8007894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007896:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80078a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d10a      	bne.n	80078be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80078a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ac:	f383 8811 	msr	BASEPRI, r3
 80078b0:	f3bf 8f6f 	isb	sy
 80078b4:	f3bf 8f4f 	dsb	sy
 80078b8:	617b      	str	r3, [r7, #20]
}
 80078ba:	bf00      	nop
 80078bc:	e7fe      	b.n	80078bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80078be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c0:	699a      	ldr	r2, [r3, #24]
 80078c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c4:	18d1      	adds	r1, r2, r3
 80078c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078cc:	f7ff ff06 	bl	80076dc <prvInsertTimerInActiveList>
					break;
 80078d0:	e015      	b.n	80078fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80078d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078d8:	f003 0302 	and.w	r3, r3, #2
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d103      	bne.n	80078e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80078e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078e2:	f7fd fd41 	bl	8005368 <vPortFree>
 80078e6:	e00a      	b.n	80078fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078ee:	f023 0301 	bic.w	r3, r3, #1
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80078fa:	e000      	b.n	80078fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80078fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80078fe:	4b08      	ldr	r3, [pc, #32]	; (8007920 <prvProcessReceivedCommands+0x1c0>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	1d39      	adds	r1, r7, #4
 8007904:	2200      	movs	r2, #0
 8007906:	4618      	mov	r0, r3
 8007908:	f7fe fbec 	bl	80060e4 <xQueueReceive>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	f47f af2a 	bne.w	8007768 <prvProcessReceivedCommands+0x8>
	}
}
 8007914:	bf00      	nop
 8007916:	bf00      	nop
 8007918:	3730      	adds	r7, #48	; 0x30
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	24004990 	.word	0x24004990

08007924 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b088      	sub	sp, #32
 8007928:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800792a:	e048      	b.n	80079be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800792c:	4b2d      	ldr	r3, [pc, #180]	; (80079e4 <prvSwitchTimerLists+0xc0>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007936:	4b2b      	ldr	r3, [pc, #172]	; (80079e4 <prvSwitchTimerLists+0xc0>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	3304      	adds	r3, #4
 8007944:	4618      	mov	r0, r3
 8007946:	f7fd feb7 	bl	80056b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007958:	f003 0304 	and.w	r3, r3, #4
 800795c:	2b00      	cmp	r3, #0
 800795e:	d02e      	beq.n	80079be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	4413      	add	r3, r2
 8007968:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	429a      	cmp	r2, r3
 8007970:	d90e      	bls.n	8007990 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	68ba      	ldr	r2, [r7, #8]
 8007976:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800797e:	4b19      	ldr	r3, [pc, #100]	; (80079e4 <prvSwitchTimerLists+0xc0>)
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	3304      	adds	r3, #4
 8007986:	4619      	mov	r1, r3
 8007988:	4610      	mov	r0, r2
 800798a:	f7fd fe5c 	bl	8005646 <vListInsert>
 800798e:	e016      	b.n	80079be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007990:	2300      	movs	r3, #0
 8007992:	9300      	str	r3, [sp, #0]
 8007994:	2300      	movs	r3, #0
 8007996:	693a      	ldr	r2, [r7, #16]
 8007998:	2100      	movs	r1, #0
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f7ff fd60 	bl	8007460 <xTimerGenericCommand>
 80079a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10a      	bne.n	80079be <prvSwitchTimerLists+0x9a>
	__asm volatile
 80079a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ac:	f383 8811 	msr	BASEPRI, r3
 80079b0:	f3bf 8f6f 	isb	sy
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	603b      	str	r3, [r7, #0]
}
 80079ba:	bf00      	nop
 80079bc:	e7fe      	b.n	80079bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079be:	4b09      	ldr	r3, [pc, #36]	; (80079e4 <prvSwitchTimerLists+0xc0>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1b1      	bne.n	800792c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80079c8:	4b06      	ldr	r3, [pc, #24]	; (80079e4 <prvSwitchTimerLists+0xc0>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80079ce:	4b06      	ldr	r3, [pc, #24]	; (80079e8 <prvSwitchTimerLists+0xc4>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a04      	ldr	r2, [pc, #16]	; (80079e4 <prvSwitchTimerLists+0xc0>)
 80079d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80079d6:	4a04      	ldr	r2, [pc, #16]	; (80079e8 <prvSwitchTimerLists+0xc4>)
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	6013      	str	r3, [r2, #0]
}
 80079dc:	bf00      	nop
 80079de:	3718      	adds	r7, #24
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	24004988 	.word	0x24004988
 80079e8:	2400498c 	.word	0x2400498c

080079ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80079f2:	f7fd ffb7 	bl	8005964 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80079f6:	4b15      	ldr	r3, [pc, #84]	; (8007a4c <prvCheckForValidListAndQueue+0x60>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d120      	bne.n	8007a40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80079fe:	4814      	ldr	r0, [pc, #80]	; (8007a50 <prvCheckForValidListAndQueue+0x64>)
 8007a00:	f7fd fdd0 	bl	80055a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007a04:	4813      	ldr	r0, [pc, #76]	; (8007a54 <prvCheckForValidListAndQueue+0x68>)
 8007a06:	f7fd fdcd 	bl	80055a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007a0a:	4b13      	ldr	r3, [pc, #76]	; (8007a58 <prvCheckForValidListAndQueue+0x6c>)
 8007a0c:	4a10      	ldr	r2, [pc, #64]	; (8007a50 <prvCheckForValidListAndQueue+0x64>)
 8007a0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007a10:	4b12      	ldr	r3, [pc, #72]	; (8007a5c <prvCheckForValidListAndQueue+0x70>)
 8007a12:	4a10      	ldr	r2, [pc, #64]	; (8007a54 <prvCheckForValidListAndQueue+0x68>)
 8007a14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007a16:	2300      	movs	r3, #0
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	4b11      	ldr	r3, [pc, #68]	; (8007a60 <prvCheckForValidListAndQueue+0x74>)
 8007a1c:	4a11      	ldr	r2, [pc, #68]	; (8007a64 <prvCheckForValidListAndQueue+0x78>)
 8007a1e:	2110      	movs	r1, #16
 8007a20:	200a      	movs	r0, #10
 8007a22:	f7fe f929 	bl	8005c78 <xQueueGenericCreateStatic>
 8007a26:	4603      	mov	r3, r0
 8007a28:	4a08      	ldr	r2, [pc, #32]	; (8007a4c <prvCheckForValidListAndQueue+0x60>)
 8007a2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007a2c:	4b07      	ldr	r3, [pc, #28]	; (8007a4c <prvCheckForValidListAndQueue+0x60>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d005      	beq.n	8007a40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007a34:	4b05      	ldr	r3, [pc, #20]	; (8007a4c <prvCheckForValidListAndQueue+0x60>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	490b      	ldr	r1, [pc, #44]	; (8007a68 <prvCheckForValidListAndQueue+0x7c>)
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7fe fd42 	bl	80064c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a40:	f7fd ffc0 	bl	80059c4 <vPortExitCritical>
}
 8007a44:	bf00      	nop
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	24004990 	.word	0x24004990
 8007a50:	24004960 	.word	0x24004960
 8007a54:	24004974 	.word	0x24004974
 8007a58:	24004988 	.word	0x24004988
 8007a5c:	2400498c 	.word	0x2400498c
 8007a60:	24004a3c 	.word	0x24004a3c
 8007a64:	2400499c 	.word	0x2400499c
 8007a68:	08008ab8 	.word	0x08008ab8

08007a6c <__errno>:
 8007a6c:	4b01      	ldr	r3, [pc, #4]	; (8007a74 <__errno+0x8>)
 8007a6e:	6818      	ldr	r0, [r3, #0]
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	24000014 	.word	0x24000014

08007a78 <std>:
 8007a78:	2300      	movs	r3, #0
 8007a7a:	b510      	push	{r4, lr}
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	e9c0 3300 	strd	r3, r3, [r0]
 8007a82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a86:	6083      	str	r3, [r0, #8]
 8007a88:	8181      	strh	r1, [r0, #12]
 8007a8a:	6643      	str	r3, [r0, #100]	; 0x64
 8007a8c:	81c2      	strh	r2, [r0, #14]
 8007a8e:	6183      	str	r3, [r0, #24]
 8007a90:	4619      	mov	r1, r3
 8007a92:	2208      	movs	r2, #8
 8007a94:	305c      	adds	r0, #92	; 0x5c
 8007a96:	f000 f91f 	bl	8007cd8 <memset>
 8007a9a:	4b05      	ldr	r3, [pc, #20]	; (8007ab0 <std+0x38>)
 8007a9c:	6263      	str	r3, [r4, #36]	; 0x24
 8007a9e:	4b05      	ldr	r3, [pc, #20]	; (8007ab4 <std+0x3c>)
 8007aa0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007aa2:	4b05      	ldr	r3, [pc, #20]	; (8007ab8 <std+0x40>)
 8007aa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007aa6:	4b05      	ldr	r3, [pc, #20]	; (8007abc <std+0x44>)
 8007aa8:	6224      	str	r4, [r4, #32]
 8007aaa:	6323      	str	r3, [r4, #48]	; 0x30
 8007aac:	bd10      	pop	{r4, pc}
 8007aae:	bf00      	nop
 8007ab0:	08007f61 	.word	0x08007f61
 8007ab4:	08007f83 	.word	0x08007f83
 8007ab8:	08007fbb 	.word	0x08007fbb
 8007abc:	08007fdf 	.word	0x08007fdf

08007ac0 <_cleanup_r>:
 8007ac0:	4901      	ldr	r1, [pc, #4]	; (8007ac8 <_cleanup_r+0x8>)
 8007ac2:	f000 b8af 	b.w	8007c24 <_fwalk_reent>
 8007ac6:	bf00      	nop
 8007ac8:	08008139 	.word	0x08008139

08007acc <__sfmoreglue>:
 8007acc:	b570      	push	{r4, r5, r6, lr}
 8007ace:	1e4a      	subs	r2, r1, #1
 8007ad0:	2568      	movs	r5, #104	; 0x68
 8007ad2:	4355      	muls	r5, r2
 8007ad4:	460e      	mov	r6, r1
 8007ad6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007ada:	f000 f955 	bl	8007d88 <_malloc_r>
 8007ade:	4604      	mov	r4, r0
 8007ae0:	b140      	cbz	r0, 8007af4 <__sfmoreglue+0x28>
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	e9c0 1600 	strd	r1, r6, [r0]
 8007ae8:	300c      	adds	r0, #12
 8007aea:	60a0      	str	r0, [r4, #8]
 8007aec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007af0:	f000 f8f2 	bl	8007cd8 <memset>
 8007af4:	4620      	mov	r0, r4
 8007af6:	bd70      	pop	{r4, r5, r6, pc}

08007af8 <__sfp_lock_acquire>:
 8007af8:	4801      	ldr	r0, [pc, #4]	; (8007b00 <__sfp_lock_acquire+0x8>)
 8007afa:	f7f9 ba71 	b.w	8000fe0 <__retarget_lock_acquire_recursive>
 8007afe:	bf00      	nop
 8007b00:	240000a4 	.word	0x240000a4

08007b04 <__sfp_lock_release>:
 8007b04:	4801      	ldr	r0, [pc, #4]	; (8007b0c <__sfp_lock_release+0x8>)
 8007b06:	f7f9 ba7f 	b.w	8001008 <__retarget_lock_release_recursive>
 8007b0a:	bf00      	nop
 8007b0c:	240000a4 	.word	0x240000a4

08007b10 <__sinit_lock_acquire>:
 8007b10:	4801      	ldr	r0, [pc, #4]	; (8007b18 <__sinit_lock_acquire+0x8>)
 8007b12:	f7f9 ba65 	b.w	8000fe0 <__retarget_lock_acquire_recursive>
 8007b16:	bf00      	nop
 8007b18:	24000098 	.word	0x24000098

08007b1c <__sinit_lock_release>:
 8007b1c:	4801      	ldr	r0, [pc, #4]	; (8007b24 <__sinit_lock_release+0x8>)
 8007b1e:	f7f9 ba73 	b.w	8001008 <__retarget_lock_release_recursive>
 8007b22:	bf00      	nop
 8007b24:	24000098 	.word	0x24000098

08007b28 <__sinit>:
 8007b28:	b510      	push	{r4, lr}
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	f7ff fff0 	bl	8007b10 <__sinit_lock_acquire>
 8007b30:	69a3      	ldr	r3, [r4, #24]
 8007b32:	b11b      	cbz	r3, 8007b3c <__sinit+0x14>
 8007b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b38:	f7ff bff0 	b.w	8007b1c <__sinit_lock_release>
 8007b3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007b40:	6523      	str	r3, [r4, #80]	; 0x50
 8007b42:	4b13      	ldr	r3, [pc, #76]	; (8007b90 <__sinit+0x68>)
 8007b44:	4a13      	ldr	r2, [pc, #76]	; (8007b94 <__sinit+0x6c>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b4a:	42a3      	cmp	r3, r4
 8007b4c:	bf04      	itt	eq
 8007b4e:	2301      	moveq	r3, #1
 8007b50:	61a3      	streq	r3, [r4, #24]
 8007b52:	4620      	mov	r0, r4
 8007b54:	f000 f820 	bl	8007b98 <__sfp>
 8007b58:	6060      	str	r0, [r4, #4]
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	f000 f81c 	bl	8007b98 <__sfp>
 8007b60:	60a0      	str	r0, [r4, #8]
 8007b62:	4620      	mov	r0, r4
 8007b64:	f000 f818 	bl	8007b98 <__sfp>
 8007b68:	2200      	movs	r2, #0
 8007b6a:	60e0      	str	r0, [r4, #12]
 8007b6c:	2104      	movs	r1, #4
 8007b6e:	6860      	ldr	r0, [r4, #4]
 8007b70:	f7ff ff82 	bl	8007a78 <std>
 8007b74:	68a0      	ldr	r0, [r4, #8]
 8007b76:	2201      	movs	r2, #1
 8007b78:	2109      	movs	r1, #9
 8007b7a:	f7ff ff7d 	bl	8007a78 <std>
 8007b7e:	68e0      	ldr	r0, [r4, #12]
 8007b80:	2202      	movs	r2, #2
 8007b82:	2112      	movs	r1, #18
 8007b84:	f7ff ff78 	bl	8007a78 <std>
 8007b88:	2301      	movs	r3, #1
 8007b8a:	61a3      	str	r3, [r4, #24]
 8007b8c:	e7d2      	b.n	8007b34 <__sinit+0xc>
 8007b8e:	bf00      	nop
 8007b90:	08008b7c 	.word	0x08008b7c
 8007b94:	08007ac1 	.word	0x08007ac1

08007b98 <__sfp>:
 8007b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b9a:	4607      	mov	r7, r0
 8007b9c:	f7ff ffac 	bl	8007af8 <__sfp_lock_acquire>
 8007ba0:	4b1e      	ldr	r3, [pc, #120]	; (8007c1c <__sfp+0x84>)
 8007ba2:	681e      	ldr	r6, [r3, #0]
 8007ba4:	69b3      	ldr	r3, [r6, #24]
 8007ba6:	b913      	cbnz	r3, 8007bae <__sfp+0x16>
 8007ba8:	4630      	mov	r0, r6
 8007baa:	f7ff ffbd 	bl	8007b28 <__sinit>
 8007bae:	3648      	adds	r6, #72	; 0x48
 8007bb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	d503      	bpl.n	8007bc0 <__sfp+0x28>
 8007bb8:	6833      	ldr	r3, [r6, #0]
 8007bba:	b30b      	cbz	r3, 8007c00 <__sfp+0x68>
 8007bbc:	6836      	ldr	r6, [r6, #0]
 8007bbe:	e7f7      	b.n	8007bb0 <__sfp+0x18>
 8007bc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007bc4:	b9d5      	cbnz	r5, 8007bfc <__sfp+0x64>
 8007bc6:	4b16      	ldr	r3, [pc, #88]	; (8007c20 <__sfp+0x88>)
 8007bc8:	60e3      	str	r3, [r4, #12]
 8007bca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007bce:	6665      	str	r5, [r4, #100]	; 0x64
 8007bd0:	f7f9 f9e0 	bl	8000f94 <__retarget_lock_init_recursive>
 8007bd4:	f7ff ff96 	bl	8007b04 <__sfp_lock_release>
 8007bd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007bdc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007be0:	6025      	str	r5, [r4, #0]
 8007be2:	61a5      	str	r5, [r4, #24]
 8007be4:	2208      	movs	r2, #8
 8007be6:	4629      	mov	r1, r5
 8007be8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007bec:	f000 f874 	bl	8007cd8 <memset>
 8007bf0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007bf4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bfc:	3468      	adds	r4, #104	; 0x68
 8007bfe:	e7d9      	b.n	8007bb4 <__sfp+0x1c>
 8007c00:	2104      	movs	r1, #4
 8007c02:	4638      	mov	r0, r7
 8007c04:	f7ff ff62 	bl	8007acc <__sfmoreglue>
 8007c08:	4604      	mov	r4, r0
 8007c0a:	6030      	str	r0, [r6, #0]
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	d1d5      	bne.n	8007bbc <__sfp+0x24>
 8007c10:	f7ff ff78 	bl	8007b04 <__sfp_lock_release>
 8007c14:	230c      	movs	r3, #12
 8007c16:	603b      	str	r3, [r7, #0]
 8007c18:	e7ee      	b.n	8007bf8 <__sfp+0x60>
 8007c1a:	bf00      	nop
 8007c1c:	08008b7c 	.word	0x08008b7c
 8007c20:	ffff0001 	.word	0xffff0001

08007c24 <_fwalk_reent>:
 8007c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c28:	4606      	mov	r6, r0
 8007c2a:	4688      	mov	r8, r1
 8007c2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007c30:	2700      	movs	r7, #0
 8007c32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c36:	f1b9 0901 	subs.w	r9, r9, #1
 8007c3a:	d505      	bpl.n	8007c48 <_fwalk_reent+0x24>
 8007c3c:	6824      	ldr	r4, [r4, #0]
 8007c3e:	2c00      	cmp	r4, #0
 8007c40:	d1f7      	bne.n	8007c32 <_fwalk_reent+0xe>
 8007c42:	4638      	mov	r0, r7
 8007c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c48:	89ab      	ldrh	r3, [r5, #12]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d907      	bls.n	8007c5e <_fwalk_reent+0x3a>
 8007c4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c52:	3301      	adds	r3, #1
 8007c54:	d003      	beq.n	8007c5e <_fwalk_reent+0x3a>
 8007c56:	4629      	mov	r1, r5
 8007c58:	4630      	mov	r0, r6
 8007c5a:	47c0      	blx	r8
 8007c5c:	4307      	orrs	r7, r0
 8007c5e:	3568      	adds	r5, #104	; 0x68
 8007c60:	e7e9      	b.n	8007c36 <_fwalk_reent+0x12>
	...

08007c64 <__libc_init_array>:
 8007c64:	b570      	push	{r4, r5, r6, lr}
 8007c66:	4d0d      	ldr	r5, [pc, #52]	; (8007c9c <__libc_init_array+0x38>)
 8007c68:	4c0d      	ldr	r4, [pc, #52]	; (8007ca0 <__libc_init_array+0x3c>)
 8007c6a:	1b64      	subs	r4, r4, r5
 8007c6c:	10a4      	asrs	r4, r4, #2
 8007c6e:	2600      	movs	r6, #0
 8007c70:	42a6      	cmp	r6, r4
 8007c72:	d109      	bne.n	8007c88 <__libc_init_array+0x24>
 8007c74:	4d0b      	ldr	r5, [pc, #44]	; (8007ca4 <__libc_init_array+0x40>)
 8007c76:	4c0c      	ldr	r4, [pc, #48]	; (8007ca8 <__libc_init_array+0x44>)
 8007c78:	f000 fefe 	bl	8008a78 <_init>
 8007c7c:	1b64      	subs	r4, r4, r5
 8007c7e:	10a4      	asrs	r4, r4, #2
 8007c80:	2600      	movs	r6, #0
 8007c82:	42a6      	cmp	r6, r4
 8007c84:	d105      	bne.n	8007c92 <__libc_init_array+0x2e>
 8007c86:	bd70      	pop	{r4, r5, r6, pc}
 8007c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c8c:	4798      	blx	r3
 8007c8e:	3601      	adds	r6, #1
 8007c90:	e7ee      	b.n	8007c70 <__libc_init_array+0xc>
 8007c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c96:	4798      	blx	r3
 8007c98:	3601      	adds	r6, #1
 8007c9a:	e7f2      	b.n	8007c82 <__libc_init_array+0x1e>
 8007c9c:	08008bbc 	.word	0x08008bbc
 8007ca0:	08008bbc 	.word	0x08008bbc
 8007ca4:	08008bbc 	.word	0x08008bbc
 8007ca8:	08008bc0 	.word	0x08008bc0

08007cac <malloc>:
 8007cac:	4b02      	ldr	r3, [pc, #8]	; (8007cb8 <malloc+0xc>)
 8007cae:	4601      	mov	r1, r0
 8007cb0:	6818      	ldr	r0, [r3, #0]
 8007cb2:	f000 b869 	b.w	8007d88 <_malloc_r>
 8007cb6:	bf00      	nop
 8007cb8:	24000014 	.word	0x24000014

08007cbc <memcpy>:
 8007cbc:	440a      	add	r2, r1
 8007cbe:	4291      	cmp	r1, r2
 8007cc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cc4:	d100      	bne.n	8007cc8 <memcpy+0xc>
 8007cc6:	4770      	bx	lr
 8007cc8:	b510      	push	{r4, lr}
 8007cca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cd2:	4291      	cmp	r1, r2
 8007cd4:	d1f9      	bne.n	8007cca <memcpy+0xe>
 8007cd6:	bd10      	pop	{r4, pc}

08007cd8 <memset>:
 8007cd8:	4402      	add	r2, r0
 8007cda:	4603      	mov	r3, r0
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d100      	bne.n	8007ce2 <memset+0xa>
 8007ce0:	4770      	bx	lr
 8007ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ce6:	e7f9      	b.n	8007cdc <memset+0x4>

08007ce8 <_free_r>:
 8007ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cea:	2900      	cmp	r1, #0
 8007cec:	d048      	beq.n	8007d80 <_free_r+0x98>
 8007cee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cf2:	9001      	str	r0, [sp, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f1a1 0404 	sub.w	r4, r1, #4
 8007cfa:	bfb8      	it	lt
 8007cfc:	18e4      	addlt	r4, r4, r3
 8007cfe:	f000 fa69 	bl	80081d4 <__malloc_lock>
 8007d02:	4a20      	ldr	r2, [pc, #128]	; (8007d84 <_free_r+0x9c>)
 8007d04:	9801      	ldr	r0, [sp, #4]
 8007d06:	6813      	ldr	r3, [r2, #0]
 8007d08:	4615      	mov	r5, r2
 8007d0a:	b933      	cbnz	r3, 8007d1a <_free_r+0x32>
 8007d0c:	6063      	str	r3, [r4, #4]
 8007d0e:	6014      	str	r4, [r2, #0]
 8007d10:	b003      	add	sp, #12
 8007d12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d16:	f000 ba63 	b.w	80081e0 <__malloc_unlock>
 8007d1a:	42a3      	cmp	r3, r4
 8007d1c:	d90b      	bls.n	8007d36 <_free_r+0x4e>
 8007d1e:	6821      	ldr	r1, [r4, #0]
 8007d20:	1862      	adds	r2, r4, r1
 8007d22:	4293      	cmp	r3, r2
 8007d24:	bf04      	itt	eq
 8007d26:	681a      	ldreq	r2, [r3, #0]
 8007d28:	685b      	ldreq	r3, [r3, #4]
 8007d2a:	6063      	str	r3, [r4, #4]
 8007d2c:	bf04      	itt	eq
 8007d2e:	1852      	addeq	r2, r2, r1
 8007d30:	6022      	streq	r2, [r4, #0]
 8007d32:	602c      	str	r4, [r5, #0]
 8007d34:	e7ec      	b.n	8007d10 <_free_r+0x28>
 8007d36:	461a      	mov	r2, r3
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	b10b      	cbz	r3, 8007d40 <_free_r+0x58>
 8007d3c:	42a3      	cmp	r3, r4
 8007d3e:	d9fa      	bls.n	8007d36 <_free_r+0x4e>
 8007d40:	6811      	ldr	r1, [r2, #0]
 8007d42:	1855      	adds	r5, r2, r1
 8007d44:	42a5      	cmp	r5, r4
 8007d46:	d10b      	bne.n	8007d60 <_free_r+0x78>
 8007d48:	6824      	ldr	r4, [r4, #0]
 8007d4a:	4421      	add	r1, r4
 8007d4c:	1854      	adds	r4, r2, r1
 8007d4e:	42a3      	cmp	r3, r4
 8007d50:	6011      	str	r1, [r2, #0]
 8007d52:	d1dd      	bne.n	8007d10 <_free_r+0x28>
 8007d54:	681c      	ldr	r4, [r3, #0]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	6053      	str	r3, [r2, #4]
 8007d5a:	4421      	add	r1, r4
 8007d5c:	6011      	str	r1, [r2, #0]
 8007d5e:	e7d7      	b.n	8007d10 <_free_r+0x28>
 8007d60:	d902      	bls.n	8007d68 <_free_r+0x80>
 8007d62:	230c      	movs	r3, #12
 8007d64:	6003      	str	r3, [r0, #0]
 8007d66:	e7d3      	b.n	8007d10 <_free_r+0x28>
 8007d68:	6825      	ldr	r5, [r4, #0]
 8007d6a:	1961      	adds	r1, r4, r5
 8007d6c:	428b      	cmp	r3, r1
 8007d6e:	bf04      	itt	eq
 8007d70:	6819      	ldreq	r1, [r3, #0]
 8007d72:	685b      	ldreq	r3, [r3, #4]
 8007d74:	6063      	str	r3, [r4, #4]
 8007d76:	bf04      	itt	eq
 8007d78:	1949      	addeq	r1, r1, r5
 8007d7a:	6021      	streq	r1, [r4, #0]
 8007d7c:	6054      	str	r4, [r2, #4]
 8007d7e:	e7c7      	b.n	8007d10 <_free_r+0x28>
 8007d80:	b003      	add	sp, #12
 8007d82:	bd30      	pop	{r4, r5, pc}
 8007d84:	24004a8c 	.word	0x24004a8c

08007d88 <_malloc_r>:
 8007d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d8a:	1ccd      	adds	r5, r1, #3
 8007d8c:	f025 0503 	bic.w	r5, r5, #3
 8007d90:	3508      	adds	r5, #8
 8007d92:	2d0c      	cmp	r5, #12
 8007d94:	bf38      	it	cc
 8007d96:	250c      	movcc	r5, #12
 8007d98:	2d00      	cmp	r5, #0
 8007d9a:	4606      	mov	r6, r0
 8007d9c:	db01      	blt.n	8007da2 <_malloc_r+0x1a>
 8007d9e:	42a9      	cmp	r1, r5
 8007da0:	d903      	bls.n	8007daa <_malloc_r+0x22>
 8007da2:	230c      	movs	r3, #12
 8007da4:	6033      	str	r3, [r6, #0]
 8007da6:	2000      	movs	r0, #0
 8007da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007daa:	f000 fa13 	bl	80081d4 <__malloc_lock>
 8007dae:	4921      	ldr	r1, [pc, #132]	; (8007e34 <_malloc_r+0xac>)
 8007db0:	680a      	ldr	r2, [r1, #0]
 8007db2:	4614      	mov	r4, r2
 8007db4:	b99c      	cbnz	r4, 8007dde <_malloc_r+0x56>
 8007db6:	4f20      	ldr	r7, [pc, #128]	; (8007e38 <_malloc_r+0xb0>)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	b923      	cbnz	r3, 8007dc6 <_malloc_r+0x3e>
 8007dbc:	4621      	mov	r1, r4
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	f000 f8be 	bl	8007f40 <_sbrk_r>
 8007dc4:	6038      	str	r0, [r7, #0]
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	4630      	mov	r0, r6
 8007dca:	f000 f8b9 	bl	8007f40 <_sbrk_r>
 8007dce:	1c43      	adds	r3, r0, #1
 8007dd0:	d123      	bne.n	8007e1a <_malloc_r+0x92>
 8007dd2:	230c      	movs	r3, #12
 8007dd4:	6033      	str	r3, [r6, #0]
 8007dd6:	4630      	mov	r0, r6
 8007dd8:	f000 fa02 	bl	80081e0 <__malloc_unlock>
 8007ddc:	e7e3      	b.n	8007da6 <_malloc_r+0x1e>
 8007dde:	6823      	ldr	r3, [r4, #0]
 8007de0:	1b5b      	subs	r3, r3, r5
 8007de2:	d417      	bmi.n	8007e14 <_malloc_r+0x8c>
 8007de4:	2b0b      	cmp	r3, #11
 8007de6:	d903      	bls.n	8007df0 <_malloc_r+0x68>
 8007de8:	6023      	str	r3, [r4, #0]
 8007dea:	441c      	add	r4, r3
 8007dec:	6025      	str	r5, [r4, #0]
 8007dee:	e004      	b.n	8007dfa <_malloc_r+0x72>
 8007df0:	6863      	ldr	r3, [r4, #4]
 8007df2:	42a2      	cmp	r2, r4
 8007df4:	bf0c      	ite	eq
 8007df6:	600b      	streq	r3, [r1, #0]
 8007df8:	6053      	strne	r3, [r2, #4]
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f000 f9f0 	bl	80081e0 <__malloc_unlock>
 8007e00:	f104 000b 	add.w	r0, r4, #11
 8007e04:	1d23      	adds	r3, r4, #4
 8007e06:	f020 0007 	bic.w	r0, r0, #7
 8007e0a:	1ac2      	subs	r2, r0, r3
 8007e0c:	d0cc      	beq.n	8007da8 <_malloc_r+0x20>
 8007e0e:	1a1b      	subs	r3, r3, r0
 8007e10:	50a3      	str	r3, [r4, r2]
 8007e12:	e7c9      	b.n	8007da8 <_malloc_r+0x20>
 8007e14:	4622      	mov	r2, r4
 8007e16:	6864      	ldr	r4, [r4, #4]
 8007e18:	e7cc      	b.n	8007db4 <_malloc_r+0x2c>
 8007e1a:	1cc4      	adds	r4, r0, #3
 8007e1c:	f024 0403 	bic.w	r4, r4, #3
 8007e20:	42a0      	cmp	r0, r4
 8007e22:	d0e3      	beq.n	8007dec <_malloc_r+0x64>
 8007e24:	1a21      	subs	r1, r4, r0
 8007e26:	4630      	mov	r0, r6
 8007e28:	f000 f88a 	bl	8007f40 <_sbrk_r>
 8007e2c:	3001      	adds	r0, #1
 8007e2e:	d1dd      	bne.n	8007dec <_malloc_r+0x64>
 8007e30:	e7cf      	b.n	8007dd2 <_malloc_r+0x4a>
 8007e32:	bf00      	nop
 8007e34:	24004a8c 	.word	0x24004a8c
 8007e38:	24004a90 	.word	0x24004a90

08007e3c <iprintf>:
 8007e3c:	b40f      	push	{r0, r1, r2, r3}
 8007e3e:	4b0a      	ldr	r3, [pc, #40]	; (8007e68 <iprintf+0x2c>)
 8007e40:	b513      	push	{r0, r1, r4, lr}
 8007e42:	681c      	ldr	r4, [r3, #0]
 8007e44:	b124      	cbz	r4, 8007e50 <iprintf+0x14>
 8007e46:	69a3      	ldr	r3, [r4, #24]
 8007e48:	b913      	cbnz	r3, 8007e50 <iprintf+0x14>
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	f7ff fe6c 	bl	8007b28 <__sinit>
 8007e50:	ab05      	add	r3, sp, #20
 8007e52:	9a04      	ldr	r2, [sp, #16]
 8007e54:	68a1      	ldr	r1, [r4, #8]
 8007e56:	9301      	str	r3, [sp, #4]
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f000 f9f1 	bl	8008240 <_vfiprintf_r>
 8007e5e:	b002      	add	sp, #8
 8007e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e64:	b004      	add	sp, #16
 8007e66:	4770      	bx	lr
 8007e68:	24000014 	.word	0x24000014

08007e6c <cleanup_glue>:
 8007e6c:	b538      	push	{r3, r4, r5, lr}
 8007e6e:	460c      	mov	r4, r1
 8007e70:	6809      	ldr	r1, [r1, #0]
 8007e72:	4605      	mov	r5, r0
 8007e74:	b109      	cbz	r1, 8007e7a <cleanup_glue+0xe>
 8007e76:	f7ff fff9 	bl	8007e6c <cleanup_glue>
 8007e7a:	4621      	mov	r1, r4
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e82:	f7ff bf31 	b.w	8007ce8 <_free_r>
	...

08007e88 <_reclaim_reent>:
 8007e88:	4b2c      	ldr	r3, [pc, #176]	; (8007f3c <_reclaim_reent+0xb4>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4283      	cmp	r3, r0
 8007e8e:	b570      	push	{r4, r5, r6, lr}
 8007e90:	4604      	mov	r4, r0
 8007e92:	d051      	beq.n	8007f38 <_reclaim_reent+0xb0>
 8007e94:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007e96:	b143      	cbz	r3, 8007eaa <_reclaim_reent+0x22>
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d14a      	bne.n	8007f34 <_reclaim_reent+0xac>
 8007e9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ea0:	6819      	ldr	r1, [r3, #0]
 8007ea2:	b111      	cbz	r1, 8007eaa <_reclaim_reent+0x22>
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	f7ff ff1f 	bl	8007ce8 <_free_r>
 8007eaa:	6961      	ldr	r1, [r4, #20]
 8007eac:	b111      	cbz	r1, 8007eb4 <_reclaim_reent+0x2c>
 8007eae:	4620      	mov	r0, r4
 8007eb0:	f7ff ff1a 	bl	8007ce8 <_free_r>
 8007eb4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007eb6:	b111      	cbz	r1, 8007ebe <_reclaim_reent+0x36>
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f7ff ff15 	bl	8007ce8 <_free_r>
 8007ebe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007ec0:	b111      	cbz	r1, 8007ec8 <_reclaim_reent+0x40>
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	f7ff ff10 	bl	8007ce8 <_free_r>
 8007ec8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007eca:	b111      	cbz	r1, 8007ed2 <_reclaim_reent+0x4a>
 8007ecc:	4620      	mov	r0, r4
 8007ece:	f7ff ff0b 	bl	8007ce8 <_free_r>
 8007ed2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007ed4:	b111      	cbz	r1, 8007edc <_reclaim_reent+0x54>
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f7ff ff06 	bl	8007ce8 <_free_r>
 8007edc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007ede:	b111      	cbz	r1, 8007ee6 <_reclaim_reent+0x5e>
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	f7ff ff01 	bl	8007ce8 <_free_r>
 8007ee6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007ee8:	b111      	cbz	r1, 8007ef0 <_reclaim_reent+0x68>
 8007eea:	4620      	mov	r0, r4
 8007eec:	f7ff fefc 	bl	8007ce8 <_free_r>
 8007ef0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ef2:	b111      	cbz	r1, 8007efa <_reclaim_reent+0x72>
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	f7ff fef7 	bl	8007ce8 <_free_r>
 8007efa:	69a3      	ldr	r3, [r4, #24]
 8007efc:	b1e3      	cbz	r3, 8007f38 <_reclaim_reent+0xb0>
 8007efe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007f00:	4620      	mov	r0, r4
 8007f02:	4798      	blx	r3
 8007f04:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007f06:	b1b9      	cbz	r1, 8007f38 <_reclaim_reent+0xb0>
 8007f08:	4620      	mov	r0, r4
 8007f0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007f0e:	f7ff bfad 	b.w	8007e6c <cleanup_glue>
 8007f12:	5949      	ldr	r1, [r1, r5]
 8007f14:	b941      	cbnz	r1, 8007f28 <_reclaim_reent+0xa0>
 8007f16:	3504      	adds	r5, #4
 8007f18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f1a:	2d80      	cmp	r5, #128	; 0x80
 8007f1c:	68d9      	ldr	r1, [r3, #12]
 8007f1e:	d1f8      	bne.n	8007f12 <_reclaim_reent+0x8a>
 8007f20:	4620      	mov	r0, r4
 8007f22:	f7ff fee1 	bl	8007ce8 <_free_r>
 8007f26:	e7ba      	b.n	8007e9e <_reclaim_reent+0x16>
 8007f28:	680e      	ldr	r6, [r1, #0]
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	f7ff fedc 	bl	8007ce8 <_free_r>
 8007f30:	4631      	mov	r1, r6
 8007f32:	e7ef      	b.n	8007f14 <_reclaim_reent+0x8c>
 8007f34:	2500      	movs	r5, #0
 8007f36:	e7ef      	b.n	8007f18 <_reclaim_reent+0x90>
 8007f38:	bd70      	pop	{r4, r5, r6, pc}
 8007f3a:	bf00      	nop
 8007f3c:	24000014 	.word	0x24000014

08007f40 <_sbrk_r>:
 8007f40:	b538      	push	{r3, r4, r5, lr}
 8007f42:	4d06      	ldr	r5, [pc, #24]	; (8007f5c <_sbrk_r+0x1c>)
 8007f44:	2300      	movs	r3, #0
 8007f46:	4604      	mov	r4, r0
 8007f48:	4608      	mov	r0, r1
 8007f4a:	602b      	str	r3, [r5, #0]
 8007f4c:	f7f8 ff48 	bl	8000de0 <_sbrk>
 8007f50:	1c43      	adds	r3, r0, #1
 8007f52:	d102      	bne.n	8007f5a <_sbrk_r+0x1a>
 8007f54:	682b      	ldr	r3, [r5, #0]
 8007f56:	b103      	cbz	r3, 8007f5a <_sbrk_r+0x1a>
 8007f58:	6023      	str	r3, [r4, #0]
 8007f5a:	bd38      	pop	{r3, r4, r5, pc}
 8007f5c:	24004b6c 	.word	0x24004b6c

08007f60 <__sread>:
 8007f60:	b510      	push	{r4, lr}
 8007f62:	460c      	mov	r4, r1
 8007f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f68:	f000 fc2e 	bl	80087c8 <_read_r>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	bfab      	itete	ge
 8007f70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f72:	89a3      	ldrhlt	r3, [r4, #12]
 8007f74:	181b      	addge	r3, r3, r0
 8007f76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f7a:	bfac      	ite	ge
 8007f7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f7e:	81a3      	strhlt	r3, [r4, #12]
 8007f80:	bd10      	pop	{r4, pc}

08007f82 <__swrite>:
 8007f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f86:	461f      	mov	r7, r3
 8007f88:	898b      	ldrh	r3, [r1, #12]
 8007f8a:	05db      	lsls	r3, r3, #23
 8007f8c:	4605      	mov	r5, r0
 8007f8e:	460c      	mov	r4, r1
 8007f90:	4616      	mov	r6, r2
 8007f92:	d505      	bpl.n	8007fa0 <__swrite+0x1e>
 8007f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f98:	2302      	movs	r3, #2
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f000 f908 	bl	80081b0 <_lseek_r>
 8007fa0:	89a3      	ldrh	r3, [r4, #12]
 8007fa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007faa:	81a3      	strh	r3, [r4, #12]
 8007fac:	4632      	mov	r2, r6
 8007fae:	463b      	mov	r3, r7
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb6:	f000 b817 	b.w	8007fe8 <_write_r>

08007fba <__sseek>:
 8007fba:	b510      	push	{r4, lr}
 8007fbc:	460c      	mov	r4, r1
 8007fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fc2:	f000 f8f5 	bl	80081b0 <_lseek_r>
 8007fc6:	1c43      	adds	r3, r0, #1
 8007fc8:	89a3      	ldrh	r3, [r4, #12]
 8007fca:	bf15      	itete	ne
 8007fcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8007fce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007fd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007fd6:	81a3      	strheq	r3, [r4, #12]
 8007fd8:	bf18      	it	ne
 8007fda:	81a3      	strhne	r3, [r4, #12]
 8007fdc:	bd10      	pop	{r4, pc}

08007fde <__sclose>:
 8007fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe2:	f000 b813 	b.w	800800c <_close_r>
	...

08007fe8 <_write_r>:
 8007fe8:	b538      	push	{r3, r4, r5, lr}
 8007fea:	4d07      	ldr	r5, [pc, #28]	; (8008008 <_write_r+0x20>)
 8007fec:	4604      	mov	r4, r0
 8007fee:	4608      	mov	r0, r1
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	602a      	str	r2, [r5, #0]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	f7f8 fea2 	bl	8000d40 <_write>
 8007ffc:	1c43      	adds	r3, r0, #1
 8007ffe:	d102      	bne.n	8008006 <_write_r+0x1e>
 8008000:	682b      	ldr	r3, [r5, #0]
 8008002:	b103      	cbz	r3, 8008006 <_write_r+0x1e>
 8008004:	6023      	str	r3, [r4, #0]
 8008006:	bd38      	pop	{r3, r4, r5, pc}
 8008008:	24004b6c 	.word	0x24004b6c

0800800c <_close_r>:
 800800c:	b538      	push	{r3, r4, r5, lr}
 800800e:	4d06      	ldr	r5, [pc, #24]	; (8008028 <_close_r+0x1c>)
 8008010:	2300      	movs	r3, #0
 8008012:	4604      	mov	r4, r0
 8008014:	4608      	mov	r0, r1
 8008016:	602b      	str	r3, [r5, #0]
 8008018:	f7f8 feae 	bl	8000d78 <_close>
 800801c:	1c43      	adds	r3, r0, #1
 800801e:	d102      	bne.n	8008026 <_close_r+0x1a>
 8008020:	682b      	ldr	r3, [r5, #0]
 8008022:	b103      	cbz	r3, 8008026 <_close_r+0x1a>
 8008024:	6023      	str	r3, [r4, #0]
 8008026:	bd38      	pop	{r3, r4, r5, pc}
 8008028:	24004b6c 	.word	0x24004b6c

0800802c <__sflush_r>:
 800802c:	898a      	ldrh	r2, [r1, #12]
 800802e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008032:	4605      	mov	r5, r0
 8008034:	0710      	lsls	r0, r2, #28
 8008036:	460c      	mov	r4, r1
 8008038:	d458      	bmi.n	80080ec <__sflush_r+0xc0>
 800803a:	684b      	ldr	r3, [r1, #4]
 800803c:	2b00      	cmp	r3, #0
 800803e:	dc05      	bgt.n	800804c <__sflush_r+0x20>
 8008040:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008042:	2b00      	cmp	r3, #0
 8008044:	dc02      	bgt.n	800804c <__sflush_r+0x20>
 8008046:	2000      	movs	r0, #0
 8008048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800804c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800804e:	2e00      	cmp	r6, #0
 8008050:	d0f9      	beq.n	8008046 <__sflush_r+0x1a>
 8008052:	2300      	movs	r3, #0
 8008054:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008058:	682f      	ldr	r7, [r5, #0]
 800805a:	602b      	str	r3, [r5, #0]
 800805c:	d032      	beq.n	80080c4 <__sflush_r+0x98>
 800805e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008060:	89a3      	ldrh	r3, [r4, #12]
 8008062:	075a      	lsls	r2, r3, #29
 8008064:	d505      	bpl.n	8008072 <__sflush_r+0x46>
 8008066:	6863      	ldr	r3, [r4, #4]
 8008068:	1ac0      	subs	r0, r0, r3
 800806a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800806c:	b10b      	cbz	r3, 8008072 <__sflush_r+0x46>
 800806e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008070:	1ac0      	subs	r0, r0, r3
 8008072:	2300      	movs	r3, #0
 8008074:	4602      	mov	r2, r0
 8008076:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008078:	6a21      	ldr	r1, [r4, #32]
 800807a:	4628      	mov	r0, r5
 800807c:	47b0      	blx	r6
 800807e:	1c43      	adds	r3, r0, #1
 8008080:	89a3      	ldrh	r3, [r4, #12]
 8008082:	d106      	bne.n	8008092 <__sflush_r+0x66>
 8008084:	6829      	ldr	r1, [r5, #0]
 8008086:	291d      	cmp	r1, #29
 8008088:	d82c      	bhi.n	80080e4 <__sflush_r+0xb8>
 800808a:	4a2a      	ldr	r2, [pc, #168]	; (8008134 <__sflush_r+0x108>)
 800808c:	40ca      	lsrs	r2, r1
 800808e:	07d6      	lsls	r6, r2, #31
 8008090:	d528      	bpl.n	80080e4 <__sflush_r+0xb8>
 8008092:	2200      	movs	r2, #0
 8008094:	6062      	str	r2, [r4, #4]
 8008096:	04d9      	lsls	r1, r3, #19
 8008098:	6922      	ldr	r2, [r4, #16]
 800809a:	6022      	str	r2, [r4, #0]
 800809c:	d504      	bpl.n	80080a8 <__sflush_r+0x7c>
 800809e:	1c42      	adds	r2, r0, #1
 80080a0:	d101      	bne.n	80080a6 <__sflush_r+0x7a>
 80080a2:	682b      	ldr	r3, [r5, #0]
 80080a4:	b903      	cbnz	r3, 80080a8 <__sflush_r+0x7c>
 80080a6:	6560      	str	r0, [r4, #84]	; 0x54
 80080a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080aa:	602f      	str	r7, [r5, #0]
 80080ac:	2900      	cmp	r1, #0
 80080ae:	d0ca      	beq.n	8008046 <__sflush_r+0x1a>
 80080b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080b4:	4299      	cmp	r1, r3
 80080b6:	d002      	beq.n	80080be <__sflush_r+0x92>
 80080b8:	4628      	mov	r0, r5
 80080ba:	f7ff fe15 	bl	8007ce8 <_free_r>
 80080be:	2000      	movs	r0, #0
 80080c0:	6360      	str	r0, [r4, #52]	; 0x34
 80080c2:	e7c1      	b.n	8008048 <__sflush_r+0x1c>
 80080c4:	6a21      	ldr	r1, [r4, #32]
 80080c6:	2301      	movs	r3, #1
 80080c8:	4628      	mov	r0, r5
 80080ca:	47b0      	blx	r6
 80080cc:	1c41      	adds	r1, r0, #1
 80080ce:	d1c7      	bne.n	8008060 <__sflush_r+0x34>
 80080d0:	682b      	ldr	r3, [r5, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d0c4      	beq.n	8008060 <__sflush_r+0x34>
 80080d6:	2b1d      	cmp	r3, #29
 80080d8:	d001      	beq.n	80080de <__sflush_r+0xb2>
 80080da:	2b16      	cmp	r3, #22
 80080dc:	d101      	bne.n	80080e2 <__sflush_r+0xb6>
 80080de:	602f      	str	r7, [r5, #0]
 80080e0:	e7b1      	b.n	8008046 <__sflush_r+0x1a>
 80080e2:	89a3      	ldrh	r3, [r4, #12]
 80080e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080e8:	81a3      	strh	r3, [r4, #12]
 80080ea:	e7ad      	b.n	8008048 <__sflush_r+0x1c>
 80080ec:	690f      	ldr	r7, [r1, #16]
 80080ee:	2f00      	cmp	r7, #0
 80080f0:	d0a9      	beq.n	8008046 <__sflush_r+0x1a>
 80080f2:	0793      	lsls	r3, r2, #30
 80080f4:	680e      	ldr	r6, [r1, #0]
 80080f6:	bf08      	it	eq
 80080f8:	694b      	ldreq	r3, [r1, #20]
 80080fa:	600f      	str	r7, [r1, #0]
 80080fc:	bf18      	it	ne
 80080fe:	2300      	movne	r3, #0
 8008100:	eba6 0807 	sub.w	r8, r6, r7
 8008104:	608b      	str	r3, [r1, #8]
 8008106:	f1b8 0f00 	cmp.w	r8, #0
 800810a:	dd9c      	ble.n	8008046 <__sflush_r+0x1a>
 800810c:	6a21      	ldr	r1, [r4, #32]
 800810e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008110:	4643      	mov	r3, r8
 8008112:	463a      	mov	r2, r7
 8008114:	4628      	mov	r0, r5
 8008116:	47b0      	blx	r6
 8008118:	2800      	cmp	r0, #0
 800811a:	dc06      	bgt.n	800812a <__sflush_r+0xfe>
 800811c:	89a3      	ldrh	r3, [r4, #12]
 800811e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008122:	81a3      	strh	r3, [r4, #12]
 8008124:	f04f 30ff 	mov.w	r0, #4294967295
 8008128:	e78e      	b.n	8008048 <__sflush_r+0x1c>
 800812a:	4407      	add	r7, r0
 800812c:	eba8 0800 	sub.w	r8, r8, r0
 8008130:	e7e9      	b.n	8008106 <__sflush_r+0xda>
 8008132:	bf00      	nop
 8008134:	20400001 	.word	0x20400001

08008138 <_fflush_r>:
 8008138:	b538      	push	{r3, r4, r5, lr}
 800813a:	690b      	ldr	r3, [r1, #16]
 800813c:	4605      	mov	r5, r0
 800813e:	460c      	mov	r4, r1
 8008140:	b913      	cbnz	r3, 8008148 <_fflush_r+0x10>
 8008142:	2500      	movs	r5, #0
 8008144:	4628      	mov	r0, r5
 8008146:	bd38      	pop	{r3, r4, r5, pc}
 8008148:	b118      	cbz	r0, 8008152 <_fflush_r+0x1a>
 800814a:	6983      	ldr	r3, [r0, #24]
 800814c:	b90b      	cbnz	r3, 8008152 <_fflush_r+0x1a>
 800814e:	f7ff fceb 	bl	8007b28 <__sinit>
 8008152:	4b14      	ldr	r3, [pc, #80]	; (80081a4 <_fflush_r+0x6c>)
 8008154:	429c      	cmp	r4, r3
 8008156:	d11b      	bne.n	8008190 <_fflush_r+0x58>
 8008158:	686c      	ldr	r4, [r5, #4]
 800815a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d0ef      	beq.n	8008142 <_fflush_r+0xa>
 8008162:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008164:	07d0      	lsls	r0, r2, #31
 8008166:	d404      	bmi.n	8008172 <_fflush_r+0x3a>
 8008168:	0599      	lsls	r1, r3, #22
 800816a:	d402      	bmi.n	8008172 <_fflush_r+0x3a>
 800816c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800816e:	f7f8 ff37 	bl	8000fe0 <__retarget_lock_acquire_recursive>
 8008172:	4628      	mov	r0, r5
 8008174:	4621      	mov	r1, r4
 8008176:	f7ff ff59 	bl	800802c <__sflush_r>
 800817a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800817c:	07da      	lsls	r2, r3, #31
 800817e:	4605      	mov	r5, r0
 8008180:	d4e0      	bmi.n	8008144 <_fflush_r+0xc>
 8008182:	89a3      	ldrh	r3, [r4, #12]
 8008184:	059b      	lsls	r3, r3, #22
 8008186:	d4dd      	bmi.n	8008144 <_fflush_r+0xc>
 8008188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800818a:	f7f8 ff3d 	bl	8001008 <__retarget_lock_release_recursive>
 800818e:	e7d9      	b.n	8008144 <_fflush_r+0xc>
 8008190:	4b05      	ldr	r3, [pc, #20]	; (80081a8 <_fflush_r+0x70>)
 8008192:	429c      	cmp	r4, r3
 8008194:	d101      	bne.n	800819a <_fflush_r+0x62>
 8008196:	68ac      	ldr	r4, [r5, #8]
 8008198:	e7df      	b.n	800815a <_fflush_r+0x22>
 800819a:	4b04      	ldr	r3, [pc, #16]	; (80081ac <_fflush_r+0x74>)
 800819c:	429c      	cmp	r4, r3
 800819e:	bf08      	it	eq
 80081a0:	68ec      	ldreq	r4, [r5, #12]
 80081a2:	e7da      	b.n	800815a <_fflush_r+0x22>
 80081a4:	08008b3c 	.word	0x08008b3c
 80081a8:	08008b5c 	.word	0x08008b5c
 80081ac:	08008b1c 	.word	0x08008b1c

080081b0 <_lseek_r>:
 80081b0:	b538      	push	{r3, r4, r5, lr}
 80081b2:	4d07      	ldr	r5, [pc, #28]	; (80081d0 <_lseek_r+0x20>)
 80081b4:	4604      	mov	r4, r0
 80081b6:	4608      	mov	r0, r1
 80081b8:	4611      	mov	r1, r2
 80081ba:	2200      	movs	r2, #0
 80081bc:	602a      	str	r2, [r5, #0]
 80081be:	461a      	mov	r2, r3
 80081c0:	f7f8 fe01 	bl	8000dc6 <_lseek>
 80081c4:	1c43      	adds	r3, r0, #1
 80081c6:	d102      	bne.n	80081ce <_lseek_r+0x1e>
 80081c8:	682b      	ldr	r3, [r5, #0]
 80081ca:	b103      	cbz	r3, 80081ce <_lseek_r+0x1e>
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	bd38      	pop	{r3, r4, r5, pc}
 80081d0:	24004b6c 	.word	0x24004b6c

080081d4 <__malloc_lock>:
 80081d4:	4801      	ldr	r0, [pc, #4]	; (80081dc <__malloc_lock+0x8>)
 80081d6:	f7f8 bf03 	b.w	8000fe0 <__retarget_lock_acquire_recursive>
 80081da:	bf00      	nop
 80081dc:	240000b0 	.word	0x240000b0

080081e0 <__malloc_unlock>:
 80081e0:	4801      	ldr	r0, [pc, #4]	; (80081e8 <__malloc_unlock+0x8>)
 80081e2:	f7f8 bf11 	b.w	8001008 <__retarget_lock_release_recursive>
 80081e6:	bf00      	nop
 80081e8:	240000b0 	.word	0x240000b0

080081ec <__sfputc_r>:
 80081ec:	6893      	ldr	r3, [r2, #8]
 80081ee:	3b01      	subs	r3, #1
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	b410      	push	{r4}
 80081f4:	6093      	str	r3, [r2, #8]
 80081f6:	da08      	bge.n	800820a <__sfputc_r+0x1e>
 80081f8:	6994      	ldr	r4, [r2, #24]
 80081fa:	42a3      	cmp	r3, r4
 80081fc:	db01      	blt.n	8008202 <__sfputc_r+0x16>
 80081fe:	290a      	cmp	r1, #10
 8008200:	d103      	bne.n	800820a <__sfputc_r+0x1e>
 8008202:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008206:	f000 baf1 	b.w	80087ec <__swbuf_r>
 800820a:	6813      	ldr	r3, [r2, #0]
 800820c:	1c58      	adds	r0, r3, #1
 800820e:	6010      	str	r0, [r2, #0]
 8008210:	7019      	strb	r1, [r3, #0]
 8008212:	4608      	mov	r0, r1
 8008214:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008218:	4770      	bx	lr

0800821a <__sfputs_r>:
 800821a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800821c:	4606      	mov	r6, r0
 800821e:	460f      	mov	r7, r1
 8008220:	4614      	mov	r4, r2
 8008222:	18d5      	adds	r5, r2, r3
 8008224:	42ac      	cmp	r4, r5
 8008226:	d101      	bne.n	800822c <__sfputs_r+0x12>
 8008228:	2000      	movs	r0, #0
 800822a:	e007      	b.n	800823c <__sfputs_r+0x22>
 800822c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008230:	463a      	mov	r2, r7
 8008232:	4630      	mov	r0, r6
 8008234:	f7ff ffda 	bl	80081ec <__sfputc_r>
 8008238:	1c43      	adds	r3, r0, #1
 800823a:	d1f3      	bne.n	8008224 <__sfputs_r+0xa>
 800823c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008240 <_vfiprintf_r>:
 8008240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008244:	460d      	mov	r5, r1
 8008246:	b09d      	sub	sp, #116	; 0x74
 8008248:	4614      	mov	r4, r2
 800824a:	4698      	mov	r8, r3
 800824c:	4606      	mov	r6, r0
 800824e:	b118      	cbz	r0, 8008258 <_vfiprintf_r+0x18>
 8008250:	6983      	ldr	r3, [r0, #24]
 8008252:	b90b      	cbnz	r3, 8008258 <_vfiprintf_r+0x18>
 8008254:	f7ff fc68 	bl	8007b28 <__sinit>
 8008258:	4b89      	ldr	r3, [pc, #548]	; (8008480 <_vfiprintf_r+0x240>)
 800825a:	429d      	cmp	r5, r3
 800825c:	d11b      	bne.n	8008296 <_vfiprintf_r+0x56>
 800825e:	6875      	ldr	r5, [r6, #4]
 8008260:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008262:	07d9      	lsls	r1, r3, #31
 8008264:	d405      	bmi.n	8008272 <_vfiprintf_r+0x32>
 8008266:	89ab      	ldrh	r3, [r5, #12]
 8008268:	059a      	lsls	r2, r3, #22
 800826a:	d402      	bmi.n	8008272 <_vfiprintf_r+0x32>
 800826c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800826e:	f7f8 feb7 	bl	8000fe0 <__retarget_lock_acquire_recursive>
 8008272:	89ab      	ldrh	r3, [r5, #12]
 8008274:	071b      	lsls	r3, r3, #28
 8008276:	d501      	bpl.n	800827c <_vfiprintf_r+0x3c>
 8008278:	692b      	ldr	r3, [r5, #16]
 800827a:	b9eb      	cbnz	r3, 80082b8 <_vfiprintf_r+0x78>
 800827c:	4629      	mov	r1, r5
 800827e:	4630      	mov	r0, r6
 8008280:	f000 fb06 	bl	8008890 <__swsetup_r>
 8008284:	b1c0      	cbz	r0, 80082b8 <_vfiprintf_r+0x78>
 8008286:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008288:	07dc      	lsls	r4, r3, #31
 800828a:	d50e      	bpl.n	80082aa <_vfiprintf_r+0x6a>
 800828c:	f04f 30ff 	mov.w	r0, #4294967295
 8008290:	b01d      	add	sp, #116	; 0x74
 8008292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008296:	4b7b      	ldr	r3, [pc, #492]	; (8008484 <_vfiprintf_r+0x244>)
 8008298:	429d      	cmp	r5, r3
 800829a:	d101      	bne.n	80082a0 <_vfiprintf_r+0x60>
 800829c:	68b5      	ldr	r5, [r6, #8]
 800829e:	e7df      	b.n	8008260 <_vfiprintf_r+0x20>
 80082a0:	4b79      	ldr	r3, [pc, #484]	; (8008488 <_vfiprintf_r+0x248>)
 80082a2:	429d      	cmp	r5, r3
 80082a4:	bf08      	it	eq
 80082a6:	68f5      	ldreq	r5, [r6, #12]
 80082a8:	e7da      	b.n	8008260 <_vfiprintf_r+0x20>
 80082aa:	89ab      	ldrh	r3, [r5, #12]
 80082ac:	0598      	lsls	r0, r3, #22
 80082ae:	d4ed      	bmi.n	800828c <_vfiprintf_r+0x4c>
 80082b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082b2:	f7f8 fea9 	bl	8001008 <__retarget_lock_release_recursive>
 80082b6:	e7e9      	b.n	800828c <_vfiprintf_r+0x4c>
 80082b8:	2300      	movs	r3, #0
 80082ba:	9309      	str	r3, [sp, #36]	; 0x24
 80082bc:	2320      	movs	r3, #32
 80082be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80082c6:	2330      	movs	r3, #48	; 0x30
 80082c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800848c <_vfiprintf_r+0x24c>
 80082cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082d0:	f04f 0901 	mov.w	r9, #1
 80082d4:	4623      	mov	r3, r4
 80082d6:	469a      	mov	sl, r3
 80082d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082dc:	b10a      	cbz	r2, 80082e2 <_vfiprintf_r+0xa2>
 80082de:	2a25      	cmp	r2, #37	; 0x25
 80082e0:	d1f9      	bne.n	80082d6 <_vfiprintf_r+0x96>
 80082e2:	ebba 0b04 	subs.w	fp, sl, r4
 80082e6:	d00b      	beq.n	8008300 <_vfiprintf_r+0xc0>
 80082e8:	465b      	mov	r3, fp
 80082ea:	4622      	mov	r2, r4
 80082ec:	4629      	mov	r1, r5
 80082ee:	4630      	mov	r0, r6
 80082f0:	f7ff ff93 	bl	800821a <__sfputs_r>
 80082f4:	3001      	adds	r0, #1
 80082f6:	f000 80aa 	beq.w	800844e <_vfiprintf_r+0x20e>
 80082fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082fc:	445a      	add	r2, fp
 80082fe:	9209      	str	r2, [sp, #36]	; 0x24
 8008300:	f89a 3000 	ldrb.w	r3, [sl]
 8008304:	2b00      	cmp	r3, #0
 8008306:	f000 80a2 	beq.w	800844e <_vfiprintf_r+0x20e>
 800830a:	2300      	movs	r3, #0
 800830c:	f04f 32ff 	mov.w	r2, #4294967295
 8008310:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008314:	f10a 0a01 	add.w	sl, sl, #1
 8008318:	9304      	str	r3, [sp, #16]
 800831a:	9307      	str	r3, [sp, #28]
 800831c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008320:	931a      	str	r3, [sp, #104]	; 0x68
 8008322:	4654      	mov	r4, sl
 8008324:	2205      	movs	r2, #5
 8008326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800832a:	4858      	ldr	r0, [pc, #352]	; (800848c <_vfiprintf_r+0x24c>)
 800832c:	f7f7 ffd8 	bl	80002e0 <memchr>
 8008330:	9a04      	ldr	r2, [sp, #16]
 8008332:	b9d8      	cbnz	r0, 800836c <_vfiprintf_r+0x12c>
 8008334:	06d1      	lsls	r1, r2, #27
 8008336:	bf44      	itt	mi
 8008338:	2320      	movmi	r3, #32
 800833a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800833e:	0713      	lsls	r3, r2, #28
 8008340:	bf44      	itt	mi
 8008342:	232b      	movmi	r3, #43	; 0x2b
 8008344:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008348:	f89a 3000 	ldrb.w	r3, [sl]
 800834c:	2b2a      	cmp	r3, #42	; 0x2a
 800834e:	d015      	beq.n	800837c <_vfiprintf_r+0x13c>
 8008350:	9a07      	ldr	r2, [sp, #28]
 8008352:	4654      	mov	r4, sl
 8008354:	2000      	movs	r0, #0
 8008356:	f04f 0c0a 	mov.w	ip, #10
 800835a:	4621      	mov	r1, r4
 800835c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008360:	3b30      	subs	r3, #48	; 0x30
 8008362:	2b09      	cmp	r3, #9
 8008364:	d94e      	bls.n	8008404 <_vfiprintf_r+0x1c4>
 8008366:	b1b0      	cbz	r0, 8008396 <_vfiprintf_r+0x156>
 8008368:	9207      	str	r2, [sp, #28]
 800836a:	e014      	b.n	8008396 <_vfiprintf_r+0x156>
 800836c:	eba0 0308 	sub.w	r3, r0, r8
 8008370:	fa09 f303 	lsl.w	r3, r9, r3
 8008374:	4313      	orrs	r3, r2
 8008376:	9304      	str	r3, [sp, #16]
 8008378:	46a2      	mov	sl, r4
 800837a:	e7d2      	b.n	8008322 <_vfiprintf_r+0xe2>
 800837c:	9b03      	ldr	r3, [sp, #12]
 800837e:	1d19      	adds	r1, r3, #4
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	9103      	str	r1, [sp, #12]
 8008384:	2b00      	cmp	r3, #0
 8008386:	bfbb      	ittet	lt
 8008388:	425b      	neglt	r3, r3
 800838a:	f042 0202 	orrlt.w	r2, r2, #2
 800838e:	9307      	strge	r3, [sp, #28]
 8008390:	9307      	strlt	r3, [sp, #28]
 8008392:	bfb8      	it	lt
 8008394:	9204      	strlt	r2, [sp, #16]
 8008396:	7823      	ldrb	r3, [r4, #0]
 8008398:	2b2e      	cmp	r3, #46	; 0x2e
 800839a:	d10c      	bne.n	80083b6 <_vfiprintf_r+0x176>
 800839c:	7863      	ldrb	r3, [r4, #1]
 800839e:	2b2a      	cmp	r3, #42	; 0x2a
 80083a0:	d135      	bne.n	800840e <_vfiprintf_r+0x1ce>
 80083a2:	9b03      	ldr	r3, [sp, #12]
 80083a4:	1d1a      	adds	r2, r3, #4
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	9203      	str	r2, [sp, #12]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	bfb8      	it	lt
 80083ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80083b2:	3402      	adds	r4, #2
 80083b4:	9305      	str	r3, [sp, #20]
 80083b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800849c <_vfiprintf_r+0x25c>
 80083ba:	7821      	ldrb	r1, [r4, #0]
 80083bc:	2203      	movs	r2, #3
 80083be:	4650      	mov	r0, sl
 80083c0:	f7f7 ff8e 	bl	80002e0 <memchr>
 80083c4:	b140      	cbz	r0, 80083d8 <_vfiprintf_r+0x198>
 80083c6:	2340      	movs	r3, #64	; 0x40
 80083c8:	eba0 000a 	sub.w	r0, r0, sl
 80083cc:	fa03 f000 	lsl.w	r0, r3, r0
 80083d0:	9b04      	ldr	r3, [sp, #16]
 80083d2:	4303      	orrs	r3, r0
 80083d4:	3401      	adds	r4, #1
 80083d6:	9304      	str	r3, [sp, #16]
 80083d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083dc:	482c      	ldr	r0, [pc, #176]	; (8008490 <_vfiprintf_r+0x250>)
 80083de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083e2:	2206      	movs	r2, #6
 80083e4:	f7f7 ff7c 	bl	80002e0 <memchr>
 80083e8:	2800      	cmp	r0, #0
 80083ea:	d03f      	beq.n	800846c <_vfiprintf_r+0x22c>
 80083ec:	4b29      	ldr	r3, [pc, #164]	; (8008494 <_vfiprintf_r+0x254>)
 80083ee:	bb1b      	cbnz	r3, 8008438 <_vfiprintf_r+0x1f8>
 80083f0:	9b03      	ldr	r3, [sp, #12]
 80083f2:	3307      	adds	r3, #7
 80083f4:	f023 0307 	bic.w	r3, r3, #7
 80083f8:	3308      	adds	r3, #8
 80083fa:	9303      	str	r3, [sp, #12]
 80083fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083fe:	443b      	add	r3, r7
 8008400:	9309      	str	r3, [sp, #36]	; 0x24
 8008402:	e767      	b.n	80082d4 <_vfiprintf_r+0x94>
 8008404:	fb0c 3202 	mla	r2, ip, r2, r3
 8008408:	460c      	mov	r4, r1
 800840a:	2001      	movs	r0, #1
 800840c:	e7a5      	b.n	800835a <_vfiprintf_r+0x11a>
 800840e:	2300      	movs	r3, #0
 8008410:	3401      	adds	r4, #1
 8008412:	9305      	str	r3, [sp, #20]
 8008414:	4619      	mov	r1, r3
 8008416:	f04f 0c0a 	mov.w	ip, #10
 800841a:	4620      	mov	r0, r4
 800841c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008420:	3a30      	subs	r2, #48	; 0x30
 8008422:	2a09      	cmp	r2, #9
 8008424:	d903      	bls.n	800842e <_vfiprintf_r+0x1ee>
 8008426:	2b00      	cmp	r3, #0
 8008428:	d0c5      	beq.n	80083b6 <_vfiprintf_r+0x176>
 800842a:	9105      	str	r1, [sp, #20]
 800842c:	e7c3      	b.n	80083b6 <_vfiprintf_r+0x176>
 800842e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008432:	4604      	mov	r4, r0
 8008434:	2301      	movs	r3, #1
 8008436:	e7f0      	b.n	800841a <_vfiprintf_r+0x1da>
 8008438:	ab03      	add	r3, sp, #12
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	462a      	mov	r2, r5
 800843e:	4b16      	ldr	r3, [pc, #88]	; (8008498 <_vfiprintf_r+0x258>)
 8008440:	a904      	add	r1, sp, #16
 8008442:	4630      	mov	r0, r6
 8008444:	f3af 8000 	nop.w
 8008448:	4607      	mov	r7, r0
 800844a:	1c78      	adds	r0, r7, #1
 800844c:	d1d6      	bne.n	80083fc <_vfiprintf_r+0x1bc>
 800844e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008450:	07d9      	lsls	r1, r3, #31
 8008452:	d405      	bmi.n	8008460 <_vfiprintf_r+0x220>
 8008454:	89ab      	ldrh	r3, [r5, #12]
 8008456:	059a      	lsls	r2, r3, #22
 8008458:	d402      	bmi.n	8008460 <_vfiprintf_r+0x220>
 800845a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800845c:	f7f8 fdd4 	bl	8001008 <__retarget_lock_release_recursive>
 8008460:	89ab      	ldrh	r3, [r5, #12]
 8008462:	065b      	lsls	r3, r3, #25
 8008464:	f53f af12 	bmi.w	800828c <_vfiprintf_r+0x4c>
 8008468:	9809      	ldr	r0, [sp, #36]	; 0x24
 800846a:	e711      	b.n	8008290 <_vfiprintf_r+0x50>
 800846c:	ab03      	add	r3, sp, #12
 800846e:	9300      	str	r3, [sp, #0]
 8008470:	462a      	mov	r2, r5
 8008472:	4b09      	ldr	r3, [pc, #36]	; (8008498 <_vfiprintf_r+0x258>)
 8008474:	a904      	add	r1, sp, #16
 8008476:	4630      	mov	r0, r6
 8008478:	f000 f880 	bl	800857c <_printf_i>
 800847c:	e7e4      	b.n	8008448 <_vfiprintf_r+0x208>
 800847e:	bf00      	nop
 8008480:	08008b3c 	.word	0x08008b3c
 8008484:	08008b5c 	.word	0x08008b5c
 8008488:	08008b1c 	.word	0x08008b1c
 800848c:	08008b80 	.word	0x08008b80
 8008490:	08008b8a 	.word	0x08008b8a
 8008494:	00000000 	.word	0x00000000
 8008498:	0800821b 	.word	0x0800821b
 800849c:	08008b86 	.word	0x08008b86

080084a0 <_printf_common>:
 80084a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084a4:	4616      	mov	r6, r2
 80084a6:	4699      	mov	r9, r3
 80084a8:	688a      	ldr	r2, [r1, #8]
 80084aa:	690b      	ldr	r3, [r1, #16]
 80084ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084b0:	4293      	cmp	r3, r2
 80084b2:	bfb8      	it	lt
 80084b4:	4613      	movlt	r3, r2
 80084b6:	6033      	str	r3, [r6, #0]
 80084b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084bc:	4607      	mov	r7, r0
 80084be:	460c      	mov	r4, r1
 80084c0:	b10a      	cbz	r2, 80084c6 <_printf_common+0x26>
 80084c2:	3301      	adds	r3, #1
 80084c4:	6033      	str	r3, [r6, #0]
 80084c6:	6823      	ldr	r3, [r4, #0]
 80084c8:	0699      	lsls	r1, r3, #26
 80084ca:	bf42      	ittt	mi
 80084cc:	6833      	ldrmi	r3, [r6, #0]
 80084ce:	3302      	addmi	r3, #2
 80084d0:	6033      	strmi	r3, [r6, #0]
 80084d2:	6825      	ldr	r5, [r4, #0]
 80084d4:	f015 0506 	ands.w	r5, r5, #6
 80084d8:	d106      	bne.n	80084e8 <_printf_common+0x48>
 80084da:	f104 0a19 	add.w	sl, r4, #25
 80084de:	68e3      	ldr	r3, [r4, #12]
 80084e0:	6832      	ldr	r2, [r6, #0]
 80084e2:	1a9b      	subs	r3, r3, r2
 80084e4:	42ab      	cmp	r3, r5
 80084e6:	dc26      	bgt.n	8008536 <_printf_common+0x96>
 80084e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084ec:	1e13      	subs	r3, r2, #0
 80084ee:	6822      	ldr	r2, [r4, #0]
 80084f0:	bf18      	it	ne
 80084f2:	2301      	movne	r3, #1
 80084f4:	0692      	lsls	r2, r2, #26
 80084f6:	d42b      	bmi.n	8008550 <_printf_common+0xb0>
 80084f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084fc:	4649      	mov	r1, r9
 80084fe:	4638      	mov	r0, r7
 8008500:	47c0      	blx	r8
 8008502:	3001      	adds	r0, #1
 8008504:	d01e      	beq.n	8008544 <_printf_common+0xa4>
 8008506:	6823      	ldr	r3, [r4, #0]
 8008508:	68e5      	ldr	r5, [r4, #12]
 800850a:	6832      	ldr	r2, [r6, #0]
 800850c:	f003 0306 	and.w	r3, r3, #6
 8008510:	2b04      	cmp	r3, #4
 8008512:	bf08      	it	eq
 8008514:	1aad      	subeq	r5, r5, r2
 8008516:	68a3      	ldr	r3, [r4, #8]
 8008518:	6922      	ldr	r2, [r4, #16]
 800851a:	bf0c      	ite	eq
 800851c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008520:	2500      	movne	r5, #0
 8008522:	4293      	cmp	r3, r2
 8008524:	bfc4      	itt	gt
 8008526:	1a9b      	subgt	r3, r3, r2
 8008528:	18ed      	addgt	r5, r5, r3
 800852a:	2600      	movs	r6, #0
 800852c:	341a      	adds	r4, #26
 800852e:	42b5      	cmp	r5, r6
 8008530:	d11a      	bne.n	8008568 <_printf_common+0xc8>
 8008532:	2000      	movs	r0, #0
 8008534:	e008      	b.n	8008548 <_printf_common+0xa8>
 8008536:	2301      	movs	r3, #1
 8008538:	4652      	mov	r2, sl
 800853a:	4649      	mov	r1, r9
 800853c:	4638      	mov	r0, r7
 800853e:	47c0      	blx	r8
 8008540:	3001      	adds	r0, #1
 8008542:	d103      	bne.n	800854c <_printf_common+0xac>
 8008544:	f04f 30ff 	mov.w	r0, #4294967295
 8008548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800854c:	3501      	adds	r5, #1
 800854e:	e7c6      	b.n	80084de <_printf_common+0x3e>
 8008550:	18e1      	adds	r1, r4, r3
 8008552:	1c5a      	adds	r2, r3, #1
 8008554:	2030      	movs	r0, #48	; 0x30
 8008556:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800855a:	4422      	add	r2, r4
 800855c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008560:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008564:	3302      	adds	r3, #2
 8008566:	e7c7      	b.n	80084f8 <_printf_common+0x58>
 8008568:	2301      	movs	r3, #1
 800856a:	4622      	mov	r2, r4
 800856c:	4649      	mov	r1, r9
 800856e:	4638      	mov	r0, r7
 8008570:	47c0      	blx	r8
 8008572:	3001      	adds	r0, #1
 8008574:	d0e6      	beq.n	8008544 <_printf_common+0xa4>
 8008576:	3601      	adds	r6, #1
 8008578:	e7d9      	b.n	800852e <_printf_common+0x8e>
	...

0800857c <_printf_i>:
 800857c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008580:	460c      	mov	r4, r1
 8008582:	4691      	mov	r9, r2
 8008584:	7e27      	ldrb	r7, [r4, #24]
 8008586:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008588:	2f78      	cmp	r7, #120	; 0x78
 800858a:	4680      	mov	r8, r0
 800858c:	469a      	mov	sl, r3
 800858e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008592:	d807      	bhi.n	80085a4 <_printf_i+0x28>
 8008594:	2f62      	cmp	r7, #98	; 0x62
 8008596:	d80a      	bhi.n	80085ae <_printf_i+0x32>
 8008598:	2f00      	cmp	r7, #0
 800859a:	f000 80d8 	beq.w	800874e <_printf_i+0x1d2>
 800859e:	2f58      	cmp	r7, #88	; 0x58
 80085a0:	f000 80a3 	beq.w	80086ea <_printf_i+0x16e>
 80085a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80085a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80085ac:	e03a      	b.n	8008624 <_printf_i+0xa8>
 80085ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80085b2:	2b15      	cmp	r3, #21
 80085b4:	d8f6      	bhi.n	80085a4 <_printf_i+0x28>
 80085b6:	a001      	add	r0, pc, #4	; (adr r0, 80085bc <_printf_i+0x40>)
 80085b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80085bc:	08008615 	.word	0x08008615
 80085c0:	08008629 	.word	0x08008629
 80085c4:	080085a5 	.word	0x080085a5
 80085c8:	080085a5 	.word	0x080085a5
 80085cc:	080085a5 	.word	0x080085a5
 80085d0:	080085a5 	.word	0x080085a5
 80085d4:	08008629 	.word	0x08008629
 80085d8:	080085a5 	.word	0x080085a5
 80085dc:	080085a5 	.word	0x080085a5
 80085e0:	080085a5 	.word	0x080085a5
 80085e4:	080085a5 	.word	0x080085a5
 80085e8:	08008735 	.word	0x08008735
 80085ec:	08008659 	.word	0x08008659
 80085f0:	08008717 	.word	0x08008717
 80085f4:	080085a5 	.word	0x080085a5
 80085f8:	080085a5 	.word	0x080085a5
 80085fc:	08008757 	.word	0x08008757
 8008600:	080085a5 	.word	0x080085a5
 8008604:	08008659 	.word	0x08008659
 8008608:	080085a5 	.word	0x080085a5
 800860c:	080085a5 	.word	0x080085a5
 8008610:	0800871f 	.word	0x0800871f
 8008614:	680b      	ldr	r3, [r1, #0]
 8008616:	1d1a      	adds	r2, r3, #4
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	600a      	str	r2, [r1, #0]
 800861c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008620:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008624:	2301      	movs	r3, #1
 8008626:	e0a3      	b.n	8008770 <_printf_i+0x1f4>
 8008628:	6825      	ldr	r5, [r4, #0]
 800862a:	6808      	ldr	r0, [r1, #0]
 800862c:	062e      	lsls	r6, r5, #24
 800862e:	f100 0304 	add.w	r3, r0, #4
 8008632:	d50a      	bpl.n	800864a <_printf_i+0xce>
 8008634:	6805      	ldr	r5, [r0, #0]
 8008636:	600b      	str	r3, [r1, #0]
 8008638:	2d00      	cmp	r5, #0
 800863a:	da03      	bge.n	8008644 <_printf_i+0xc8>
 800863c:	232d      	movs	r3, #45	; 0x2d
 800863e:	426d      	negs	r5, r5
 8008640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008644:	485e      	ldr	r0, [pc, #376]	; (80087c0 <_printf_i+0x244>)
 8008646:	230a      	movs	r3, #10
 8008648:	e019      	b.n	800867e <_printf_i+0x102>
 800864a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800864e:	6805      	ldr	r5, [r0, #0]
 8008650:	600b      	str	r3, [r1, #0]
 8008652:	bf18      	it	ne
 8008654:	b22d      	sxthne	r5, r5
 8008656:	e7ef      	b.n	8008638 <_printf_i+0xbc>
 8008658:	680b      	ldr	r3, [r1, #0]
 800865a:	6825      	ldr	r5, [r4, #0]
 800865c:	1d18      	adds	r0, r3, #4
 800865e:	6008      	str	r0, [r1, #0]
 8008660:	0628      	lsls	r0, r5, #24
 8008662:	d501      	bpl.n	8008668 <_printf_i+0xec>
 8008664:	681d      	ldr	r5, [r3, #0]
 8008666:	e002      	b.n	800866e <_printf_i+0xf2>
 8008668:	0669      	lsls	r1, r5, #25
 800866a:	d5fb      	bpl.n	8008664 <_printf_i+0xe8>
 800866c:	881d      	ldrh	r5, [r3, #0]
 800866e:	4854      	ldr	r0, [pc, #336]	; (80087c0 <_printf_i+0x244>)
 8008670:	2f6f      	cmp	r7, #111	; 0x6f
 8008672:	bf0c      	ite	eq
 8008674:	2308      	moveq	r3, #8
 8008676:	230a      	movne	r3, #10
 8008678:	2100      	movs	r1, #0
 800867a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800867e:	6866      	ldr	r6, [r4, #4]
 8008680:	60a6      	str	r6, [r4, #8]
 8008682:	2e00      	cmp	r6, #0
 8008684:	bfa2      	ittt	ge
 8008686:	6821      	ldrge	r1, [r4, #0]
 8008688:	f021 0104 	bicge.w	r1, r1, #4
 800868c:	6021      	strge	r1, [r4, #0]
 800868e:	b90d      	cbnz	r5, 8008694 <_printf_i+0x118>
 8008690:	2e00      	cmp	r6, #0
 8008692:	d04d      	beq.n	8008730 <_printf_i+0x1b4>
 8008694:	4616      	mov	r6, r2
 8008696:	fbb5 f1f3 	udiv	r1, r5, r3
 800869a:	fb03 5711 	mls	r7, r3, r1, r5
 800869e:	5dc7      	ldrb	r7, [r0, r7]
 80086a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086a4:	462f      	mov	r7, r5
 80086a6:	42bb      	cmp	r3, r7
 80086a8:	460d      	mov	r5, r1
 80086aa:	d9f4      	bls.n	8008696 <_printf_i+0x11a>
 80086ac:	2b08      	cmp	r3, #8
 80086ae:	d10b      	bne.n	80086c8 <_printf_i+0x14c>
 80086b0:	6823      	ldr	r3, [r4, #0]
 80086b2:	07df      	lsls	r7, r3, #31
 80086b4:	d508      	bpl.n	80086c8 <_printf_i+0x14c>
 80086b6:	6923      	ldr	r3, [r4, #16]
 80086b8:	6861      	ldr	r1, [r4, #4]
 80086ba:	4299      	cmp	r1, r3
 80086bc:	bfde      	ittt	le
 80086be:	2330      	movle	r3, #48	; 0x30
 80086c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80086c8:	1b92      	subs	r2, r2, r6
 80086ca:	6122      	str	r2, [r4, #16]
 80086cc:	f8cd a000 	str.w	sl, [sp]
 80086d0:	464b      	mov	r3, r9
 80086d2:	aa03      	add	r2, sp, #12
 80086d4:	4621      	mov	r1, r4
 80086d6:	4640      	mov	r0, r8
 80086d8:	f7ff fee2 	bl	80084a0 <_printf_common>
 80086dc:	3001      	adds	r0, #1
 80086de:	d14c      	bne.n	800877a <_printf_i+0x1fe>
 80086e0:	f04f 30ff 	mov.w	r0, #4294967295
 80086e4:	b004      	add	sp, #16
 80086e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ea:	4835      	ldr	r0, [pc, #212]	; (80087c0 <_printf_i+0x244>)
 80086ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80086f0:	6823      	ldr	r3, [r4, #0]
 80086f2:	680e      	ldr	r6, [r1, #0]
 80086f4:	061f      	lsls	r7, r3, #24
 80086f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80086fa:	600e      	str	r6, [r1, #0]
 80086fc:	d514      	bpl.n	8008728 <_printf_i+0x1ac>
 80086fe:	07d9      	lsls	r1, r3, #31
 8008700:	bf44      	itt	mi
 8008702:	f043 0320 	orrmi.w	r3, r3, #32
 8008706:	6023      	strmi	r3, [r4, #0]
 8008708:	b91d      	cbnz	r5, 8008712 <_printf_i+0x196>
 800870a:	6823      	ldr	r3, [r4, #0]
 800870c:	f023 0320 	bic.w	r3, r3, #32
 8008710:	6023      	str	r3, [r4, #0]
 8008712:	2310      	movs	r3, #16
 8008714:	e7b0      	b.n	8008678 <_printf_i+0xfc>
 8008716:	6823      	ldr	r3, [r4, #0]
 8008718:	f043 0320 	orr.w	r3, r3, #32
 800871c:	6023      	str	r3, [r4, #0]
 800871e:	2378      	movs	r3, #120	; 0x78
 8008720:	4828      	ldr	r0, [pc, #160]	; (80087c4 <_printf_i+0x248>)
 8008722:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008726:	e7e3      	b.n	80086f0 <_printf_i+0x174>
 8008728:	065e      	lsls	r6, r3, #25
 800872a:	bf48      	it	mi
 800872c:	b2ad      	uxthmi	r5, r5
 800872e:	e7e6      	b.n	80086fe <_printf_i+0x182>
 8008730:	4616      	mov	r6, r2
 8008732:	e7bb      	b.n	80086ac <_printf_i+0x130>
 8008734:	680b      	ldr	r3, [r1, #0]
 8008736:	6826      	ldr	r6, [r4, #0]
 8008738:	6960      	ldr	r0, [r4, #20]
 800873a:	1d1d      	adds	r5, r3, #4
 800873c:	600d      	str	r5, [r1, #0]
 800873e:	0635      	lsls	r5, r6, #24
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	d501      	bpl.n	8008748 <_printf_i+0x1cc>
 8008744:	6018      	str	r0, [r3, #0]
 8008746:	e002      	b.n	800874e <_printf_i+0x1d2>
 8008748:	0671      	lsls	r1, r6, #25
 800874a:	d5fb      	bpl.n	8008744 <_printf_i+0x1c8>
 800874c:	8018      	strh	r0, [r3, #0]
 800874e:	2300      	movs	r3, #0
 8008750:	6123      	str	r3, [r4, #16]
 8008752:	4616      	mov	r6, r2
 8008754:	e7ba      	b.n	80086cc <_printf_i+0x150>
 8008756:	680b      	ldr	r3, [r1, #0]
 8008758:	1d1a      	adds	r2, r3, #4
 800875a:	600a      	str	r2, [r1, #0]
 800875c:	681e      	ldr	r6, [r3, #0]
 800875e:	6862      	ldr	r2, [r4, #4]
 8008760:	2100      	movs	r1, #0
 8008762:	4630      	mov	r0, r6
 8008764:	f7f7 fdbc 	bl	80002e0 <memchr>
 8008768:	b108      	cbz	r0, 800876e <_printf_i+0x1f2>
 800876a:	1b80      	subs	r0, r0, r6
 800876c:	6060      	str	r0, [r4, #4]
 800876e:	6863      	ldr	r3, [r4, #4]
 8008770:	6123      	str	r3, [r4, #16]
 8008772:	2300      	movs	r3, #0
 8008774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008778:	e7a8      	b.n	80086cc <_printf_i+0x150>
 800877a:	6923      	ldr	r3, [r4, #16]
 800877c:	4632      	mov	r2, r6
 800877e:	4649      	mov	r1, r9
 8008780:	4640      	mov	r0, r8
 8008782:	47d0      	blx	sl
 8008784:	3001      	adds	r0, #1
 8008786:	d0ab      	beq.n	80086e0 <_printf_i+0x164>
 8008788:	6823      	ldr	r3, [r4, #0]
 800878a:	079b      	lsls	r3, r3, #30
 800878c:	d413      	bmi.n	80087b6 <_printf_i+0x23a>
 800878e:	68e0      	ldr	r0, [r4, #12]
 8008790:	9b03      	ldr	r3, [sp, #12]
 8008792:	4298      	cmp	r0, r3
 8008794:	bfb8      	it	lt
 8008796:	4618      	movlt	r0, r3
 8008798:	e7a4      	b.n	80086e4 <_printf_i+0x168>
 800879a:	2301      	movs	r3, #1
 800879c:	4632      	mov	r2, r6
 800879e:	4649      	mov	r1, r9
 80087a0:	4640      	mov	r0, r8
 80087a2:	47d0      	blx	sl
 80087a4:	3001      	adds	r0, #1
 80087a6:	d09b      	beq.n	80086e0 <_printf_i+0x164>
 80087a8:	3501      	adds	r5, #1
 80087aa:	68e3      	ldr	r3, [r4, #12]
 80087ac:	9903      	ldr	r1, [sp, #12]
 80087ae:	1a5b      	subs	r3, r3, r1
 80087b0:	42ab      	cmp	r3, r5
 80087b2:	dcf2      	bgt.n	800879a <_printf_i+0x21e>
 80087b4:	e7eb      	b.n	800878e <_printf_i+0x212>
 80087b6:	2500      	movs	r5, #0
 80087b8:	f104 0619 	add.w	r6, r4, #25
 80087bc:	e7f5      	b.n	80087aa <_printf_i+0x22e>
 80087be:	bf00      	nop
 80087c0:	08008b91 	.word	0x08008b91
 80087c4:	08008ba2 	.word	0x08008ba2

080087c8 <_read_r>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	4d07      	ldr	r5, [pc, #28]	; (80087e8 <_read_r+0x20>)
 80087cc:	4604      	mov	r4, r0
 80087ce:	4608      	mov	r0, r1
 80087d0:	4611      	mov	r1, r2
 80087d2:	2200      	movs	r2, #0
 80087d4:	602a      	str	r2, [r5, #0]
 80087d6:	461a      	mov	r2, r3
 80087d8:	f7f8 fa95 	bl	8000d06 <_read>
 80087dc:	1c43      	adds	r3, r0, #1
 80087de:	d102      	bne.n	80087e6 <_read_r+0x1e>
 80087e0:	682b      	ldr	r3, [r5, #0]
 80087e2:	b103      	cbz	r3, 80087e6 <_read_r+0x1e>
 80087e4:	6023      	str	r3, [r4, #0]
 80087e6:	bd38      	pop	{r3, r4, r5, pc}
 80087e8:	24004b6c 	.word	0x24004b6c

080087ec <__swbuf_r>:
 80087ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ee:	460e      	mov	r6, r1
 80087f0:	4614      	mov	r4, r2
 80087f2:	4605      	mov	r5, r0
 80087f4:	b118      	cbz	r0, 80087fe <__swbuf_r+0x12>
 80087f6:	6983      	ldr	r3, [r0, #24]
 80087f8:	b90b      	cbnz	r3, 80087fe <__swbuf_r+0x12>
 80087fa:	f7ff f995 	bl	8007b28 <__sinit>
 80087fe:	4b21      	ldr	r3, [pc, #132]	; (8008884 <__swbuf_r+0x98>)
 8008800:	429c      	cmp	r4, r3
 8008802:	d12b      	bne.n	800885c <__swbuf_r+0x70>
 8008804:	686c      	ldr	r4, [r5, #4]
 8008806:	69a3      	ldr	r3, [r4, #24]
 8008808:	60a3      	str	r3, [r4, #8]
 800880a:	89a3      	ldrh	r3, [r4, #12]
 800880c:	071a      	lsls	r2, r3, #28
 800880e:	d52f      	bpl.n	8008870 <__swbuf_r+0x84>
 8008810:	6923      	ldr	r3, [r4, #16]
 8008812:	b36b      	cbz	r3, 8008870 <__swbuf_r+0x84>
 8008814:	6923      	ldr	r3, [r4, #16]
 8008816:	6820      	ldr	r0, [r4, #0]
 8008818:	1ac0      	subs	r0, r0, r3
 800881a:	6963      	ldr	r3, [r4, #20]
 800881c:	b2f6      	uxtb	r6, r6
 800881e:	4283      	cmp	r3, r0
 8008820:	4637      	mov	r7, r6
 8008822:	dc04      	bgt.n	800882e <__swbuf_r+0x42>
 8008824:	4621      	mov	r1, r4
 8008826:	4628      	mov	r0, r5
 8008828:	f7ff fc86 	bl	8008138 <_fflush_r>
 800882c:	bb30      	cbnz	r0, 800887c <__swbuf_r+0x90>
 800882e:	68a3      	ldr	r3, [r4, #8]
 8008830:	3b01      	subs	r3, #1
 8008832:	60a3      	str	r3, [r4, #8]
 8008834:	6823      	ldr	r3, [r4, #0]
 8008836:	1c5a      	adds	r2, r3, #1
 8008838:	6022      	str	r2, [r4, #0]
 800883a:	701e      	strb	r6, [r3, #0]
 800883c:	6963      	ldr	r3, [r4, #20]
 800883e:	3001      	adds	r0, #1
 8008840:	4283      	cmp	r3, r0
 8008842:	d004      	beq.n	800884e <__swbuf_r+0x62>
 8008844:	89a3      	ldrh	r3, [r4, #12]
 8008846:	07db      	lsls	r3, r3, #31
 8008848:	d506      	bpl.n	8008858 <__swbuf_r+0x6c>
 800884a:	2e0a      	cmp	r6, #10
 800884c:	d104      	bne.n	8008858 <__swbuf_r+0x6c>
 800884e:	4621      	mov	r1, r4
 8008850:	4628      	mov	r0, r5
 8008852:	f7ff fc71 	bl	8008138 <_fflush_r>
 8008856:	b988      	cbnz	r0, 800887c <__swbuf_r+0x90>
 8008858:	4638      	mov	r0, r7
 800885a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800885c:	4b0a      	ldr	r3, [pc, #40]	; (8008888 <__swbuf_r+0x9c>)
 800885e:	429c      	cmp	r4, r3
 8008860:	d101      	bne.n	8008866 <__swbuf_r+0x7a>
 8008862:	68ac      	ldr	r4, [r5, #8]
 8008864:	e7cf      	b.n	8008806 <__swbuf_r+0x1a>
 8008866:	4b09      	ldr	r3, [pc, #36]	; (800888c <__swbuf_r+0xa0>)
 8008868:	429c      	cmp	r4, r3
 800886a:	bf08      	it	eq
 800886c:	68ec      	ldreq	r4, [r5, #12]
 800886e:	e7ca      	b.n	8008806 <__swbuf_r+0x1a>
 8008870:	4621      	mov	r1, r4
 8008872:	4628      	mov	r0, r5
 8008874:	f000 f80c 	bl	8008890 <__swsetup_r>
 8008878:	2800      	cmp	r0, #0
 800887a:	d0cb      	beq.n	8008814 <__swbuf_r+0x28>
 800887c:	f04f 37ff 	mov.w	r7, #4294967295
 8008880:	e7ea      	b.n	8008858 <__swbuf_r+0x6c>
 8008882:	bf00      	nop
 8008884:	08008b3c 	.word	0x08008b3c
 8008888:	08008b5c 	.word	0x08008b5c
 800888c:	08008b1c 	.word	0x08008b1c

08008890 <__swsetup_r>:
 8008890:	4b32      	ldr	r3, [pc, #200]	; (800895c <__swsetup_r+0xcc>)
 8008892:	b570      	push	{r4, r5, r6, lr}
 8008894:	681d      	ldr	r5, [r3, #0]
 8008896:	4606      	mov	r6, r0
 8008898:	460c      	mov	r4, r1
 800889a:	b125      	cbz	r5, 80088a6 <__swsetup_r+0x16>
 800889c:	69ab      	ldr	r3, [r5, #24]
 800889e:	b913      	cbnz	r3, 80088a6 <__swsetup_r+0x16>
 80088a0:	4628      	mov	r0, r5
 80088a2:	f7ff f941 	bl	8007b28 <__sinit>
 80088a6:	4b2e      	ldr	r3, [pc, #184]	; (8008960 <__swsetup_r+0xd0>)
 80088a8:	429c      	cmp	r4, r3
 80088aa:	d10f      	bne.n	80088cc <__swsetup_r+0x3c>
 80088ac:	686c      	ldr	r4, [r5, #4]
 80088ae:	89a3      	ldrh	r3, [r4, #12]
 80088b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088b4:	0719      	lsls	r1, r3, #28
 80088b6:	d42c      	bmi.n	8008912 <__swsetup_r+0x82>
 80088b8:	06dd      	lsls	r5, r3, #27
 80088ba:	d411      	bmi.n	80088e0 <__swsetup_r+0x50>
 80088bc:	2309      	movs	r3, #9
 80088be:	6033      	str	r3, [r6, #0]
 80088c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088c4:	81a3      	strh	r3, [r4, #12]
 80088c6:	f04f 30ff 	mov.w	r0, #4294967295
 80088ca:	e03e      	b.n	800894a <__swsetup_r+0xba>
 80088cc:	4b25      	ldr	r3, [pc, #148]	; (8008964 <__swsetup_r+0xd4>)
 80088ce:	429c      	cmp	r4, r3
 80088d0:	d101      	bne.n	80088d6 <__swsetup_r+0x46>
 80088d2:	68ac      	ldr	r4, [r5, #8]
 80088d4:	e7eb      	b.n	80088ae <__swsetup_r+0x1e>
 80088d6:	4b24      	ldr	r3, [pc, #144]	; (8008968 <__swsetup_r+0xd8>)
 80088d8:	429c      	cmp	r4, r3
 80088da:	bf08      	it	eq
 80088dc:	68ec      	ldreq	r4, [r5, #12]
 80088de:	e7e6      	b.n	80088ae <__swsetup_r+0x1e>
 80088e0:	0758      	lsls	r0, r3, #29
 80088e2:	d512      	bpl.n	800890a <__swsetup_r+0x7a>
 80088e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088e6:	b141      	cbz	r1, 80088fa <__swsetup_r+0x6a>
 80088e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088ec:	4299      	cmp	r1, r3
 80088ee:	d002      	beq.n	80088f6 <__swsetup_r+0x66>
 80088f0:	4630      	mov	r0, r6
 80088f2:	f7ff f9f9 	bl	8007ce8 <_free_r>
 80088f6:	2300      	movs	r3, #0
 80088f8:	6363      	str	r3, [r4, #52]	; 0x34
 80088fa:	89a3      	ldrh	r3, [r4, #12]
 80088fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008900:	81a3      	strh	r3, [r4, #12]
 8008902:	2300      	movs	r3, #0
 8008904:	6063      	str	r3, [r4, #4]
 8008906:	6923      	ldr	r3, [r4, #16]
 8008908:	6023      	str	r3, [r4, #0]
 800890a:	89a3      	ldrh	r3, [r4, #12]
 800890c:	f043 0308 	orr.w	r3, r3, #8
 8008910:	81a3      	strh	r3, [r4, #12]
 8008912:	6923      	ldr	r3, [r4, #16]
 8008914:	b94b      	cbnz	r3, 800892a <__swsetup_r+0x9a>
 8008916:	89a3      	ldrh	r3, [r4, #12]
 8008918:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800891c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008920:	d003      	beq.n	800892a <__swsetup_r+0x9a>
 8008922:	4621      	mov	r1, r4
 8008924:	4630      	mov	r0, r6
 8008926:	f000 f845 	bl	80089b4 <__smakebuf_r>
 800892a:	89a0      	ldrh	r0, [r4, #12]
 800892c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008930:	f010 0301 	ands.w	r3, r0, #1
 8008934:	d00a      	beq.n	800894c <__swsetup_r+0xbc>
 8008936:	2300      	movs	r3, #0
 8008938:	60a3      	str	r3, [r4, #8]
 800893a:	6963      	ldr	r3, [r4, #20]
 800893c:	425b      	negs	r3, r3
 800893e:	61a3      	str	r3, [r4, #24]
 8008940:	6923      	ldr	r3, [r4, #16]
 8008942:	b943      	cbnz	r3, 8008956 <__swsetup_r+0xc6>
 8008944:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008948:	d1ba      	bne.n	80088c0 <__swsetup_r+0x30>
 800894a:	bd70      	pop	{r4, r5, r6, pc}
 800894c:	0781      	lsls	r1, r0, #30
 800894e:	bf58      	it	pl
 8008950:	6963      	ldrpl	r3, [r4, #20]
 8008952:	60a3      	str	r3, [r4, #8]
 8008954:	e7f4      	b.n	8008940 <__swsetup_r+0xb0>
 8008956:	2000      	movs	r0, #0
 8008958:	e7f7      	b.n	800894a <__swsetup_r+0xba>
 800895a:	bf00      	nop
 800895c:	24000014 	.word	0x24000014
 8008960:	08008b3c 	.word	0x08008b3c
 8008964:	08008b5c 	.word	0x08008b5c
 8008968:	08008b1c 	.word	0x08008b1c

0800896c <__swhatbuf_r>:
 800896c:	b570      	push	{r4, r5, r6, lr}
 800896e:	460e      	mov	r6, r1
 8008970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008974:	2900      	cmp	r1, #0
 8008976:	b096      	sub	sp, #88	; 0x58
 8008978:	4614      	mov	r4, r2
 800897a:	461d      	mov	r5, r3
 800897c:	da07      	bge.n	800898e <__swhatbuf_r+0x22>
 800897e:	2300      	movs	r3, #0
 8008980:	602b      	str	r3, [r5, #0]
 8008982:	89b3      	ldrh	r3, [r6, #12]
 8008984:	061a      	lsls	r2, r3, #24
 8008986:	d410      	bmi.n	80089aa <__swhatbuf_r+0x3e>
 8008988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800898c:	e00e      	b.n	80089ac <__swhatbuf_r+0x40>
 800898e:	466a      	mov	r2, sp
 8008990:	f000 f850 	bl	8008a34 <_fstat_r>
 8008994:	2800      	cmp	r0, #0
 8008996:	dbf2      	blt.n	800897e <__swhatbuf_r+0x12>
 8008998:	9a01      	ldr	r2, [sp, #4]
 800899a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800899e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80089a2:	425a      	negs	r2, r3
 80089a4:	415a      	adcs	r2, r3
 80089a6:	602a      	str	r2, [r5, #0]
 80089a8:	e7ee      	b.n	8008988 <__swhatbuf_r+0x1c>
 80089aa:	2340      	movs	r3, #64	; 0x40
 80089ac:	2000      	movs	r0, #0
 80089ae:	6023      	str	r3, [r4, #0]
 80089b0:	b016      	add	sp, #88	; 0x58
 80089b2:	bd70      	pop	{r4, r5, r6, pc}

080089b4 <__smakebuf_r>:
 80089b4:	898b      	ldrh	r3, [r1, #12]
 80089b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089b8:	079d      	lsls	r5, r3, #30
 80089ba:	4606      	mov	r6, r0
 80089bc:	460c      	mov	r4, r1
 80089be:	d507      	bpl.n	80089d0 <__smakebuf_r+0x1c>
 80089c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80089c4:	6023      	str	r3, [r4, #0]
 80089c6:	6123      	str	r3, [r4, #16]
 80089c8:	2301      	movs	r3, #1
 80089ca:	6163      	str	r3, [r4, #20]
 80089cc:	b002      	add	sp, #8
 80089ce:	bd70      	pop	{r4, r5, r6, pc}
 80089d0:	ab01      	add	r3, sp, #4
 80089d2:	466a      	mov	r2, sp
 80089d4:	f7ff ffca 	bl	800896c <__swhatbuf_r>
 80089d8:	9900      	ldr	r1, [sp, #0]
 80089da:	4605      	mov	r5, r0
 80089dc:	4630      	mov	r0, r6
 80089de:	f7ff f9d3 	bl	8007d88 <_malloc_r>
 80089e2:	b948      	cbnz	r0, 80089f8 <__smakebuf_r+0x44>
 80089e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089e8:	059a      	lsls	r2, r3, #22
 80089ea:	d4ef      	bmi.n	80089cc <__smakebuf_r+0x18>
 80089ec:	f023 0303 	bic.w	r3, r3, #3
 80089f0:	f043 0302 	orr.w	r3, r3, #2
 80089f4:	81a3      	strh	r3, [r4, #12]
 80089f6:	e7e3      	b.n	80089c0 <__smakebuf_r+0xc>
 80089f8:	4b0d      	ldr	r3, [pc, #52]	; (8008a30 <__smakebuf_r+0x7c>)
 80089fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80089fc:	89a3      	ldrh	r3, [r4, #12]
 80089fe:	6020      	str	r0, [r4, #0]
 8008a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a04:	81a3      	strh	r3, [r4, #12]
 8008a06:	9b00      	ldr	r3, [sp, #0]
 8008a08:	6163      	str	r3, [r4, #20]
 8008a0a:	9b01      	ldr	r3, [sp, #4]
 8008a0c:	6120      	str	r0, [r4, #16]
 8008a0e:	b15b      	cbz	r3, 8008a28 <__smakebuf_r+0x74>
 8008a10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a14:	4630      	mov	r0, r6
 8008a16:	f000 f81f 	bl	8008a58 <_isatty_r>
 8008a1a:	b128      	cbz	r0, 8008a28 <__smakebuf_r+0x74>
 8008a1c:	89a3      	ldrh	r3, [r4, #12]
 8008a1e:	f023 0303 	bic.w	r3, r3, #3
 8008a22:	f043 0301 	orr.w	r3, r3, #1
 8008a26:	81a3      	strh	r3, [r4, #12]
 8008a28:	89a0      	ldrh	r0, [r4, #12]
 8008a2a:	4305      	orrs	r5, r0
 8008a2c:	81a5      	strh	r5, [r4, #12]
 8008a2e:	e7cd      	b.n	80089cc <__smakebuf_r+0x18>
 8008a30:	08007ac1 	.word	0x08007ac1

08008a34 <_fstat_r>:
 8008a34:	b538      	push	{r3, r4, r5, lr}
 8008a36:	4d07      	ldr	r5, [pc, #28]	; (8008a54 <_fstat_r+0x20>)
 8008a38:	2300      	movs	r3, #0
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	4608      	mov	r0, r1
 8008a3e:	4611      	mov	r1, r2
 8008a40:	602b      	str	r3, [r5, #0]
 8008a42:	f7f8 f9a5 	bl	8000d90 <_fstat>
 8008a46:	1c43      	adds	r3, r0, #1
 8008a48:	d102      	bne.n	8008a50 <_fstat_r+0x1c>
 8008a4a:	682b      	ldr	r3, [r5, #0]
 8008a4c:	b103      	cbz	r3, 8008a50 <_fstat_r+0x1c>
 8008a4e:	6023      	str	r3, [r4, #0]
 8008a50:	bd38      	pop	{r3, r4, r5, pc}
 8008a52:	bf00      	nop
 8008a54:	24004b6c 	.word	0x24004b6c

08008a58 <_isatty_r>:
 8008a58:	b538      	push	{r3, r4, r5, lr}
 8008a5a:	4d06      	ldr	r5, [pc, #24]	; (8008a74 <_isatty_r+0x1c>)
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	4604      	mov	r4, r0
 8008a60:	4608      	mov	r0, r1
 8008a62:	602b      	str	r3, [r5, #0]
 8008a64:	f7f8 f9a4 	bl	8000db0 <_isatty>
 8008a68:	1c43      	adds	r3, r0, #1
 8008a6a:	d102      	bne.n	8008a72 <_isatty_r+0x1a>
 8008a6c:	682b      	ldr	r3, [r5, #0]
 8008a6e:	b103      	cbz	r3, 8008a72 <_isatty_r+0x1a>
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	bd38      	pop	{r3, r4, r5, pc}
 8008a74:	24004b6c 	.word	0x24004b6c

08008a78 <_init>:
 8008a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7a:	bf00      	nop
 8008a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a7e:	bc08      	pop	{r3}
 8008a80:	469e      	mov	lr, r3
 8008a82:	4770      	bx	lr

08008a84 <_fini>:
 8008a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a86:	bf00      	nop
 8008a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a8a:	bc08      	pop	{r3}
 8008a8c:	469e      	mov	lr, r3
 8008a8e:	4770      	bx	lr
