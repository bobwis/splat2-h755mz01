
Splat2-H755-mz01_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049f4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004c94  08004c94  00014c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d4c  08004d4c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004d4c  08004d4c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d4c  08004d4c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d4c  08004d4c  00014d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d50  08004d50  00014d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  08004d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a44  24000078  08004dcc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24004abc  08004dcc  00024abc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cd66  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003709  00000000  00000000  0003ce0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00040518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  000414a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039850  00000000  00000000  00042310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010828  00000000  00000000  0007bb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017e609  00000000  00000000  0008c388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0020a991  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004158  00000000  00000000  0020a9e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08004c7c 	.word	0x08004c7c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08004c7c 	.word	0x08004c7c

080002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e4:	4b3f      	ldr	r3, [pc, #252]	; (80003e4 <SystemInit+0x104>)
 80002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ea:	4a3e      	ldr	r2, [pc, #248]	; (80003e4 <SystemInit+0x104>)
 80002ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002f4:	4b3b      	ldr	r3, [pc, #236]	; (80003e4 <SystemInit+0x104>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	4a3a      	ldr	r2, [pc, #232]	; (80003e4 <SystemInit+0x104>)
 80002fa:	f043 0310 	orr.w	r3, r3, #16
 80002fe:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000300:	4b39      	ldr	r3, [pc, #228]	; (80003e8 <SystemInit+0x108>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f003 030f 	and.w	r3, r3, #15
 8000308:	2b06      	cmp	r3, #6
 800030a:	d807      	bhi.n	800031c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800030c:	4b36      	ldr	r3, [pc, #216]	; (80003e8 <SystemInit+0x108>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f023 030f 	bic.w	r3, r3, #15
 8000314:	4a34      	ldr	r2, [pc, #208]	; (80003e8 <SystemInit+0x108>)
 8000316:	f043 0307 	orr.w	r3, r3, #7
 800031a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800031c:	4b33      	ldr	r3, [pc, #204]	; (80003ec <SystemInit+0x10c>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a32      	ldr	r2, [pc, #200]	; (80003ec <SystemInit+0x10c>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000328:	4b30      	ldr	r3, [pc, #192]	; (80003ec <SystemInit+0x10c>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800032e:	4b2f      	ldr	r3, [pc, #188]	; (80003ec <SystemInit+0x10c>)
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	492e      	ldr	r1, [pc, #184]	; (80003ec <SystemInit+0x10c>)
 8000334:	4b2e      	ldr	r3, [pc, #184]	; (80003f0 <SystemInit+0x110>)
 8000336:	4013      	ands	r3, r2
 8000338:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800033a:	4b2b      	ldr	r3, [pc, #172]	; (80003e8 <SystemInit+0x108>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f003 0308 	and.w	r3, r3, #8
 8000342:	2b00      	cmp	r3, #0
 8000344:	d007      	beq.n	8000356 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000346:	4b28      	ldr	r3, [pc, #160]	; (80003e8 <SystemInit+0x108>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f023 030f 	bic.w	r3, r3, #15
 800034e:	4a26      	ldr	r2, [pc, #152]	; (80003e8 <SystemInit+0x108>)
 8000350:	f043 0307 	orr.w	r3, r3, #7
 8000354:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000356:	4b25      	ldr	r3, [pc, #148]	; (80003ec <SystemInit+0x10c>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800035c:	4b23      	ldr	r3, [pc, #140]	; (80003ec <SystemInit+0x10c>)
 800035e:	2200      	movs	r2, #0
 8000360:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000362:	4b22      	ldr	r3, [pc, #136]	; (80003ec <SystemInit+0x10c>)
 8000364:	2200      	movs	r2, #0
 8000366:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000368:	4b20      	ldr	r3, [pc, #128]	; (80003ec <SystemInit+0x10c>)
 800036a:	4a22      	ldr	r2, [pc, #136]	; (80003f4 <SystemInit+0x114>)
 800036c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800036e:	4b1f      	ldr	r3, [pc, #124]	; (80003ec <SystemInit+0x10c>)
 8000370:	4a21      	ldr	r2, [pc, #132]	; (80003f8 <SystemInit+0x118>)
 8000372:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000374:	4b1d      	ldr	r3, [pc, #116]	; (80003ec <SystemInit+0x10c>)
 8000376:	4a21      	ldr	r2, [pc, #132]	; (80003fc <SystemInit+0x11c>)
 8000378:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800037a:	4b1c      	ldr	r3, [pc, #112]	; (80003ec <SystemInit+0x10c>)
 800037c:	2200      	movs	r2, #0
 800037e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000380:	4b1a      	ldr	r3, [pc, #104]	; (80003ec <SystemInit+0x10c>)
 8000382:	4a1e      	ldr	r2, [pc, #120]	; (80003fc <SystemInit+0x11c>)
 8000384:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000386:	4b19      	ldr	r3, [pc, #100]	; (80003ec <SystemInit+0x10c>)
 8000388:	2200      	movs	r2, #0
 800038a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800038c:	4b17      	ldr	r3, [pc, #92]	; (80003ec <SystemInit+0x10c>)
 800038e:	4a1b      	ldr	r2, [pc, #108]	; (80003fc <SystemInit+0x11c>)
 8000390:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000392:	4b16      	ldr	r3, [pc, #88]	; (80003ec <SystemInit+0x10c>)
 8000394:	2200      	movs	r2, #0
 8000396:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000398:	4b14      	ldr	r3, [pc, #80]	; (80003ec <SystemInit+0x10c>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a13      	ldr	r2, [pc, #76]	; (80003ec <SystemInit+0x10c>)
 800039e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80003a4:	4b11      	ldr	r3, [pc, #68]	; (80003ec <SystemInit+0x10c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003aa:	4b15      	ldr	r3, [pc, #84]	; (8000400 <SystemInit+0x120>)
 80003ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ae:	4a14      	ldr	r2, [pc, #80]	; (8000400 <SystemInit+0x120>)
 80003b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003b4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003b6:	4b13      	ldr	r3, [pc, #76]	; (8000404 <SystemInit+0x124>)
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	4b13      	ldr	r3, [pc, #76]	; (8000408 <SystemInit+0x128>)
 80003bc:	4013      	ands	r3, r2
 80003be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003c2:	d202      	bcs.n	80003ca <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003c4:	4b11      	ldr	r3, [pc, #68]	; (800040c <SystemInit+0x12c>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003ca:	4b11      	ldr	r3, [pc, #68]	; (8000410 <SystemInit+0x130>)
 80003cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003d0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003d2:	4b04      	ldr	r3, [pc, #16]	; (80003e4 <SystemInit+0x104>)
 80003d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003da:	bf00      	nop
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	e000ed00 	.word	0xe000ed00
 80003e8:	52002000 	.word	0x52002000
 80003ec:	58024400 	.word	0x58024400
 80003f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003f4:	02020200 	.word	0x02020200
 80003f8:	01ff0000 	.word	0x01ff0000
 80003fc:	01010280 	.word	0x01010280
 8000400:	580000c0 	.word	0x580000c0
 8000404:	5c001000 	.word	0x5c001000
 8000408:	ffff0000 	.word	0xffff0000
 800040c:	51008108 	.word	0x51008108
 8000410:	52004000 	.word	0x52004000

08000414 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800041a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800041e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000420:	bf00      	nop
 8000422:	4b26      	ldr	r3, [pc, #152]	; (80004bc <main+0xa8>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800042a:	2b00      	cmp	r3, #0
 800042c:	d004      	beq.n	8000438 <main+0x24>
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	1e5a      	subs	r2, r3, #1
 8000432:	607a      	str	r2, [r7, #4]
 8000434:	2b00      	cmp	r3, #0
 8000436:	dcf4      	bgt.n	8000422 <main+0xe>
  if ( timeout < 0 )
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2b00      	cmp	r3, #0
 800043c:	da01      	bge.n	8000442 <main+0x2e>
  {
  Error_Handler();
 800043e:	f000 f92d 	bl	800069c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000442:	f000 fa1f 	bl	8000884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000446:	f000 f841 	bl	80004cc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800044a:	4b1c      	ldr	r3, [pc, #112]	; (80004bc <main+0xa8>)
 800044c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000450:	4a1a      	ldr	r2, [pc, #104]	; (80004bc <main+0xa8>)
 8000452:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000456:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800045a:	4b18      	ldr	r3, [pc, #96]	; (80004bc <main+0xa8>)
 800045c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000464:	603b      	str	r3, [r7, #0]
 8000466:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000468:	2000      	movs	r0, #0
 800046a:	f000 fd71 	bl	8000f50 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800046e:	2100      	movs	r1, #0
 8000470:	2000      	movs	r0, #0
 8000472:	f000 fd87 	bl	8000f84 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000476:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800047a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800047c:	bf00      	nop
 800047e:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <main+0xa8>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000486:	2b00      	cmp	r3, #0
 8000488:	d104      	bne.n	8000494 <main+0x80>
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	1e5a      	subs	r2, r3, #1
 800048e:	607a      	str	r2, [r7, #4]
 8000490:	2b00      	cmp	r3, #0
 8000492:	dcf4      	bgt.n	800047e <main+0x6a>
if ( timeout < 0 )
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2b00      	cmp	r3, #0
 8000498:	da01      	bge.n	800049e <main+0x8a>
{
Error_Handler();
 800049a:	f000 f8ff 	bl	800069c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800049e:	f000 f87f 	bl	80005a0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004a2:	f001 fd6d 	bl	8001f80 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004a6:	4a06      	ldr	r2, [pc, #24]	; (80004c0 <main+0xac>)
 80004a8:	2100      	movs	r1, #0
 80004aa:	4806      	ldr	r0, [pc, #24]	; (80004c4 <main+0xb0>)
 80004ac:	f001 fdb2 	bl	8002014 <osThreadNew>
 80004b0:	4603      	mov	r3, r0
 80004b2:	4a05      	ldr	r2, [pc, #20]	; (80004c8 <main+0xb4>)
 80004b4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004b6:	f001 fd87 	bl	8001fc8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ba:	e7fe      	b.n	80004ba <main+0xa6>
 80004bc:	58024400 	.word	0x58024400
 80004c0:	08004cc8 	.word	0x08004cc8
 80004c4:	0800067d 	.word	0x0800067d
 80004c8:	24004a74 	.word	0x24004a74

080004cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b09c      	sub	sp, #112	; 0x70
 80004d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004d6:	224c      	movs	r2, #76	; 0x4c
 80004d8:	2100      	movs	r1, #0
 80004da:	4618      	mov	r0, r3
 80004dc:	f004 fb00 	bl	8004ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	2220      	movs	r2, #32
 80004e4:	2100      	movs	r1, #0
 80004e6:	4618      	mov	r0, r3
 80004e8:	f004 fafa 	bl	8004ae0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80004ec:	2004      	movs	r0, #4
 80004ee:	f000 fd5d 	bl	8000fac <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004f2:	2300      	movs	r3, #0
 80004f4:	603b      	str	r3, [r7, #0]
 80004f6:	4b28      	ldr	r3, [pc, #160]	; (8000598 <SystemClock_Config+0xcc>)
 80004f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004fa:	4a27      	ldr	r2, [pc, #156]	; (8000598 <SystemClock_Config+0xcc>)
 80004fc:	f023 0301 	bic.w	r3, r3, #1
 8000500:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000502:	4b25      	ldr	r3, [pc, #148]	; (8000598 <SystemClock_Config+0xcc>)
 8000504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	603b      	str	r3, [r7, #0]
 800050c:	4b23      	ldr	r3, [pc, #140]	; (800059c <SystemClock_Config+0xd0>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000514:	4a21      	ldr	r2, [pc, #132]	; (800059c <SystemClock_Config+0xd0>)
 8000516:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b1f      	ldr	r3, [pc, #124]	; (800059c <SystemClock_Config+0xd0>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000524:	603b      	str	r3, [r7, #0]
 8000526:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000528:	bf00      	nop
 800052a:	4b1c      	ldr	r3, [pc, #112]	; (800059c <SystemClock_Config+0xd0>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000536:	d1f8      	bne.n	800052a <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000538:	2302      	movs	r3, #2
 800053a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800053c:	2301      	movs	r3, #1
 800053e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000540:	2340      	movs	r3, #64	; 0x40
 8000542:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000544:	2300      	movs	r3, #0
 8000546:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800054c:	4618      	mov	r0, r3
 800054e:	f000 fd87 	bl	8001060 <HAL_RCC_OscConfig>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000558:	f000 f8a0 	bl	800069c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055c:	233f      	movs	r3, #63	; 0x3f
 800055e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2101      	movs	r1, #1
 8000580:	4618      	mov	r0, r3
 8000582:	f001 f999 	bl	80018b8 <HAL_RCC_ClockConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800058c:	f000 f886 	bl	800069c <Error_Handler>
  }
}
 8000590:	bf00      	nop
 8000592:	3770      	adds	r7, #112	; 0x70
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	58000400 	.word	0x58000400
 800059c:	58024800 	.word	0x58024800

080005a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b6:	4b2e      	ldr	r3, [pc, #184]	; (8000670 <MX_GPIO_Init+0xd0>)
 80005b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005bc:	4a2c      	ldr	r2, [pc, #176]	; (8000670 <MX_GPIO_Init+0xd0>)
 80005be:	f043 0302 	orr.w	r3, r3, #2
 80005c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005c6:	4b2a      	ldr	r3, [pc, #168]	; (8000670 <MX_GPIO_Init+0xd0>)
 80005c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005cc:	f003 0302 	and.w	r3, r3, #2
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005d4:	4b26      	ldr	r3, [pc, #152]	; (8000670 <MX_GPIO_Init+0xd0>)
 80005d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005da:	4a25      	ldr	r2, [pc, #148]	; (8000670 <MX_GPIO_Init+0xd0>)
 80005dc:	f043 0308 	orr.w	r3, r3, #8
 80005e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005e4:	4b22      	ldr	r3, [pc, #136]	; (8000670 <MX_GPIO_Init+0xd0>)
 80005e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005ea:	f003 0308 	and.w	r3, r3, #8
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GREEN_GPIO_Port, LD1_GREEN_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2101      	movs	r1, #1
 80005f6:	481f      	ldr	r0, [pc, #124]	; (8000674 <MX_GPIO_Init+0xd4>)
 80005f8:	f000 fc76 	bl	8000ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD1_SPLAT_Pin|LD3_SPLAT_Pin|LD4_SPLAT_Pin, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	f44f 41d0 	mov.w	r1, #26624	; 0x6800
 8000602:	481d      	ldr	r0, [pc, #116]	; (8000678 <MX_GPIO_Init+0xd8>)
 8000604:	f000 fc70 	bl	8000ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD5_SPLAT_GPIO_Port, LD5_SPLAT_Pin, GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800060e:	481a      	ldr	r0, [pc, #104]	; (8000678 <MX_GPIO_Init+0xd8>)
 8000610:	f000 fc6a 	bl	8000ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_GREEN_Pin */
  GPIO_InitStruct.Pin = LD1_GREEN_Pin;
 8000614:	2301      	movs	r3, #1
 8000616:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000618:	2301      	movs	r3, #1
 800061a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000620:	2300      	movs	r3, #0
 8000622:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD1_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	4619      	mov	r1, r3
 800062a:	4812      	ldr	r0, [pc, #72]	; (8000674 <MX_GPIO_Init+0xd4>)
 800062c:	f000 faac 	bl	8000b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_SPLAT_Pin LD3_SPLAT_Pin LD4_SPLAT_Pin LD5_SPLAT_Pin */
  GPIO_InitStruct.Pin = LD1_SPLAT_Pin|LD3_SPLAT_Pin|LD4_SPLAT_Pin|LD5_SPLAT_Pin;
 8000630:	f44f 4368 	mov.w	r3, #59392	; 0xe800
 8000634:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000636:	2301      	movs	r3, #1
 8000638:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	2300      	movs	r3, #0
 8000640:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	4619      	mov	r1, r3
 8000648:	480b      	ldr	r0, [pc, #44]	; (8000678 <MX_GPIO_Init+0xd8>)
 800064a:	f000 fa9d 	bl	8000b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_1_SPLAT_Pin */
  GPIO_InitStruct.Pin = SW1_1_SPLAT_Pin;
 800064e:	2304      	movs	r3, #4
 8000650:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000656:	2301      	movs	r3, #1
 8000658:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SW1_1_SPLAT_GPIO_Port, &GPIO_InitStruct);
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	4619      	mov	r1, r3
 8000660:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_GPIO_Init+0xd8>)
 8000662:	f000 fa91 	bl	8000b88 <HAL_GPIO_Init>

}
 8000666:	bf00      	nop
 8000668:	3720      	adds	r7, #32
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	58024400 	.word	0x58024400
 8000674:	58020400 	.word	0x58020400
 8000678:	58020c00 	.word	0x58020c00

0800067c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD4_SPLAT_GPIO_Port, LD4_SPLAT_Pin);
 8000684:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000688:	4803      	ldr	r0, [pc, #12]	; (8000698 <StartDefaultTask+0x1c>)
 800068a:	f000 fc46 	bl	8000f1a <HAL_GPIO_TogglePin>
    osDelay(200);
 800068e:	20c8      	movs	r0, #200	; 0xc8
 8000690:	f001 fd52 	bl	8002138 <osDelay>
	HAL_GPIO_TogglePin(LD4_SPLAT_GPIO_Port, LD4_SPLAT_Pin);
 8000694:	e7f6      	b.n	8000684 <StartDefaultTask+0x8>
 8000696:	bf00      	nop
 8000698:	58020c00 	.word	0x58020c00

0800069c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a0:	b672      	cpsid	i
}
 80006a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <Error_Handler+0x8>
	...

080006a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <HAL_MspInit+0x38>)
 80006b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006b4:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <HAL_MspInit+0x38>)
 80006b6:	f043 0302 	orr.w	r3, r3, #2
 80006ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <HAL_MspInit+0x38>)
 80006c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006c4:	f003 0302 	and.w	r3, r3, #2
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006cc:	2200      	movs	r2, #0
 80006ce:	210f      	movs	r1, #15
 80006d0:	f06f 0001 	mvn.w	r0, #1
 80006d4:	f000 fa31 	bl	8000b3a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	58024400 	.word	0x58024400

080006e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <NMI_Handler+0x4>

080006ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <HardFault_Handler+0x4>

080006f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <MemManage_Handler+0x4>

080006f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <BusFault_Handler+0x4>

080006fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <UsageFault_Handler+0x4>

08000702 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000714:	f000 f928 	bl	8000968 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000718:	f003 fd82 	bl	8004220 <xTaskGetSchedulerState>
 800071c:	4603      	mov	r3, r0
 800071e:	2b01      	cmp	r3, #1
 8000720:	d001      	beq.n	8000726 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000722:	f002 f9b9 	bl	8002a98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800072c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000764 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000730:	f7ff fdd6 	bl	80002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000736:	490d      	ldr	r1, [pc, #52]	; (800076c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000738:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800073c:	e002      	b.n	8000744 <LoopCopyDataInit>

0800073e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800073e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000742:	3304      	adds	r3, #4

08000744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000748:	d3f9      	bcc.n	800073e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074a:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800074c:	4c0a      	ldr	r4, [pc, #40]	; (8000778 <LoopFillZerobss+0x22>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000750:	e001      	b.n	8000756 <LoopFillZerobss>

08000752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000754:	3204      	adds	r2, #4

08000756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000758:	d3fb      	bcc.n	8000752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800075a:	f004 f98f 	bl	8004a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800075e:	f7ff fe59 	bl	8000414 <main>
  bx  lr
 8000762:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000764:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000768:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800076c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000770:	08004d54 	.word	0x08004d54
  ldr r2, =_sbss
 8000774:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8000778:	24004abc 	.word	0x24004abc

0800077c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800077c:	e7fe      	b.n	800077c <ADC3_IRQHandler>

0800077e <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b084      	sub	sp, #16
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d104      	bne.n	8000796 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800078c:	b672      	cpsid	i
}
 800078e:	bf00      	nop
 8000790:	f7ff ff84 	bl	800069c <Error_Handler>
 8000794:	e7fe      	b.n	8000794 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	7a1b      	ldrb	r3, [r3, #8]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d904      	bls.n	80007a8 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800079e:	b672      	cpsid	i
}
 80007a0:	bf00      	nop
 80007a2:	f7ff ff7b 	bl	800069c <Error_Handler>
 80007a6:	e7fe      	b.n	80007a6 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	7a1b      	ldrb	r3, [r3, #8]
 80007ac:	1c5a      	adds	r2, r3, #1
 80007ae:	b2d1      	uxtb	r1, r2
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	7211      	strb	r1, [r2, #8]
 80007b4:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80007b6:	f3ef 8211 	mrs	r2, BASEPRI
 80007ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007be:	f383 8811 	msr	BASEPRI, r3
 80007c2:	f3bf 8f6f 	isb	sy
 80007c6:	f3bf 8f4f 	dsb	sy
 80007ca:	60fa      	str	r2, [r7, #12]
 80007cc:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80007ce:	68fa      	ldr	r2, [r7, #12]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b084      	sub	sp, #16
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d104      	bne.n	80007f6 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80007ec:	b672      	cpsid	i
}
 80007ee:	bf00      	nop
 80007f0:	f7ff ff54 	bl	800069c <Error_Handler>
 80007f4:	e7fe      	b.n	80007f4 <stm32_lock_release+0x16>
  lock->nesting_level--;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	7a1b      	ldrb	r3, [r3, #8]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	7a1b      	ldrb	r3, [r3, #8]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d904      	bls.n	8000814 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 800080a:	b672      	cpsid	i
}
 800080c:	bf00      	nop
 800080e:	f7ff ff45 	bl	800069c <Error_Handler>
 8000812:	e7fe      	b.n	8000812 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	7a1b      	ldrb	r3, [r3, #8]
 8000818:	461a      	mov	r2, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000820:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000828:	bf00      	nop
}
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d104      	bne.n	800084a <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	bf00      	nop
 8000844:	f7ff ff2a 	bl	800069c <Error_Handler>
 8000848:	e7fe      	b.n	8000848 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ff96 	bl	800077e <stm32_lock_acquire>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d104      	bne.n	8000872 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
 800086c:	f7ff ff16 	bl	800069c <Error_Handler>
 8000870:	e7fe      	b.n	8000870 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ffb2 	bl	80007de <stm32_lock_release>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800088a:	2003      	movs	r0, #3
 800088c:	f000 f94a 	bl	8000b24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000890:	f001 f9c8 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 8000894:	4602      	mov	r2, r0
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <HAL_Init+0x68>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	0a1b      	lsrs	r3, r3, #8
 800089c:	f003 030f 	and.w	r3, r3, #15
 80008a0:	4913      	ldr	r1, [pc, #76]	; (80008f0 <HAL_Init+0x6c>)
 80008a2:	5ccb      	ldrb	r3, [r1, r3]
 80008a4:	f003 031f 	and.w	r3, r3, #31
 80008a8:	fa22 f303 	lsr.w	r3, r2, r3
 80008ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <HAL_Init+0x68>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	f003 030f 	and.w	r3, r3, #15
 80008b6:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <HAL_Init+0x6c>)
 80008b8:	5cd3      	ldrb	r3, [r2, r3]
 80008ba:	f003 031f 	and.w	r3, r3, #31
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	fa22 f303 	lsr.w	r3, r2, r3
 80008c4:	4a0b      	ldr	r2, [pc, #44]	; (80008f4 <HAL_Init+0x70>)
 80008c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80008c8:	4a0b      	ldr	r2, [pc, #44]	; (80008f8 <HAL_Init+0x74>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008ce:	200f      	movs	r0, #15
 80008d0:	f000 f814 	bl	80008fc <HAL_InitTick>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e002      	b.n	80008e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80008de:	f7ff fee3 	bl	80006a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e2:	2300      	movs	r3, #0
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	58024400 	.word	0x58024400
 80008f0:	08004cb8 	.word	0x08004cb8
 80008f4:	24000004 	.word	0x24000004
 80008f8:	24000000 	.word	0x24000000

080008fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000904:	4b15      	ldr	r3, [pc, #84]	; (800095c <HAL_InitTick+0x60>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d101      	bne.n	8000910 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800090c:	2301      	movs	r3, #1
 800090e:	e021      	b.n	8000954 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <HAL_InitTick+0x64>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <HAL_InitTick+0x60>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4619      	mov	r1, r3
 800091a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000922:	fbb2 f3f3 	udiv	r3, r2, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f921 	bl	8000b6e <HAL_SYSTICK_Config>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
 8000934:	e00e      	b.n	8000954 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2b0f      	cmp	r3, #15
 800093a:	d80a      	bhi.n	8000952 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800093c:	2200      	movs	r2, #0
 800093e:	6879      	ldr	r1, [r7, #4]
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	f000 f8f9 	bl	8000b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000948:	4a06      	ldr	r2, [pc, #24]	; (8000964 <HAL_InitTick+0x68>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800094e:	2300      	movs	r3, #0
 8000950:	e000      	b.n	8000954 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
}
 8000954:	4618      	mov	r0, r3
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	2400000c 	.word	0x2400000c
 8000960:	24000000 	.word	0x24000000
 8000964:	24000008 	.word	0x24000008

08000968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_IncTick+0x20>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	461a      	mov	r2, r3
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_IncTick+0x24>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4413      	add	r3, r2
 8000978:	4a04      	ldr	r2, [pc, #16]	; (800098c <HAL_IncTick+0x24>)
 800097a:	6013      	str	r3, [r2, #0]
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	2400000c 	.word	0x2400000c
 800098c:	24004a78 	.word	0x24004a78

08000990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return uwTick;
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <HAL_GetTick+0x14>)
 8000996:	681b      	ldr	r3, [r3, #0]
}
 8000998:	4618      	mov	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	24004a78 	.word	0x24004a78

080009a8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80009ac:	4b03      	ldr	r3, [pc, #12]	; (80009bc <HAL_GetREVID+0x14>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	0c1b      	lsrs	r3, r3, #16
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	5c001000 	.word	0x5c001000

080009c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d0:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <__NVIC_SetPriorityGrouping+0x40>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009dc:	4013      	ands	r3, r2
 80009de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <__NVIC_SetPriorityGrouping+0x44>)
 80009ea:	4313      	orrs	r3, r2
 80009ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ee:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <__NVIC_SetPriorityGrouping+0x40>)
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	60d3      	str	r3, [r2, #12]
}
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000ed00 	.word	0xe000ed00
 8000a04:	05fa0000 	.word	0x05fa0000

08000a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <__NVIC_GetPriorityGrouping+0x18>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	0a1b      	lsrs	r3, r3, #8
 8000a12:	f003 0307 	and.w	r3, r3, #7
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	6039      	str	r1, [r7, #0]
 8000a2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	db0a      	blt.n	8000a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	490c      	ldr	r1, [pc, #48]	; (8000a70 <__NVIC_SetPriority+0x4c>)
 8000a3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a42:	0112      	lsls	r2, r2, #4
 8000a44:	b2d2      	uxtb	r2, r2
 8000a46:	440b      	add	r3, r1
 8000a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a4c:	e00a      	b.n	8000a64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	4908      	ldr	r1, [pc, #32]	; (8000a74 <__NVIC_SetPriority+0x50>)
 8000a54:	88fb      	ldrh	r3, [r7, #6]
 8000a56:	f003 030f 	and.w	r3, r3, #15
 8000a5a:	3b04      	subs	r3, #4
 8000a5c:	0112      	lsls	r2, r2, #4
 8000a5e:	b2d2      	uxtb	r2, r2
 8000a60:	440b      	add	r3, r1
 8000a62:	761a      	strb	r2, [r3, #24]
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000e100 	.word	0xe000e100
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b089      	sub	sp, #36	; 0x24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a8c:	69fb      	ldr	r3, [r7, #28]
 8000a8e:	f1c3 0307 	rsb	r3, r3, #7
 8000a92:	2b04      	cmp	r3, #4
 8000a94:	bf28      	it	cs
 8000a96:	2304      	movcs	r3, #4
 8000a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	3304      	adds	r3, #4
 8000a9e:	2b06      	cmp	r3, #6
 8000aa0:	d902      	bls.n	8000aa8 <NVIC_EncodePriority+0x30>
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	3b03      	subs	r3, #3
 8000aa6:	e000      	b.n	8000aaa <NVIC_EncodePriority+0x32>
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aac:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	43da      	mvns	r2, r3
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	401a      	ands	r2, r3
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aca:	43d9      	mvns	r1, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad0:	4313      	orrs	r3, r2
         );
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3724      	adds	r7, #36	; 0x24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
	...

08000ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000af0:	d301      	bcc.n	8000af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af2:	2301      	movs	r3, #1
 8000af4:	e00f      	b.n	8000b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <SysTick_Config+0x40>)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000afe:	210f      	movs	r1, #15
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	f7ff ff8e 	bl	8000a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <SysTick_Config+0x40>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0e:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <SysTick_Config+0x40>)
 8000b10:	2207      	movs	r2, #7
 8000b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	e000e010 	.word	0xe000e010

08000b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f7ff ff47 	bl	80009c0 <__NVIC_SetPriorityGrouping>
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b086      	sub	sp, #24
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	4603      	mov	r3, r0
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607a      	str	r2, [r7, #4]
 8000b46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b48:	f7ff ff5e 	bl	8000a08 <__NVIC_GetPriorityGrouping>
 8000b4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	68b9      	ldr	r1, [r7, #8]
 8000b52:	6978      	ldr	r0, [r7, #20]
 8000b54:	f7ff ff90 	bl	8000a78 <NVIC_EncodePriority>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b5e:	4611      	mov	r1, r2
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ff5f 	bl	8000a24 <__NVIC_SetPriority>
}
 8000b66:	bf00      	nop
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff ffb2 	bl	8000ae0 <SysTick_Config>
 8000b7c:	4603      	mov	r3, r0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	; 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000b96:	4b89      	ldr	r3, [pc, #548]	; (8000dbc <HAL_GPIO_Init+0x234>)
 8000b98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000b9a:	e194      	b.n	8000ec6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba8:	4013      	ands	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f000 8186 	beq.w	8000ec0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f003 0303 	and.w	r3, r3, #3
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d005      	beq.n	8000bcc <HAL_GPIO_Init+0x44>
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f003 0303 	and.w	r3, r3, #3
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d130      	bne.n	8000c2e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	69ba      	ldr	r2, [r7, #24]
 8000be0:	4013      	ands	r3, r2
 8000be2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	68da      	ldr	r2, [r3, #12]
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	69ba      	ldr	r2, [r7, #24]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c02:	2201      	movs	r2, #1
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	091b      	lsrs	r3, r3, #4
 8000c18:	f003 0201 	and.w	r2, r3, #1
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f003 0303 	and.w	r3, r3, #3
 8000c36:	2b03      	cmp	r3, #3
 8000c38:	d017      	beq.n	8000c6a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	2203      	movs	r2, #3
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	689a      	ldr	r2, [r3, #8]
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	69ba      	ldr	r2, [r7, #24]
 8000c68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f003 0303 	and.w	r3, r3, #3
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d123      	bne.n	8000cbe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	08da      	lsrs	r2, r3, #3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	3208      	adds	r2, #8
 8000c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	220f      	movs	r2, #15
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43db      	mvns	r3, r3
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	4013      	ands	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	691a      	ldr	r2, [r3, #16]
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	f003 0307 	and.w	r3, r3, #7
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	08da      	lsrs	r2, r3, #3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3208      	adds	r2, #8
 8000cb8:	69b9      	ldr	r1, [r7, #24]
 8000cba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	2203      	movs	r2, #3
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f003 0203 	and.w	r2, r3, #3
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f000 80e0 	beq.w	8000ec0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d00:	4b2f      	ldr	r3, [pc, #188]	; (8000dc0 <HAL_GPIO_Init+0x238>)
 8000d02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d06:	4a2e      	ldr	r2, [pc, #184]	; (8000dc0 <HAL_GPIO_Init+0x238>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d10:	4b2b      	ldr	r3, [pc, #172]	; (8000dc0 <HAL_GPIO_Init+0x238>)
 8000d12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d1e:	4a29      	ldr	r2, [pc, #164]	; (8000dc4 <HAL_GPIO_Init+0x23c>)
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	089b      	lsrs	r3, r3, #2
 8000d24:	3302      	adds	r3, #2
 8000d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f003 0303 	and.w	r3, r3, #3
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	220f      	movs	r2, #15
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a20      	ldr	r2, [pc, #128]	; (8000dc8 <HAL_GPIO_Init+0x240>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d052      	beq.n	8000df0 <HAL_GPIO_Init+0x268>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a1f      	ldr	r2, [pc, #124]	; (8000dcc <HAL_GPIO_Init+0x244>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d031      	beq.n	8000db6 <HAL_GPIO_Init+0x22e>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a1e      	ldr	r2, [pc, #120]	; (8000dd0 <HAL_GPIO_Init+0x248>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d02b      	beq.n	8000db2 <HAL_GPIO_Init+0x22a>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a1d      	ldr	r2, [pc, #116]	; (8000dd4 <HAL_GPIO_Init+0x24c>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d025      	beq.n	8000dae <HAL_GPIO_Init+0x226>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a1c      	ldr	r2, [pc, #112]	; (8000dd8 <HAL_GPIO_Init+0x250>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d01f      	beq.n	8000daa <HAL_GPIO_Init+0x222>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a1b      	ldr	r2, [pc, #108]	; (8000ddc <HAL_GPIO_Init+0x254>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d019      	beq.n	8000da6 <HAL_GPIO_Init+0x21e>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a1a      	ldr	r2, [pc, #104]	; (8000de0 <HAL_GPIO_Init+0x258>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d013      	beq.n	8000da2 <HAL_GPIO_Init+0x21a>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a19      	ldr	r2, [pc, #100]	; (8000de4 <HAL_GPIO_Init+0x25c>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d00d      	beq.n	8000d9e <HAL_GPIO_Init+0x216>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a18      	ldr	r2, [pc, #96]	; (8000de8 <HAL_GPIO_Init+0x260>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d007      	beq.n	8000d9a <HAL_GPIO_Init+0x212>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a17      	ldr	r2, [pc, #92]	; (8000dec <HAL_GPIO_Init+0x264>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d101      	bne.n	8000d96 <HAL_GPIO_Init+0x20e>
 8000d92:	2309      	movs	r3, #9
 8000d94:	e02d      	b.n	8000df2 <HAL_GPIO_Init+0x26a>
 8000d96:	230a      	movs	r3, #10
 8000d98:	e02b      	b.n	8000df2 <HAL_GPIO_Init+0x26a>
 8000d9a:	2308      	movs	r3, #8
 8000d9c:	e029      	b.n	8000df2 <HAL_GPIO_Init+0x26a>
 8000d9e:	2307      	movs	r3, #7
 8000da0:	e027      	b.n	8000df2 <HAL_GPIO_Init+0x26a>
 8000da2:	2306      	movs	r3, #6
 8000da4:	e025      	b.n	8000df2 <HAL_GPIO_Init+0x26a>
 8000da6:	2305      	movs	r3, #5
 8000da8:	e023      	b.n	8000df2 <HAL_GPIO_Init+0x26a>
 8000daa:	2304      	movs	r3, #4
 8000dac:	e021      	b.n	8000df2 <HAL_GPIO_Init+0x26a>
 8000dae:	2303      	movs	r3, #3
 8000db0:	e01f      	b.n	8000df2 <HAL_GPIO_Init+0x26a>
 8000db2:	2302      	movs	r3, #2
 8000db4:	e01d      	b.n	8000df2 <HAL_GPIO_Init+0x26a>
 8000db6:	2301      	movs	r3, #1
 8000db8:	e01b      	b.n	8000df2 <HAL_GPIO_Init+0x26a>
 8000dba:	bf00      	nop
 8000dbc:	58000080 	.word	0x58000080
 8000dc0:	58024400 	.word	0x58024400
 8000dc4:	58000400 	.word	0x58000400
 8000dc8:	58020000 	.word	0x58020000
 8000dcc:	58020400 	.word	0x58020400
 8000dd0:	58020800 	.word	0x58020800
 8000dd4:	58020c00 	.word	0x58020c00
 8000dd8:	58021000 	.word	0x58021000
 8000ddc:	58021400 	.word	0x58021400
 8000de0:	58021800 	.word	0x58021800
 8000de4:	58021c00 	.word	0x58021c00
 8000de8:	58022000 	.word	0x58022000
 8000dec:	58022400 	.word	0x58022400
 8000df0:	2300      	movs	r3, #0
 8000df2:	69fa      	ldr	r2, [r7, #28]
 8000df4:	f002 0203 	and.w	r2, r2, #3
 8000df8:	0092      	lsls	r2, r2, #2
 8000dfa:	4093      	lsls	r3, r2
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e02:	4938      	ldr	r1, [pc, #224]	; (8000ee4 <HAL_GPIO_Init+0x35c>)
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	089b      	lsrs	r3, r3, #2
 8000e08:	3302      	adds	r3, #2
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000e36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d003      	beq.n	8000e64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000e64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f47f ae63 	bne.w	8000b9c <HAL_GPIO_Init+0x14>
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	bf00      	nop
 8000eda:	3724      	adds	r7, #36	; 0x24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	58000400 	.word	0x58000400

08000ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	807b      	strh	r3, [r7, #2]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ef8:	787b      	ldrb	r3, [r7, #1]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000efe:	887a      	ldrh	r2, [r7, #2]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000f04:	e003      	b.n	8000f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f06:	887b      	ldrh	r3, [r7, #2]
 8000f08:	041a      	lsls	r2, r3, #16
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	619a      	str	r2, [r3, #24]
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b085      	sub	sp, #20
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	460b      	mov	r3, r1
 8000f24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f2c:	887a      	ldrh	r2, [r7, #2]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4013      	ands	r3, r2
 8000f32:	041a      	lsls	r2, r3, #16
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	43d9      	mvns	r1, r3
 8000f38:	887b      	ldrh	r3, [r7, #2]
 8000f3a:	400b      	ands	r3, r1
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	619a      	str	r2, [r3, #24]
}
 8000f42:	bf00      	nop
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000f58:	4a08      	ldr	r2, [pc, #32]	; (8000f7c <HAL_HSEM_FastTake+0x2c>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3320      	adds	r3, #32
 8000f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f62:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <HAL_HSEM_FastTake+0x30>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d101      	bne.n	8000f6c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e000      	b.n	8000f6e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	58026400 	.word	0x58026400
 8000f80:	80000300 	.word	0x80000300

08000f84 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8000f8e:	4906      	ldr	r1, [pc, #24]	; (8000fa8 <HAL_HSEM_Release+0x24>)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	58026400 	.word	0x58026400

08000fac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8000fb4:	4b29      	ldr	r3, [pc, #164]	; (800105c <HAL_PWREx_ConfigSupply+0xb0>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	f003 0307 	and.w	r3, r3, #7
 8000fbc:	2b06      	cmp	r3, #6
 8000fbe:	d00a      	beq.n	8000fd6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000fc0:	4b26      	ldr	r3, [pc, #152]	; (800105c <HAL_PWREx_ConfigSupply+0xb0>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d001      	beq.n	8000fd2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e040      	b.n	8001054 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e03e      	b.n	8001054 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000fd6:	4b21      	ldr	r3, [pc, #132]	; (800105c <HAL_PWREx_ConfigSupply+0xb0>)
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000fde:	491f      	ldr	r1, [pc, #124]	; (800105c <HAL_PWREx_ConfigSupply+0xb0>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000fe6:	f7ff fcd3 	bl	8000990 <HAL_GetTick>
 8000fea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000fec:	e009      	b.n	8001002 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000fee:	f7ff fccf 	bl	8000990 <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ffc:	d901      	bls.n	8001002 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e028      	b.n	8001054 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001002:	4b16      	ldr	r3, [pc, #88]	; (800105c <HAL_PWREx_ConfigSupply+0xb0>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800100a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800100e:	d1ee      	bne.n	8000fee <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b1e      	cmp	r3, #30
 8001014:	d008      	beq.n	8001028 <HAL_PWREx_ConfigSupply+0x7c>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b2e      	cmp	r3, #46	; 0x2e
 800101a:	d005      	beq.n	8001028 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b1d      	cmp	r3, #29
 8001020:	d002      	beq.n	8001028 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b2d      	cmp	r3, #45	; 0x2d
 8001026:	d114      	bne.n	8001052 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001028:	f7ff fcb2 	bl	8000990 <HAL_GetTick>
 800102c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800102e:	e009      	b.n	8001044 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001030:	f7ff fcae 	bl	8000990 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800103e:	d901      	bls.n	8001044 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e007      	b.n	8001054 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_PWREx_ConfigSupply+0xb0>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001050:	d1ee      	bne.n	8001030 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	58024800 	.word	0x58024800

08001060 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08c      	sub	sp, #48	; 0x30
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d102      	bne.n	8001074 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	f000 bc1c 	b.w	80018ac <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	2b00      	cmp	r3, #0
 800107e:	f000 8087 	beq.w	8001190 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001082:	4b9e      	ldr	r3, [pc, #632]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800108c:	4b9b      	ldr	r3, [pc, #620]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 800108e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001094:	2b10      	cmp	r3, #16
 8001096:	d007      	beq.n	80010a8 <HAL_RCC_OscConfig+0x48>
 8001098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800109a:	2b18      	cmp	r3, #24
 800109c:	d110      	bne.n	80010c0 <HAL_RCC_OscConfig+0x60>
 800109e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d10b      	bne.n	80010c0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a8:	4b94      	ldr	r3, [pc, #592]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d06c      	beq.n	800118e <HAL_RCC_OscConfig+0x12e>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d168      	bne.n	800118e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e3f5      	b.n	80018ac <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c8:	d106      	bne.n	80010d8 <HAL_RCC_OscConfig+0x78>
 80010ca:	4b8c      	ldr	r3, [pc, #560]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a8b      	ldr	r2, [pc, #556]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 80010d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	e02e      	b.n	8001136 <HAL_RCC_OscConfig+0xd6>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d10c      	bne.n	80010fa <HAL_RCC_OscConfig+0x9a>
 80010e0:	4b86      	ldr	r3, [pc, #536]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a85      	ldr	r2, [pc, #532]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 80010e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4b83      	ldr	r3, [pc, #524]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a82      	ldr	r2, [pc, #520]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 80010f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	e01d      	b.n	8001136 <HAL_RCC_OscConfig+0xd6>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001102:	d10c      	bne.n	800111e <HAL_RCC_OscConfig+0xbe>
 8001104:	4b7d      	ldr	r3, [pc, #500]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a7c      	ldr	r2, [pc, #496]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 800110a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	4b7a      	ldr	r3, [pc, #488]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a79      	ldr	r2, [pc, #484]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 8001116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	e00b      	b.n	8001136 <HAL_RCC_OscConfig+0xd6>
 800111e:	4b77      	ldr	r3, [pc, #476]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a76      	ldr	r2, [pc, #472]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 8001124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	4b74      	ldr	r3, [pc, #464]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a73      	ldr	r2, [pc, #460]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 8001130:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001134:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d013      	beq.n	8001166 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800113e:	f7ff fc27 	bl	8000990 <HAL_GetTick>
 8001142:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001144:	e008      	b.n	8001158 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001146:	f7ff fc23 	bl	8000990 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b64      	cmp	r3, #100	; 0x64
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e3a9      	b.n	80018ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001158:	4b68      	ldr	r3, [pc, #416]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0f0      	beq.n	8001146 <HAL_RCC_OscConfig+0xe6>
 8001164:	e014      	b.n	8001190 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001166:	f7ff fc13 	bl	8000990 <HAL_GetTick>
 800116a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800116e:	f7ff fc0f 	bl	8000990 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b64      	cmp	r3, #100	; 0x64
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e395      	b.n	80018ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001180:	4b5e      	ldr	r3, [pc, #376]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1f0      	bne.n	800116e <HAL_RCC_OscConfig+0x10e>
 800118c:	e000      	b.n	8001190 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800118e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	2b00      	cmp	r3, #0
 800119a:	f000 80ca 	beq.w	8001332 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800119e:	4b57      	ldr	r3, [pc, #348]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80011a6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011a8:	4b54      	ldr	r3, [pc, #336]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 80011aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ac:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d007      	beq.n	80011c4 <HAL_RCC_OscConfig+0x164>
 80011b4:	6a3b      	ldr	r3, [r7, #32]
 80011b6:	2b18      	cmp	r3, #24
 80011b8:	d156      	bne.n	8001268 <HAL_RCC_OscConfig+0x208>
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d151      	bne.n	8001268 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011c4:	4b4d      	ldr	r3, [pc, #308]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d005      	beq.n	80011dc <HAL_RCC_OscConfig+0x17c>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d101      	bne.n	80011dc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e367      	b.n	80018ac <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80011dc:	4b47      	ldr	r3, [pc, #284]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f023 0219 	bic.w	r2, r3, #25
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	4944      	ldr	r1, [pc, #272]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80011ee:	f7ff fbcf 	bl	8000990 <HAL_GetTick>
 80011f2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f6:	f7ff fbcb 	bl	8000990 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e351      	b.n	80018ac <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001208:	4b3c      	ldr	r3, [pc, #240]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0f0      	beq.n	80011f6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001214:	f7ff fbc8 	bl	80009a8 <HAL_GetREVID>
 8001218:	4603      	mov	r3, r0
 800121a:	f241 0203 	movw	r2, #4099	; 0x1003
 800121e:	4293      	cmp	r3, r2
 8001220:	d817      	bhi.n	8001252 <HAL_RCC_OscConfig+0x1f2>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	2b40      	cmp	r3, #64	; 0x40
 8001228:	d108      	bne.n	800123c <HAL_RCC_OscConfig+0x1dc>
 800122a:	4b34      	ldr	r3, [pc, #208]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001232:	4a32      	ldr	r2, [pc, #200]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 8001234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001238:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800123a:	e07a      	b.n	8001332 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123c:	4b2f      	ldr	r3, [pc, #188]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	031b      	lsls	r3, r3, #12
 800124a:	492c      	ldr	r1, [pc, #176]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 800124c:	4313      	orrs	r3, r2
 800124e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001250:	e06f      	b.n	8001332 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001252:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	061b      	lsls	r3, r3, #24
 8001260:	4926      	ldr	r1, [pc, #152]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 8001262:	4313      	orrs	r3, r2
 8001264:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001266:	e064      	b.n	8001332 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d047      	beq.n	8001300 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001270:	4b22      	ldr	r3, [pc, #136]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f023 0219 	bic.w	r2, r3, #25
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	491f      	ldr	r1, [pc, #124]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 800127e:	4313      	orrs	r3, r2
 8001280:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001282:	f7ff fb85 	bl	8000990 <HAL_GetTick>
 8001286:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800128a:	f7ff fb81 	bl	8000990 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e307      	b.n	80018ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800129c:	4b17      	ldr	r3, [pc, #92]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0f0      	beq.n	800128a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a8:	f7ff fb7e 	bl	80009a8 <HAL_GetREVID>
 80012ac:	4603      	mov	r3, r0
 80012ae:	f241 0203 	movw	r2, #4099	; 0x1003
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d817      	bhi.n	80012e6 <HAL_RCC_OscConfig+0x286>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	2b40      	cmp	r3, #64	; 0x40
 80012bc:	d108      	bne.n	80012d0 <HAL_RCC_OscConfig+0x270>
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80012c6:	4a0d      	ldr	r2, [pc, #52]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 80012c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012cc:	6053      	str	r3, [r2, #4]
 80012ce:	e030      	b.n	8001332 <HAL_RCC_OscConfig+0x2d2>
 80012d0:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	031b      	lsls	r3, r3, #12
 80012de:	4907      	ldr	r1, [pc, #28]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	604b      	str	r3, [r1, #4]
 80012e4:	e025      	b.n	8001332 <HAL_RCC_OscConfig+0x2d2>
 80012e6:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	061b      	lsls	r3, r3, #24
 80012f4:	4901      	ldr	r1, [pc, #4]	; (80012fc <HAL_RCC_OscConfig+0x29c>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	604b      	str	r3, [r1, #4]
 80012fa:	e01a      	b.n	8001332 <HAL_RCC_OscConfig+0x2d2>
 80012fc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001300:	4b9e      	ldr	r3, [pc, #632]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a9d      	ldr	r2, [pc, #628]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 8001306:	f023 0301 	bic.w	r3, r3, #1
 800130a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130c:	f7ff fb40 	bl	8000990 <HAL_GetTick>
 8001310:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001314:	f7ff fb3c 	bl	8000990 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e2c2      	b.n	80018ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001326:	4b95      	ldr	r3, [pc, #596]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0304 	and.w	r3, r3, #4
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f0      	bne.n	8001314 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 80a9 	beq.w	8001492 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001340:	4b8e      	ldr	r3, [pc, #568]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001348:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800134a:	4b8c      	ldr	r3, [pc, #560]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 800134c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	2b08      	cmp	r3, #8
 8001354:	d007      	beq.n	8001366 <HAL_RCC_OscConfig+0x306>
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	2b18      	cmp	r3, #24
 800135a:	d13a      	bne.n	80013d2 <HAL_RCC_OscConfig+0x372>
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	2b01      	cmp	r3, #1
 8001364:	d135      	bne.n	80013d2 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001366:	4b85      	ldr	r3, [pc, #532]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136e:	2b00      	cmp	r3, #0
 8001370:	d005      	beq.n	800137e <HAL_RCC_OscConfig+0x31e>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	2b80      	cmp	r3, #128	; 0x80
 8001378:	d001      	beq.n	800137e <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e296      	b.n	80018ac <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800137e:	f7ff fb13 	bl	80009a8 <HAL_GetREVID>
 8001382:	4603      	mov	r3, r0
 8001384:	f241 0203 	movw	r2, #4099	; 0x1003
 8001388:	4293      	cmp	r3, r2
 800138a:	d817      	bhi.n	80013bc <HAL_RCC_OscConfig+0x35c>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	2b20      	cmp	r3, #32
 8001392:	d108      	bne.n	80013a6 <HAL_RCC_OscConfig+0x346>
 8001394:	4b79      	ldr	r3, [pc, #484]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800139c:	4a77      	ldr	r2, [pc, #476]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 800139e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80013a2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013a4:	e075      	b.n	8001492 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013a6:	4b75      	ldr	r3, [pc, #468]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a1b      	ldr	r3, [r3, #32]
 80013b2:	069b      	lsls	r3, r3, #26
 80013b4:	4971      	ldr	r1, [pc, #452]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013ba:	e06a      	b.n	8001492 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013bc:	4b6f      	ldr	r3, [pc, #444]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	061b      	lsls	r3, r3, #24
 80013ca:	496c      	ldr	r1, [pc, #432]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013d0:	e05f      	b.n	8001492 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d042      	beq.n	8001460 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80013da:	4b68      	ldr	r3, [pc, #416]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a67      	ldr	r2, [pc, #412]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 80013e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e6:	f7ff fad3 	bl	8000990 <HAL_GetTick>
 80013ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80013ee:	f7ff facf 	bl	8000990 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e255      	b.n	80018ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001400:	4b5e      	ldr	r3, [pc, #376]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0f0      	beq.n	80013ee <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800140c:	f7ff facc 	bl	80009a8 <HAL_GetREVID>
 8001410:	4603      	mov	r3, r0
 8001412:	f241 0203 	movw	r2, #4099	; 0x1003
 8001416:	4293      	cmp	r3, r2
 8001418:	d817      	bhi.n	800144a <HAL_RCC_OscConfig+0x3ea>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a1b      	ldr	r3, [r3, #32]
 800141e:	2b20      	cmp	r3, #32
 8001420:	d108      	bne.n	8001434 <HAL_RCC_OscConfig+0x3d4>
 8001422:	4b56      	ldr	r3, [pc, #344]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800142a:	4a54      	ldr	r2, [pc, #336]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 800142c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001430:	6053      	str	r3, [r2, #4]
 8001432:	e02e      	b.n	8001492 <HAL_RCC_OscConfig+0x432>
 8001434:	4b51      	ldr	r3, [pc, #324]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	069b      	lsls	r3, r3, #26
 8001442:	494e      	ldr	r1, [pc, #312]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 8001444:	4313      	orrs	r3, r2
 8001446:	604b      	str	r3, [r1, #4]
 8001448:	e023      	b.n	8001492 <HAL_RCC_OscConfig+0x432>
 800144a:	4b4c      	ldr	r3, [pc, #304]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	061b      	lsls	r3, r3, #24
 8001458:	4948      	ldr	r1, [pc, #288]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 800145a:	4313      	orrs	r3, r2
 800145c:	60cb      	str	r3, [r1, #12]
 800145e:	e018      	b.n	8001492 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001460:	4b46      	ldr	r3, [pc, #280]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a45      	ldr	r2, [pc, #276]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 8001466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800146a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146c:	f7ff fa90 	bl	8000990 <HAL_GetTick>
 8001470:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001474:	f7ff fa8c 	bl	8000990 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e212      	b.n	80018ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001486:	4b3d      	ldr	r3, [pc, #244]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	2b00      	cmp	r3, #0
 800149c:	d036      	beq.n	800150c <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d019      	beq.n	80014da <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014a6:	4b35      	ldr	r3, [pc, #212]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 80014a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014aa:	4a34      	ldr	r2, [pc, #208]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b2:	f7ff fa6d 	bl	8000990 <HAL_GetTick>
 80014b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ba:	f7ff fa69 	bl	8000990 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e1ef      	b.n	80018ac <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014cc:	4b2b      	ldr	r3, [pc, #172]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 80014ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x45a>
 80014d8:	e018      	b.n	800150c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014da:	4b28      	ldr	r3, [pc, #160]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 80014dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014de:	4a27      	ldr	r2, [pc, #156]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 80014e0:	f023 0301 	bic.w	r3, r3, #1
 80014e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e6:	f7ff fa53 	bl	8000990 <HAL_GetTick>
 80014ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ee:	f7ff fa4f 	bl	8000990 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e1d5      	b.n	80018ac <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001500:	4b1e      	ldr	r3, [pc, #120]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 8001502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1f0      	bne.n	80014ee <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0320 	and.w	r3, r3, #32
 8001514:	2b00      	cmp	r3, #0
 8001516:	d039      	beq.n	800158c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d019      	beq.n	8001554 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a15      	ldr	r2, [pc, #84]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 8001526:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800152a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800152c:	f7ff fa30 	bl	8000990 <HAL_GetTick>
 8001530:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001534:	f7ff fa2c 	bl	8000990 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e1b2      	b.n	80018ac <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001546:	4b0d      	ldr	r3, [pc, #52]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0x4d4>
 8001552:	e01b      	b.n	800158c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a08      	ldr	r2, [pc, #32]	; (800157c <HAL_RCC_OscConfig+0x51c>)
 800155a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800155e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001560:	f7ff fa16 	bl	8000990 <HAL_GetTick>
 8001564:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001566:	e00b      	b.n	8001580 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001568:	f7ff fa12 	bl	8000990 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d904      	bls.n	8001580 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e198      	b.n	80018ac <HAL_RCC_OscConfig+0x84c>
 800157a:	bf00      	nop
 800157c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001580:	4ba3      	ldr	r3, [pc, #652]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1ed      	bne.n	8001568 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b00      	cmp	r3, #0
 8001596:	f000 8081 	beq.w	800169c <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800159a:	4b9e      	ldr	r3, [pc, #632]	; (8001814 <HAL_RCC_OscConfig+0x7b4>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a9d      	ldr	r2, [pc, #628]	; (8001814 <HAL_RCC_OscConfig+0x7b4>)
 80015a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80015a6:	f7ff f9f3 	bl	8000990 <HAL_GetTick>
 80015aa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80015ae:	f7ff f9ef 	bl	8000990 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b64      	cmp	r3, #100	; 0x64
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e175      	b.n	80018ac <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015c0:	4b94      	ldr	r3, [pc, #592]	; (8001814 <HAL_RCC_OscConfig+0x7b4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d106      	bne.n	80015e2 <HAL_RCC_OscConfig+0x582>
 80015d4:	4b8e      	ldr	r3, [pc, #568]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 80015d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d8:	4a8d      	ldr	r2, [pc, #564]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6713      	str	r3, [r2, #112]	; 0x70
 80015e0:	e02d      	b.n	800163e <HAL_RCC_OscConfig+0x5de>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10c      	bne.n	8001604 <HAL_RCC_OscConfig+0x5a4>
 80015ea:	4b89      	ldr	r3, [pc, #548]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 80015ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ee:	4a88      	ldr	r2, [pc, #544]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 80015f0:	f023 0301 	bic.w	r3, r3, #1
 80015f4:	6713      	str	r3, [r2, #112]	; 0x70
 80015f6:	4b86      	ldr	r3, [pc, #536]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 80015f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fa:	4a85      	ldr	r2, [pc, #532]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 80015fc:	f023 0304 	bic.w	r3, r3, #4
 8001600:	6713      	str	r3, [r2, #112]	; 0x70
 8001602:	e01c      	b.n	800163e <HAL_RCC_OscConfig+0x5de>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2b05      	cmp	r3, #5
 800160a:	d10c      	bne.n	8001626 <HAL_RCC_OscConfig+0x5c6>
 800160c:	4b80      	ldr	r3, [pc, #512]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 800160e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001610:	4a7f      	ldr	r2, [pc, #508]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 8001612:	f043 0304 	orr.w	r3, r3, #4
 8001616:	6713      	str	r3, [r2, #112]	; 0x70
 8001618:	4b7d      	ldr	r3, [pc, #500]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 800161a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161c:	4a7c      	ldr	r2, [pc, #496]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6713      	str	r3, [r2, #112]	; 0x70
 8001624:	e00b      	b.n	800163e <HAL_RCC_OscConfig+0x5de>
 8001626:	4b7a      	ldr	r3, [pc, #488]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 8001628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162a:	4a79      	ldr	r2, [pc, #484]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 800162c:	f023 0301 	bic.w	r3, r3, #1
 8001630:	6713      	str	r3, [r2, #112]	; 0x70
 8001632:	4b77      	ldr	r3, [pc, #476]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 8001634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001636:	4a76      	ldr	r2, [pc, #472]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 8001638:	f023 0304 	bic.w	r3, r3, #4
 800163c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d015      	beq.n	8001672 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001646:	f7ff f9a3 	bl	8000990 <HAL_GetTick>
 800164a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800164c:	e00a      	b.n	8001664 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800164e:	f7ff f99f 	bl	8000990 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	f241 3288 	movw	r2, #5000	; 0x1388
 800165c:	4293      	cmp	r3, r2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e123      	b.n	80018ac <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001664:	4b6a      	ldr	r3, [pc, #424]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 8001666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0ee      	beq.n	800164e <HAL_RCC_OscConfig+0x5ee>
 8001670:	e014      	b.n	800169c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001672:	f7ff f98d 	bl	8000990 <HAL_GetTick>
 8001676:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001678:	e00a      	b.n	8001690 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800167a:	f7ff f989 	bl	8000990 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	f241 3288 	movw	r2, #5000	; 0x1388
 8001688:	4293      	cmp	r3, r2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e10d      	b.n	80018ac <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001690:	4b5f      	ldr	r3, [pc, #380]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 8001692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1ee      	bne.n	800167a <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 8102 	beq.w	80018aa <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80016a6:	4b5a      	ldr	r3, [pc, #360]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016ae:	2b18      	cmp	r3, #24
 80016b0:	f000 80bd 	beq.w	800182e <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	f040 8095 	bne.w	80017e8 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016be:	4b54      	ldr	r3, [pc, #336]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a53      	ldr	r2, [pc, #332]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 80016c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ca:	f7ff f961 	bl	8000990 <HAL_GetTick>
 80016ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d2:	f7ff f95d 	bl	8000990 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e0e3      	b.n	80018ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016e4:	4b4a      	ldr	r3, [pc, #296]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f0      	bne.n	80016d2 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016f0:	4b47      	ldr	r3, [pc, #284]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 80016f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016f4:	4b48      	ldr	r3, [pc, #288]	; (8001818 <HAL_RCC_OscConfig+0x7b8>)
 80016f6:	4013      	ands	r3, r2
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001700:	0112      	lsls	r2, r2, #4
 8001702:	430a      	orrs	r2, r1
 8001704:	4942      	ldr	r1, [pc, #264]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 8001706:	4313      	orrs	r3, r2
 8001708:	628b      	str	r3, [r1, #40]	; 0x28
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	3b01      	subs	r3, #1
 8001710:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001718:	3b01      	subs	r3, #1
 800171a:	025b      	lsls	r3, r3, #9
 800171c:	b29b      	uxth	r3, r3
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001724:	3b01      	subs	r3, #1
 8001726:	041b      	lsls	r3, r3, #16
 8001728:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001732:	3b01      	subs	r3, #1
 8001734:	061b      	lsls	r3, r3, #24
 8001736:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800173a:	4935      	ldr	r1, [pc, #212]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 800173c:	4313      	orrs	r3, r2
 800173e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001740:	4b33      	ldr	r3, [pc, #204]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 8001742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001744:	4a32      	ldr	r2, [pc, #200]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 8001746:	f023 0301 	bic.w	r3, r3, #1
 800174a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800174c:	4b30      	ldr	r3, [pc, #192]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 800174e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001750:	4b32      	ldr	r3, [pc, #200]	; (800181c <HAL_RCC_OscConfig+0x7bc>)
 8001752:	4013      	ands	r3, r2
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001758:	00d2      	lsls	r2, r2, #3
 800175a:	492d      	ldr	r1, [pc, #180]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 800175c:	4313      	orrs	r3, r2
 800175e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001760:	4b2b      	ldr	r3, [pc, #172]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 8001762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001764:	f023 020c 	bic.w	r2, r3, #12
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	4928      	ldr	r1, [pc, #160]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 800176e:	4313      	orrs	r3, r2
 8001770:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001772:	4b27      	ldr	r3, [pc, #156]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 8001774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001776:	f023 0202 	bic.w	r2, r3, #2
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	4924      	ldr	r1, [pc, #144]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 8001780:	4313      	orrs	r3, r2
 8001782:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001784:	4b22      	ldr	r3, [pc, #136]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 8001786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001788:	4a21      	ldr	r2, [pc, #132]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 800178a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001790:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 8001792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001794:	4a1e      	ldr	r2, [pc, #120]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 8001796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800179a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800179c:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 800179e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a0:	4a1b      	ldr	r2, [pc, #108]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 80017a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80017a8:	4b19      	ldr	r3, [pc, #100]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 80017aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ac:	4a18      	ldr	r2, [pc, #96]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b4:	4b16      	ldr	r3, [pc, #88]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a15      	ldr	r2, [pc, #84]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 80017ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c0:	f7ff f8e6 	bl	8000990 <HAL_GetTick>
 80017c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c8:	f7ff f8e2 	bl	8000990 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e068      	b.n	80018ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017da:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0x768>
 80017e6:	e060      	b.n	80018aa <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a08      	ldr	r2, [pc, #32]	; (8001810 <HAL_RCC_OscConfig+0x7b0>)
 80017ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f4:	f7ff f8cc 	bl	8000990 <HAL_GetTick>
 80017f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017fa:	e011      	b.n	8001820 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017fc:	f7ff f8c8 	bl	8000990 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d90a      	bls.n	8001820 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e04e      	b.n	80018ac <HAL_RCC_OscConfig+0x84c>
 800180e:	bf00      	nop
 8001810:	58024400 	.word	0x58024400
 8001814:	58024800 	.word	0x58024800
 8001818:	fffffc0c 	.word	0xfffffc0c
 800181c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001820:	4b24      	ldr	r3, [pc, #144]	; (80018b4 <HAL_RCC_OscConfig+0x854>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1e7      	bne.n	80017fc <HAL_RCC_OscConfig+0x79c>
 800182c:	e03d      	b.n	80018aa <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800182e:	4b21      	ldr	r3, [pc, #132]	; (80018b4 <HAL_RCC_OscConfig+0x854>)
 8001830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001832:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001834:	4b1f      	ldr	r3, [pc, #124]	; (80018b4 <HAL_RCC_OscConfig+0x854>)
 8001836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001838:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	2b01      	cmp	r3, #1
 8001840:	d031      	beq.n	80018a6 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	f003 0203 	and.w	r2, r3, #3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800184c:	429a      	cmp	r2, r3
 800184e:	d12a      	bne.n	80018a6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	091b      	lsrs	r3, r3, #4
 8001854:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185c:	429a      	cmp	r2, r3
 800185e:	d122      	bne.n	80018a6 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800186c:	429a      	cmp	r2, r3
 800186e:	d11a      	bne.n	80018a6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	0a5b      	lsrs	r3, r3, #9
 8001874:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800187c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800187e:	429a      	cmp	r2, r3
 8001880:	d111      	bne.n	80018a6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	0c1b      	lsrs	r3, r3, #16
 8001886:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001890:	429a      	cmp	r2, r3
 8001892:	d108      	bne.n	80018a6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	0e1b      	lsrs	r3, r3, #24
 8001898:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d001      	beq.n	80018aa <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e000      	b.n	80018ac <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3730      	adds	r7, #48	; 0x30
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	58024400 	.word	0x58024400

080018b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e19c      	b.n	8001c06 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018cc:	4b8a      	ldr	r3, [pc, #552]	; (8001af8 <HAL_RCC_ClockConfig+0x240>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 030f 	and.w	r3, r3, #15
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d910      	bls.n	80018fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018da:	4b87      	ldr	r3, [pc, #540]	; (8001af8 <HAL_RCC_ClockConfig+0x240>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 020f 	bic.w	r2, r3, #15
 80018e2:	4985      	ldr	r1, [pc, #532]	; (8001af8 <HAL_RCC_ClockConfig+0x240>)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ea:	4b83      	ldr	r3, [pc, #524]	; (8001af8 <HAL_RCC_ClockConfig+0x240>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e184      	b.n	8001c06 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d010      	beq.n	800192a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	691a      	ldr	r2, [r3, #16]
 800190c:	4b7b      	ldr	r3, [pc, #492]	; (8001afc <HAL_RCC_ClockConfig+0x244>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001914:	429a      	cmp	r2, r3
 8001916:	d908      	bls.n	800192a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001918:	4b78      	ldr	r3, [pc, #480]	; (8001afc <HAL_RCC_ClockConfig+0x244>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	4975      	ldr	r1, [pc, #468]	; (8001afc <HAL_RCC_ClockConfig+0x244>)
 8001926:	4313      	orrs	r3, r2
 8001928:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	2b00      	cmp	r3, #0
 8001934:	d010      	beq.n	8001958 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695a      	ldr	r2, [r3, #20]
 800193a:	4b70      	ldr	r3, [pc, #448]	; (8001afc <HAL_RCC_ClockConfig+0x244>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001942:	429a      	cmp	r2, r3
 8001944:	d908      	bls.n	8001958 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001946:	4b6d      	ldr	r3, [pc, #436]	; (8001afc <HAL_RCC_ClockConfig+0x244>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	496a      	ldr	r1, [pc, #424]	; (8001afc <HAL_RCC_ClockConfig+0x244>)
 8001954:	4313      	orrs	r3, r2
 8001956:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0310 	and.w	r3, r3, #16
 8001960:	2b00      	cmp	r3, #0
 8001962:	d010      	beq.n	8001986 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	699a      	ldr	r2, [r3, #24]
 8001968:	4b64      	ldr	r3, [pc, #400]	; (8001afc <HAL_RCC_ClockConfig+0x244>)
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001970:	429a      	cmp	r2, r3
 8001972:	d908      	bls.n	8001986 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001974:	4b61      	ldr	r3, [pc, #388]	; (8001afc <HAL_RCC_ClockConfig+0x244>)
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	495e      	ldr	r1, [pc, #376]	; (8001afc <HAL_RCC_ClockConfig+0x244>)
 8001982:	4313      	orrs	r3, r2
 8001984:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0320 	and.w	r3, r3, #32
 800198e:	2b00      	cmp	r3, #0
 8001990:	d010      	beq.n	80019b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69da      	ldr	r2, [r3, #28]
 8001996:	4b59      	ldr	r3, [pc, #356]	; (8001afc <HAL_RCC_ClockConfig+0x244>)
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800199e:	429a      	cmp	r2, r3
 80019a0:	d908      	bls.n	80019b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80019a2:	4b56      	ldr	r3, [pc, #344]	; (8001afc <HAL_RCC_ClockConfig+0x244>)
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	4953      	ldr	r1, [pc, #332]	; (8001afc <HAL_RCC_ClockConfig+0x244>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d010      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68da      	ldr	r2, [r3, #12]
 80019c4:	4b4d      	ldr	r3, [pc, #308]	; (8001afc <HAL_RCC_ClockConfig+0x244>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f003 030f 	and.w	r3, r3, #15
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d908      	bls.n	80019e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d0:	4b4a      	ldr	r3, [pc, #296]	; (8001afc <HAL_RCC_ClockConfig+0x244>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f023 020f 	bic.w	r2, r3, #15
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4947      	ldr	r1, [pc, #284]	; (8001afc <HAL_RCC_ClockConfig+0x244>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d055      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80019ee:	4b43      	ldr	r3, [pc, #268]	; (8001afc <HAL_RCC_ClockConfig+0x244>)
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	4940      	ldr	r1, [pc, #256]	; (8001afc <HAL_RCC_ClockConfig+0x244>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d107      	bne.n	8001a18 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a08:	4b3c      	ldr	r3, [pc, #240]	; (8001afc <HAL_RCC_ClockConfig+0x244>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d121      	bne.n	8001a58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0f6      	b.n	8001c06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b03      	cmp	r3, #3
 8001a1e:	d107      	bne.n	8001a30 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a20:	4b36      	ldr	r3, [pc, #216]	; (8001afc <HAL_RCC_ClockConfig+0x244>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d115      	bne.n	8001a58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e0ea      	b.n	8001c06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d107      	bne.n	8001a48 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a38:	4b30      	ldr	r3, [pc, #192]	; (8001afc <HAL_RCC_ClockConfig+0x244>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d109      	bne.n	8001a58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e0de      	b.n	8001c06 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a48:	4b2c      	ldr	r3, [pc, #176]	; (8001afc <HAL_RCC_ClockConfig+0x244>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0d6      	b.n	8001c06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a58:	4b28      	ldr	r3, [pc, #160]	; (8001afc <HAL_RCC_ClockConfig+0x244>)
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	f023 0207 	bic.w	r2, r3, #7
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	4925      	ldr	r1, [pc, #148]	; (8001afc <HAL_RCC_ClockConfig+0x244>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6a:	f7fe ff91 	bl	8000990 <HAL_GetTick>
 8001a6e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a70:	e00a      	b.n	8001a88 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a72:	f7fe ff8d 	bl	8000990 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e0be      	b.n	8001c06 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a88:	4b1c      	ldr	r3, [pc, #112]	; (8001afc <HAL_RCC_ClockConfig+0x244>)
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d1eb      	bne.n	8001a72 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d010      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	4b14      	ldr	r3, [pc, #80]	; (8001afc <HAL_RCC_ClockConfig+0x244>)
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d208      	bcs.n	8001ac8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab6:	4b11      	ldr	r3, [pc, #68]	; (8001afc <HAL_RCC_ClockConfig+0x244>)
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	f023 020f 	bic.w	r2, r3, #15
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	490e      	ldr	r1, [pc, #56]	; (8001afc <HAL_RCC_ClockConfig+0x244>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_RCC_ClockConfig+0x240>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 030f 	and.w	r3, r3, #15
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d214      	bcs.n	8001b00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad6:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <HAL_RCC_ClockConfig+0x240>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f023 020f 	bic.w	r2, r3, #15
 8001ade:	4906      	ldr	r1, [pc, #24]	; (8001af8 <HAL_RCC_ClockConfig+0x240>)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae6:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <HAL_RCC_ClockConfig+0x240>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d005      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e086      	b.n	8001c06 <HAL_RCC_ClockConfig+0x34e>
 8001af8:	52002000 	.word	0x52002000
 8001afc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d010      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691a      	ldr	r2, [r3, #16]
 8001b10:	4b3f      	ldr	r3, [pc, #252]	; (8001c10 <HAL_RCC_ClockConfig+0x358>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d208      	bcs.n	8001b2e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b1c:	4b3c      	ldr	r3, [pc, #240]	; (8001c10 <HAL_RCC_ClockConfig+0x358>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	4939      	ldr	r1, [pc, #228]	; (8001c10 <HAL_RCC_ClockConfig+0x358>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d010      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	695a      	ldr	r2, [r3, #20]
 8001b3e:	4b34      	ldr	r3, [pc, #208]	; (8001c10 <HAL_RCC_ClockConfig+0x358>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d208      	bcs.n	8001b5c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b4a:	4b31      	ldr	r3, [pc, #196]	; (8001c10 <HAL_RCC_ClockConfig+0x358>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	492e      	ldr	r1, [pc, #184]	; (8001c10 <HAL_RCC_ClockConfig+0x358>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0310 	and.w	r3, r3, #16
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d010      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	699a      	ldr	r2, [r3, #24]
 8001b6c:	4b28      	ldr	r3, [pc, #160]	; (8001c10 <HAL_RCC_ClockConfig+0x358>)
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d208      	bcs.n	8001b8a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b78:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <HAL_RCC_ClockConfig+0x358>)
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	4922      	ldr	r1, [pc, #136]	; (8001c10 <HAL_RCC_ClockConfig+0x358>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0320 	and.w	r3, r3, #32
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d010      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69da      	ldr	r2, [r3, #28]
 8001b9a:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <HAL_RCC_ClockConfig+0x358>)
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d208      	bcs.n	8001bb8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <HAL_RCC_ClockConfig+0x358>)
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	4917      	ldr	r1, [pc, #92]	; (8001c10 <HAL_RCC_ClockConfig+0x358>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bb8:	f000 f834 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <HAL_RCC_ClockConfig+0x358>)
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	0a1b      	lsrs	r3, r3, #8
 8001bc4:	f003 030f 	and.w	r3, r3, #15
 8001bc8:	4912      	ldr	r1, [pc, #72]	; (8001c14 <HAL_RCC_ClockConfig+0x35c>)
 8001bca:	5ccb      	ldrb	r3, [r1, r3]
 8001bcc:	f003 031f 	and.w	r3, r3, #31
 8001bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <HAL_RCC_ClockConfig+0x358>)
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	4a0d      	ldr	r2, [pc, #52]	; (8001c14 <HAL_RCC_ClockConfig+0x35c>)
 8001be0:	5cd3      	ldrb	r3, [r2, r3]
 8001be2:	f003 031f 	and.w	r3, r3, #31
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bec:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <HAL_RCC_ClockConfig+0x360>)
 8001bee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bf0:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <HAL_RCC_ClockConfig+0x364>)
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_RCC_ClockConfig+0x368>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fe7e 	bl	80008fc <HAL_InitTick>
 8001c00:	4603      	mov	r3, r0
 8001c02:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	58024400 	.word	0x58024400
 8001c14:	08004cb8 	.word	0x08004cb8
 8001c18:	24000004 	.word	0x24000004
 8001c1c:	24000000 	.word	0x24000000
 8001c20:	24000008 	.word	0x24000008

08001c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c2a:	4bb3      	ldr	r3, [pc, #716]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c32:	2b18      	cmp	r3, #24
 8001c34:	f200 8155 	bhi.w	8001ee2 <HAL_RCC_GetSysClockFreq+0x2be>
 8001c38:	a201      	add	r2, pc, #4	; (adr r2, 8001c40 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3e:	bf00      	nop
 8001c40:	08001ca5 	.word	0x08001ca5
 8001c44:	08001ee3 	.word	0x08001ee3
 8001c48:	08001ee3 	.word	0x08001ee3
 8001c4c:	08001ee3 	.word	0x08001ee3
 8001c50:	08001ee3 	.word	0x08001ee3
 8001c54:	08001ee3 	.word	0x08001ee3
 8001c58:	08001ee3 	.word	0x08001ee3
 8001c5c:	08001ee3 	.word	0x08001ee3
 8001c60:	08001ccb 	.word	0x08001ccb
 8001c64:	08001ee3 	.word	0x08001ee3
 8001c68:	08001ee3 	.word	0x08001ee3
 8001c6c:	08001ee3 	.word	0x08001ee3
 8001c70:	08001ee3 	.word	0x08001ee3
 8001c74:	08001ee3 	.word	0x08001ee3
 8001c78:	08001ee3 	.word	0x08001ee3
 8001c7c:	08001ee3 	.word	0x08001ee3
 8001c80:	08001cd1 	.word	0x08001cd1
 8001c84:	08001ee3 	.word	0x08001ee3
 8001c88:	08001ee3 	.word	0x08001ee3
 8001c8c:	08001ee3 	.word	0x08001ee3
 8001c90:	08001ee3 	.word	0x08001ee3
 8001c94:	08001ee3 	.word	0x08001ee3
 8001c98:	08001ee3 	.word	0x08001ee3
 8001c9c:	08001ee3 	.word	0x08001ee3
 8001ca0:	08001cd7 	.word	0x08001cd7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ca4:	4b94      	ldr	r3, [pc, #592]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0320 	and.w	r3, r3, #32
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d009      	beq.n	8001cc4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001cb0:	4b91      	ldr	r3, [pc, #580]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	08db      	lsrs	r3, r3, #3
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	4a90      	ldr	r2, [pc, #576]	; (8001efc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001cc2:	e111      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001cc4:	4b8d      	ldr	r3, [pc, #564]	; (8001efc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001cc6:	61bb      	str	r3, [r7, #24]
    break;
 8001cc8:	e10e      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001cca:	4b8d      	ldr	r3, [pc, #564]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001ccc:	61bb      	str	r3, [r7, #24]
    break;
 8001cce:	e10b      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001cd0:	4b8c      	ldr	r3, [pc, #560]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001cd2:	61bb      	str	r3, [r7, #24]
    break;
 8001cd4:	e108      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001cd6:	4b88      	ldr	r3, [pc, #544]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001ce0:	4b85      	ldr	r3, [pc, #532]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce4:	091b      	lsrs	r3, r3, #4
 8001ce6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001cec:	4b82      	ldr	r3, [pc, #520]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001cf6:	4b80      	ldr	r3, [pc, #512]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfa:	08db      	lsrs	r3, r3, #3
 8001cfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	fb02 f303 	mul.w	r3, r2, r3
 8001d06:	ee07 3a90 	vmov	s15, r3
 8001d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d0e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 80e1 	beq.w	8001edc <HAL_RCC_GetSysClockFreq+0x2b8>
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	f000 8083 	beq.w	8001e28 <HAL_RCC_GetSysClockFreq+0x204>
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	f200 80a1 	bhi.w	8001e6c <HAL_RCC_GetSysClockFreq+0x248>
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_RCC_GetSysClockFreq+0x114>
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d056      	beq.n	8001de4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001d36:	e099      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d38:	4b6f      	ldr	r3, [pc, #444]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d02d      	beq.n	8001da0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001d44:	4b6c      	ldr	r3, [pc, #432]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	08db      	lsrs	r3, r3, #3
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	4a6b      	ldr	r2, [pc, #428]	; (8001efc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d50:	fa22 f303 	lsr.w	r3, r2, r3
 8001d54:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	ee07 3a90 	vmov	s15, r3
 8001d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	ee07 3a90 	vmov	s15, r3
 8001d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d6e:	4b62      	ldr	r3, [pc, #392]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d76:	ee07 3a90 	vmov	s15, r3
 8001d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d82:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001f08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001d9e:	e087      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	ee07 3a90 	vmov	s15, r3
 8001da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001daa:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001f0c <HAL_RCC_GetSysClockFreq+0x2e8>
 8001dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001db2:	4b51      	ldr	r3, [pc, #324]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dba:	ee07 3a90 	vmov	s15, r3
 8001dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dc6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001f08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001de2:	e065      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	ee07 3a90 	vmov	s15, r3
 8001dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001f10 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001df6:	4b40      	ldr	r3, [pc, #256]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dfe:	ee07 3a90 	vmov	s15, r3
 8001e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e06:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e0a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001f08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e26:	e043      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	ee07 3a90 	vmov	s15, r3
 8001e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e32:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001f14 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e3a:	4b2f      	ldr	r3, [pc, #188]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e42:	ee07 3a90 	vmov	s15, r3
 8001e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e4e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001f08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e6a:	e021      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	ee07 3a90 	vmov	s15, r3
 8001e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e76:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001f10 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e86:	ee07 3a90 	vmov	s15, r3
 8001e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e92:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001f08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001eae:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001eb0:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb4:	0a5b      	lsrs	r3, r3, #9
 8001eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001eba:	3301      	adds	r3, #1
 8001ebc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	ee07 3a90 	vmov	s15, r3
 8001ec4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ec8:	edd7 6a07 	vldr	s13, [r7, #28]
 8001ecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ed4:	ee17 3a90 	vmov	r3, s15
 8001ed8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001eda:	e005      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	61bb      	str	r3, [r7, #24]
    break;
 8001ee0:	e002      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001ee2:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001ee4:	61bb      	str	r3, [r7, #24]
    break;
 8001ee6:	bf00      	nop
  }

  return sysclockfreq;
 8001ee8:	69bb      	ldr	r3, [r7, #24]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3724      	adds	r7, #36	; 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	58024400 	.word	0x58024400
 8001efc:	03d09000 	.word	0x03d09000
 8001f00:	003d0900 	.word	0x003d0900
 8001f04:	017d7840 	.word	0x017d7840
 8001f08:	46000000 	.word	0x46000000
 8001f0c:	4c742400 	.word	0x4c742400
 8001f10:	4a742400 	.word	0x4a742400
 8001f14:	4bbebc20 	.word	0x4bbebc20

08001f18 <__NVIC_SetPriority>:
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	6039      	str	r1, [r7, #0]
 8001f22:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	db0a      	blt.n	8001f42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	490c      	ldr	r1, [pc, #48]	; (8001f64 <__NVIC_SetPriority+0x4c>)
 8001f32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f36:	0112      	lsls	r2, r2, #4
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f40:	e00a      	b.n	8001f58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4908      	ldr	r1, [pc, #32]	; (8001f68 <__NVIC_SetPriority+0x50>)
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	3b04      	subs	r3, #4
 8001f50:	0112      	lsls	r2, r2, #4
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	440b      	add	r3, r1
 8001f56:	761a      	strb	r2, [r3, #24]
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000e100 	.word	0xe000e100
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001f70:	2100      	movs	r1, #0
 8001f72:	f06f 0004 	mvn.w	r0, #4
 8001f76:	f7ff ffcf 	bl	8001f18 <__NVIC_SetPriority>
#endif
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f86:	f3ef 8305 	mrs	r3, IPSR
 8001f8a:	603b      	str	r3, [r7, #0]
  return(result);
 8001f8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001f92:	f06f 0305 	mvn.w	r3, #5
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	e00c      	b.n	8001fb4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <osKernelInitialize+0x44>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d105      	bne.n	8001fae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <osKernelInitialize+0x44>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	607b      	str	r3, [r7, #4]
 8001fac:	e002      	b.n	8001fb4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001fae:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001fb4:	687b      	ldr	r3, [r7, #4]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	240000a0 	.word	0x240000a0

08001fc8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fce:	f3ef 8305 	mrs	r3, IPSR
 8001fd2:	603b      	str	r3, [r7, #0]
  return(result);
 8001fd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001fda:	f06f 0305 	mvn.w	r3, #5
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	e010      	b.n	8002004 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <osKernelStart+0x48>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d109      	bne.n	8001ffe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001fea:	f7ff ffbf 	bl	8001f6c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <osKernelStart+0x48>)
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001ff4:	f001 fcb8 	bl	8003968 <vTaskStartScheduler>
      stat = osOK;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	e002      	b.n	8002004 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8002002:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002004:	687b      	ldr	r3, [r7, #4]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	240000a0 	.word	0x240000a0

08002014 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002014:	b580      	push	{r7, lr}
 8002016:	b08e      	sub	sp, #56	; 0x38
 8002018:	af04      	add	r7, sp, #16
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002020:	2300      	movs	r3, #0
 8002022:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002024:	f3ef 8305 	mrs	r3, IPSR
 8002028:	617b      	str	r3, [r7, #20]
  return(result);
 800202a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800202c:	2b00      	cmp	r3, #0
 800202e:	d17e      	bne.n	800212e <osThreadNew+0x11a>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d07b      	beq.n	800212e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800203a:	2318      	movs	r3, #24
 800203c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800203e:	2300      	movs	r3, #0
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002042:	f04f 33ff 	mov.w	r3, #4294967295
 8002046:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d045      	beq.n	80020da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <osThreadNew+0x48>
        name = attr->name;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d008      	beq.n	8002082 <osThreadNew+0x6e>
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	2b38      	cmp	r3, #56	; 0x38
 8002074:	d805      	bhi.n	8002082 <osThreadNew+0x6e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <osThreadNew+0x72>
        return (NULL);
 8002082:	2300      	movs	r3, #0
 8002084:	e054      	b.n	8002130 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	089b      	lsrs	r3, r3, #2
 8002094:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00e      	beq.n	80020bc <osThreadNew+0xa8>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	2bbb      	cmp	r3, #187	; 0xbb
 80020a4:	d90a      	bls.n	80020bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d006      	beq.n	80020bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d002      	beq.n	80020bc <osThreadNew+0xa8>
        mem = 1;
 80020b6:	2301      	movs	r3, #1
 80020b8:	61bb      	str	r3, [r7, #24]
 80020ba:	e010      	b.n	80020de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10c      	bne.n	80020de <osThreadNew+0xca>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d108      	bne.n	80020de <osThreadNew+0xca>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d104      	bne.n	80020de <osThreadNew+0xca>
          mem = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61bb      	str	r3, [r7, #24]
 80020d8:	e001      	b.n	80020de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d110      	bne.n	8002106 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80020ec:	9202      	str	r2, [sp, #8]
 80020ee:	9301      	str	r3, [sp, #4]
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	6a3a      	ldr	r2, [r7, #32]
 80020f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f001 fa48 	bl	8003590 <xTaskCreateStatic>
 8002100:	4603      	mov	r3, r0
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	e013      	b.n	800212e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d110      	bne.n	800212e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	b29a      	uxth	r2, r3
 8002110:	f107 0310 	add.w	r3, r7, #16
 8002114:	9301      	str	r3, [sp, #4]
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f001 fa93 	bl	800364a <xTaskCreate>
 8002124:	4603      	mov	r3, r0
 8002126:	2b01      	cmp	r3, #1
 8002128:	d001      	beq.n	800212e <osThreadNew+0x11a>
            hTask = NULL;
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800212e:	693b      	ldr	r3, [r7, #16]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3728      	adds	r7, #40	; 0x28
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002140:	f3ef 8305 	mrs	r3, IPSR
 8002144:	60bb      	str	r3, [r7, #8]
  return(result);
 8002146:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <osDelay+0x1c>
    stat = osErrorISR;
 800214c:	f06f 0305 	mvn.w	r3, #5
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	e007      	b.n	8002164 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <osDelay+0x2c>
      vTaskDelay(ticks);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f001 fbce 	bl	8003900 <vTaskDelay>
    }
  }

  return (stat);
 8002164:	68fb      	ldr	r3, [r7, #12]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4a07      	ldr	r2, [pc, #28]	; (800219c <vApplicationGetIdleTaskMemory+0x2c>)
 8002180:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	4a06      	ldr	r2, [pc, #24]	; (80021a0 <vApplicationGetIdleTaskMemory+0x30>)
 8002186:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2280      	movs	r2, #128	; 0x80
 800218c:	601a      	str	r2, [r3, #0]
}
 800218e:	bf00      	nop
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	240000a4 	.word	0x240000a4
 80021a0:	24000160 	.word	0x24000160

080021a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4a07      	ldr	r2, [pc, #28]	; (80021d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80021b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	4a06      	ldr	r2, [pc, #24]	; (80021d4 <vApplicationGetTimerTaskMemory+0x30>)
 80021ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021c2:	601a      	str	r2, [r3, #0]
}
 80021c4:	bf00      	nop
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	24000360 	.word	0x24000360
 80021d4:	2400041c 	.word	0x2400041c

080021d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08a      	sub	sp, #40	; 0x28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80021e4:	f001 fc30 	bl	8003a48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80021e8:	4b5b      	ldr	r3, [pc, #364]	; (8002358 <pvPortMalloc+0x180>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80021f0:	f000 f920 	bl	8002434 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80021f4:	4b59      	ldr	r3, [pc, #356]	; (800235c <pvPortMalloc+0x184>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f040 8093 	bne.w	8002328 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d01d      	beq.n	8002244 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002208:	2208      	movs	r2, #8
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	2b00      	cmp	r3, #0
 8002218:	d014      	beq.n	8002244 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f023 0307 	bic.w	r3, r3, #7
 8002220:	3308      	adds	r3, #8
 8002222:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <pvPortMalloc+0x6c>
	__asm volatile
 800222e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002232:	f383 8811 	msr	BASEPRI, r3
 8002236:	f3bf 8f6f 	isb	sy
 800223a:	f3bf 8f4f 	dsb	sy
 800223e:	617b      	str	r3, [r7, #20]
}
 8002240:	bf00      	nop
 8002242:	e7fe      	b.n	8002242 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d06e      	beq.n	8002328 <pvPortMalloc+0x150>
 800224a:	4b45      	ldr	r3, [pc, #276]	; (8002360 <pvPortMalloc+0x188>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	429a      	cmp	r2, r3
 8002252:	d869      	bhi.n	8002328 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002254:	4b43      	ldr	r3, [pc, #268]	; (8002364 <pvPortMalloc+0x18c>)
 8002256:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002258:	4b42      	ldr	r3, [pc, #264]	; (8002364 <pvPortMalloc+0x18c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800225e:	e004      	b.n	800226a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	429a      	cmp	r2, r3
 8002272:	d903      	bls.n	800227c <pvPortMalloc+0xa4>
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1f1      	bne.n	8002260 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800227c:	4b36      	ldr	r3, [pc, #216]	; (8002358 <pvPortMalloc+0x180>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002282:	429a      	cmp	r2, r3
 8002284:	d050      	beq.n	8002328 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2208      	movs	r2, #8
 800228c:	4413      	add	r3, r2
 800228e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	6a3b      	ldr	r3, [r7, #32]
 8002296:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	1ad2      	subs	r2, r2, r3
 80022a0:	2308      	movs	r3, #8
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d91f      	bls.n	80022e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80022a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <pvPortMalloc+0xf8>
	__asm volatile
 80022ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022be:	f383 8811 	msr	BASEPRI, r3
 80022c2:	f3bf 8f6f 	isb	sy
 80022c6:	f3bf 8f4f 	dsb	sy
 80022ca:	613b      	str	r3, [r7, #16]
}
 80022cc:	bf00      	nop
 80022ce:	e7fe      	b.n	80022ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	1ad2      	subs	r2, r2, r3
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80022e2:	69b8      	ldr	r0, [r7, #24]
 80022e4:	f000 f908 	bl	80024f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80022e8:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <pvPortMalloc+0x188>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	4a1b      	ldr	r2, [pc, #108]	; (8002360 <pvPortMalloc+0x188>)
 80022f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80022f6:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <pvPortMalloc+0x188>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <pvPortMalloc+0x190>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d203      	bcs.n	800230a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002302:	4b17      	ldr	r3, [pc, #92]	; (8002360 <pvPortMalloc+0x188>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a18      	ldr	r2, [pc, #96]	; (8002368 <pvPortMalloc+0x190>)
 8002308:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	4b13      	ldr	r3, [pc, #76]	; (800235c <pvPortMalloc+0x184>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	431a      	orrs	r2, r3
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800231e:	4b13      	ldr	r3, [pc, #76]	; (800236c <pvPortMalloc+0x194>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	3301      	adds	r3, #1
 8002324:	4a11      	ldr	r2, [pc, #68]	; (800236c <pvPortMalloc+0x194>)
 8002326:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002328:	f001 fb9c 	bl	8003a64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <pvPortMalloc+0x174>
	__asm volatile
 8002336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800233a:	f383 8811 	msr	BASEPRI, r3
 800233e:	f3bf 8f6f 	isb	sy
 8002342:	f3bf 8f4f 	dsb	sy
 8002346:	60fb      	str	r3, [r7, #12]
}
 8002348:	bf00      	nop
 800234a:	e7fe      	b.n	800234a <pvPortMalloc+0x172>
	return pvReturn;
 800234c:	69fb      	ldr	r3, [r7, #28]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3728      	adds	r7, #40	; 0x28
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	24004424 	.word	0x24004424
 800235c:	24004438 	.word	0x24004438
 8002360:	24004428 	.word	0x24004428
 8002364:	2400441c 	.word	0x2400441c
 8002368:	2400442c 	.word	0x2400442c
 800236c:	24004430 	.word	0x24004430

08002370 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d04d      	beq.n	800241e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002382:	2308      	movs	r3, #8
 8002384:	425b      	negs	r3, r3
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	4413      	add	r3, r2
 800238a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	4b24      	ldr	r3, [pc, #144]	; (8002428 <vPortFree+0xb8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4013      	ands	r3, r2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10a      	bne.n	80023b4 <vPortFree+0x44>
	__asm volatile
 800239e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a2:	f383 8811 	msr	BASEPRI, r3
 80023a6:	f3bf 8f6f 	isb	sy
 80023aa:	f3bf 8f4f 	dsb	sy
 80023ae:	60fb      	str	r3, [r7, #12]
}
 80023b0:	bf00      	nop
 80023b2:	e7fe      	b.n	80023b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00a      	beq.n	80023d2 <vPortFree+0x62>
	__asm volatile
 80023bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c0:	f383 8811 	msr	BASEPRI, r3
 80023c4:	f3bf 8f6f 	isb	sy
 80023c8:	f3bf 8f4f 	dsb	sy
 80023cc:	60bb      	str	r3, [r7, #8]
}
 80023ce:	bf00      	nop
 80023d0:	e7fe      	b.n	80023d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	4b14      	ldr	r3, [pc, #80]	; (8002428 <vPortFree+0xb8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4013      	ands	r3, r2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d01e      	beq.n	800241e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d11a      	bne.n	800241e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <vPortFree+0xb8>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	401a      	ands	r2, r3
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80023f8:	f001 fb26 	bl	8003a48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	4b0a      	ldr	r3, [pc, #40]	; (800242c <vPortFree+0xbc>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4413      	add	r3, r2
 8002406:	4a09      	ldr	r2, [pc, #36]	; (800242c <vPortFree+0xbc>)
 8002408:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800240a:	6938      	ldr	r0, [r7, #16]
 800240c:	f000 f874 	bl	80024f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002410:	4b07      	ldr	r3, [pc, #28]	; (8002430 <vPortFree+0xc0>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	3301      	adds	r3, #1
 8002416:	4a06      	ldr	r2, [pc, #24]	; (8002430 <vPortFree+0xc0>)
 8002418:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800241a:	f001 fb23 	bl	8003a64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800241e:	bf00      	nop
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	24004438 	.word	0x24004438
 800242c:	24004428 	.word	0x24004428
 8002430:	24004434 	.word	0x24004434

08002434 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800243a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800243e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002440:	4b27      	ldr	r3, [pc, #156]	; (80024e0 <prvHeapInit+0xac>)
 8002442:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00c      	beq.n	8002468 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	3307      	adds	r3, #7
 8002452:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f023 0307 	bic.w	r3, r3, #7
 800245a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	4a1f      	ldr	r2, [pc, #124]	; (80024e0 <prvHeapInit+0xac>)
 8002464:	4413      	add	r3, r2
 8002466:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800246c:	4a1d      	ldr	r2, [pc, #116]	; (80024e4 <prvHeapInit+0xb0>)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002472:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <prvHeapInit+0xb0>)
 8002474:	2200      	movs	r2, #0
 8002476:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	4413      	add	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002480:	2208      	movs	r2, #8
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1a9b      	subs	r3, r3, r2
 8002486:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f023 0307 	bic.w	r3, r3, #7
 800248e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4a15      	ldr	r2, [pc, #84]	; (80024e8 <prvHeapInit+0xb4>)
 8002494:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002496:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <prvHeapInit+0xb4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2200      	movs	r2, #0
 800249c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800249e:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <prvHeapInit+0xb4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	1ad2      	subs	r2, r2, r3
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <prvHeapInit+0xb4>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <prvHeapInit+0xb8>)
 80024c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	4a09      	ldr	r2, [pc, #36]	; (80024f0 <prvHeapInit+0xbc>)
 80024ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80024cc:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <prvHeapInit+0xc0>)
 80024ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80024d2:	601a      	str	r2, [r3, #0]
}
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	2400081c 	.word	0x2400081c
 80024e4:	2400441c 	.word	0x2400441c
 80024e8:	24004424 	.word	0x24004424
 80024ec:	2400442c 	.word	0x2400442c
 80024f0:	24004428 	.word	0x24004428
 80024f4:	24004438 	.word	0x24004438

080024f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002500:	4b28      	ldr	r3, [pc, #160]	; (80025a4 <prvInsertBlockIntoFreeList+0xac>)
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	e002      	b.n	800250c <prvInsertBlockIntoFreeList+0x14>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	429a      	cmp	r2, r3
 8002514:	d8f7      	bhi.n	8002506 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	4413      	add	r3, r2
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	429a      	cmp	r2, r3
 8002526:	d108      	bne.n	800253a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	441a      	add	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	441a      	add	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d118      	bne.n	8002580 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <prvInsertBlockIntoFreeList+0xb0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d00d      	beq.n	8002576 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	441a      	add	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	e008      	b.n	8002588 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002576:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <prvInsertBlockIntoFreeList+0xb0>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	e003      	b.n	8002588 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	429a      	cmp	r2, r3
 800258e:	d002      	beq.n	8002596 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	2400441c 	.word	0x2400441c
 80025a8:	24004424 	.word	0x24004424

080025ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f103 0208 	add.w	r2, r3, #8
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f04f 32ff 	mov.w	r2, #4294967295
 80025c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f103 0208 	add.w	r2, r3, #8
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f103 0208 	add.w	r2, r3, #8
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002606:	b480      	push	{r7}
 8002608:	b085      	sub	sp, #20
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	601a      	str	r2, [r3, #0]
}
 8002642:	bf00      	nop
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800264e:	b480      	push	{r7}
 8002650:	b085      	sub	sp, #20
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002664:	d103      	bne.n	800266e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	e00c      	b.n	8002688 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3308      	adds	r3, #8
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	e002      	b.n	800267c <vListInsert+0x2e>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	429a      	cmp	r2, r3
 8002686:	d2f6      	bcs.n	8002676 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	601a      	str	r2, [r3, #0]
}
 80026b4:	bf00      	nop
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6892      	ldr	r2, [r2, #8]
 80026d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6852      	ldr	r2, [r2, #4]
 80026e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d103      	bne.n	80026f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	1e5a      	subs	r2, r3, #1
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	3b04      	subs	r3, #4
 8002724:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800272c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	3b04      	subs	r3, #4
 8002732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f023 0201 	bic.w	r2, r3, #1
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	3b04      	subs	r3, #4
 8002742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002744:	4a0c      	ldr	r2, [pc, #48]	; (8002778 <pxPortInitialiseStack+0x64>)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	3b14      	subs	r3, #20
 800274e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	3b04      	subs	r3, #4
 800275a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f06f 0202 	mvn.w	r2, #2
 8002762:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	3b20      	subs	r3, #32
 8002768:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800276a:	68fb      	ldr	r3, [r7, #12]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	0800277d 	.word	0x0800277d

0800277c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002782:	2300      	movs	r3, #0
 8002784:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002786:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <prvTaskExitError+0x54>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278e:	d00a      	beq.n	80027a6 <prvTaskExitError+0x2a>
	__asm volatile
 8002790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002794:	f383 8811 	msr	BASEPRI, r3
 8002798:	f3bf 8f6f 	isb	sy
 800279c:	f3bf 8f4f 	dsb	sy
 80027a0:	60fb      	str	r3, [r7, #12]
}
 80027a2:	bf00      	nop
 80027a4:	e7fe      	b.n	80027a4 <prvTaskExitError+0x28>
	__asm volatile
 80027a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027aa:	f383 8811 	msr	BASEPRI, r3
 80027ae:	f3bf 8f6f 	isb	sy
 80027b2:	f3bf 8f4f 	dsb	sy
 80027b6:	60bb      	str	r3, [r7, #8]
}
 80027b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80027ba:	bf00      	nop
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0fc      	beq.n	80027bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80027c2:	bf00      	nop
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	24000010 	.word	0x24000010
	...

080027e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80027e0:	4b07      	ldr	r3, [pc, #28]	; (8002800 <pxCurrentTCBConst2>)
 80027e2:	6819      	ldr	r1, [r3, #0]
 80027e4:	6808      	ldr	r0, [r1, #0]
 80027e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027ea:	f380 8809 	msr	PSP, r0
 80027ee:	f3bf 8f6f 	isb	sy
 80027f2:	f04f 0000 	mov.w	r0, #0
 80027f6:	f380 8811 	msr	BASEPRI, r0
 80027fa:	4770      	bx	lr
 80027fc:	f3af 8000 	nop.w

08002800 <pxCurrentTCBConst2>:
 8002800:	24004444 	.word	0x24004444
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002804:	bf00      	nop
 8002806:	bf00      	nop

08002808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002808:	4808      	ldr	r0, [pc, #32]	; (800282c <prvPortStartFirstTask+0x24>)
 800280a:	6800      	ldr	r0, [r0, #0]
 800280c:	6800      	ldr	r0, [r0, #0]
 800280e:	f380 8808 	msr	MSP, r0
 8002812:	f04f 0000 	mov.w	r0, #0
 8002816:	f380 8814 	msr	CONTROL, r0
 800281a:	b662      	cpsie	i
 800281c:	b661      	cpsie	f
 800281e:	f3bf 8f4f 	dsb	sy
 8002822:	f3bf 8f6f 	isb	sy
 8002826:	df00      	svc	0
 8002828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800282a:	bf00      	nop
 800282c:	e000ed08 	.word	0xe000ed08

08002830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002836:	4b46      	ldr	r3, [pc, #280]	; (8002950 <xPortStartScheduler+0x120>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a46      	ldr	r2, [pc, #280]	; (8002954 <xPortStartScheduler+0x124>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d10a      	bne.n	8002856 <xPortStartScheduler+0x26>
	__asm volatile
 8002840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002844:	f383 8811 	msr	BASEPRI, r3
 8002848:	f3bf 8f6f 	isb	sy
 800284c:	f3bf 8f4f 	dsb	sy
 8002850:	613b      	str	r3, [r7, #16]
}
 8002852:	bf00      	nop
 8002854:	e7fe      	b.n	8002854 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002856:	4b3e      	ldr	r3, [pc, #248]	; (8002950 <xPortStartScheduler+0x120>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a3f      	ldr	r2, [pc, #252]	; (8002958 <xPortStartScheduler+0x128>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d10a      	bne.n	8002876 <xPortStartScheduler+0x46>
	__asm volatile
 8002860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002864:	f383 8811 	msr	BASEPRI, r3
 8002868:	f3bf 8f6f 	isb	sy
 800286c:	f3bf 8f4f 	dsb	sy
 8002870:	60fb      	str	r3, [r7, #12]
}
 8002872:	bf00      	nop
 8002874:	e7fe      	b.n	8002874 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002876:	4b39      	ldr	r3, [pc, #228]	; (800295c <xPortStartScheduler+0x12c>)
 8002878:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	b2db      	uxtb	r3, r3
 8002880:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	22ff      	movs	r2, #255	; 0xff
 8002886:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	b2db      	uxtb	r3, r3
 800288e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002890:	78fb      	ldrb	r3, [r7, #3]
 8002892:	b2db      	uxtb	r3, r3
 8002894:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002898:	b2da      	uxtb	r2, r3
 800289a:	4b31      	ldr	r3, [pc, #196]	; (8002960 <xPortStartScheduler+0x130>)
 800289c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800289e:	4b31      	ldr	r3, [pc, #196]	; (8002964 <xPortStartScheduler+0x134>)
 80028a0:	2207      	movs	r2, #7
 80028a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80028a4:	e009      	b.n	80028ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80028a6:	4b2f      	ldr	r3, [pc, #188]	; (8002964 <xPortStartScheduler+0x134>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	4a2d      	ldr	r2, [pc, #180]	; (8002964 <xPortStartScheduler+0x134>)
 80028ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80028b0:	78fb      	ldrb	r3, [r7, #3]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80028ba:	78fb      	ldrb	r3, [r7, #3]
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c2:	2b80      	cmp	r3, #128	; 0x80
 80028c4:	d0ef      	beq.n	80028a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80028c6:	4b27      	ldr	r3, [pc, #156]	; (8002964 <xPortStartScheduler+0x134>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f1c3 0307 	rsb	r3, r3, #7
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d00a      	beq.n	80028e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80028d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d6:	f383 8811 	msr	BASEPRI, r3
 80028da:	f3bf 8f6f 	isb	sy
 80028de:	f3bf 8f4f 	dsb	sy
 80028e2:	60bb      	str	r3, [r7, #8]
}
 80028e4:	bf00      	nop
 80028e6:	e7fe      	b.n	80028e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80028e8:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <xPortStartScheduler+0x134>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	021b      	lsls	r3, r3, #8
 80028ee:	4a1d      	ldr	r2, [pc, #116]	; (8002964 <xPortStartScheduler+0x134>)
 80028f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80028f2:	4b1c      	ldr	r3, [pc, #112]	; (8002964 <xPortStartScheduler+0x134>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028fa:	4a1a      	ldr	r2, [pc, #104]	; (8002964 <xPortStartScheduler+0x134>)
 80028fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	b2da      	uxtb	r2, r3
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002906:	4b18      	ldr	r3, [pc, #96]	; (8002968 <xPortStartScheduler+0x138>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a17      	ldr	r2, [pc, #92]	; (8002968 <xPortStartScheduler+0x138>)
 800290c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002910:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002912:	4b15      	ldr	r3, [pc, #84]	; (8002968 <xPortStartScheduler+0x138>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a14      	ldr	r2, [pc, #80]	; (8002968 <xPortStartScheduler+0x138>)
 8002918:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800291c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800291e:	f000 f8dd 	bl	8002adc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002922:	4b12      	ldr	r3, [pc, #72]	; (800296c <xPortStartScheduler+0x13c>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002928:	f000 f8fc 	bl	8002b24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800292c:	4b10      	ldr	r3, [pc, #64]	; (8002970 <xPortStartScheduler+0x140>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a0f      	ldr	r2, [pc, #60]	; (8002970 <xPortStartScheduler+0x140>)
 8002932:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002936:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002938:	f7ff ff66 	bl	8002808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800293c:	f001 f9fa 	bl	8003d34 <vTaskSwitchContext>
	prvTaskExitError();
 8002940:	f7ff ff1c 	bl	800277c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	e000ed00 	.word	0xe000ed00
 8002954:	410fc271 	.word	0x410fc271
 8002958:	410fc270 	.word	0x410fc270
 800295c:	e000e400 	.word	0xe000e400
 8002960:	2400443c 	.word	0x2400443c
 8002964:	24004440 	.word	0x24004440
 8002968:	e000ed20 	.word	0xe000ed20
 800296c:	24000010 	.word	0x24000010
 8002970:	e000ef34 	.word	0xe000ef34

08002974 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
	__asm volatile
 800297a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297e:	f383 8811 	msr	BASEPRI, r3
 8002982:	f3bf 8f6f 	isb	sy
 8002986:	f3bf 8f4f 	dsb	sy
 800298a:	607b      	str	r3, [r7, #4]
}
 800298c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800298e:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <vPortEnterCritical+0x58>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	3301      	adds	r3, #1
 8002994:	4a0d      	ldr	r2, [pc, #52]	; (80029cc <vPortEnterCritical+0x58>)
 8002996:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002998:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <vPortEnterCritical+0x58>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d10f      	bne.n	80029c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <vPortEnterCritical+0x5c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80029aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ae:	f383 8811 	msr	BASEPRI, r3
 80029b2:	f3bf 8f6f 	isb	sy
 80029b6:	f3bf 8f4f 	dsb	sy
 80029ba:	603b      	str	r3, [r7, #0]
}
 80029bc:	bf00      	nop
 80029be:	e7fe      	b.n	80029be <vPortEnterCritical+0x4a>
	}
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	24000010 	.word	0x24000010
 80029d0:	e000ed04 	.word	0xe000ed04

080029d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80029da:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <vPortExitCritical+0x50>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10a      	bne.n	80029f8 <vPortExitCritical+0x24>
	__asm volatile
 80029e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e6:	f383 8811 	msr	BASEPRI, r3
 80029ea:	f3bf 8f6f 	isb	sy
 80029ee:	f3bf 8f4f 	dsb	sy
 80029f2:	607b      	str	r3, [r7, #4]
}
 80029f4:	bf00      	nop
 80029f6:	e7fe      	b.n	80029f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80029f8:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <vPortExitCritical+0x50>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	3b01      	subs	r3, #1
 80029fe:	4a09      	ldr	r2, [pc, #36]	; (8002a24 <vPortExitCritical+0x50>)
 8002a00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002a02:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <vPortExitCritical+0x50>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d105      	bne.n	8002a16 <vPortExitCritical+0x42>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	f383 8811 	msr	BASEPRI, r3
}
 8002a14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	24000010 	.word	0x24000010
	...

08002a30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002a30:	f3ef 8009 	mrs	r0, PSP
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <pxCurrentTCBConst>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	f01e 0f10 	tst.w	lr, #16
 8002a40:	bf08      	it	eq
 8002a42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002a46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a4a:	6010      	str	r0, [r2, #0]
 8002a4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002a50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002a54:	f380 8811 	msr	BASEPRI, r0
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	f3bf 8f6f 	isb	sy
 8002a60:	f001 f968 	bl	8003d34 <vTaskSwitchContext>
 8002a64:	f04f 0000 	mov.w	r0, #0
 8002a68:	f380 8811 	msr	BASEPRI, r0
 8002a6c:	bc09      	pop	{r0, r3}
 8002a6e:	6819      	ldr	r1, [r3, #0]
 8002a70:	6808      	ldr	r0, [r1, #0]
 8002a72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a76:	f01e 0f10 	tst.w	lr, #16
 8002a7a:	bf08      	it	eq
 8002a7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002a80:	f380 8809 	msr	PSP, r0
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	f3af 8000 	nop.w

08002a90 <pxCurrentTCBConst>:
 8002a90:	24004444 	.word	0x24004444
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002a94:	bf00      	nop
 8002a96:	bf00      	nop

08002a98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8002a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa2:	f383 8811 	msr	BASEPRI, r3
 8002aa6:	f3bf 8f6f 	isb	sy
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	607b      	str	r3, [r7, #4]
}
 8002ab0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002ab2:	f001 f885 	bl	8003bc0 <xTaskIncrementTick>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <xPortSysTickHandler+0x40>)
 8002abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	f383 8811 	msr	BASEPRI, r3
}
 8002ace:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	e000ed04 	.word	0xe000ed04

08002adc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <vPortSetupTimerInterrupt+0x34>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002ae6:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <vPortSetupTimerInterrupt+0x38>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002aec:	4b0a      	ldr	r3, [pc, #40]	; (8002b18 <vPortSetupTimerInterrupt+0x3c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a0a      	ldr	r2, [pc, #40]	; (8002b1c <vPortSetupTimerInterrupt+0x40>)
 8002af2:	fba2 2303 	umull	r2, r3, r2, r3
 8002af6:	099b      	lsrs	r3, r3, #6
 8002af8:	4a09      	ldr	r2, [pc, #36]	; (8002b20 <vPortSetupTimerInterrupt+0x44>)
 8002afa:	3b01      	subs	r3, #1
 8002afc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002afe:	4b04      	ldr	r3, [pc, #16]	; (8002b10 <vPortSetupTimerInterrupt+0x34>)
 8002b00:	2207      	movs	r2, #7
 8002b02:	601a      	str	r2, [r3, #0]
}
 8002b04:	bf00      	nop
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	e000e010 	.word	0xe000e010
 8002b14:	e000e018 	.word	0xe000e018
 8002b18:	24000000 	.word	0x24000000
 8002b1c:	10624dd3 	.word	0x10624dd3
 8002b20:	e000e014 	.word	0xe000e014

08002b24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002b24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002b34 <vPortEnableVFP+0x10>
 8002b28:	6801      	ldr	r1, [r0, #0]
 8002b2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002b2e:	6001      	str	r1, [r0, #0]
 8002b30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002b32:	bf00      	nop
 8002b34:	e000ed88 	.word	0xe000ed88

08002b38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002b3e:	f3ef 8305 	mrs	r3, IPSR
 8002b42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b0f      	cmp	r3, #15
 8002b48:	d914      	bls.n	8002b74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002b4a:	4a17      	ldr	r2, [pc, #92]	; (8002ba8 <vPortValidateInterruptPriority+0x70>)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4413      	add	r3, r2
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002b54:	4b15      	ldr	r3, [pc, #84]	; (8002bac <vPortValidateInterruptPriority+0x74>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	7afa      	ldrb	r2, [r7, #11]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d20a      	bcs.n	8002b74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8002b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b62:	f383 8811 	msr	BASEPRI, r3
 8002b66:	f3bf 8f6f 	isb	sy
 8002b6a:	f3bf 8f4f 	dsb	sy
 8002b6e:	607b      	str	r3, [r7, #4]
}
 8002b70:	bf00      	nop
 8002b72:	e7fe      	b.n	8002b72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002b74:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <vPortValidateInterruptPriority+0x78>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b7c:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <vPortValidateInterruptPriority+0x7c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d90a      	bls.n	8002b9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8002b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b88:	f383 8811 	msr	BASEPRI, r3
 8002b8c:	f3bf 8f6f 	isb	sy
 8002b90:	f3bf 8f4f 	dsb	sy
 8002b94:	603b      	str	r3, [r7, #0]
}
 8002b96:	bf00      	nop
 8002b98:	e7fe      	b.n	8002b98 <vPortValidateInterruptPriority+0x60>
	}
 8002b9a:	bf00      	nop
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	e000e3f0 	.word	0xe000e3f0
 8002bac:	2400443c 	.word	0x2400443c
 8002bb0:	e000ed0c 	.word	0xe000ed0c
 8002bb4:	24004440 	.word	0x24004440

08002bb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10a      	bne.n	8002be2 <xQueueGenericReset+0x2a>
	__asm volatile
 8002bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd0:	f383 8811 	msr	BASEPRI, r3
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	60bb      	str	r3, [r7, #8]
}
 8002bde:	bf00      	nop
 8002be0:	e7fe      	b.n	8002be0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002be2:	f7ff fec7 	bl	8002974 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bee:	68f9      	ldr	r1, [r7, #12]
 8002bf0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bf2:	fb01 f303 	mul.w	r3, r1, r3
 8002bf6:	441a      	add	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c12:	3b01      	subs	r3, #1
 8002c14:	68f9      	ldr	r1, [r7, #12]
 8002c16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	441a      	add	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	22ff      	movs	r2, #255	; 0xff
 8002c26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	22ff      	movs	r2, #255	; 0xff
 8002c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d114      	bne.n	8002c62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d01a      	beq.n	8002c76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	3310      	adds	r3, #16
 8002c44:	4618      	mov	r0, r3
 8002c46:	f001 f929 	bl	8003e9c <xTaskRemoveFromEventList>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d012      	beq.n	8002c76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c50:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <xQueueGenericReset+0xcc>)
 8002c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	f3bf 8f4f 	dsb	sy
 8002c5c:	f3bf 8f6f 	isb	sy
 8002c60:	e009      	b.n	8002c76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	3310      	adds	r3, #16
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff fca0 	bl	80025ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	3324      	adds	r3, #36	; 0x24
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fc9b 	bl	80025ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c76:	f7ff fead 	bl	80029d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c7a:	2301      	movs	r3, #1
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	e000ed04 	.word	0xe000ed04

08002c88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08e      	sub	sp, #56	; 0x38
 8002c8c:	af02      	add	r7, sp, #8
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10a      	bne.n	8002cb2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca0:	f383 8811 	msr	BASEPRI, r3
 8002ca4:	f3bf 8f6f 	isb	sy
 8002ca8:	f3bf 8f4f 	dsb	sy
 8002cac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002cae:	bf00      	nop
 8002cb0:	e7fe      	b.n	8002cb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10a      	bne.n	8002cce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cbc:	f383 8811 	msr	BASEPRI, r3
 8002cc0:	f3bf 8f6f 	isb	sy
 8002cc4:	f3bf 8f4f 	dsb	sy
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002cca:	bf00      	nop
 8002ccc:	e7fe      	b.n	8002ccc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <xQueueGenericCreateStatic+0x52>
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <xQueueGenericCreateStatic+0x56>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <xQueueGenericCreateStatic+0x58>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10a      	bne.n	8002cfa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce8:	f383 8811 	msr	BASEPRI, r3
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	f3bf 8f4f 	dsb	sy
 8002cf4:	623b      	str	r3, [r7, #32]
}
 8002cf6:	bf00      	nop
 8002cf8:	e7fe      	b.n	8002cf8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d102      	bne.n	8002d06 <xQueueGenericCreateStatic+0x7e>
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <xQueueGenericCreateStatic+0x82>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <xQueueGenericCreateStatic+0x84>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10a      	bne.n	8002d26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d14:	f383 8811 	msr	BASEPRI, r3
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	61fb      	str	r3, [r7, #28]
}
 8002d22:	bf00      	nop
 8002d24:	e7fe      	b.n	8002d24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002d26:	2350      	movs	r3, #80	; 0x50
 8002d28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2b50      	cmp	r3, #80	; 0x50
 8002d2e:	d00a      	beq.n	8002d46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d34:	f383 8811 	msr	BASEPRI, r3
 8002d38:	f3bf 8f6f 	isb	sy
 8002d3c:	f3bf 8f4f 	dsb	sy
 8002d40:	61bb      	str	r3, [r7, #24]
}
 8002d42:	bf00      	nop
 8002d44:	e7fe      	b.n	8002d44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002d46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00d      	beq.n	8002d6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	4613      	mov	r3, r2
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	68b9      	ldr	r1, [r7, #8]
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 f805 	bl	8002d78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3730      	adds	r7, #48	; 0x30
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
 8002d84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d103      	bne.n	8002d94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	e002      	b.n	8002d9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002da6:	2101      	movs	r1, #1
 8002da8:	69b8      	ldr	r0, [r7, #24]
 8002daa:	f7ff ff05 	bl	8002bb8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	78fa      	ldrb	r2, [r7, #3]
 8002db2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002db6:	bf00      	nop
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
	...

08002dc0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08e      	sub	sp, #56	; 0x38
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10a      	bne.n	8002df2 <xQueueGenericSend+0x32>
	__asm volatile
 8002ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de0:	f383 8811 	msr	BASEPRI, r3
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002dee:	bf00      	nop
 8002df0:	e7fe      	b.n	8002df0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d103      	bne.n	8002e00 <xQueueGenericSend+0x40>
 8002df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <xQueueGenericSend+0x44>
 8002e00:	2301      	movs	r3, #1
 8002e02:	e000      	b.n	8002e06 <xQueueGenericSend+0x46>
 8002e04:	2300      	movs	r3, #0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10a      	bne.n	8002e20 <xQueueGenericSend+0x60>
	__asm volatile
 8002e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0e:	f383 8811 	msr	BASEPRI, r3
 8002e12:	f3bf 8f6f 	isb	sy
 8002e16:	f3bf 8f4f 	dsb	sy
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e1c:	bf00      	nop
 8002e1e:	e7fe      	b.n	8002e1e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d103      	bne.n	8002e2e <xQueueGenericSend+0x6e>
 8002e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <xQueueGenericSend+0x72>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <xQueueGenericSend+0x74>
 8002e32:	2300      	movs	r3, #0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10a      	bne.n	8002e4e <xQueueGenericSend+0x8e>
	__asm volatile
 8002e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3c:	f383 8811 	msr	BASEPRI, r3
 8002e40:	f3bf 8f6f 	isb	sy
 8002e44:	f3bf 8f4f 	dsb	sy
 8002e48:	623b      	str	r3, [r7, #32]
}
 8002e4a:	bf00      	nop
 8002e4c:	e7fe      	b.n	8002e4c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e4e:	f001 f9e7 	bl	8004220 <xTaskGetSchedulerState>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d102      	bne.n	8002e5e <xQueueGenericSend+0x9e>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <xQueueGenericSend+0xa2>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <xQueueGenericSend+0xa4>
 8002e62:	2300      	movs	r3, #0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10a      	bne.n	8002e7e <xQueueGenericSend+0xbe>
	__asm volatile
 8002e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6c:	f383 8811 	msr	BASEPRI, r3
 8002e70:	f3bf 8f6f 	isb	sy
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	61fb      	str	r3, [r7, #28]
}
 8002e7a:	bf00      	nop
 8002e7c:	e7fe      	b.n	8002e7c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e7e:	f7ff fd79 	bl	8002974 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d302      	bcc.n	8002e94 <xQueueGenericSend+0xd4>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d129      	bne.n	8002ee8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	68b9      	ldr	r1, [r7, #8]
 8002e98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e9a:	f000 fa0b 	bl	80032b4 <prvCopyDataToQueue>
 8002e9e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d010      	beq.n	8002eca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eaa:	3324      	adds	r3, #36	; 0x24
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 fff5 	bl	8003e9c <xTaskRemoveFromEventList>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d013      	beq.n	8002ee0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002eb8:	4b3f      	ldr	r3, [pc, #252]	; (8002fb8 <xQueueGenericSend+0x1f8>)
 8002eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	f3bf 8f4f 	dsb	sy
 8002ec4:	f3bf 8f6f 	isb	sy
 8002ec8:	e00a      	b.n	8002ee0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d007      	beq.n	8002ee0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002ed0:	4b39      	ldr	r3, [pc, #228]	; (8002fb8 <xQueueGenericSend+0x1f8>)
 8002ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	f3bf 8f4f 	dsb	sy
 8002edc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ee0:	f7ff fd78 	bl	80029d4 <vPortExitCritical>
				return pdPASS;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e063      	b.n	8002fb0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d103      	bne.n	8002ef6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002eee:	f7ff fd71 	bl	80029d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	e05c      	b.n	8002fb0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d106      	bne.n	8002f0a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002efc:	f107 0314 	add.w	r3, r7, #20
 8002f00:	4618      	mov	r0, r3
 8002f02:	f001 f82f 	bl	8003f64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f06:	2301      	movs	r3, #1
 8002f08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f0a:	f7ff fd63 	bl	80029d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f0e:	f000 fd9b 	bl	8003a48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f12:	f7ff fd2f 	bl	8002974 <vPortEnterCritical>
 8002f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f1c:	b25b      	sxtb	r3, r3
 8002f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f22:	d103      	bne.n	8002f2c <xQueueGenericSend+0x16c>
 8002f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f32:	b25b      	sxtb	r3, r3
 8002f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f38:	d103      	bne.n	8002f42 <xQueueGenericSend+0x182>
 8002f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f42:	f7ff fd47 	bl	80029d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f46:	1d3a      	adds	r2, r7, #4
 8002f48:	f107 0314 	add.w	r3, r7, #20
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f001 f81e 	bl	8003f90 <xTaskCheckForTimeOut>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d124      	bne.n	8002fa4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f5c:	f000 faa2 	bl	80034a4 <prvIsQueueFull>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d018      	beq.n	8002f98 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f68:	3310      	adds	r3, #16
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	4611      	mov	r1, r2
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 ff44 	bl	8003dfc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f76:	f000 fa2d 	bl	80033d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f7a:	f000 fd73 	bl	8003a64 <xTaskResumeAll>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f47f af7c 	bne.w	8002e7e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002f86:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <xQueueGenericSend+0x1f8>)
 8002f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	f3bf 8f4f 	dsb	sy
 8002f92:	f3bf 8f6f 	isb	sy
 8002f96:	e772      	b.n	8002e7e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f9a:	f000 fa1b 	bl	80033d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f9e:	f000 fd61 	bl	8003a64 <xTaskResumeAll>
 8002fa2:	e76c      	b.n	8002e7e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fa6:	f000 fa15 	bl	80033d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002faa:	f000 fd5b 	bl	8003a64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002fae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3738      	adds	r7, #56	; 0x38
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	e000ed04 	.word	0xe000ed04

08002fbc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b090      	sub	sp, #64	; 0x40
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
 8002fc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10a      	bne.n	8002fea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd8:	f383 8811 	msr	BASEPRI, r3
 8002fdc:	f3bf 8f6f 	isb	sy
 8002fe0:	f3bf 8f4f 	dsb	sy
 8002fe4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002fe6:	bf00      	nop
 8002fe8:	e7fe      	b.n	8002fe8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d103      	bne.n	8002ff8 <xQueueGenericSendFromISR+0x3c>
 8002ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <xQueueGenericSendFromISR+0x40>
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e000      	b.n	8002ffe <xQueueGenericSendFromISR+0x42>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10a      	bne.n	8003018 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003006:	f383 8811 	msr	BASEPRI, r3
 800300a:	f3bf 8f6f 	isb	sy
 800300e:	f3bf 8f4f 	dsb	sy
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003014:	bf00      	nop
 8003016:	e7fe      	b.n	8003016 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	2b02      	cmp	r3, #2
 800301c:	d103      	bne.n	8003026 <xQueueGenericSendFromISR+0x6a>
 800301e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <xQueueGenericSendFromISR+0x6e>
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <xQueueGenericSendFromISR+0x70>
 800302a:	2300      	movs	r3, #0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10a      	bne.n	8003046 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003034:	f383 8811 	msr	BASEPRI, r3
 8003038:	f3bf 8f6f 	isb	sy
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	623b      	str	r3, [r7, #32]
}
 8003042:	bf00      	nop
 8003044:	e7fe      	b.n	8003044 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003046:	f7ff fd77 	bl	8002b38 <vPortValidateInterruptPriority>
	__asm volatile
 800304a:	f3ef 8211 	mrs	r2, BASEPRI
 800304e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003052:	f383 8811 	msr	BASEPRI, r3
 8003056:	f3bf 8f6f 	isb	sy
 800305a:	f3bf 8f4f 	dsb	sy
 800305e:	61fa      	str	r2, [r7, #28]
 8003060:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8003062:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003064:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800306a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306e:	429a      	cmp	r2, r3
 8003070:	d302      	bcc.n	8003078 <xQueueGenericSendFromISR+0xbc>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d12f      	bne.n	80030d8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800307e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003086:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	68b9      	ldr	r1, [r7, #8]
 800308c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800308e:	f000 f911 	bl	80032b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003092:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309a:	d112      	bne.n	80030c2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800309c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d016      	beq.n	80030d2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a6:	3324      	adds	r3, #36	; 0x24
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fef7 	bl	8003e9c <xTaskRemoveFromEventList>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00e      	beq.n	80030d2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00b      	beq.n	80030d2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	e007      	b.n	80030d2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80030c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80030c6:	3301      	adds	r3, #1
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	b25a      	sxtb	r2, r3
 80030cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80030d2:	2301      	movs	r3, #1
 80030d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80030d6:	e001      	b.n	80030dc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80030d8:	2300      	movs	r3, #0
 80030da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030de:	617b      	str	r3, [r7, #20]
	__asm volatile
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f383 8811 	msr	BASEPRI, r3
}
 80030e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80030e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3740      	adds	r7, #64	; 0x40
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08c      	sub	sp, #48	; 0x30
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003100:	2300      	movs	r3, #0
 8003102:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10a      	bne.n	8003124 <xQueueReceive+0x30>
	__asm volatile
 800310e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003112:	f383 8811 	msr	BASEPRI, r3
 8003116:	f3bf 8f6f 	isb	sy
 800311a:	f3bf 8f4f 	dsb	sy
 800311e:	623b      	str	r3, [r7, #32]
}
 8003120:	bf00      	nop
 8003122:	e7fe      	b.n	8003122 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d103      	bne.n	8003132 <xQueueReceive+0x3e>
 800312a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <xQueueReceive+0x42>
 8003132:	2301      	movs	r3, #1
 8003134:	e000      	b.n	8003138 <xQueueReceive+0x44>
 8003136:	2300      	movs	r3, #0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10a      	bne.n	8003152 <xQueueReceive+0x5e>
	__asm volatile
 800313c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003140:	f383 8811 	msr	BASEPRI, r3
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	61fb      	str	r3, [r7, #28]
}
 800314e:	bf00      	nop
 8003150:	e7fe      	b.n	8003150 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003152:	f001 f865 	bl	8004220 <xTaskGetSchedulerState>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d102      	bne.n	8003162 <xQueueReceive+0x6e>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <xQueueReceive+0x72>
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <xQueueReceive+0x74>
 8003166:	2300      	movs	r3, #0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10a      	bne.n	8003182 <xQueueReceive+0x8e>
	__asm volatile
 800316c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003170:	f383 8811 	msr	BASEPRI, r3
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	61bb      	str	r3, [r7, #24]
}
 800317e:	bf00      	nop
 8003180:	e7fe      	b.n	8003180 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003182:	f7ff fbf7 	bl	8002974 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	2b00      	cmp	r3, #0
 8003190:	d01f      	beq.n	80031d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003192:	68b9      	ldr	r1, [r7, #8]
 8003194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003196:	f000 f8f7 	bl	8003388 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	1e5a      	subs	r2, r3, #1
 800319e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00f      	beq.n	80031ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ac:	3310      	adds	r3, #16
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 fe74 	bl	8003e9c <xTaskRemoveFromEventList>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d007      	beq.n	80031ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80031ba:	4b3d      	ldr	r3, [pc, #244]	; (80032b0 <xQueueReceive+0x1bc>)
 80031bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	f3bf 8f4f 	dsb	sy
 80031c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80031ca:	f7ff fc03 	bl	80029d4 <vPortExitCritical>
				return pdPASS;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e069      	b.n	80032a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d103      	bne.n	80031e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80031d8:	f7ff fbfc 	bl	80029d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80031dc:	2300      	movs	r3, #0
 80031de:	e062      	b.n	80032a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d106      	bne.n	80031f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031e6:	f107 0310 	add.w	r3, r7, #16
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 feba 	bl	8003f64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031f0:	2301      	movs	r3, #1
 80031f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031f4:	f7ff fbee 	bl	80029d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031f8:	f000 fc26 	bl	8003a48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031fc:	f7ff fbba 	bl	8002974 <vPortEnterCritical>
 8003200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003202:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003206:	b25b      	sxtb	r3, r3
 8003208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320c:	d103      	bne.n	8003216 <xQueueReceive+0x122>
 800320e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003218:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800321c:	b25b      	sxtb	r3, r3
 800321e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003222:	d103      	bne.n	800322c <xQueueReceive+0x138>
 8003224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800322c:	f7ff fbd2 	bl	80029d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003230:	1d3a      	adds	r2, r7, #4
 8003232:	f107 0310 	add.w	r3, r7, #16
 8003236:	4611      	mov	r1, r2
 8003238:	4618      	mov	r0, r3
 800323a:	f000 fea9 	bl	8003f90 <xTaskCheckForTimeOut>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d123      	bne.n	800328c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003244:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003246:	f000 f917 	bl	8003478 <prvIsQueueEmpty>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d017      	beq.n	8003280 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003252:	3324      	adds	r3, #36	; 0x24
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	4611      	mov	r1, r2
 8003258:	4618      	mov	r0, r3
 800325a:	f000 fdcf 	bl	8003dfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800325e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003260:	f000 f8b8 	bl	80033d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003264:	f000 fbfe 	bl	8003a64 <xTaskResumeAll>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d189      	bne.n	8003182 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800326e:	4b10      	ldr	r3, [pc, #64]	; (80032b0 <xQueueReceive+0x1bc>)
 8003270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	f3bf 8f6f 	isb	sy
 800327e:	e780      	b.n	8003182 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003280:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003282:	f000 f8a7 	bl	80033d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003286:	f000 fbed 	bl	8003a64 <xTaskResumeAll>
 800328a:	e77a      	b.n	8003182 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800328c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800328e:	f000 f8a1 	bl	80033d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003292:	f000 fbe7 	bl	8003a64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003296:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003298:	f000 f8ee 	bl	8003478 <prvIsQueueEmpty>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f43f af6f 	beq.w	8003182 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3730      	adds	r7, #48	; 0x30
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	e000ed04 	.word	0xe000ed04

080032b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10d      	bne.n	80032ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d14d      	bne.n	8003376 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 ffbc 	bl	800425c <xTaskPriorityDisinherit>
 80032e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	e043      	b.n	8003376 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d119      	bne.n	8003328 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6858      	ldr	r0, [r3, #4]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	461a      	mov	r2, r3
 80032fe:	68b9      	ldr	r1, [r7, #8]
 8003300:	f001 fbe0 	bl	8004ac4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	441a      	add	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	429a      	cmp	r2, r3
 800331c:	d32b      	bcc.n	8003376 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	e026      	b.n	8003376 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	68d8      	ldr	r0, [r3, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	461a      	mov	r2, r3
 8003332:	68b9      	ldr	r1, [r7, #8]
 8003334:	f001 fbc6 	bl	8004ac4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	425b      	negs	r3, r3
 8003342:	441a      	add	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	68da      	ldr	r2, [r3, #12]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d207      	bcs.n	8003364 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	425b      	negs	r3, r3
 800335e:	441a      	add	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b02      	cmp	r3, #2
 8003368:	d105      	bne.n	8003376 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d002      	beq.n	8003376 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	3b01      	subs	r3, #1
 8003374:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800337e:	697b      	ldr	r3, [r7, #20]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	2b00      	cmp	r3, #0
 8003398:	d018      	beq.n	80033cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	441a      	add	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d303      	bcc.n	80033bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68d9      	ldr	r1, [r3, #12]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	461a      	mov	r2, r3
 80033c6:	6838      	ldr	r0, [r7, #0]
 80033c8:	f001 fb7c 	bl	8004ac4 <memcpy>
	}
}
 80033cc:	bf00      	nop
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80033dc:	f7ff faca 	bl	8002974 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033e8:	e011      	b.n	800340e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d012      	beq.n	8003418 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	3324      	adds	r3, #36	; 0x24
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 fd50 	bl	8003e9c <xTaskRemoveFromEventList>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003402:	f000 fe27 	bl	8004054 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003406:	7bfb      	ldrb	r3, [r7, #15]
 8003408:	3b01      	subs	r3, #1
 800340a:	b2db      	uxtb	r3, r3
 800340c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800340e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003412:	2b00      	cmp	r3, #0
 8003414:	dce9      	bgt.n	80033ea <prvUnlockQueue+0x16>
 8003416:	e000      	b.n	800341a <prvUnlockQueue+0x46>
					break;
 8003418:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	22ff      	movs	r2, #255	; 0xff
 800341e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003422:	f7ff fad7 	bl	80029d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003426:	f7ff faa5 	bl	8002974 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003430:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003432:	e011      	b.n	8003458 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d012      	beq.n	8003462 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3310      	adds	r3, #16
 8003440:	4618      	mov	r0, r3
 8003442:	f000 fd2b 	bl	8003e9c <xTaskRemoveFromEventList>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800344c:	f000 fe02 	bl	8004054 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003450:	7bbb      	ldrb	r3, [r7, #14]
 8003452:	3b01      	subs	r3, #1
 8003454:	b2db      	uxtb	r3, r3
 8003456:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003458:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800345c:	2b00      	cmp	r3, #0
 800345e:	dce9      	bgt.n	8003434 <prvUnlockQueue+0x60>
 8003460:	e000      	b.n	8003464 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003462:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	22ff      	movs	r2, #255	; 0xff
 8003468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800346c:	f7ff fab2 	bl	80029d4 <vPortExitCritical>
}
 8003470:	bf00      	nop
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003480:	f7ff fa78 	bl	8002974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003488:	2b00      	cmp	r3, #0
 800348a:	d102      	bne.n	8003492 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800348c:	2301      	movs	r3, #1
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	e001      	b.n	8003496 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003492:	2300      	movs	r3, #0
 8003494:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003496:	f7ff fa9d 	bl	80029d4 <vPortExitCritical>

	return xReturn;
 800349a:	68fb      	ldr	r3, [r7, #12]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034ac:	f7ff fa62 	bl	8002974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d102      	bne.n	80034c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80034bc:	2301      	movs	r3, #1
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	e001      	b.n	80034c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034c6:	f7ff fa85 	bl	80029d4 <vPortExitCritical>

	return xReturn;
 80034ca:	68fb      	ldr	r3, [r7, #12]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	e014      	b.n	800350e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80034e4:	4a0f      	ldr	r2, [pc, #60]	; (8003524 <vQueueAddToRegistry+0x50>)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10b      	bne.n	8003508 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80034f0:	490c      	ldr	r1, [pc, #48]	; (8003524 <vQueueAddToRegistry+0x50>)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80034fa:	4a0a      	ldr	r2, [pc, #40]	; (8003524 <vQueueAddToRegistry+0x50>)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	4413      	add	r3, r2
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003506:	e006      	b.n	8003516 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	3301      	adds	r3, #1
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2b07      	cmp	r3, #7
 8003512:	d9e7      	bls.n	80034e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003514:	bf00      	nop
 8003516:	bf00      	nop
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	24004a7c 	.word	0x24004a7c

08003528 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003538:	f7ff fa1c 	bl	8002974 <vPortEnterCritical>
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003542:	b25b      	sxtb	r3, r3
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003548:	d103      	bne.n	8003552 <vQueueWaitForMessageRestricted+0x2a>
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003558:	b25b      	sxtb	r3, r3
 800355a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355e:	d103      	bne.n	8003568 <vQueueWaitForMessageRestricted+0x40>
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003568:	f7ff fa34 	bl	80029d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003570:	2b00      	cmp	r3, #0
 8003572:	d106      	bne.n	8003582 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	3324      	adds	r3, #36	; 0x24
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	68b9      	ldr	r1, [r7, #8]
 800357c:	4618      	mov	r0, r3
 800357e:	f000 fc61 	bl	8003e44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003582:	6978      	ldr	r0, [r7, #20]
 8003584:	f7ff ff26 	bl	80033d4 <prvUnlockQueue>
	}
 8003588:	bf00      	nop
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08e      	sub	sp, #56	; 0x38
 8003594:	af04      	add	r7, sp, #16
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800359e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10a      	bne.n	80035ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80035a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a8:	f383 8811 	msr	BASEPRI, r3
 80035ac:	f3bf 8f6f 	isb	sy
 80035b0:	f3bf 8f4f 	dsb	sy
 80035b4:	623b      	str	r3, [r7, #32]
}
 80035b6:	bf00      	nop
 80035b8:	e7fe      	b.n	80035b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80035ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10a      	bne.n	80035d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80035c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c4:	f383 8811 	msr	BASEPRI, r3
 80035c8:	f3bf 8f6f 	isb	sy
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	61fb      	str	r3, [r7, #28]
}
 80035d2:	bf00      	nop
 80035d4:	e7fe      	b.n	80035d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80035d6:	23bc      	movs	r3, #188	; 0xbc
 80035d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	2bbc      	cmp	r3, #188	; 0xbc
 80035de:	d00a      	beq.n	80035f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80035e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e4:	f383 8811 	msr	BASEPRI, r3
 80035e8:	f3bf 8f6f 	isb	sy
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	61bb      	str	r3, [r7, #24]
}
 80035f2:	bf00      	nop
 80035f4:	e7fe      	b.n	80035f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80035f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80035f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d01e      	beq.n	800363c <xTaskCreateStatic+0xac>
 80035fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003600:	2b00      	cmp	r3, #0
 8003602:	d01b      	beq.n	800363c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800360c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	2202      	movs	r2, #2
 8003612:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003616:	2300      	movs	r3, #0
 8003618:	9303      	str	r3, [sp, #12]
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	9302      	str	r3, [sp, #8]
 800361e:	f107 0314 	add.w	r3, r7, #20
 8003622:	9301      	str	r3, [sp, #4]
 8003624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 f850 	bl	80036d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003634:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003636:	f000 f8f3 	bl	8003820 <prvAddNewTaskToReadyList>
 800363a:	e001      	b.n	8003640 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800363c:	2300      	movs	r3, #0
 800363e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003640:	697b      	ldr	r3, [r7, #20]
	}
 8003642:	4618      	mov	r0, r3
 8003644:	3728      	adds	r7, #40	; 0x28
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800364a:	b580      	push	{r7, lr}
 800364c:	b08c      	sub	sp, #48	; 0x30
 800364e:	af04      	add	r7, sp, #16
 8003650:	60f8      	str	r0, [r7, #12]
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	603b      	str	r3, [r7, #0]
 8003656:	4613      	mov	r3, r2
 8003658:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800365a:	88fb      	ldrh	r3, [r7, #6]
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4618      	mov	r0, r3
 8003660:	f7fe fdba 	bl	80021d8 <pvPortMalloc>
 8003664:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00e      	beq.n	800368a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800366c:	20bc      	movs	r0, #188	; 0xbc
 800366e:	f7fe fdb3 	bl	80021d8 <pvPortMalloc>
 8003672:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	631a      	str	r2, [r3, #48]	; 0x30
 8003680:	e005      	b.n	800368e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003682:	6978      	ldr	r0, [r7, #20]
 8003684:	f7fe fe74 	bl	8002370 <vPortFree>
 8003688:	e001      	b.n	800368e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800368a:	2300      	movs	r3, #0
 800368c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d017      	beq.n	80036c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800369c:	88fa      	ldrh	r2, [r7, #6]
 800369e:	2300      	movs	r3, #0
 80036a0:	9303      	str	r3, [sp, #12]
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	9302      	str	r3, [sp, #8]
 80036a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a8:	9301      	str	r3, [sp, #4]
 80036aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 f80e 	bl	80036d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036b8:	69f8      	ldr	r0, [r7, #28]
 80036ba:	f000 f8b1 	bl	8003820 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80036be:	2301      	movs	r3, #1
 80036c0:	61bb      	str	r3, [r7, #24]
 80036c2:	e002      	b.n	80036ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80036c4:	f04f 33ff 	mov.w	r3, #4294967295
 80036c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80036ca:	69bb      	ldr	r3, [r7, #24]
	}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3720      	adds	r7, #32
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b088      	sub	sp, #32
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
 80036e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80036e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	461a      	mov	r2, r3
 80036ec:	21a5      	movs	r1, #165	; 0xa5
 80036ee:	f001 f9f7 	bl	8004ae0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80036f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80036fc:	440b      	add	r3, r1
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	f023 0307 	bic.w	r3, r3, #7
 800370a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	f003 0307 	and.w	r3, r3, #7
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371a:	f383 8811 	msr	BASEPRI, r3
 800371e:	f3bf 8f6f 	isb	sy
 8003722:	f3bf 8f4f 	dsb	sy
 8003726:	617b      	str	r3, [r7, #20]
}
 8003728:	bf00      	nop
 800372a:	e7fe      	b.n	800372a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d01f      	beq.n	8003772 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003732:	2300      	movs	r3, #0
 8003734:	61fb      	str	r3, [r7, #28]
 8003736:	e012      	b.n	800375e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	4413      	add	r3, r2
 800373e:	7819      	ldrb	r1, [r3, #0]
 8003740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	4413      	add	r3, r2
 8003746:	3334      	adds	r3, #52	; 0x34
 8003748:	460a      	mov	r2, r1
 800374a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	4413      	add	r3, r2
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d006      	beq.n	8003766 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	3301      	adds	r3, #1
 800375c:	61fb      	str	r3, [r7, #28]
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	2b0f      	cmp	r3, #15
 8003762:	d9e9      	bls.n	8003738 <prvInitialiseNewTask+0x64>
 8003764:	e000      	b.n	8003768 <prvInitialiseNewTask+0x94>
			{
				break;
 8003766:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003770:	e003      	b.n	800377a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800377a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377c:	2b37      	cmp	r3, #55	; 0x37
 800377e:	d901      	bls.n	8003784 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003780:	2337      	movs	r3, #55	; 0x37
 8003782:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003788:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800378e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003792:	2200      	movs	r2, #0
 8003794:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003798:	3304      	adds	r3, #4
 800379a:	4618      	mov	r0, r3
 800379c:	f7fe ff26 	bl	80025ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a2:	3318      	adds	r3, #24
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fe ff21 	bl	80025ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80037b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80037c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c2:	2200      	movs	r2, #0
 80037c4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80037c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80037d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d2:	3354      	adds	r3, #84	; 0x54
 80037d4:	2260      	movs	r2, #96	; 0x60
 80037d6:	2100      	movs	r1, #0
 80037d8:	4618      	mov	r0, r3
 80037da:	f001 f981 	bl	8004ae0 <memset>
 80037de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e0:	4a0c      	ldr	r2, [pc, #48]	; (8003814 <prvInitialiseNewTask+0x140>)
 80037e2:	659a      	str	r2, [r3, #88]	; 0x58
 80037e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e6:	4a0c      	ldr	r2, [pc, #48]	; (8003818 <prvInitialiseNewTask+0x144>)
 80037e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80037ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ec:	4a0b      	ldr	r2, [pc, #44]	; (800381c <prvInitialiseNewTask+0x148>)
 80037ee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	68f9      	ldr	r1, [r7, #12]
 80037f4:	69b8      	ldr	r0, [r7, #24]
 80037f6:	f7fe ff8d 	bl	8002714 <pxPortInitialiseStack>
 80037fa:	4602      	mov	r2, r0
 80037fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800380a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800380c:	bf00      	nop
 800380e:	3720      	adds	r7, #32
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	08004d0c 	.word	0x08004d0c
 8003818:	08004d2c 	.word	0x08004d2c
 800381c:	08004cec 	.word	0x08004cec

08003820 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003828:	f7ff f8a4 	bl	8002974 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800382c:	4b2d      	ldr	r3, [pc, #180]	; (80038e4 <prvAddNewTaskToReadyList+0xc4>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3301      	adds	r3, #1
 8003832:	4a2c      	ldr	r2, [pc, #176]	; (80038e4 <prvAddNewTaskToReadyList+0xc4>)
 8003834:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003836:	4b2c      	ldr	r3, [pc, #176]	; (80038e8 <prvAddNewTaskToReadyList+0xc8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d109      	bne.n	8003852 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800383e:	4a2a      	ldr	r2, [pc, #168]	; (80038e8 <prvAddNewTaskToReadyList+0xc8>)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003844:	4b27      	ldr	r3, [pc, #156]	; (80038e4 <prvAddNewTaskToReadyList+0xc4>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d110      	bne.n	800386e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800384c:	f000 fc26 	bl	800409c <prvInitialiseTaskLists>
 8003850:	e00d      	b.n	800386e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003852:	4b26      	ldr	r3, [pc, #152]	; (80038ec <prvAddNewTaskToReadyList+0xcc>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d109      	bne.n	800386e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800385a:	4b23      	ldr	r3, [pc, #140]	; (80038e8 <prvAddNewTaskToReadyList+0xc8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	429a      	cmp	r2, r3
 8003866:	d802      	bhi.n	800386e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003868:	4a1f      	ldr	r2, [pc, #124]	; (80038e8 <prvAddNewTaskToReadyList+0xc8>)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800386e:	4b20      	ldr	r3, [pc, #128]	; (80038f0 <prvAddNewTaskToReadyList+0xd0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3301      	adds	r3, #1
 8003874:	4a1e      	ldr	r2, [pc, #120]	; (80038f0 <prvAddNewTaskToReadyList+0xd0>)
 8003876:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003878:	4b1d      	ldr	r3, [pc, #116]	; (80038f0 <prvAddNewTaskToReadyList+0xd0>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003884:	4b1b      	ldr	r3, [pc, #108]	; (80038f4 <prvAddNewTaskToReadyList+0xd4>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d903      	bls.n	8003894 <prvAddNewTaskToReadyList+0x74>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	4a18      	ldr	r2, [pc, #96]	; (80038f4 <prvAddNewTaskToReadyList+0xd4>)
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003898:	4613      	mov	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4a15      	ldr	r2, [pc, #84]	; (80038f8 <prvAddNewTaskToReadyList+0xd8>)
 80038a2:	441a      	add	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3304      	adds	r3, #4
 80038a8:	4619      	mov	r1, r3
 80038aa:	4610      	mov	r0, r2
 80038ac:	f7fe feab 	bl	8002606 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038b0:	f7ff f890 	bl	80029d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038b4:	4b0d      	ldr	r3, [pc, #52]	; (80038ec <prvAddNewTaskToReadyList+0xcc>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00e      	beq.n	80038da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038bc:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <prvAddNewTaskToReadyList+0xc8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d207      	bcs.n	80038da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038ca:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <prvAddNewTaskToReadyList+0xdc>)
 80038cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	f3bf 8f4f 	dsb	sy
 80038d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038da:	bf00      	nop
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	24004918 	.word	0x24004918
 80038e8:	24004444 	.word	0x24004444
 80038ec:	24004924 	.word	0x24004924
 80038f0:	24004934 	.word	0x24004934
 80038f4:	24004920 	.word	0x24004920
 80038f8:	24004448 	.word	0x24004448
 80038fc:	e000ed04 	.word	0xe000ed04

08003900 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003908:	2300      	movs	r3, #0
 800390a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d017      	beq.n	8003942 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003912:	4b13      	ldr	r3, [pc, #76]	; (8003960 <vTaskDelay+0x60>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <vTaskDelay+0x30>
	__asm volatile
 800391a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	60bb      	str	r3, [r7, #8]
}
 800392c:	bf00      	nop
 800392e:	e7fe      	b.n	800392e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003930:	f000 f88a 	bl	8003a48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003934:	2100      	movs	r1, #0
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 fcfe 	bl	8004338 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800393c:	f000 f892 	bl	8003a64 <xTaskResumeAll>
 8003940:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d107      	bne.n	8003958 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003948:	4b06      	ldr	r3, [pc, #24]	; (8003964 <vTaskDelay+0x64>)
 800394a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	f3bf 8f4f 	dsb	sy
 8003954:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003958:	bf00      	nop
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	24004940 	.word	0x24004940
 8003964:	e000ed04 	.word	0xe000ed04

08003968 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b08a      	sub	sp, #40	; 0x28
 800396c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800396e:	2300      	movs	r3, #0
 8003970:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003972:	2300      	movs	r3, #0
 8003974:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003976:	463a      	mov	r2, r7
 8003978:	1d39      	adds	r1, r7, #4
 800397a:	f107 0308 	add.w	r3, r7, #8
 800397e:	4618      	mov	r0, r3
 8003980:	f7fe fbf6 	bl	8002170 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003984:	6839      	ldr	r1, [r7, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	9202      	str	r2, [sp, #8]
 800398c:	9301      	str	r3, [sp, #4]
 800398e:	2300      	movs	r3, #0
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	2300      	movs	r3, #0
 8003994:	460a      	mov	r2, r1
 8003996:	4924      	ldr	r1, [pc, #144]	; (8003a28 <vTaskStartScheduler+0xc0>)
 8003998:	4824      	ldr	r0, [pc, #144]	; (8003a2c <vTaskStartScheduler+0xc4>)
 800399a:	f7ff fdf9 	bl	8003590 <xTaskCreateStatic>
 800399e:	4603      	mov	r3, r0
 80039a0:	4a23      	ldr	r2, [pc, #140]	; (8003a30 <vTaskStartScheduler+0xc8>)
 80039a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80039a4:	4b22      	ldr	r3, [pc, #136]	; (8003a30 <vTaskStartScheduler+0xc8>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80039ac:	2301      	movs	r3, #1
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	e001      	b.n	80039b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d102      	bne.n	80039c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80039bc:	f000 fd10 	bl	80043e0 <xTimerCreateTimerTask>
 80039c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d11b      	bne.n	8003a00 <vTaskStartScheduler+0x98>
	__asm volatile
 80039c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	613b      	str	r3, [r7, #16]
}
 80039da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80039dc:	4b15      	ldr	r3, [pc, #84]	; (8003a34 <vTaskStartScheduler+0xcc>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3354      	adds	r3, #84	; 0x54
 80039e2:	4a15      	ldr	r2, [pc, #84]	; (8003a38 <vTaskStartScheduler+0xd0>)
 80039e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80039e6:	4b15      	ldr	r3, [pc, #84]	; (8003a3c <vTaskStartScheduler+0xd4>)
 80039e8:	f04f 32ff 	mov.w	r2, #4294967295
 80039ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80039ee:	4b14      	ldr	r3, [pc, #80]	; (8003a40 <vTaskStartScheduler+0xd8>)
 80039f0:	2201      	movs	r2, #1
 80039f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80039f4:	4b13      	ldr	r3, [pc, #76]	; (8003a44 <vTaskStartScheduler+0xdc>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80039fa:	f7fe ff19 	bl	8002830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80039fe:	e00e      	b.n	8003a1e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a06:	d10a      	bne.n	8003a1e <vTaskStartScheduler+0xb6>
	__asm volatile
 8003a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	60fb      	str	r3, [r7, #12]
}
 8003a1a:	bf00      	nop
 8003a1c:	e7fe      	b.n	8003a1c <vTaskStartScheduler+0xb4>
}
 8003a1e:	bf00      	nop
 8003a20:	3718      	adds	r7, #24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	08004ca0 	.word	0x08004ca0
 8003a2c:	0800406d 	.word	0x0800406d
 8003a30:	2400493c 	.word	0x2400493c
 8003a34:	24004444 	.word	0x24004444
 8003a38:	24000014 	.word	0x24000014
 8003a3c:	24004938 	.word	0x24004938
 8003a40:	24004924 	.word	0x24004924
 8003a44:	2400491c 	.word	0x2400491c

08003a48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003a4c:	4b04      	ldr	r3, [pc, #16]	; (8003a60 <vTaskSuspendAll+0x18>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	3301      	adds	r3, #1
 8003a52:	4a03      	ldr	r2, [pc, #12]	; (8003a60 <vTaskSuspendAll+0x18>)
 8003a54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003a56:	bf00      	nop
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	24004940 	.word	0x24004940

08003a64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a72:	4b42      	ldr	r3, [pc, #264]	; (8003b7c <xTaskResumeAll+0x118>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10a      	bne.n	8003a90 <xTaskResumeAll+0x2c>
	__asm volatile
 8003a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7e:	f383 8811 	msr	BASEPRI, r3
 8003a82:	f3bf 8f6f 	isb	sy
 8003a86:	f3bf 8f4f 	dsb	sy
 8003a8a:	603b      	str	r3, [r7, #0]
}
 8003a8c:	bf00      	nop
 8003a8e:	e7fe      	b.n	8003a8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a90:	f7fe ff70 	bl	8002974 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a94:	4b39      	ldr	r3, [pc, #228]	; (8003b7c <xTaskResumeAll+0x118>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	4a38      	ldr	r2, [pc, #224]	; (8003b7c <xTaskResumeAll+0x118>)
 8003a9c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a9e:	4b37      	ldr	r3, [pc, #220]	; (8003b7c <xTaskResumeAll+0x118>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d162      	bne.n	8003b6c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003aa6:	4b36      	ldr	r3, [pc, #216]	; (8003b80 <xTaskResumeAll+0x11c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d05e      	beq.n	8003b6c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003aae:	e02f      	b.n	8003b10 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ab0:	4b34      	ldr	r3, [pc, #208]	; (8003b84 <xTaskResumeAll+0x120>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	3318      	adds	r3, #24
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fe fdff 	bl	80026c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fe fdfa 	bl	80026c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad0:	4b2d      	ldr	r3, [pc, #180]	; (8003b88 <xTaskResumeAll+0x124>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d903      	bls.n	8003ae0 <xTaskResumeAll+0x7c>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	4a2a      	ldr	r2, [pc, #168]	; (8003b88 <xTaskResumeAll+0x124>)
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4a27      	ldr	r2, [pc, #156]	; (8003b8c <xTaskResumeAll+0x128>)
 8003aee:	441a      	add	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	3304      	adds	r3, #4
 8003af4:	4619      	mov	r1, r3
 8003af6:	4610      	mov	r0, r2
 8003af8:	f7fe fd85 	bl	8002606 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b00:	4b23      	ldr	r3, [pc, #140]	; (8003b90 <xTaskResumeAll+0x12c>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d302      	bcc.n	8003b10 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003b0a:	4b22      	ldr	r3, [pc, #136]	; (8003b94 <xTaskResumeAll+0x130>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b10:	4b1c      	ldr	r3, [pc, #112]	; (8003b84 <xTaskResumeAll+0x120>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1cb      	bne.n	8003ab0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b1e:	f000 fb5f 	bl	80041e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b22:	4b1d      	ldr	r3, [pc, #116]	; (8003b98 <xTaskResumeAll+0x134>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d010      	beq.n	8003b50 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b2e:	f000 f847 	bl	8003bc0 <xTaskIncrementTick>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003b38:	4b16      	ldr	r3, [pc, #88]	; (8003b94 <xTaskResumeAll+0x130>)
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f1      	bne.n	8003b2e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003b4a:	4b13      	ldr	r3, [pc, #76]	; (8003b98 <xTaskResumeAll+0x134>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b50:	4b10      	ldr	r3, [pc, #64]	; (8003b94 <xTaskResumeAll+0x130>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d009      	beq.n	8003b6c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b5c:	4b0f      	ldr	r3, [pc, #60]	; (8003b9c <xTaskResumeAll+0x138>)
 8003b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	f3bf 8f4f 	dsb	sy
 8003b68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b6c:	f7fe ff32 	bl	80029d4 <vPortExitCritical>

	return xAlreadyYielded;
 8003b70:	68bb      	ldr	r3, [r7, #8]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	24004940 	.word	0x24004940
 8003b80:	24004918 	.word	0x24004918
 8003b84:	240048d8 	.word	0x240048d8
 8003b88:	24004920 	.word	0x24004920
 8003b8c:	24004448 	.word	0x24004448
 8003b90:	24004444 	.word	0x24004444
 8003b94:	2400492c 	.word	0x2400492c
 8003b98:	24004928 	.word	0x24004928
 8003b9c:	e000ed04 	.word	0xe000ed04

08003ba0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003ba6:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <xTaskGetTickCount+0x1c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003bac:	687b      	ldr	r3, [r7, #4]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	2400491c 	.word	0x2400491c

08003bc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bca:	4b4f      	ldr	r3, [pc, #316]	; (8003d08 <xTaskIncrementTick+0x148>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f040 808f 	bne.w	8003cf2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003bd4:	4b4d      	ldr	r3, [pc, #308]	; (8003d0c <xTaskIncrementTick+0x14c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003bdc:	4a4b      	ldr	r2, [pc, #300]	; (8003d0c <xTaskIncrementTick+0x14c>)
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d120      	bne.n	8003c2a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003be8:	4b49      	ldr	r3, [pc, #292]	; (8003d10 <xTaskIncrementTick+0x150>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <xTaskIncrementTick+0x48>
	__asm volatile
 8003bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf6:	f383 8811 	msr	BASEPRI, r3
 8003bfa:	f3bf 8f6f 	isb	sy
 8003bfe:	f3bf 8f4f 	dsb	sy
 8003c02:	603b      	str	r3, [r7, #0]
}
 8003c04:	bf00      	nop
 8003c06:	e7fe      	b.n	8003c06 <xTaskIncrementTick+0x46>
 8003c08:	4b41      	ldr	r3, [pc, #260]	; (8003d10 <xTaskIncrementTick+0x150>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	4b41      	ldr	r3, [pc, #260]	; (8003d14 <xTaskIncrementTick+0x154>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a3f      	ldr	r2, [pc, #252]	; (8003d10 <xTaskIncrementTick+0x150>)
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	4a3f      	ldr	r2, [pc, #252]	; (8003d14 <xTaskIncrementTick+0x154>)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6013      	str	r3, [r2, #0]
 8003c1c:	4b3e      	ldr	r3, [pc, #248]	; (8003d18 <xTaskIncrementTick+0x158>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3301      	adds	r3, #1
 8003c22:	4a3d      	ldr	r2, [pc, #244]	; (8003d18 <xTaskIncrementTick+0x158>)
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	f000 fadb 	bl	80041e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c2a:	4b3c      	ldr	r3, [pc, #240]	; (8003d1c <xTaskIncrementTick+0x15c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d349      	bcc.n	8003cc8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c34:	4b36      	ldr	r3, [pc, #216]	; (8003d10 <xTaskIncrementTick+0x150>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d104      	bne.n	8003c48 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c3e:	4b37      	ldr	r3, [pc, #220]	; (8003d1c <xTaskIncrementTick+0x15c>)
 8003c40:	f04f 32ff 	mov.w	r2, #4294967295
 8003c44:	601a      	str	r2, [r3, #0]
					break;
 8003c46:	e03f      	b.n	8003cc8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c48:	4b31      	ldr	r3, [pc, #196]	; (8003d10 <xTaskIncrementTick+0x150>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d203      	bcs.n	8003c68 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c60:	4a2e      	ldr	r2, [pc, #184]	; (8003d1c <xTaskIncrementTick+0x15c>)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c66:	e02f      	b.n	8003cc8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7fe fd27 	bl	80026c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d004      	beq.n	8003c84 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	3318      	adds	r3, #24
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fe fd1e 	bl	80026c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c88:	4b25      	ldr	r3, [pc, #148]	; (8003d20 <xTaskIncrementTick+0x160>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d903      	bls.n	8003c98 <xTaskIncrementTick+0xd8>
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c94:	4a22      	ldr	r2, [pc, #136]	; (8003d20 <xTaskIncrementTick+0x160>)
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4a1f      	ldr	r2, [pc, #124]	; (8003d24 <xTaskIncrementTick+0x164>)
 8003ca6:	441a      	add	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	3304      	adds	r3, #4
 8003cac:	4619      	mov	r1, r3
 8003cae:	4610      	mov	r0, r2
 8003cb0:	f7fe fca9 	bl	8002606 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb8:	4b1b      	ldr	r3, [pc, #108]	; (8003d28 <xTaskIncrementTick+0x168>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d3b8      	bcc.n	8003c34 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cc6:	e7b5      	b.n	8003c34 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003cc8:	4b17      	ldr	r3, [pc, #92]	; (8003d28 <xTaskIncrementTick+0x168>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cce:	4915      	ldr	r1, [pc, #84]	; (8003d24 <xTaskIncrementTick+0x164>)
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d901      	bls.n	8003ce4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003ce4:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <xTaskIncrementTick+0x16c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d007      	beq.n	8003cfc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003cec:	2301      	movs	r3, #1
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	e004      	b.n	8003cfc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003cf2:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <xTaskIncrementTick+0x170>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	4a0d      	ldr	r2, [pc, #52]	; (8003d30 <xTaskIncrementTick+0x170>)
 8003cfa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003cfc:	697b      	ldr	r3, [r7, #20]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	24004940 	.word	0x24004940
 8003d0c:	2400491c 	.word	0x2400491c
 8003d10:	240048d0 	.word	0x240048d0
 8003d14:	240048d4 	.word	0x240048d4
 8003d18:	24004930 	.word	0x24004930
 8003d1c:	24004938 	.word	0x24004938
 8003d20:	24004920 	.word	0x24004920
 8003d24:	24004448 	.word	0x24004448
 8003d28:	24004444 	.word	0x24004444
 8003d2c:	2400492c 	.word	0x2400492c
 8003d30:	24004928 	.word	0x24004928

08003d34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d3a:	4b2a      	ldr	r3, [pc, #168]	; (8003de4 <vTaskSwitchContext+0xb0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d42:	4b29      	ldr	r3, [pc, #164]	; (8003de8 <vTaskSwitchContext+0xb4>)
 8003d44:	2201      	movs	r2, #1
 8003d46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d48:	e046      	b.n	8003dd8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003d4a:	4b27      	ldr	r3, [pc, #156]	; (8003de8 <vTaskSwitchContext+0xb4>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d50:	4b26      	ldr	r3, [pc, #152]	; (8003dec <vTaskSwitchContext+0xb8>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	e010      	b.n	8003d7a <vTaskSwitchContext+0x46>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10a      	bne.n	8003d74 <vTaskSwitchContext+0x40>
	__asm volatile
 8003d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	607b      	str	r3, [r7, #4]
}
 8003d70:	bf00      	nop
 8003d72:	e7fe      	b.n	8003d72 <vTaskSwitchContext+0x3e>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	491d      	ldr	r1, [pc, #116]	; (8003df0 <vTaskSwitchContext+0xbc>)
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0e4      	beq.n	8003d58 <vTaskSwitchContext+0x24>
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	4613      	mov	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4a15      	ldr	r2, [pc, #84]	; (8003df0 <vTaskSwitchContext+0xbc>)
 8003d9a:	4413      	add	r3, r2
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	605a      	str	r2, [r3, #4]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	3308      	adds	r3, #8
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d104      	bne.n	8003dbe <vTaskSwitchContext+0x8a>
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4a0b      	ldr	r2, [pc, #44]	; (8003df4 <vTaskSwitchContext+0xc0>)
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	4a08      	ldr	r2, [pc, #32]	; (8003dec <vTaskSwitchContext+0xb8>)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003dce:	4b09      	ldr	r3, [pc, #36]	; (8003df4 <vTaskSwitchContext+0xc0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	3354      	adds	r3, #84	; 0x54
 8003dd4:	4a08      	ldr	r2, [pc, #32]	; (8003df8 <vTaskSwitchContext+0xc4>)
 8003dd6:	6013      	str	r3, [r2, #0]
}
 8003dd8:	bf00      	nop
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	24004940 	.word	0x24004940
 8003de8:	2400492c 	.word	0x2400492c
 8003dec:	24004920 	.word	0x24004920
 8003df0:	24004448 	.word	0x24004448
 8003df4:	24004444 	.word	0x24004444
 8003df8:	24000014 	.word	0x24000014

08003dfc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10a      	bne.n	8003e22 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e10:	f383 8811 	msr	BASEPRI, r3
 8003e14:	f3bf 8f6f 	isb	sy
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	60fb      	str	r3, [r7, #12]
}
 8003e1e:	bf00      	nop
 8003e20:	e7fe      	b.n	8003e20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e22:	4b07      	ldr	r3, [pc, #28]	; (8003e40 <vTaskPlaceOnEventList+0x44>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	3318      	adds	r3, #24
 8003e28:	4619      	mov	r1, r3
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7fe fc0f 	bl	800264e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e30:	2101      	movs	r1, #1
 8003e32:	6838      	ldr	r0, [r7, #0]
 8003e34:	f000 fa80 	bl	8004338 <prvAddCurrentTaskToDelayedList>
}
 8003e38:	bf00      	nop
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	24004444 	.word	0x24004444

08003e44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10a      	bne.n	8003e6c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5a:	f383 8811 	msr	BASEPRI, r3
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	f3bf 8f4f 	dsb	sy
 8003e66:	617b      	str	r3, [r7, #20]
}
 8003e68:	bf00      	nop
 8003e6a:	e7fe      	b.n	8003e6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e6c:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <vTaskPlaceOnEventListRestricted+0x54>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3318      	adds	r3, #24
 8003e72:	4619      	mov	r1, r3
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f7fe fbc6 	bl	8002606 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003e80:	f04f 33ff 	mov.w	r3, #4294967295
 8003e84:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	68b8      	ldr	r0, [r7, #8]
 8003e8a:	f000 fa55 	bl	8004338 <prvAddCurrentTaskToDelayedList>
	}
 8003e8e:	bf00      	nop
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	24004444 	.word	0x24004444

08003e9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10a      	bne.n	8003ec8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb6:	f383 8811 	msr	BASEPRI, r3
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	60fb      	str	r3, [r7, #12]
}
 8003ec4:	bf00      	nop
 8003ec6:	e7fe      	b.n	8003ec6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	3318      	adds	r3, #24
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7fe fbf7 	bl	80026c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ed2:	4b1e      	ldr	r3, [pc, #120]	; (8003f4c <xTaskRemoveFromEventList+0xb0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d11d      	bne.n	8003f16 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	3304      	adds	r3, #4
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fe fbee 	bl	80026c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee8:	4b19      	ldr	r3, [pc, #100]	; (8003f50 <xTaskRemoveFromEventList+0xb4>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d903      	bls.n	8003ef8 <xTaskRemoveFromEventList+0x5c>
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef4:	4a16      	ldr	r2, [pc, #88]	; (8003f50 <xTaskRemoveFromEventList+0xb4>)
 8003ef6:	6013      	str	r3, [r2, #0]
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003efc:	4613      	mov	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4a13      	ldr	r2, [pc, #76]	; (8003f54 <xTaskRemoveFromEventList+0xb8>)
 8003f06:	441a      	add	r2, r3
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	4610      	mov	r0, r2
 8003f10:	f7fe fb79 	bl	8002606 <vListInsertEnd>
 8003f14:	e005      	b.n	8003f22 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	3318      	adds	r3, #24
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	480e      	ldr	r0, [pc, #56]	; (8003f58 <xTaskRemoveFromEventList+0xbc>)
 8003f1e:	f7fe fb72 	bl	8002606 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f26:	4b0d      	ldr	r3, [pc, #52]	; (8003f5c <xTaskRemoveFromEventList+0xc0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d905      	bls.n	8003f3c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f30:	2301      	movs	r3, #1
 8003f32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f34:	4b0a      	ldr	r3, [pc, #40]	; (8003f60 <xTaskRemoveFromEventList+0xc4>)
 8003f36:	2201      	movs	r2, #1
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	e001      	b.n	8003f40 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003f40:	697b      	ldr	r3, [r7, #20]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	24004940 	.word	0x24004940
 8003f50:	24004920 	.word	0x24004920
 8003f54:	24004448 	.word	0x24004448
 8003f58:	240048d8 	.word	0x240048d8
 8003f5c:	24004444 	.word	0x24004444
 8003f60:	2400492c 	.word	0x2400492c

08003f64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f6c:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <vTaskInternalSetTimeOutState+0x24>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f74:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <vTaskInternalSetTimeOutState+0x28>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	605a      	str	r2, [r3, #4]
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	24004930 	.word	0x24004930
 8003f8c:	2400491c 	.word	0x2400491c

08003f90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b088      	sub	sp, #32
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10a      	bne.n	8003fb6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	613b      	str	r3, [r7, #16]
}
 8003fb2:	bf00      	nop
 8003fb4:	e7fe      	b.n	8003fb4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10a      	bne.n	8003fd2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc0:	f383 8811 	msr	BASEPRI, r3
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	f3bf 8f4f 	dsb	sy
 8003fcc:	60fb      	str	r3, [r7, #12]
}
 8003fce:	bf00      	nop
 8003fd0:	e7fe      	b.n	8003fd0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003fd2:	f7fe fccf 	bl	8002974 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003fd6:	4b1d      	ldr	r3, [pc, #116]	; (800404c <xTaskCheckForTimeOut+0xbc>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fee:	d102      	bne.n	8003ff6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61fb      	str	r3, [r7, #28]
 8003ff4:	e023      	b.n	800403e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	4b15      	ldr	r3, [pc, #84]	; (8004050 <xTaskCheckForTimeOut+0xc0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d007      	beq.n	8004012 <xTaskCheckForTimeOut+0x82>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	429a      	cmp	r2, r3
 800400a:	d302      	bcc.n	8004012 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800400c:	2301      	movs	r3, #1
 800400e:	61fb      	str	r3, [r7, #28]
 8004010:	e015      	b.n	800403e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	429a      	cmp	r2, r3
 800401a:	d20b      	bcs.n	8004034 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	1ad2      	subs	r2, r2, r3
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff ff9b 	bl	8003f64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800402e:	2300      	movs	r3, #0
 8004030:	61fb      	str	r3, [r7, #28]
 8004032:	e004      	b.n	800403e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2200      	movs	r2, #0
 8004038:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800403a:	2301      	movs	r3, #1
 800403c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800403e:	f7fe fcc9 	bl	80029d4 <vPortExitCritical>

	return xReturn;
 8004042:	69fb      	ldr	r3, [r7, #28]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3720      	adds	r7, #32
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	2400491c 	.word	0x2400491c
 8004050:	24004930 	.word	0x24004930

08004054 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004058:	4b03      	ldr	r3, [pc, #12]	; (8004068 <vTaskMissedYield+0x14>)
 800405a:	2201      	movs	r2, #1
 800405c:	601a      	str	r2, [r3, #0]
}
 800405e:	bf00      	nop
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	2400492c 	.word	0x2400492c

0800406c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004074:	f000 f852 	bl	800411c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004078:	4b06      	ldr	r3, [pc, #24]	; (8004094 <prvIdleTask+0x28>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d9f9      	bls.n	8004074 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004080:	4b05      	ldr	r3, [pc, #20]	; (8004098 <prvIdleTask+0x2c>)
 8004082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004090:	e7f0      	b.n	8004074 <prvIdleTask+0x8>
 8004092:	bf00      	nop
 8004094:	24004448 	.word	0x24004448
 8004098:	e000ed04 	.word	0xe000ed04

0800409c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040a2:	2300      	movs	r3, #0
 80040a4:	607b      	str	r3, [r7, #4]
 80040a6:	e00c      	b.n	80040c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	4613      	mov	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4413      	add	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4a12      	ldr	r2, [pc, #72]	; (80040fc <prvInitialiseTaskLists+0x60>)
 80040b4:	4413      	add	r3, r2
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fe fa78 	bl	80025ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3301      	adds	r3, #1
 80040c0:	607b      	str	r3, [r7, #4]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b37      	cmp	r3, #55	; 0x37
 80040c6:	d9ef      	bls.n	80040a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80040c8:	480d      	ldr	r0, [pc, #52]	; (8004100 <prvInitialiseTaskLists+0x64>)
 80040ca:	f7fe fa6f 	bl	80025ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80040ce:	480d      	ldr	r0, [pc, #52]	; (8004104 <prvInitialiseTaskLists+0x68>)
 80040d0:	f7fe fa6c 	bl	80025ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80040d4:	480c      	ldr	r0, [pc, #48]	; (8004108 <prvInitialiseTaskLists+0x6c>)
 80040d6:	f7fe fa69 	bl	80025ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80040da:	480c      	ldr	r0, [pc, #48]	; (800410c <prvInitialiseTaskLists+0x70>)
 80040dc:	f7fe fa66 	bl	80025ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80040e0:	480b      	ldr	r0, [pc, #44]	; (8004110 <prvInitialiseTaskLists+0x74>)
 80040e2:	f7fe fa63 	bl	80025ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80040e6:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <prvInitialiseTaskLists+0x78>)
 80040e8:	4a05      	ldr	r2, [pc, #20]	; (8004100 <prvInitialiseTaskLists+0x64>)
 80040ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80040ec:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <prvInitialiseTaskLists+0x7c>)
 80040ee:	4a05      	ldr	r2, [pc, #20]	; (8004104 <prvInitialiseTaskLists+0x68>)
 80040f0:	601a      	str	r2, [r3, #0]
}
 80040f2:	bf00      	nop
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	24004448 	.word	0x24004448
 8004100:	240048a8 	.word	0x240048a8
 8004104:	240048bc 	.word	0x240048bc
 8004108:	240048d8 	.word	0x240048d8
 800410c:	240048ec 	.word	0x240048ec
 8004110:	24004904 	.word	0x24004904
 8004114:	240048d0 	.word	0x240048d0
 8004118:	240048d4 	.word	0x240048d4

0800411c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004122:	e019      	b.n	8004158 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004124:	f7fe fc26 	bl	8002974 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004128:	4b10      	ldr	r3, [pc, #64]	; (800416c <prvCheckTasksWaitingTermination+0x50>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3304      	adds	r3, #4
 8004134:	4618      	mov	r0, r3
 8004136:	f7fe fac3 	bl	80026c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800413a:	4b0d      	ldr	r3, [pc, #52]	; (8004170 <prvCheckTasksWaitingTermination+0x54>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3b01      	subs	r3, #1
 8004140:	4a0b      	ldr	r2, [pc, #44]	; (8004170 <prvCheckTasksWaitingTermination+0x54>)
 8004142:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004144:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <prvCheckTasksWaitingTermination+0x58>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	3b01      	subs	r3, #1
 800414a:	4a0a      	ldr	r2, [pc, #40]	; (8004174 <prvCheckTasksWaitingTermination+0x58>)
 800414c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800414e:	f7fe fc41 	bl	80029d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f810 	bl	8004178 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004158:	4b06      	ldr	r3, [pc, #24]	; (8004174 <prvCheckTasksWaitingTermination+0x58>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1e1      	bne.n	8004124 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004160:	bf00      	nop
 8004162:	bf00      	nop
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	240048ec 	.word	0x240048ec
 8004170:	24004918 	.word	0x24004918
 8004174:	24004900 	.word	0x24004900

08004178 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3354      	adds	r3, #84	; 0x54
 8004184:	4618      	mov	r0, r3
 8004186:	f000 fd11 	bl	8004bac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004190:	2b00      	cmp	r3, #0
 8004192:	d108      	bne.n	80041a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004198:	4618      	mov	r0, r3
 800419a:	f7fe f8e9 	bl	8002370 <vPortFree>
				vPortFree( pxTCB );
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7fe f8e6 	bl	8002370 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80041a4:	e018      	b.n	80041d8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d103      	bne.n	80041b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7fe f8dd 	bl	8002370 <vPortFree>
	}
 80041b6:	e00f      	b.n	80041d8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d00a      	beq.n	80041d8 <prvDeleteTCB+0x60>
	__asm volatile
 80041c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	60fb      	str	r3, [r7, #12]
}
 80041d4:	bf00      	nop
 80041d6:	e7fe      	b.n	80041d6 <prvDeleteTCB+0x5e>
	}
 80041d8:	bf00      	nop
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041e6:	4b0c      	ldr	r3, [pc, #48]	; (8004218 <prvResetNextTaskUnblockTime+0x38>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d104      	bne.n	80041fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80041f0:	4b0a      	ldr	r3, [pc, #40]	; (800421c <prvResetNextTaskUnblockTime+0x3c>)
 80041f2:	f04f 32ff 	mov.w	r2, #4294967295
 80041f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80041f8:	e008      	b.n	800420c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041fa:	4b07      	ldr	r3, [pc, #28]	; (8004218 <prvResetNextTaskUnblockTime+0x38>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	4a04      	ldr	r2, [pc, #16]	; (800421c <prvResetNextTaskUnblockTime+0x3c>)
 800420a:	6013      	str	r3, [r2, #0]
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	240048d0 	.word	0x240048d0
 800421c:	24004938 	.word	0x24004938

08004220 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004226:	4b0b      	ldr	r3, [pc, #44]	; (8004254 <xTaskGetSchedulerState+0x34>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d102      	bne.n	8004234 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800422e:	2301      	movs	r3, #1
 8004230:	607b      	str	r3, [r7, #4]
 8004232:	e008      	b.n	8004246 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004234:	4b08      	ldr	r3, [pc, #32]	; (8004258 <xTaskGetSchedulerState+0x38>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d102      	bne.n	8004242 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800423c:	2302      	movs	r3, #2
 800423e:	607b      	str	r3, [r7, #4]
 8004240:	e001      	b.n	8004246 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004242:	2300      	movs	r3, #0
 8004244:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004246:	687b      	ldr	r3, [r7, #4]
	}
 8004248:	4618      	mov	r0, r3
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	24004924 	.word	0x24004924
 8004258:	24004940 	.word	0x24004940

0800425c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d056      	beq.n	8004320 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004272:	4b2e      	ldr	r3, [pc, #184]	; (800432c <xTaskPriorityDisinherit+0xd0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	429a      	cmp	r2, r3
 800427a:	d00a      	beq.n	8004292 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800427c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004280:	f383 8811 	msr	BASEPRI, r3
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	60fb      	str	r3, [r7, #12]
}
 800428e:	bf00      	nop
 8004290:	e7fe      	b.n	8004290 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10a      	bne.n	80042b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800429a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429e:	f383 8811 	msr	BASEPRI, r3
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	60bb      	str	r3, [r7, #8]
}
 80042ac:	bf00      	nop
 80042ae:	e7fe      	b.n	80042ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b4:	1e5a      	subs	r2, r3, #1
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d02c      	beq.n	8004320 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d128      	bne.n	8004320 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	3304      	adds	r3, #4
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fe f9f4 	bl	80026c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f0:	4b0f      	ldr	r3, [pc, #60]	; (8004330 <xTaskPriorityDisinherit+0xd4>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d903      	bls.n	8004300 <xTaskPriorityDisinherit+0xa4>
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fc:	4a0c      	ldr	r2, [pc, #48]	; (8004330 <xTaskPriorityDisinherit+0xd4>)
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004304:	4613      	mov	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4a09      	ldr	r2, [pc, #36]	; (8004334 <xTaskPriorityDisinherit+0xd8>)
 800430e:	441a      	add	r2, r3
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	3304      	adds	r3, #4
 8004314:	4619      	mov	r1, r3
 8004316:	4610      	mov	r0, r2
 8004318:	f7fe f975 	bl	8002606 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800431c:	2301      	movs	r3, #1
 800431e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004320:	697b      	ldr	r3, [r7, #20]
	}
 8004322:	4618      	mov	r0, r3
 8004324:	3718      	adds	r7, #24
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	24004444 	.word	0x24004444
 8004330:	24004920 	.word	0x24004920
 8004334:	24004448 	.word	0x24004448

08004338 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004342:	4b21      	ldr	r3, [pc, #132]	; (80043c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004348:	4b20      	ldr	r3, [pc, #128]	; (80043cc <prvAddCurrentTaskToDelayedList+0x94>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3304      	adds	r3, #4
 800434e:	4618      	mov	r0, r3
 8004350:	f7fe f9b6 	bl	80026c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435a:	d10a      	bne.n	8004372 <prvAddCurrentTaskToDelayedList+0x3a>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d007      	beq.n	8004372 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004362:	4b1a      	ldr	r3, [pc, #104]	; (80043cc <prvAddCurrentTaskToDelayedList+0x94>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3304      	adds	r3, #4
 8004368:	4619      	mov	r1, r3
 800436a:	4819      	ldr	r0, [pc, #100]	; (80043d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800436c:	f7fe f94b 	bl	8002606 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004370:	e026      	b.n	80043c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4413      	add	r3, r2
 8004378:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800437a:	4b14      	ldr	r3, [pc, #80]	; (80043cc <prvAddCurrentTaskToDelayedList+0x94>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	429a      	cmp	r2, r3
 8004388:	d209      	bcs.n	800439e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800438a:	4b12      	ldr	r3, [pc, #72]	; (80043d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <prvAddCurrentTaskToDelayedList+0x94>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	3304      	adds	r3, #4
 8004394:	4619      	mov	r1, r3
 8004396:	4610      	mov	r0, r2
 8004398:	f7fe f959 	bl	800264e <vListInsert>
}
 800439c:	e010      	b.n	80043c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800439e:	4b0e      	ldr	r3, [pc, #56]	; (80043d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <prvAddCurrentTaskToDelayedList+0x94>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3304      	adds	r3, #4
 80043a8:	4619      	mov	r1, r3
 80043aa:	4610      	mov	r0, r2
 80043ac:	f7fe f94f 	bl	800264e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043b0:	4b0a      	ldr	r3, [pc, #40]	; (80043dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d202      	bcs.n	80043c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80043ba:	4a08      	ldr	r2, [pc, #32]	; (80043dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	6013      	str	r3, [r2, #0]
}
 80043c0:	bf00      	nop
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	2400491c 	.word	0x2400491c
 80043cc:	24004444 	.word	0x24004444
 80043d0:	24004904 	.word	0x24004904
 80043d4:	240048d4 	.word	0x240048d4
 80043d8:	240048d0 	.word	0x240048d0
 80043dc:	24004938 	.word	0x24004938

080043e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b08a      	sub	sp, #40	; 0x28
 80043e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80043ea:	f000 fb07 	bl	80049fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80043ee:	4b1c      	ldr	r3, [pc, #112]	; (8004460 <xTimerCreateTimerTask+0x80>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d021      	beq.n	800443a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80043fa:	2300      	movs	r3, #0
 80043fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80043fe:	1d3a      	adds	r2, r7, #4
 8004400:	f107 0108 	add.w	r1, r7, #8
 8004404:	f107 030c 	add.w	r3, r7, #12
 8004408:	4618      	mov	r0, r3
 800440a:	f7fd fecb 	bl	80021a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	9202      	str	r2, [sp, #8]
 8004416:	9301      	str	r3, [sp, #4]
 8004418:	2302      	movs	r3, #2
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	2300      	movs	r3, #0
 800441e:	460a      	mov	r2, r1
 8004420:	4910      	ldr	r1, [pc, #64]	; (8004464 <xTimerCreateTimerTask+0x84>)
 8004422:	4811      	ldr	r0, [pc, #68]	; (8004468 <xTimerCreateTimerTask+0x88>)
 8004424:	f7ff f8b4 	bl	8003590 <xTaskCreateStatic>
 8004428:	4603      	mov	r3, r0
 800442a:	4a10      	ldr	r2, [pc, #64]	; (800446c <xTimerCreateTimerTask+0x8c>)
 800442c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800442e:	4b0f      	ldr	r3, [pc, #60]	; (800446c <xTimerCreateTimerTask+0x8c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004436:	2301      	movs	r3, #1
 8004438:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10a      	bne.n	8004456 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	613b      	str	r3, [r7, #16]
}
 8004452:	bf00      	nop
 8004454:	e7fe      	b.n	8004454 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004456:	697b      	ldr	r3, [r7, #20]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3718      	adds	r7, #24
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	24004974 	.word	0x24004974
 8004464:	08004ca8 	.word	0x08004ca8
 8004468:	080045a5 	.word	0x080045a5
 800446c:	24004978 	.word	0x24004978

08004470 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b08a      	sub	sp, #40	; 0x28
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800447e:	2300      	movs	r3, #0
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10a      	bne.n	800449e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448c:	f383 8811 	msr	BASEPRI, r3
 8004490:	f3bf 8f6f 	isb	sy
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	623b      	str	r3, [r7, #32]
}
 800449a:	bf00      	nop
 800449c:	e7fe      	b.n	800449c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800449e:	4b1a      	ldr	r3, [pc, #104]	; (8004508 <xTimerGenericCommand+0x98>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d02a      	beq.n	80044fc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b05      	cmp	r3, #5
 80044b6:	dc18      	bgt.n	80044ea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80044b8:	f7ff feb2 	bl	8004220 <xTaskGetSchedulerState>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d109      	bne.n	80044d6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80044c2:	4b11      	ldr	r3, [pc, #68]	; (8004508 <xTimerGenericCommand+0x98>)
 80044c4:	6818      	ldr	r0, [r3, #0]
 80044c6:	f107 0110 	add.w	r1, r7, #16
 80044ca:	2300      	movs	r3, #0
 80044cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ce:	f7fe fc77 	bl	8002dc0 <xQueueGenericSend>
 80044d2:	6278      	str	r0, [r7, #36]	; 0x24
 80044d4:	e012      	b.n	80044fc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80044d6:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <xTimerGenericCommand+0x98>)
 80044d8:	6818      	ldr	r0, [r3, #0]
 80044da:	f107 0110 	add.w	r1, r7, #16
 80044de:	2300      	movs	r3, #0
 80044e0:	2200      	movs	r2, #0
 80044e2:	f7fe fc6d 	bl	8002dc0 <xQueueGenericSend>
 80044e6:	6278      	str	r0, [r7, #36]	; 0x24
 80044e8:	e008      	b.n	80044fc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80044ea:	4b07      	ldr	r3, [pc, #28]	; (8004508 <xTimerGenericCommand+0x98>)
 80044ec:	6818      	ldr	r0, [r3, #0]
 80044ee:	f107 0110 	add.w	r1, r7, #16
 80044f2:	2300      	movs	r3, #0
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	f7fe fd61 	bl	8002fbc <xQueueGenericSendFromISR>
 80044fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3728      	adds	r7, #40	; 0x28
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	24004974 	.word	0x24004974

0800450c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b088      	sub	sp, #32
 8004510:	af02      	add	r7, sp, #8
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004516:	4b22      	ldr	r3, [pc, #136]	; (80045a0 <prvProcessExpiredTimer+0x94>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	3304      	adds	r3, #4
 8004524:	4618      	mov	r0, r3
 8004526:	f7fe f8cb 	bl	80026c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d022      	beq.n	800457e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	699a      	ldr	r2, [r3, #24]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	18d1      	adds	r1, r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	6978      	ldr	r0, [r7, #20]
 8004546:	f000 f8d1 	bl	80046ec <prvInsertTimerInActiveList>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d01f      	beq.n	8004590 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004550:	2300      	movs	r3, #0
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	2300      	movs	r3, #0
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	2100      	movs	r1, #0
 800455a:	6978      	ldr	r0, [r7, #20]
 800455c:	f7ff ff88 	bl	8004470 <xTimerGenericCommand>
 8004560:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d113      	bne.n	8004590 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456c:	f383 8811 	msr	BASEPRI, r3
 8004570:	f3bf 8f6f 	isb	sy
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	60fb      	str	r3, [r7, #12]
}
 800457a:	bf00      	nop
 800457c:	e7fe      	b.n	800457c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004584:	f023 0301 	bic.w	r3, r3, #1
 8004588:	b2da      	uxtb	r2, r3
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	6978      	ldr	r0, [r7, #20]
 8004596:	4798      	blx	r3
}
 8004598:	bf00      	nop
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	2400496c 	.word	0x2400496c

080045a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045ac:	f107 0308 	add.w	r3, r7, #8
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 f857 	bl	8004664 <prvGetNextExpireTime>
 80045b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4619      	mov	r1, r3
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 f803 	bl	80045c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80045c2:	f000 f8d5 	bl	8004770 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045c6:	e7f1      	b.n	80045ac <prvTimerTask+0x8>

080045c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80045d2:	f7ff fa39 	bl	8003a48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045d6:	f107 0308 	add.w	r3, r7, #8
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 f866 	bl	80046ac <prvSampleTimeNow>
 80045e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d130      	bne.n	800464a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10a      	bne.n	8004604 <prvProcessTimerOrBlockTask+0x3c>
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d806      	bhi.n	8004604 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80045f6:	f7ff fa35 	bl	8003a64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80045fa:	68f9      	ldr	r1, [r7, #12]
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7ff ff85 	bl	800450c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004602:	e024      	b.n	800464e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d008      	beq.n	800461c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800460a:	4b13      	ldr	r3, [pc, #76]	; (8004658 <prvProcessTimerOrBlockTask+0x90>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <prvProcessTimerOrBlockTask+0x50>
 8004614:	2301      	movs	r3, #1
 8004616:	e000      	b.n	800461a <prvProcessTimerOrBlockTask+0x52>
 8004618:	2300      	movs	r3, #0
 800461a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800461c:	4b0f      	ldr	r3, [pc, #60]	; (800465c <prvProcessTimerOrBlockTask+0x94>)
 800461e:	6818      	ldr	r0, [r3, #0]
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	4619      	mov	r1, r3
 800462a:	f7fe ff7d 	bl	8003528 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800462e:	f7ff fa19 	bl	8003a64 <xTaskResumeAll>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10a      	bne.n	800464e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004638:	4b09      	ldr	r3, [pc, #36]	; (8004660 <prvProcessTimerOrBlockTask+0x98>)
 800463a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	f3bf 8f6f 	isb	sy
}
 8004648:	e001      	b.n	800464e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800464a:	f7ff fa0b 	bl	8003a64 <xTaskResumeAll>
}
 800464e:	bf00      	nop
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	24004970 	.word	0x24004970
 800465c:	24004974 	.word	0x24004974
 8004660:	e000ed04 	.word	0xe000ed04

08004664 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800466c:	4b0e      	ldr	r3, [pc, #56]	; (80046a8 <prvGetNextExpireTime+0x44>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <prvGetNextExpireTime+0x16>
 8004676:	2201      	movs	r2, #1
 8004678:	e000      	b.n	800467c <prvGetNextExpireTime+0x18>
 800467a:	2200      	movs	r2, #0
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d105      	bne.n	8004694 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004688:	4b07      	ldr	r3, [pc, #28]	; (80046a8 <prvGetNextExpireTime+0x44>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	e001      	b.n	8004698 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004698:	68fb      	ldr	r3, [r7, #12]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	2400496c 	.word	0x2400496c

080046ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80046b4:	f7ff fa74 	bl	8003ba0 <xTaskGetTickCount>
 80046b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80046ba:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <prvSampleTimeNow+0x3c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d205      	bcs.n	80046d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80046c4:	f000 f936 	bl	8004934 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	e002      	b.n	80046d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80046d6:	4a04      	ldr	r2, [pc, #16]	; (80046e8 <prvSampleTimeNow+0x3c>)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80046dc:	68fb      	ldr	r3, [r7, #12]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	2400497c 	.word	0x2400497c

080046ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80046fa:	2300      	movs	r3, #0
 80046fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	429a      	cmp	r2, r3
 8004710:	d812      	bhi.n	8004738 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	1ad2      	subs	r2, r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	429a      	cmp	r2, r3
 800471e:	d302      	bcc.n	8004726 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004720:	2301      	movs	r3, #1
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	e01b      	b.n	800475e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004726:	4b10      	ldr	r3, [pc, #64]	; (8004768 <prvInsertTimerInActiveList+0x7c>)
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	3304      	adds	r3, #4
 800472e:	4619      	mov	r1, r3
 8004730:	4610      	mov	r0, r2
 8004732:	f7fd ff8c 	bl	800264e <vListInsert>
 8004736:	e012      	b.n	800475e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	429a      	cmp	r2, r3
 800473e:	d206      	bcs.n	800474e <prvInsertTimerInActiveList+0x62>
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	429a      	cmp	r2, r3
 8004746:	d302      	bcc.n	800474e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004748:	2301      	movs	r3, #1
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	e007      	b.n	800475e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800474e:	4b07      	ldr	r3, [pc, #28]	; (800476c <prvInsertTimerInActiveList+0x80>)
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	3304      	adds	r3, #4
 8004756:	4619      	mov	r1, r3
 8004758:	4610      	mov	r0, r2
 800475a:	f7fd ff78 	bl	800264e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800475e:	697b      	ldr	r3, [r7, #20]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	24004970 	.word	0x24004970
 800476c:	2400496c 	.word	0x2400496c

08004770 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b08e      	sub	sp, #56	; 0x38
 8004774:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004776:	e0ca      	b.n	800490e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	da18      	bge.n	80047b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800477e:	1d3b      	adds	r3, r7, #4
 8004780:	3304      	adds	r3, #4
 8004782:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10a      	bne.n	80047a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	61fb      	str	r3, [r7, #28]
}
 800479c:	bf00      	nop
 800479e:	e7fe      	b.n	800479e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80047a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047a6:	6850      	ldr	r0, [r2, #4]
 80047a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047aa:	6892      	ldr	r2, [r2, #8]
 80047ac:	4611      	mov	r1, r2
 80047ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f2c0 80aa 	blt.w	800490c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80047bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d004      	beq.n	80047ce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c6:	3304      	adds	r3, #4
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7fd ff79 	bl	80026c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047ce:	463b      	mov	r3, r7
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7ff ff6b 	bl	80046ac <prvSampleTimeNow>
 80047d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b09      	cmp	r3, #9
 80047dc:	f200 8097 	bhi.w	800490e <prvProcessReceivedCommands+0x19e>
 80047e0:	a201      	add	r2, pc, #4	; (adr r2, 80047e8 <prvProcessReceivedCommands+0x78>)
 80047e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e6:	bf00      	nop
 80047e8:	08004811 	.word	0x08004811
 80047ec:	08004811 	.word	0x08004811
 80047f0:	08004811 	.word	0x08004811
 80047f4:	08004885 	.word	0x08004885
 80047f8:	08004899 	.word	0x08004899
 80047fc:	080048e3 	.word	0x080048e3
 8004800:	08004811 	.word	0x08004811
 8004804:	08004811 	.word	0x08004811
 8004808:	08004885 	.word	0x08004885
 800480c:	08004899 	.word	0x08004899
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004812:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004816:	f043 0301 	orr.w	r3, r3, #1
 800481a:	b2da      	uxtb	r2, r3
 800481c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	18d1      	adds	r1, r2, r3
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800482e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004830:	f7ff ff5c 	bl	80046ec <prvInsertTimerInActiveList>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d069      	beq.n	800490e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800483a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004840:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004844:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	d05e      	beq.n	800490e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	441a      	add	r2, r3
 8004858:	2300      	movs	r3, #0
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	2300      	movs	r3, #0
 800485e:	2100      	movs	r1, #0
 8004860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004862:	f7ff fe05 	bl	8004470 <xTimerGenericCommand>
 8004866:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d14f      	bne.n	800490e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800486e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004872:	f383 8811 	msr	BASEPRI, r3
 8004876:	f3bf 8f6f 	isb	sy
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	61bb      	str	r3, [r7, #24]
}
 8004880:	bf00      	nop
 8004882:	e7fe      	b.n	8004882 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004886:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800488a:	f023 0301 	bic.w	r3, r3, #1
 800488e:	b2da      	uxtb	r2, r3
 8004890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004892:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004896:	e03a      	b.n	800490e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800489e:	f043 0301 	orr.w	r3, r3, #1
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10a      	bne.n	80048ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80048b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048bc:	f383 8811 	msr	BASEPRI, r3
 80048c0:	f3bf 8f6f 	isb	sy
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	617b      	str	r3, [r7, #20]
}
 80048ca:	bf00      	nop
 80048cc:	e7fe      	b.n	80048cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80048ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d0:	699a      	ldr	r2, [r3, #24]
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	18d1      	adds	r1, r2, r3
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048dc:	f7ff ff06 	bl	80046ec <prvInsertTimerInActiveList>
					break;
 80048e0:	e015      	b.n	800490e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80048e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d103      	bne.n	80048f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80048f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048f2:	f7fd fd3d 	bl	8002370 <vPortFree>
 80048f6:	e00a      	b.n	800490e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048fe:	f023 0301 	bic.w	r3, r3, #1
 8004902:	b2da      	uxtb	r2, r3
 8004904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004906:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800490a:	e000      	b.n	800490e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800490c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800490e:	4b08      	ldr	r3, [pc, #32]	; (8004930 <prvProcessReceivedCommands+0x1c0>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	1d39      	adds	r1, r7, #4
 8004914:	2200      	movs	r2, #0
 8004916:	4618      	mov	r0, r3
 8004918:	f7fe fbec 	bl	80030f4 <xQueueReceive>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	f47f af2a 	bne.w	8004778 <prvProcessReceivedCommands+0x8>
	}
}
 8004924:	bf00      	nop
 8004926:	bf00      	nop
 8004928:	3730      	adds	r7, #48	; 0x30
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	24004974 	.word	0x24004974

08004934 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b088      	sub	sp, #32
 8004938:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800493a:	e048      	b.n	80049ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800493c:	4b2d      	ldr	r3, [pc, #180]	; (80049f4 <prvSwitchTimerLists+0xc0>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004946:	4b2b      	ldr	r3, [pc, #172]	; (80049f4 <prvSwitchTimerLists+0xc0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	3304      	adds	r3, #4
 8004954:	4618      	mov	r0, r3
 8004956:	f7fd feb3 	bl	80026c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	d02e      	beq.n	80049ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	4413      	add	r3, r2
 8004978:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	429a      	cmp	r2, r3
 8004980:	d90e      	bls.n	80049a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800498e:	4b19      	ldr	r3, [pc, #100]	; (80049f4 <prvSwitchTimerLists+0xc0>)
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	3304      	adds	r3, #4
 8004996:	4619      	mov	r1, r3
 8004998:	4610      	mov	r0, r2
 800499a:	f7fd fe58 	bl	800264e <vListInsert>
 800499e:	e016      	b.n	80049ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049a0:	2300      	movs	r3, #0
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	2300      	movs	r3, #0
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	2100      	movs	r1, #0
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f7ff fd60 	bl	8004470 <xTimerGenericCommand>
 80049b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10a      	bne.n	80049ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 80049b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	603b      	str	r3, [r7, #0]
}
 80049ca:	bf00      	nop
 80049cc:	e7fe      	b.n	80049cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049ce:	4b09      	ldr	r3, [pc, #36]	; (80049f4 <prvSwitchTimerLists+0xc0>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1b1      	bne.n	800493c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80049d8:	4b06      	ldr	r3, [pc, #24]	; (80049f4 <prvSwitchTimerLists+0xc0>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80049de:	4b06      	ldr	r3, [pc, #24]	; (80049f8 <prvSwitchTimerLists+0xc4>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a04      	ldr	r2, [pc, #16]	; (80049f4 <prvSwitchTimerLists+0xc0>)
 80049e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80049e6:	4a04      	ldr	r2, [pc, #16]	; (80049f8 <prvSwitchTimerLists+0xc4>)
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	6013      	str	r3, [r2, #0]
}
 80049ec:	bf00      	nop
 80049ee:	3718      	adds	r7, #24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	2400496c 	.word	0x2400496c
 80049f8:	24004970 	.word	0x24004970

080049fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a02:	f7fd ffb7 	bl	8002974 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004a06:	4b15      	ldr	r3, [pc, #84]	; (8004a5c <prvCheckForValidListAndQueue+0x60>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d120      	bne.n	8004a50 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a0e:	4814      	ldr	r0, [pc, #80]	; (8004a60 <prvCheckForValidListAndQueue+0x64>)
 8004a10:	f7fd fdcc 	bl	80025ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004a14:	4813      	ldr	r0, [pc, #76]	; (8004a64 <prvCheckForValidListAndQueue+0x68>)
 8004a16:	f7fd fdc9 	bl	80025ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004a1a:	4b13      	ldr	r3, [pc, #76]	; (8004a68 <prvCheckForValidListAndQueue+0x6c>)
 8004a1c:	4a10      	ldr	r2, [pc, #64]	; (8004a60 <prvCheckForValidListAndQueue+0x64>)
 8004a1e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004a20:	4b12      	ldr	r3, [pc, #72]	; (8004a6c <prvCheckForValidListAndQueue+0x70>)
 8004a22:	4a10      	ldr	r2, [pc, #64]	; (8004a64 <prvCheckForValidListAndQueue+0x68>)
 8004a24:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004a26:	2300      	movs	r3, #0
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	4b11      	ldr	r3, [pc, #68]	; (8004a70 <prvCheckForValidListAndQueue+0x74>)
 8004a2c:	4a11      	ldr	r2, [pc, #68]	; (8004a74 <prvCheckForValidListAndQueue+0x78>)
 8004a2e:	2110      	movs	r1, #16
 8004a30:	200a      	movs	r0, #10
 8004a32:	f7fe f929 	bl	8002c88 <xQueueGenericCreateStatic>
 8004a36:	4603      	mov	r3, r0
 8004a38:	4a08      	ldr	r2, [pc, #32]	; (8004a5c <prvCheckForValidListAndQueue+0x60>)
 8004a3a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a3c:	4b07      	ldr	r3, [pc, #28]	; (8004a5c <prvCheckForValidListAndQueue+0x60>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a44:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <prvCheckForValidListAndQueue+0x60>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	490b      	ldr	r1, [pc, #44]	; (8004a78 <prvCheckForValidListAndQueue+0x7c>)
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fe fd42 	bl	80034d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a50:	f7fd ffc0 	bl	80029d4 <vPortExitCritical>
}
 8004a54:	bf00      	nop
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	24004974 	.word	0x24004974
 8004a60:	24004944 	.word	0x24004944
 8004a64:	24004958 	.word	0x24004958
 8004a68:	2400496c 	.word	0x2400496c
 8004a6c:	24004970 	.word	0x24004970
 8004a70:	24004a20 	.word	0x24004a20
 8004a74:	24004980 	.word	0x24004980
 8004a78:	08004cb0 	.word	0x08004cb0

08004a7c <__libc_init_array>:
 8004a7c:	b570      	push	{r4, r5, r6, lr}
 8004a7e:	4d0d      	ldr	r5, [pc, #52]	; (8004ab4 <__libc_init_array+0x38>)
 8004a80:	4c0d      	ldr	r4, [pc, #52]	; (8004ab8 <__libc_init_array+0x3c>)
 8004a82:	1b64      	subs	r4, r4, r5
 8004a84:	10a4      	asrs	r4, r4, #2
 8004a86:	2600      	movs	r6, #0
 8004a88:	42a6      	cmp	r6, r4
 8004a8a:	d109      	bne.n	8004aa0 <__libc_init_array+0x24>
 8004a8c:	4d0b      	ldr	r5, [pc, #44]	; (8004abc <__libc_init_array+0x40>)
 8004a8e:	4c0c      	ldr	r4, [pc, #48]	; (8004ac0 <__libc_init_array+0x44>)
 8004a90:	f000 f8f4 	bl	8004c7c <_init>
 8004a94:	1b64      	subs	r4, r4, r5
 8004a96:	10a4      	asrs	r4, r4, #2
 8004a98:	2600      	movs	r6, #0
 8004a9a:	42a6      	cmp	r6, r4
 8004a9c:	d105      	bne.n	8004aaa <__libc_init_array+0x2e>
 8004a9e:	bd70      	pop	{r4, r5, r6, pc}
 8004aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aa4:	4798      	blx	r3
 8004aa6:	3601      	adds	r6, #1
 8004aa8:	e7ee      	b.n	8004a88 <__libc_init_array+0xc>
 8004aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aae:	4798      	blx	r3
 8004ab0:	3601      	adds	r6, #1
 8004ab2:	e7f2      	b.n	8004a9a <__libc_init_array+0x1e>
 8004ab4:	08004d4c 	.word	0x08004d4c
 8004ab8:	08004d4c 	.word	0x08004d4c
 8004abc:	08004d4c 	.word	0x08004d4c
 8004ac0:	08004d50 	.word	0x08004d50

08004ac4 <memcpy>:
 8004ac4:	440a      	add	r2, r1
 8004ac6:	4291      	cmp	r1, r2
 8004ac8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004acc:	d100      	bne.n	8004ad0 <memcpy+0xc>
 8004ace:	4770      	bx	lr
 8004ad0:	b510      	push	{r4, lr}
 8004ad2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ad6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ada:	4291      	cmp	r1, r2
 8004adc:	d1f9      	bne.n	8004ad2 <memcpy+0xe>
 8004ade:	bd10      	pop	{r4, pc}

08004ae0 <memset>:
 8004ae0:	4402      	add	r2, r0
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d100      	bne.n	8004aea <memset+0xa>
 8004ae8:	4770      	bx	lr
 8004aea:	f803 1b01 	strb.w	r1, [r3], #1
 8004aee:	e7f9      	b.n	8004ae4 <memset+0x4>

08004af0 <_free_r>:
 8004af0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004af2:	2900      	cmp	r1, #0
 8004af4:	d048      	beq.n	8004b88 <_free_r+0x98>
 8004af6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004afa:	9001      	str	r0, [sp, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f1a1 0404 	sub.w	r4, r1, #4
 8004b02:	bfb8      	it	lt
 8004b04:	18e4      	addlt	r4, r4, r3
 8004b06:	f000 f8ad 	bl	8004c64 <__malloc_lock>
 8004b0a:	4a20      	ldr	r2, [pc, #128]	; (8004b8c <_free_r+0x9c>)
 8004b0c:	9801      	ldr	r0, [sp, #4]
 8004b0e:	6813      	ldr	r3, [r2, #0]
 8004b10:	4615      	mov	r5, r2
 8004b12:	b933      	cbnz	r3, 8004b22 <_free_r+0x32>
 8004b14:	6063      	str	r3, [r4, #4]
 8004b16:	6014      	str	r4, [r2, #0]
 8004b18:	b003      	add	sp, #12
 8004b1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b1e:	f000 b8a7 	b.w	8004c70 <__malloc_unlock>
 8004b22:	42a3      	cmp	r3, r4
 8004b24:	d90b      	bls.n	8004b3e <_free_r+0x4e>
 8004b26:	6821      	ldr	r1, [r4, #0]
 8004b28:	1862      	adds	r2, r4, r1
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	bf04      	itt	eq
 8004b2e:	681a      	ldreq	r2, [r3, #0]
 8004b30:	685b      	ldreq	r3, [r3, #4]
 8004b32:	6063      	str	r3, [r4, #4]
 8004b34:	bf04      	itt	eq
 8004b36:	1852      	addeq	r2, r2, r1
 8004b38:	6022      	streq	r2, [r4, #0]
 8004b3a:	602c      	str	r4, [r5, #0]
 8004b3c:	e7ec      	b.n	8004b18 <_free_r+0x28>
 8004b3e:	461a      	mov	r2, r3
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	b10b      	cbz	r3, 8004b48 <_free_r+0x58>
 8004b44:	42a3      	cmp	r3, r4
 8004b46:	d9fa      	bls.n	8004b3e <_free_r+0x4e>
 8004b48:	6811      	ldr	r1, [r2, #0]
 8004b4a:	1855      	adds	r5, r2, r1
 8004b4c:	42a5      	cmp	r5, r4
 8004b4e:	d10b      	bne.n	8004b68 <_free_r+0x78>
 8004b50:	6824      	ldr	r4, [r4, #0]
 8004b52:	4421      	add	r1, r4
 8004b54:	1854      	adds	r4, r2, r1
 8004b56:	42a3      	cmp	r3, r4
 8004b58:	6011      	str	r1, [r2, #0]
 8004b5a:	d1dd      	bne.n	8004b18 <_free_r+0x28>
 8004b5c:	681c      	ldr	r4, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	6053      	str	r3, [r2, #4]
 8004b62:	4421      	add	r1, r4
 8004b64:	6011      	str	r1, [r2, #0]
 8004b66:	e7d7      	b.n	8004b18 <_free_r+0x28>
 8004b68:	d902      	bls.n	8004b70 <_free_r+0x80>
 8004b6a:	230c      	movs	r3, #12
 8004b6c:	6003      	str	r3, [r0, #0]
 8004b6e:	e7d3      	b.n	8004b18 <_free_r+0x28>
 8004b70:	6825      	ldr	r5, [r4, #0]
 8004b72:	1961      	adds	r1, r4, r5
 8004b74:	428b      	cmp	r3, r1
 8004b76:	bf04      	itt	eq
 8004b78:	6819      	ldreq	r1, [r3, #0]
 8004b7a:	685b      	ldreq	r3, [r3, #4]
 8004b7c:	6063      	str	r3, [r4, #4]
 8004b7e:	bf04      	itt	eq
 8004b80:	1949      	addeq	r1, r1, r5
 8004b82:	6021      	streq	r1, [r4, #0]
 8004b84:	6054      	str	r4, [r2, #4]
 8004b86:	e7c7      	b.n	8004b18 <_free_r+0x28>
 8004b88:	b003      	add	sp, #12
 8004b8a:	bd30      	pop	{r4, r5, pc}
 8004b8c:	24004a70 	.word	0x24004a70

08004b90 <cleanup_glue>:
 8004b90:	b538      	push	{r3, r4, r5, lr}
 8004b92:	460c      	mov	r4, r1
 8004b94:	6809      	ldr	r1, [r1, #0]
 8004b96:	4605      	mov	r5, r0
 8004b98:	b109      	cbz	r1, 8004b9e <cleanup_glue+0xe>
 8004b9a:	f7ff fff9 	bl	8004b90 <cleanup_glue>
 8004b9e:	4621      	mov	r1, r4
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ba6:	f7ff bfa3 	b.w	8004af0 <_free_r>
	...

08004bac <_reclaim_reent>:
 8004bac:	4b2c      	ldr	r3, [pc, #176]	; (8004c60 <_reclaim_reent+0xb4>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4283      	cmp	r3, r0
 8004bb2:	b570      	push	{r4, r5, r6, lr}
 8004bb4:	4604      	mov	r4, r0
 8004bb6:	d051      	beq.n	8004c5c <_reclaim_reent+0xb0>
 8004bb8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004bba:	b143      	cbz	r3, 8004bce <_reclaim_reent+0x22>
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d14a      	bne.n	8004c58 <_reclaim_reent+0xac>
 8004bc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bc4:	6819      	ldr	r1, [r3, #0]
 8004bc6:	b111      	cbz	r1, 8004bce <_reclaim_reent+0x22>
 8004bc8:	4620      	mov	r0, r4
 8004bca:	f7ff ff91 	bl	8004af0 <_free_r>
 8004bce:	6961      	ldr	r1, [r4, #20]
 8004bd0:	b111      	cbz	r1, 8004bd8 <_reclaim_reent+0x2c>
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	f7ff ff8c 	bl	8004af0 <_free_r>
 8004bd8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004bda:	b111      	cbz	r1, 8004be2 <_reclaim_reent+0x36>
 8004bdc:	4620      	mov	r0, r4
 8004bde:	f7ff ff87 	bl	8004af0 <_free_r>
 8004be2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004be4:	b111      	cbz	r1, 8004bec <_reclaim_reent+0x40>
 8004be6:	4620      	mov	r0, r4
 8004be8:	f7ff ff82 	bl	8004af0 <_free_r>
 8004bec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004bee:	b111      	cbz	r1, 8004bf6 <_reclaim_reent+0x4a>
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	f7ff ff7d 	bl	8004af0 <_free_r>
 8004bf6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004bf8:	b111      	cbz	r1, 8004c00 <_reclaim_reent+0x54>
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f7ff ff78 	bl	8004af0 <_free_r>
 8004c00:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004c02:	b111      	cbz	r1, 8004c0a <_reclaim_reent+0x5e>
 8004c04:	4620      	mov	r0, r4
 8004c06:	f7ff ff73 	bl	8004af0 <_free_r>
 8004c0a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004c0c:	b111      	cbz	r1, 8004c14 <_reclaim_reent+0x68>
 8004c0e:	4620      	mov	r0, r4
 8004c10:	f7ff ff6e 	bl	8004af0 <_free_r>
 8004c14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c16:	b111      	cbz	r1, 8004c1e <_reclaim_reent+0x72>
 8004c18:	4620      	mov	r0, r4
 8004c1a:	f7ff ff69 	bl	8004af0 <_free_r>
 8004c1e:	69a3      	ldr	r3, [r4, #24]
 8004c20:	b1e3      	cbz	r3, 8004c5c <_reclaim_reent+0xb0>
 8004c22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004c24:	4620      	mov	r0, r4
 8004c26:	4798      	blx	r3
 8004c28:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004c2a:	b1b9      	cbz	r1, 8004c5c <_reclaim_reent+0xb0>
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004c32:	f7ff bfad 	b.w	8004b90 <cleanup_glue>
 8004c36:	5949      	ldr	r1, [r1, r5]
 8004c38:	b941      	cbnz	r1, 8004c4c <_reclaim_reent+0xa0>
 8004c3a:	3504      	adds	r5, #4
 8004c3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c3e:	2d80      	cmp	r5, #128	; 0x80
 8004c40:	68d9      	ldr	r1, [r3, #12]
 8004c42:	d1f8      	bne.n	8004c36 <_reclaim_reent+0x8a>
 8004c44:	4620      	mov	r0, r4
 8004c46:	f7ff ff53 	bl	8004af0 <_free_r>
 8004c4a:	e7ba      	b.n	8004bc2 <_reclaim_reent+0x16>
 8004c4c:	680e      	ldr	r6, [r1, #0]
 8004c4e:	4620      	mov	r0, r4
 8004c50:	f7ff ff4e 	bl	8004af0 <_free_r>
 8004c54:	4631      	mov	r1, r6
 8004c56:	e7ef      	b.n	8004c38 <_reclaim_reent+0x8c>
 8004c58:	2500      	movs	r5, #0
 8004c5a:	e7ef      	b.n	8004c3c <_reclaim_reent+0x90>
 8004c5c:	bd70      	pop	{r4, r5, r6, pc}
 8004c5e:	bf00      	nop
 8004c60:	24000014 	.word	0x24000014

08004c64 <__malloc_lock>:
 8004c64:	4801      	ldr	r0, [pc, #4]	; (8004c6c <__malloc_lock+0x8>)
 8004c66:	f7fb bde4 	b.w	8000832 <__retarget_lock_acquire_recursive>
 8004c6a:	bf00      	nop
 8004c6c:	24000094 	.word	0x24000094

08004c70 <__malloc_unlock>:
 8004c70:	4801      	ldr	r0, [pc, #4]	; (8004c78 <__malloc_unlock+0x8>)
 8004c72:	f7fb bdf2 	b.w	800085a <__retarget_lock_release_recursive>
 8004c76:	bf00      	nop
 8004c78:	24000094 	.word	0x24000094

08004c7c <_init>:
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7e:	bf00      	nop
 8004c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c82:	bc08      	pop	{r3}
 8004c84:	469e      	mov	lr, r3
 8004c86:	4770      	bx	lr

08004c88 <_fini>:
 8004c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8a:	bf00      	nop
 8004c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c8e:	bc08      	pop	{r3}
 8004c90:	469e      	mov	lr, r3
 8004c92:	4770      	bx	lr
