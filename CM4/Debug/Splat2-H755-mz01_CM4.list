
Splat2-H755-mz01_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ba8  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08104e48  08104e48  00014e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08104f4c  08104f4c  00014f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08104f50  08104f50  00014f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  10000000  08104f54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004a50  10000078  08104fcc  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10004ac8  08104fcc  00024ac8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001cba7  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003858  00000000  00000000  0003cc4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000fc0  00000000  00000000  000404a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000e88  00000000  00000000  00041468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003a68e  00000000  00000000  000422f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00010ae5  00000000  00000000  0007c97e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0017dd01  00000000  00000000  0008d463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0020b164  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004778  00000000  00000000  0020b1b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000078 	.word	0x10000078
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08104e30 	.word	0x08104e30

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000007c 	.word	0x1000007c
 81002dc:	08104e30 	.word	0x08104e30

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100380:	b480      	push	{r7}
 8100382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100384:	4b0b      	ldr	r3, [pc, #44]	; (81003b4 <SystemInit+0x34>)
 8100386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810038a:	4a0a      	ldr	r2, [pc, #40]	; (81003b4 <SystemInit+0x34>)
 810038c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100394:	4b07      	ldr	r3, [pc, #28]	; (81003b4 <SystemInit+0x34>)
 8100396:	691b      	ldr	r3, [r3, #16]
 8100398:	4a06      	ldr	r2, [pc, #24]	; (81003b4 <SystemInit+0x34>)
 810039a:	f043 0310 	orr.w	r3, r3, #16
 810039e:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81003a0:	4b04      	ldr	r3, [pc, #16]	; (81003b4 <SystemInit+0x34>)
 81003a2:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 81003a6:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 81003a8:	bf00      	nop
 81003aa:	46bd      	mov	sp, r7
 81003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003b0:	4770      	bx	lr
 81003b2:	bf00      	nop
 81003b4:	e000ed00 	.word	0xe000ed00

081003b8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 81003b8:	b480      	push	{r7}
 81003ba:	b083      	sub	sp, #12
 81003bc:	af00      	add	r7, sp, #0
 81003be:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 81003c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 81003c4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 81003c8:	f003 0301 	and.w	r3, r3, #1
 81003cc:	2b00      	cmp	r3, #0
 81003ce:	d013      	beq.n	81003f8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 81003d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 81003d4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 81003d8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 81003dc:	2b00      	cmp	r3, #0
 81003de:	d00b      	beq.n	81003f8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 81003e0:	e000      	b.n	81003e4 <ITM_SendChar+0x2c>
    {
      __NOP();
 81003e2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 81003e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 81003e8:	681b      	ldr	r3, [r3, #0]
 81003ea:	2b00      	cmp	r3, #0
 81003ec:	d0f9      	beq.n	81003e2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 81003ee:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 81003f2:	687a      	ldr	r2, [r7, #4]
 81003f4:	b2d2      	uxtb	r2, r2
 81003f6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 81003f8:	687b      	ldr	r3, [r7, #4]
}
 81003fa:	4618      	mov	r0, r3
 81003fc:	370c      	adds	r7, #12
 81003fe:	46bd      	mov	sp, r7
 8100400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100404:	4770      	bx	lr
	...

08100408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100408:	b580      	push	{r7, lr}
 810040a:	b082      	sub	sp, #8
 810040c:	af00      	add	r7, sp, #0
	/*************** CM4 *************************/
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 810040e:	4b21      	ldr	r3, [pc, #132]	; (8100494 <main+0x8c>)
 8100410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100414:	4a1f      	ldr	r2, [pc, #124]	; (8100494 <main+0x8c>)
 8100416:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810041a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810041e:	4b1d      	ldr	r3, [pc, #116]	; (8100494 <main+0x8c>)
 8100420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100428:	607b      	str	r3, [r7, #4]
 810042a:	687b      	ldr	r3, [r7, #4]
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810042c:	2001      	movs	r0, #1
 810042e:	f000 fd37 	bl	8100ea0 <HAL_HSEM_ActivateNotification>
	/*
	 Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
	 perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 8100432:	f000 fdc1 	bl	8100fb8 <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE,
 8100436:	2201      	movs	r2, #1
 8100438:	2102      	movs	r1, #2
 810043a:	2000      	movs	r0, #0
 810043c:	f000 fd42 	bl	8100ec4 <HAL_PWREx_EnterSTOPMode>
	PWR_D2_DOMAIN);
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100440:	4b15      	ldr	r3, [pc, #84]	; (8100498 <main+0x90>)
 8100442:	681b      	ldr	r3, [r3, #0]
 8100444:	091b      	lsrs	r3, r3, #4
 8100446:	f003 030f 	and.w	r3, r3, #15
 810044a:	2b07      	cmp	r3, #7
 810044c:	d108      	bne.n	8100460 <main+0x58>
 810044e:	4b13      	ldr	r3, [pc, #76]	; (810049c <main+0x94>)
 8100450:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100454:	4a11      	ldr	r2, [pc, #68]	; (810049c <main+0x94>)
 8100456:	f043 0301 	orr.w	r3, r3, #1
 810045a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810045e:	e007      	b.n	8100470 <main+0x68>
 8100460:	4b0e      	ldr	r3, [pc, #56]	; (810049c <main+0x94>)
 8100462:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100466:	4a0d      	ldr	r2, [pc, #52]	; (810049c <main+0x94>)
 8100468:	f043 0301 	orr.w	r3, r3, #1
 810046c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100470:	f000 f992 	bl	8100798 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100474:	f000 f81a 	bl	81004ac <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8100478:	f000 ff5a 	bl	8101330 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 810047c:	4a08      	ldr	r2, [pc, #32]	; (81004a0 <main+0x98>)
 810047e:	2100      	movs	r1, #0
 8100480:	4808      	ldr	r0, [pc, #32]	; (81004a4 <main+0x9c>)
 8100482:	f000 ff9f 	bl	81013c4 <osThreadNew>
 8100486:	4603      	mov	r3, r0
 8100488:	4a07      	ldr	r2, [pc, #28]	; (81004a8 <main+0xa0>)
 810048a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 810048c:	f000 ff74 	bl	8101378 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8100490:	e7fe      	b.n	8100490 <main+0x88>
 8100492:	bf00      	nop
 8100494:	58024400 	.word	0x58024400
 8100498:	e000ed00 	.word	0xe000ed00
 810049c:	58026400 	.word	0x58026400
 81004a0:	08104e90 	.word	0x08104e90
 81004a4:	08100549 	.word	0x08100549
 81004a8:	10004a70 	.word	0x10004a70

081004ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81004ac:	b580      	push	{r7, lr}
 81004ae:	b086      	sub	sp, #24
 81004b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81004b2:	1d3b      	adds	r3, r7, #4
 81004b4:	2200      	movs	r2, #0
 81004b6:	601a      	str	r2, [r3, #0]
 81004b8:	605a      	str	r2, [r3, #4]
 81004ba:	609a      	str	r2, [r3, #8]
 81004bc:	60da      	str	r2, [r3, #12]
 81004be:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81004c0:	4b18      	ldr	r3, [pc, #96]	; (8100524 <MX_GPIO_Init+0x78>)
 81004c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81004c6:	4a17      	ldr	r2, [pc, #92]	; (8100524 <MX_GPIO_Init+0x78>)
 81004c8:	f043 0308 	orr.w	r3, r3, #8
 81004cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81004d0:	4b14      	ldr	r3, [pc, #80]	; (8100524 <MX_GPIO_Init+0x78>)
 81004d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81004d6:	f003 0308 	and.w	r3, r3, #8
 81004da:	603b      	str	r3, [r7, #0]
 81004dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_SPLAT_GPIO_Port, LD2_SPLAT_Pin, GPIO_PIN_RESET);
 81004de:	2200      	movs	r2, #0
 81004e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 81004e4:	4810      	ldr	r0, [pc, #64]	; (8100528 <MX_GPIO_Init+0x7c>)
 81004e6:	f000 fca7 	bl	8100e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_SPLAT_Pin */
  GPIO_InitStruct.Pin = LD2_SPLAT_Pin;
 81004ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81004ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81004f0:	2301      	movs	r3, #1
 81004f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81004f4:	2300      	movs	r3, #0
 81004f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81004f8:	2300      	movs	r3, #0
 81004fa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LD2_SPLAT_GPIO_Port, &GPIO_InitStruct);
 81004fc:	1d3b      	adds	r3, r7, #4
 81004fe:	4619      	mov	r1, r3
 8100500:	4809      	ldr	r0, [pc, #36]	; (8100528 <MX_GPIO_Init+0x7c>)
 8100502:	f000 fae9 	bl	8100ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_2_SPLAT_Pin */
  GPIO_InitStruct.Pin = SW1_2_SPLAT_Pin;
 8100506:	2380      	movs	r3, #128	; 0x80
 8100508:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 810050a:	2300      	movs	r3, #0
 810050c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 810050e:	2301      	movs	r3, #1
 8100510:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SW1_2_SPLAT_GPIO_Port, &GPIO_InitStruct);
 8100512:	1d3b      	adds	r3, r7, #4
 8100514:	4619      	mov	r1, r3
 8100516:	4804      	ldr	r0, [pc, #16]	; (8100528 <MX_GPIO_Init+0x7c>)
 8100518:	f000 fade 	bl	8100ad8 <HAL_GPIO_Init>

}
 810051c:	bf00      	nop
 810051e:	3718      	adds	r7, #24
 8100520:	46bd      	mov	sp, r7
 8100522:	bd80      	pop	{r7, pc}
 8100524:	58024400 	.word	0x58024400
 8100528:	58020c00 	.word	0x58020c00

0810052c <__io_putchar>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
int __io_putchar(char ch)
{
 810052c:	b580      	push	{r7, lr}
 810052e:	b082      	sub	sp, #8
 8100530:	af00      	add	r7, sp, #0
 8100532:	4603      	mov	r3, r0
 8100534:	71fb      	strb	r3, [r7, #7]
    return ITM_SendChar(ch);
 8100536:	79fb      	ldrb	r3, [r7, #7]
 8100538:	4618      	mov	r0, r3
 810053a:	f7ff ff3d 	bl	81003b8 <ITM_SendChar>
 810053e:	4603      	mov	r3, r0
}
 8100540:	4618      	mov	r0, r3
 8100542:	3708      	adds	r7, #8
 8100544:	46bd      	mov	sp, r7
 8100546:	bd80      	pop	{r7, pc}

08100548 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8100548:	b580      	push	{r7, lr}
 810054a:	b084      	sub	sp, #16
 810054c:	af00      	add	r7, sp, #0
 810054e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	unsigned int i;

	/* Infinite loop */
	for (i = 0;; i++) {
 8100550:	2300      	movs	r3, #0
 8100552:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(LD2_SPLAT_GPIO_Port, LD2_SPLAT_Pin);
 8100554:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8100558:	4806      	ldr	r0, [pc, #24]	; (8100574 <StartDefaultTask+0x2c>)
 810055a:	f000 fc86 	bl	8100e6a <HAL_GPIO_TogglePin>
		osDelay(210);
 810055e:	20d2      	movs	r0, #210	; 0xd2
 8100560:	f000 ffc2 	bl	81014e8 <osDelay>
		printf("%d hello from M4\n", i);
 8100564:	68f9      	ldr	r1, [r7, #12]
 8100566:	4804      	ldr	r0, [pc, #16]	; (8100578 <StartDefaultTask+0x30>)
 8100568:	f003 fdf4 	bl	8104154 <iprintf>
	for (i = 0;; i++) {
 810056c:	68fb      	ldr	r3, [r7, #12]
 810056e:	3301      	adds	r3, #1
 8100570:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(LD2_SPLAT_GPIO_Port, LD2_SPLAT_Pin);
 8100572:	e7ef      	b.n	8100554 <StartDefaultTask+0xc>
 8100574:	58020c00 	.word	0x58020c00
 8100578:	08104e54 	.word	0x08104e54

0810057c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810057c:	b580      	push	{r7, lr}
 810057e:	b082      	sub	sp, #8
 8100580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100582:	4b0c      	ldr	r3, [pc, #48]	; (81005b4 <HAL_MspInit+0x38>)
 8100584:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100588:	4a0a      	ldr	r2, [pc, #40]	; (81005b4 <HAL_MspInit+0x38>)
 810058a:	f043 0302 	orr.w	r3, r3, #2
 810058e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100592:	4b08      	ldr	r3, [pc, #32]	; (81005b4 <HAL_MspInit+0x38>)
 8100594:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100598:	f003 0302 	and.w	r3, r3, #2
 810059c:	607b      	str	r3, [r7, #4]
 810059e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 81005a0:	2200      	movs	r2, #0
 81005a2:	210f      	movs	r1, #15
 81005a4:	f06f 0001 	mvn.w	r0, #1
 81005a8:	f000 fa5b 	bl	8100a62 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81005ac:	bf00      	nop
 81005ae:	3708      	adds	r7, #8
 81005b0:	46bd      	mov	sp, r7
 81005b2:	bd80      	pop	{r7, pc}
 81005b4:	58024400 	.word	0x58024400

081005b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81005b8:	b480      	push	{r7}
 81005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81005bc:	e7fe      	b.n	81005bc <NMI_Handler+0x4>

081005be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81005be:	b480      	push	{r7}
 81005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81005c2:	e7fe      	b.n	81005c2 <HardFault_Handler+0x4>

081005c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81005c4:	b480      	push	{r7}
 81005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81005c8:	e7fe      	b.n	81005c8 <MemManage_Handler+0x4>

081005ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81005ca:	b480      	push	{r7}
 81005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81005ce:	e7fe      	b.n	81005ce <BusFault_Handler+0x4>

081005d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81005d0:	b480      	push	{r7}
 81005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81005d4:	e7fe      	b.n	81005d4 <UsageFault_Handler+0x4>

081005d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81005d6:	b480      	push	{r7}
 81005d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81005da:	bf00      	nop
 81005dc:	46bd      	mov	sp, r7
 81005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005e2:	4770      	bx	lr

081005e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81005e4:	b580      	push	{r7, lr}
 81005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81005e8:	f000 f96a 	bl	81008c0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 81005ec:	f002 fff0 	bl	81035d0 <xTaskGetSchedulerState>
 81005f0:	4603      	mov	r3, r0
 81005f2:	2b01      	cmp	r3, #1
 81005f4:	d001      	beq.n	81005fa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 81005f6:	f001 fc27 	bl	8101e48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81005fa:	bf00      	nop
 81005fc:	bd80      	pop	{r7, pc}

081005fe <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 81005fe:	b580      	push	{r7, lr}
 8100600:	b086      	sub	sp, #24
 8100602:	af00      	add	r7, sp, #0
 8100604:	60f8      	str	r0, [r7, #12]
 8100606:	60b9      	str	r1, [r7, #8]
 8100608:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 810060a:	2300      	movs	r3, #0
 810060c:	617b      	str	r3, [r7, #20]
 810060e:	e00a      	b.n	8100626 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8100610:	f3af 8000 	nop.w
 8100614:	4601      	mov	r1, r0
 8100616:	68bb      	ldr	r3, [r7, #8]
 8100618:	1c5a      	adds	r2, r3, #1
 810061a:	60ba      	str	r2, [r7, #8]
 810061c:	b2ca      	uxtb	r2, r1
 810061e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100620:	697b      	ldr	r3, [r7, #20]
 8100622:	3301      	adds	r3, #1
 8100624:	617b      	str	r3, [r7, #20]
 8100626:	697a      	ldr	r2, [r7, #20]
 8100628:	687b      	ldr	r3, [r7, #4]
 810062a:	429a      	cmp	r2, r3
 810062c:	dbf0      	blt.n	8100610 <_read+0x12>
	}

return len;
 810062e:	687b      	ldr	r3, [r7, #4]
}
 8100630:	4618      	mov	r0, r3
 8100632:	3718      	adds	r7, #24
 8100634:	46bd      	mov	sp, r7
 8100636:	bd80      	pop	{r7, pc}

08100638 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8100638:	b580      	push	{r7, lr}
 810063a:	b086      	sub	sp, #24
 810063c:	af00      	add	r7, sp, #0
 810063e:	60f8      	str	r0, [r7, #12]
 8100640:	60b9      	str	r1, [r7, #8]
 8100642:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100644:	2300      	movs	r3, #0
 8100646:	617b      	str	r3, [r7, #20]
 8100648:	e009      	b.n	810065e <_write+0x26>
	{
		__io_putchar(*ptr++);
 810064a:	68bb      	ldr	r3, [r7, #8]
 810064c:	1c5a      	adds	r2, r3, #1
 810064e:	60ba      	str	r2, [r7, #8]
 8100650:	781b      	ldrb	r3, [r3, #0]
 8100652:	4618      	mov	r0, r3
 8100654:	f7ff ff6a 	bl	810052c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100658:	697b      	ldr	r3, [r7, #20]
 810065a:	3301      	adds	r3, #1
 810065c:	617b      	str	r3, [r7, #20]
 810065e:	697a      	ldr	r2, [r7, #20]
 8100660:	687b      	ldr	r3, [r7, #4]
 8100662:	429a      	cmp	r2, r3
 8100664:	dbf1      	blt.n	810064a <_write+0x12>
	}
	return len;
 8100666:	687b      	ldr	r3, [r7, #4]
}
 8100668:	4618      	mov	r0, r3
 810066a:	3718      	adds	r7, #24
 810066c:	46bd      	mov	sp, r7
 810066e:	bd80      	pop	{r7, pc}

08100670 <_close>:

int _close(int file)
{
 8100670:	b480      	push	{r7}
 8100672:	b083      	sub	sp, #12
 8100674:	af00      	add	r7, sp, #0
 8100676:	6078      	str	r0, [r7, #4]
	return -1;
 8100678:	f04f 33ff 	mov.w	r3, #4294967295
}
 810067c:	4618      	mov	r0, r3
 810067e:	370c      	adds	r7, #12
 8100680:	46bd      	mov	sp, r7
 8100682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100686:	4770      	bx	lr

08100688 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8100688:	b480      	push	{r7}
 810068a:	b083      	sub	sp, #12
 810068c:	af00      	add	r7, sp, #0
 810068e:	6078      	str	r0, [r7, #4]
 8100690:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8100692:	683b      	ldr	r3, [r7, #0]
 8100694:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8100698:	605a      	str	r2, [r3, #4]
	return 0;
 810069a:	2300      	movs	r3, #0
}
 810069c:	4618      	mov	r0, r3
 810069e:	370c      	adds	r7, #12
 81006a0:	46bd      	mov	sp, r7
 81006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006a6:	4770      	bx	lr

081006a8 <_isatty>:

int _isatty(int file)
{
 81006a8:	b480      	push	{r7}
 81006aa:	b083      	sub	sp, #12
 81006ac:	af00      	add	r7, sp, #0
 81006ae:	6078      	str	r0, [r7, #4]
	return 1;
 81006b0:	2301      	movs	r3, #1
}
 81006b2:	4618      	mov	r0, r3
 81006b4:	370c      	adds	r7, #12
 81006b6:	46bd      	mov	sp, r7
 81006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006bc:	4770      	bx	lr

081006be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 81006be:	b480      	push	{r7}
 81006c0:	b085      	sub	sp, #20
 81006c2:	af00      	add	r7, sp, #0
 81006c4:	60f8      	str	r0, [r7, #12]
 81006c6:	60b9      	str	r1, [r7, #8]
 81006c8:	607a      	str	r2, [r7, #4]
	return 0;
 81006ca:	2300      	movs	r3, #0
}
 81006cc:	4618      	mov	r0, r3
 81006ce:	3714      	adds	r7, #20
 81006d0:	46bd      	mov	sp, r7
 81006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006d6:	4770      	bx	lr

081006d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 81006d8:	b580      	push	{r7, lr}
 81006da:	b086      	sub	sp, #24
 81006dc:	af00      	add	r7, sp, #0
 81006de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 81006e0:	4a14      	ldr	r2, [pc, #80]	; (8100734 <_sbrk+0x5c>)
 81006e2:	4b15      	ldr	r3, [pc, #84]	; (8100738 <_sbrk+0x60>)
 81006e4:	1ad3      	subs	r3, r2, r3
 81006e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 81006e8:	697b      	ldr	r3, [r7, #20]
 81006ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 81006ec:	4b13      	ldr	r3, [pc, #76]	; (810073c <_sbrk+0x64>)
 81006ee:	681b      	ldr	r3, [r3, #0]
 81006f0:	2b00      	cmp	r3, #0
 81006f2:	d102      	bne.n	81006fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 81006f4:	4b11      	ldr	r3, [pc, #68]	; (810073c <_sbrk+0x64>)
 81006f6:	4a12      	ldr	r2, [pc, #72]	; (8100740 <_sbrk+0x68>)
 81006f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 81006fa:	4b10      	ldr	r3, [pc, #64]	; (810073c <_sbrk+0x64>)
 81006fc:	681a      	ldr	r2, [r3, #0]
 81006fe:	687b      	ldr	r3, [r7, #4]
 8100700:	4413      	add	r3, r2
 8100702:	693a      	ldr	r2, [r7, #16]
 8100704:	429a      	cmp	r2, r3
 8100706:	d207      	bcs.n	8100718 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8100708:	f003 fb90 	bl	8103e2c <__errno>
 810070c:	4603      	mov	r3, r0
 810070e:	220c      	movs	r2, #12
 8100710:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8100712:	f04f 33ff 	mov.w	r3, #4294967295
 8100716:	e009      	b.n	810072c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8100718:	4b08      	ldr	r3, [pc, #32]	; (810073c <_sbrk+0x64>)
 810071a:	681b      	ldr	r3, [r3, #0]
 810071c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 810071e:	4b07      	ldr	r3, [pc, #28]	; (810073c <_sbrk+0x64>)
 8100720:	681a      	ldr	r2, [r3, #0]
 8100722:	687b      	ldr	r3, [r7, #4]
 8100724:	4413      	add	r3, r2
 8100726:	4a05      	ldr	r2, [pc, #20]	; (810073c <_sbrk+0x64>)
 8100728:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 810072a:	68fb      	ldr	r3, [r7, #12]
}
 810072c:	4618      	mov	r0, r3
 810072e:	3718      	adds	r7, #24
 8100730:	46bd      	mov	sp, r7
 8100732:	bd80      	pop	{r7, pc}
 8100734:	10048000 	.word	0x10048000
 8100738:	00000400 	.word	0x00000400
 810073c:	10000094 	.word	0x10000094
 8100740:	10004ac8 	.word	0x10004ac8

08100744 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100744:	f8df d034 	ldr.w	sp, [pc, #52]	; 810077c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100748:	f7ff fe1a 	bl	8100380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 810074c:	480c      	ldr	r0, [pc, #48]	; (8100780 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810074e:	490d      	ldr	r1, [pc, #52]	; (8100784 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100750:	4a0d      	ldr	r2, [pc, #52]	; (8100788 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100754:	e002      	b.n	810075c <LoopCopyDataInit>

08100756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810075a:	3304      	adds	r3, #4

0810075c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 810075c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810075e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100760:	d3f9      	bcc.n	8100756 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100762:	4a0a      	ldr	r2, [pc, #40]	; (810078c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100764:	4c0a      	ldr	r4, [pc, #40]	; (8100790 <LoopFillZerobss+0x22>)
  movs r3, #0
 8100766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100768:	e001      	b.n	810076e <LoopFillZerobss>

0810076a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810076a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810076c:	3204      	adds	r2, #4

0810076e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810076e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100770:	d3fb      	bcc.n	810076a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100772:	f003 fc57 	bl	8104024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100776:	f7ff fe47 	bl	8100408 <main>
  bx  lr
 810077a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810077c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100780:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100784:	10000078 	.word	0x10000078
  ldr r2, =_sidata
 8100788:	08104f54 	.word	0x08104f54
  ldr r2, =_sbss
 810078c:	10000078 	.word	0x10000078
  ldr r4, =_ebss
 8100790:	10004ac8 	.word	0x10004ac8

08100794 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100794:	e7fe      	b.n	8100794 <ADC3_IRQHandler>
	...

08100798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100798:	b580      	push	{r7, lr}
 810079a:	b082      	sub	sp, #8
 810079c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810079e:	4b28      	ldr	r3, [pc, #160]	; (8100840 <HAL_Init+0xa8>)
 81007a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81007a4:	4a26      	ldr	r2, [pc, #152]	; (8100840 <HAL_Init+0xa8>)
 81007a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81007aa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81007ae:	4b24      	ldr	r3, [pc, #144]	; (8100840 <HAL_Init+0xa8>)
 81007b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81007b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81007b8:	603b      	str	r3, [r7, #0]
 81007ba:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81007bc:	4b21      	ldr	r3, [pc, #132]	; (8100844 <HAL_Init+0xac>)
 81007be:	681b      	ldr	r3, [r3, #0]
 81007c0:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81007c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81007c8:	4a1e      	ldr	r2, [pc, #120]	; (8100844 <HAL_Init+0xac>)
 81007ca:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81007ce:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81007d0:	4b1c      	ldr	r3, [pc, #112]	; (8100844 <HAL_Init+0xac>)
 81007d2:	681b      	ldr	r3, [r3, #0]
 81007d4:	4a1b      	ldr	r2, [pc, #108]	; (8100844 <HAL_Init+0xac>)
 81007d6:	f043 0301 	orr.w	r3, r3, #1
 81007da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81007dc:	2003      	movs	r0, #3
 81007de:	f000 f935 	bl	8100a4c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81007e2:	f000 fbf7 	bl	8100fd4 <HAL_RCC_GetSysClockFreq>
 81007e6:	4602      	mov	r2, r0
 81007e8:	4b15      	ldr	r3, [pc, #84]	; (8100840 <HAL_Init+0xa8>)
 81007ea:	699b      	ldr	r3, [r3, #24]
 81007ec:	0a1b      	lsrs	r3, r3, #8
 81007ee:	f003 030f 	and.w	r3, r3, #15
 81007f2:	4915      	ldr	r1, [pc, #84]	; (8100848 <HAL_Init+0xb0>)
 81007f4:	5ccb      	ldrb	r3, [r1, r3]
 81007f6:	f003 031f 	and.w	r3, r3, #31
 81007fa:	fa22 f303 	lsr.w	r3, r2, r3
 81007fe:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100800:	4b0f      	ldr	r3, [pc, #60]	; (8100840 <HAL_Init+0xa8>)
 8100802:	699b      	ldr	r3, [r3, #24]
 8100804:	f003 030f 	and.w	r3, r3, #15
 8100808:	4a0f      	ldr	r2, [pc, #60]	; (8100848 <HAL_Init+0xb0>)
 810080a:	5cd3      	ldrb	r3, [r2, r3]
 810080c:	f003 031f 	and.w	r3, r3, #31
 8100810:	687a      	ldr	r2, [r7, #4]
 8100812:	fa22 f303 	lsr.w	r3, r2, r3
 8100816:	4a0d      	ldr	r2, [pc, #52]	; (810084c <HAL_Init+0xb4>)
 8100818:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810081a:	4b0c      	ldr	r3, [pc, #48]	; (810084c <HAL_Init+0xb4>)
 810081c:	681b      	ldr	r3, [r3, #0]
 810081e:	4a0c      	ldr	r2, [pc, #48]	; (8100850 <HAL_Init+0xb8>)
 8100820:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100822:	200f      	movs	r0, #15
 8100824:	f000 f816 	bl	8100854 <HAL_InitTick>
 8100828:	4603      	mov	r3, r0
 810082a:	2b00      	cmp	r3, #0
 810082c:	d001      	beq.n	8100832 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810082e:	2301      	movs	r3, #1
 8100830:	e002      	b.n	8100838 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100832:	f7ff fea3 	bl	810057c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100836:	2300      	movs	r3, #0
}
 8100838:	4618      	mov	r0, r3
 810083a:	3708      	adds	r7, #8
 810083c:	46bd      	mov	sp, r7
 810083e:	bd80      	pop	{r7, pc}
 8100840:	58024400 	.word	0x58024400
 8100844:	40024400 	.word	0x40024400
 8100848:	08104e80 	.word	0x08104e80
 810084c:	10000004 	.word	0x10000004
 8100850:	10000000 	.word	0x10000000

08100854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100854:	b580      	push	{r7, lr}
 8100856:	b082      	sub	sp, #8
 8100858:	af00      	add	r7, sp, #0
 810085a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 810085c:	4b15      	ldr	r3, [pc, #84]	; (81008b4 <HAL_InitTick+0x60>)
 810085e:	781b      	ldrb	r3, [r3, #0]
 8100860:	2b00      	cmp	r3, #0
 8100862:	d101      	bne.n	8100868 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100864:	2301      	movs	r3, #1
 8100866:	e021      	b.n	81008ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100868:	4b13      	ldr	r3, [pc, #76]	; (81008b8 <HAL_InitTick+0x64>)
 810086a:	681a      	ldr	r2, [r3, #0]
 810086c:	4b11      	ldr	r3, [pc, #68]	; (81008b4 <HAL_InitTick+0x60>)
 810086e:	781b      	ldrb	r3, [r3, #0]
 8100870:	4619      	mov	r1, r3
 8100872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8100876:	fbb3 f3f1 	udiv	r3, r3, r1
 810087a:	fbb2 f3f3 	udiv	r3, r2, r3
 810087e:	4618      	mov	r0, r3
 8100880:	f000 f909 	bl	8100a96 <HAL_SYSTICK_Config>
 8100884:	4603      	mov	r3, r0
 8100886:	2b00      	cmp	r3, #0
 8100888:	d001      	beq.n	810088e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810088a:	2301      	movs	r3, #1
 810088c:	e00e      	b.n	81008ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810088e:	687b      	ldr	r3, [r7, #4]
 8100890:	2b0f      	cmp	r3, #15
 8100892:	d80a      	bhi.n	81008aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100894:	2200      	movs	r2, #0
 8100896:	6879      	ldr	r1, [r7, #4]
 8100898:	f04f 30ff 	mov.w	r0, #4294967295
 810089c:	f000 f8e1 	bl	8100a62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81008a0:	4a06      	ldr	r2, [pc, #24]	; (81008bc <HAL_InitTick+0x68>)
 81008a2:	687b      	ldr	r3, [r7, #4]
 81008a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81008a6:	2300      	movs	r3, #0
 81008a8:	e000      	b.n	81008ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 81008aa:	2301      	movs	r3, #1
}
 81008ac:	4618      	mov	r0, r3
 81008ae:	3708      	adds	r7, #8
 81008b0:	46bd      	mov	sp, r7
 81008b2:	bd80      	pop	{r7, pc}
 81008b4:	1000000c 	.word	0x1000000c
 81008b8:	10000000 	.word	0x10000000
 81008bc:	10000008 	.word	0x10000008

081008c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81008c0:	b480      	push	{r7}
 81008c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81008c4:	4b06      	ldr	r3, [pc, #24]	; (81008e0 <HAL_IncTick+0x20>)
 81008c6:	781b      	ldrb	r3, [r3, #0]
 81008c8:	461a      	mov	r2, r3
 81008ca:	4b06      	ldr	r3, [pc, #24]	; (81008e4 <HAL_IncTick+0x24>)
 81008cc:	681b      	ldr	r3, [r3, #0]
 81008ce:	4413      	add	r3, r2
 81008d0:	4a04      	ldr	r2, [pc, #16]	; (81008e4 <HAL_IncTick+0x24>)
 81008d2:	6013      	str	r3, [r2, #0]
}
 81008d4:	bf00      	nop
 81008d6:	46bd      	mov	sp, r7
 81008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008dc:	4770      	bx	lr
 81008de:	bf00      	nop
 81008e0:	1000000c 	.word	0x1000000c
 81008e4:	10004a74 	.word	0x10004a74

081008e8 <__NVIC_SetPriorityGrouping>:
{
 81008e8:	b480      	push	{r7}
 81008ea:	b085      	sub	sp, #20
 81008ec:	af00      	add	r7, sp, #0
 81008ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81008f0:	687b      	ldr	r3, [r7, #4]
 81008f2:	f003 0307 	and.w	r3, r3, #7
 81008f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81008f8:	4b0c      	ldr	r3, [pc, #48]	; (810092c <__NVIC_SetPriorityGrouping+0x44>)
 81008fa:	68db      	ldr	r3, [r3, #12]
 81008fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81008fe:	68ba      	ldr	r2, [r7, #8]
 8100900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100904:	4013      	ands	r3, r2
 8100906:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100908:	68fb      	ldr	r3, [r7, #12]
 810090a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810090c:	68bb      	ldr	r3, [r7, #8]
 810090e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810091a:	4a04      	ldr	r2, [pc, #16]	; (810092c <__NVIC_SetPriorityGrouping+0x44>)
 810091c:	68bb      	ldr	r3, [r7, #8]
 810091e:	60d3      	str	r3, [r2, #12]
}
 8100920:	bf00      	nop
 8100922:	3714      	adds	r7, #20
 8100924:	46bd      	mov	sp, r7
 8100926:	f85d 7b04 	ldr.w	r7, [sp], #4
 810092a:	4770      	bx	lr
 810092c:	e000ed00 	.word	0xe000ed00

08100930 <__NVIC_GetPriorityGrouping>:
{
 8100930:	b480      	push	{r7}
 8100932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100934:	4b04      	ldr	r3, [pc, #16]	; (8100948 <__NVIC_GetPriorityGrouping+0x18>)
 8100936:	68db      	ldr	r3, [r3, #12]
 8100938:	0a1b      	lsrs	r3, r3, #8
 810093a:	f003 0307 	and.w	r3, r3, #7
}
 810093e:	4618      	mov	r0, r3
 8100940:	46bd      	mov	sp, r7
 8100942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100946:	4770      	bx	lr
 8100948:	e000ed00 	.word	0xe000ed00

0810094c <__NVIC_SetPriority>:
{
 810094c:	b480      	push	{r7}
 810094e:	b083      	sub	sp, #12
 8100950:	af00      	add	r7, sp, #0
 8100952:	4603      	mov	r3, r0
 8100954:	6039      	str	r1, [r7, #0]
 8100956:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100958:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810095c:	2b00      	cmp	r3, #0
 810095e:	db0a      	blt.n	8100976 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100960:	683b      	ldr	r3, [r7, #0]
 8100962:	b2da      	uxtb	r2, r3
 8100964:	490c      	ldr	r1, [pc, #48]	; (8100998 <__NVIC_SetPriority+0x4c>)
 8100966:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810096a:	0112      	lsls	r2, r2, #4
 810096c:	b2d2      	uxtb	r2, r2
 810096e:	440b      	add	r3, r1
 8100970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8100974:	e00a      	b.n	810098c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100976:	683b      	ldr	r3, [r7, #0]
 8100978:	b2da      	uxtb	r2, r3
 810097a:	4908      	ldr	r1, [pc, #32]	; (810099c <__NVIC_SetPriority+0x50>)
 810097c:	88fb      	ldrh	r3, [r7, #6]
 810097e:	f003 030f 	and.w	r3, r3, #15
 8100982:	3b04      	subs	r3, #4
 8100984:	0112      	lsls	r2, r2, #4
 8100986:	b2d2      	uxtb	r2, r2
 8100988:	440b      	add	r3, r1
 810098a:	761a      	strb	r2, [r3, #24]
}
 810098c:	bf00      	nop
 810098e:	370c      	adds	r7, #12
 8100990:	46bd      	mov	sp, r7
 8100992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100996:	4770      	bx	lr
 8100998:	e000e100 	.word	0xe000e100
 810099c:	e000ed00 	.word	0xe000ed00

081009a0 <NVIC_EncodePriority>:
{
 81009a0:	b480      	push	{r7}
 81009a2:	b089      	sub	sp, #36	; 0x24
 81009a4:	af00      	add	r7, sp, #0
 81009a6:	60f8      	str	r0, [r7, #12]
 81009a8:	60b9      	str	r1, [r7, #8]
 81009aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81009ac:	68fb      	ldr	r3, [r7, #12]
 81009ae:	f003 0307 	and.w	r3, r3, #7
 81009b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81009b4:	69fb      	ldr	r3, [r7, #28]
 81009b6:	f1c3 0307 	rsb	r3, r3, #7
 81009ba:	2b04      	cmp	r3, #4
 81009bc:	bf28      	it	cs
 81009be:	2304      	movcs	r3, #4
 81009c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81009c2:	69fb      	ldr	r3, [r7, #28]
 81009c4:	3304      	adds	r3, #4
 81009c6:	2b06      	cmp	r3, #6
 81009c8:	d902      	bls.n	81009d0 <NVIC_EncodePriority+0x30>
 81009ca:	69fb      	ldr	r3, [r7, #28]
 81009cc:	3b03      	subs	r3, #3
 81009ce:	e000      	b.n	81009d2 <NVIC_EncodePriority+0x32>
 81009d0:	2300      	movs	r3, #0
 81009d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81009d4:	f04f 32ff 	mov.w	r2, #4294967295
 81009d8:	69bb      	ldr	r3, [r7, #24]
 81009da:	fa02 f303 	lsl.w	r3, r2, r3
 81009de:	43da      	mvns	r2, r3
 81009e0:	68bb      	ldr	r3, [r7, #8]
 81009e2:	401a      	ands	r2, r3
 81009e4:	697b      	ldr	r3, [r7, #20]
 81009e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81009e8:	f04f 31ff 	mov.w	r1, #4294967295
 81009ec:	697b      	ldr	r3, [r7, #20]
 81009ee:	fa01 f303 	lsl.w	r3, r1, r3
 81009f2:	43d9      	mvns	r1, r3
 81009f4:	687b      	ldr	r3, [r7, #4]
 81009f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81009f8:	4313      	orrs	r3, r2
}
 81009fa:	4618      	mov	r0, r3
 81009fc:	3724      	adds	r7, #36	; 0x24
 81009fe:	46bd      	mov	sp, r7
 8100a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a04:	4770      	bx	lr
	...

08100a08 <SysTick_Config>:
{
 8100a08:	b580      	push	{r7, lr}
 8100a0a:	b082      	sub	sp, #8
 8100a0c:	af00      	add	r7, sp, #0
 8100a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100a10:	687b      	ldr	r3, [r7, #4]
 8100a12:	3b01      	subs	r3, #1
 8100a14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8100a18:	d301      	bcc.n	8100a1e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8100a1a:	2301      	movs	r3, #1
 8100a1c:	e00f      	b.n	8100a3e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100a1e:	4a0a      	ldr	r2, [pc, #40]	; (8100a48 <SysTick_Config+0x40>)
 8100a20:	687b      	ldr	r3, [r7, #4]
 8100a22:	3b01      	subs	r3, #1
 8100a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100a26:	210f      	movs	r1, #15
 8100a28:	f04f 30ff 	mov.w	r0, #4294967295
 8100a2c:	f7ff ff8e 	bl	810094c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100a30:	4b05      	ldr	r3, [pc, #20]	; (8100a48 <SysTick_Config+0x40>)
 8100a32:	2200      	movs	r2, #0
 8100a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100a36:	4b04      	ldr	r3, [pc, #16]	; (8100a48 <SysTick_Config+0x40>)
 8100a38:	2207      	movs	r2, #7
 8100a3a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8100a3c:	2300      	movs	r3, #0
}
 8100a3e:	4618      	mov	r0, r3
 8100a40:	3708      	adds	r7, #8
 8100a42:	46bd      	mov	sp, r7
 8100a44:	bd80      	pop	{r7, pc}
 8100a46:	bf00      	nop
 8100a48:	e000e010 	.word	0xe000e010

08100a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100a4c:	b580      	push	{r7, lr}
 8100a4e:	b082      	sub	sp, #8
 8100a50:	af00      	add	r7, sp, #0
 8100a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100a54:	6878      	ldr	r0, [r7, #4]
 8100a56:	f7ff ff47 	bl	81008e8 <__NVIC_SetPriorityGrouping>
}
 8100a5a:	bf00      	nop
 8100a5c:	3708      	adds	r7, #8
 8100a5e:	46bd      	mov	sp, r7
 8100a60:	bd80      	pop	{r7, pc}

08100a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100a62:	b580      	push	{r7, lr}
 8100a64:	b086      	sub	sp, #24
 8100a66:	af00      	add	r7, sp, #0
 8100a68:	4603      	mov	r3, r0
 8100a6a:	60b9      	str	r1, [r7, #8]
 8100a6c:	607a      	str	r2, [r7, #4]
 8100a6e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100a70:	f7ff ff5e 	bl	8100930 <__NVIC_GetPriorityGrouping>
 8100a74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100a76:	687a      	ldr	r2, [r7, #4]
 8100a78:	68b9      	ldr	r1, [r7, #8]
 8100a7a:	6978      	ldr	r0, [r7, #20]
 8100a7c:	f7ff ff90 	bl	81009a0 <NVIC_EncodePriority>
 8100a80:	4602      	mov	r2, r0
 8100a82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100a86:	4611      	mov	r1, r2
 8100a88:	4618      	mov	r0, r3
 8100a8a:	f7ff ff5f 	bl	810094c <__NVIC_SetPriority>
}
 8100a8e:	bf00      	nop
 8100a90:	3718      	adds	r7, #24
 8100a92:	46bd      	mov	sp, r7
 8100a94:	bd80      	pop	{r7, pc}

08100a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100a96:	b580      	push	{r7, lr}
 8100a98:	b082      	sub	sp, #8
 8100a9a:	af00      	add	r7, sp, #0
 8100a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100a9e:	6878      	ldr	r0, [r7, #4]
 8100aa0:	f7ff ffb2 	bl	8100a08 <SysTick_Config>
 8100aa4:	4603      	mov	r3, r0
}
 8100aa6:	4618      	mov	r0, r3
 8100aa8:	3708      	adds	r7, #8
 8100aaa:	46bd      	mov	sp, r7
 8100aac:	bd80      	pop	{r7, pc}
	...

08100ab0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100ab0:	b480      	push	{r7}
 8100ab2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100ab4:	4b07      	ldr	r3, [pc, #28]	; (8100ad4 <HAL_GetCurrentCPUID+0x24>)
 8100ab6:	681b      	ldr	r3, [r3, #0]
 8100ab8:	091b      	lsrs	r3, r3, #4
 8100aba:	f003 030f 	and.w	r3, r3, #15
 8100abe:	2b07      	cmp	r3, #7
 8100ac0:	d101      	bne.n	8100ac6 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100ac2:	2303      	movs	r3, #3
 8100ac4:	e000      	b.n	8100ac8 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100ac6:	2301      	movs	r3, #1
  }
}
 8100ac8:	4618      	mov	r0, r3
 8100aca:	46bd      	mov	sp, r7
 8100acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ad0:	4770      	bx	lr
 8100ad2:	bf00      	nop
 8100ad4:	e000ed00 	.word	0xe000ed00

08100ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8100ad8:	b480      	push	{r7}
 8100ada:	b089      	sub	sp, #36	; 0x24
 8100adc:	af00      	add	r7, sp, #0
 8100ade:	6078      	str	r0, [r7, #4]
 8100ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100ae2:	2300      	movs	r3, #0
 8100ae4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100ae6:	4b89      	ldr	r3, [pc, #548]	; (8100d0c <HAL_GPIO_Init+0x234>)
 8100ae8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100aea:	e194      	b.n	8100e16 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100aec:	683b      	ldr	r3, [r7, #0]
 8100aee:	681a      	ldr	r2, [r3, #0]
 8100af0:	2101      	movs	r1, #1
 8100af2:	69fb      	ldr	r3, [r7, #28]
 8100af4:	fa01 f303 	lsl.w	r3, r1, r3
 8100af8:	4013      	ands	r3, r2
 8100afa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100afc:	693b      	ldr	r3, [r7, #16]
 8100afe:	2b00      	cmp	r3, #0
 8100b00:	f000 8186 	beq.w	8100e10 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100b04:	683b      	ldr	r3, [r7, #0]
 8100b06:	685b      	ldr	r3, [r3, #4]
 8100b08:	f003 0303 	and.w	r3, r3, #3
 8100b0c:	2b01      	cmp	r3, #1
 8100b0e:	d005      	beq.n	8100b1c <HAL_GPIO_Init+0x44>
 8100b10:	683b      	ldr	r3, [r7, #0]
 8100b12:	685b      	ldr	r3, [r3, #4]
 8100b14:	f003 0303 	and.w	r3, r3, #3
 8100b18:	2b02      	cmp	r3, #2
 8100b1a:	d130      	bne.n	8100b7e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100b1c:	687b      	ldr	r3, [r7, #4]
 8100b1e:	689b      	ldr	r3, [r3, #8]
 8100b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100b22:	69fb      	ldr	r3, [r7, #28]
 8100b24:	005b      	lsls	r3, r3, #1
 8100b26:	2203      	movs	r2, #3
 8100b28:	fa02 f303 	lsl.w	r3, r2, r3
 8100b2c:	43db      	mvns	r3, r3
 8100b2e:	69ba      	ldr	r2, [r7, #24]
 8100b30:	4013      	ands	r3, r2
 8100b32:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100b34:	683b      	ldr	r3, [r7, #0]
 8100b36:	68da      	ldr	r2, [r3, #12]
 8100b38:	69fb      	ldr	r3, [r7, #28]
 8100b3a:	005b      	lsls	r3, r3, #1
 8100b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8100b40:	69ba      	ldr	r2, [r7, #24]
 8100b42:	4313      	orrs	r3, r2
 8100b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100b46:	687b      	ldr	r3, [r7, #4]
 8100b48:	69ba      	ldr	r2, [r7, #24]
 8100b4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100b4c:	687b      	ldr	r3, [r7, #4]
 8100b4e:	685b      	ldr	r3, [r3, #4]
 8100b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100b52:	2201      	movs	r2, #1
 8100b54:	69fb      	ldr	r3, [r7, #28]
 8100b56:	fa02 f303 	lsl.w	r3, r2, r3
 8100b5a:	43db      	mvns	r3, r3
 8100b5c:	69ba      	ldr	r2, [r7, #24]
 8100b5e:	4013      	ands	r3, r2
 8100b60:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8100b62:	683b      	ldr	r3, [r7, #0]
 8100b64:	685b      	ldr	r3, [r3, #4]
 8100b66:	091b      	lsrs	r3, r3, #4
 8100b68:	f003 0201 	and.w	r2, r3, #1
 8100b6c:	69fb      	ldr	r3, [r7, #28]
 8100b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8100b72:	69ba      	ldr	r2, [r7, #24]
 8100b74:	4313      	orrs	r3, r2
 8100b76:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100b78:	687b      	ldr	r3, [r7, #4]
 8100b7a:	69ba      	ldr	r2, [r7, #24]
 8100b7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100b7e:	683b      	ldr	r3, [r7, #0]
 8100b80:	685b      	ldr	r3, [r3, #4]
 8100b82:	f003 0303 	and.w	r3, r3, #3
 8100b86:	2b03      	cmp	r3, #3
 8100b88:	d017      	beq.n	8100bba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100b8a:	687b      	ldr	r3, [r7, #4]
 8100b8c:	68db      	ldr	r3, [r3, #12]
 8100b8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100b90:	69fb      	ldr	r3, [r7, #28]
 8100b92:	005b      	lsls	r3, r3, #1
 8100b94:	2203      	movs	r2, #3
 8100b96:	fa02 f303 	lsl.w	r3, r2, r3
 8100b9a:	43db      	mvns	r3, r3
 8100b9c:	69ba      	ldr	r2, [r7, #24]
 8100b9e:	4013      	ands	r3, r2
 8100ba0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100ba2:	683b      	ldr	r3, [r7, #0]
 8100ba4:	689a      	ldr	r2, [r3, #8]
 8100ba6:	69fb      	ldr	r3, [r7, #28]
 8100ba8:	005b      	lsls	r3, r3, #1
 8100baa:	fa02 f303 	lsl.w	r3, r2, r3
 8100bae:	69ba      	ldr	r2, [r7, #24]
 8100bb0:	4313      	orrs	r3, r2
 8100bb2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100bb4:	687b      	ldr	r3, [r7, #4]
 8100bb6:	69ba      	ldr	r2, [r7, #24]
 8100bb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100bba:	683b      	ldr	r3, [r7, #0]
 8100bbc:	685b      	ldr	r3, [r3, #4]
 8100bbe:	f003 0303 	and.w	r3, r3, #3
 8100bc2:	2b02      	cmp	r3, #2
 8100bc4:	d123      	bne.n	8100c0e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100bc6:	69fb      	ldr	r3, [r7, #28]
 8100bc8:	08da      	lsrs	r2, r3, #3
 8100bca:	687b      	ldr	r3, [r7, #4]
 8100bcc:	3208      	adds	r2, #8
 8100bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100bd4:	69fb      	ldr	r3, [r7, #28]
 8100bd6:	f003 0307 	and.w	r3, r3, #7
 8100bda:	009b      	lsls	r3, r3, #2
 8100bdc:	220f      	movs	r2, #15
 8100bde:	fa02 f303 	lsl.w	r3, r2, r3
 8100be2:	43db      	mvns	r3, r3
 8100be4:	69ba      	ldr	r2, [r7, #24]
 8100be6:	4013      	ands	r3, r2
 8100be8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100bea:	683b      	ldr	r3, [r7, #0]
 8100bec:	691a      	ldr	r2, [r3, #16]
 8100bee:	69fb      	ldr	r3, [r7, #28]
 8100bf0:	f003 0307 	and.w	r3, r3, #7
 8100bf4:	009b      	lsls	r3, r3, #2
 8100bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8100bfa:	69ba      	ldr	r2, [r7, #24]
 8100bfc:	4313      	orrs	r3, r2
 8100bfe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100c00:	69fb      	ldr	r3, [r7, #28]
 8100c02:	08da      	lsrs	r2, r3, #3
 8100c04:	687b      	ldr	r3, [r7, #4]
 8100c06:	3208      	adds	r2, #8
 8100c08:	69b9      	ldr	r1, [r7, #24]
 8100c0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100c0e:	687b      	ldr	r3, [r7, #4]
 8100c10:	681b      	ldr	r3, [r3, #0]
 8100c12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100c14:	69fb      	ldr	r3, [r7, #28]
 8100c16:	005b      	lsls	r3, r3, #1
 8100c18:	2203      	movs	r2, #3
 8100c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8100c1e:	43db      	mvns	r3, r3
 8100c20:	69ba      	ldr	r2, [r7, #24]
 8100c22:	4013      	ands	r3, r2
 8100c24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100c26:	683b      	ldr	r3, [r7, #0]
 8100c28:	685b      	ldr	r3, [r3, #4]
 8100c2a:	f003 0203 	and.w	r2, r3, #3
 8100c2e:	69fb      	ldr	r3, [r7, #28]
 8100c30:	005b      	lsls	r3, r3, #1
 8100c32:	fa02 f303 	lsl.w	r3, r2, r3
 8100c36:	69ba      	ldr	r2, [r7, #24]
 8100c38:	4313      	orrs	r3, r2
 8100c3a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100c3c:	687b      	ldr	r3, [r7, #4]
 8100c3e:	69ba      	ldr	r2, [r7, #24]
 8100c40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100c42:	683b      	ldr	r3, [r7, #0]
 8100c44:	685b      	ldr	r3, [r3, #4]
 8100c46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8100c4a:	2b00      	cmp	r3, #0
 8100c4c:	f000 80e0 	beq.w	8100e10 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100c50:	4b2f      	ldr	r3, [pc, #188]	; (8100d10 <HAL_GPIO_Init+0x238>)
 8100c52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100c56:	4a2e      	ldr	r2, [pc, #184]	; (8100d10 <HAL_GPIO_Init+0x238>)
 8100c58:	f043 0302 	orr.w	r3, r3, #2
 8100c5c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100c60:	4b2b      	ldr	r3, [pc, #172]	; (8100d10 <HAL_GPIO_Init+0x238>)
 8100c62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100c66:	f003 0302 	and.w	r3, r3, #2
 8100c6a:	60fb      	str	r3, [r7, #12]
 8100c6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100c6e:	4a29      	ldr	r2, [pc, #164]	; (8100d14 <HAL_GPIO_Init+0x23c>)
 8100c70:	69fb      	ldr	r3, [r7, #28]
 8100c72:	089b      	lsrs	r3, r3, #2
 8100c74:	3302      	adds	r3, #2
 8100c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100c7c:	69fb      	ldr	r3, [r7, #28]
 8100c7e:	f003 0303 	and.w	r3, r3, #3
 8100c82:	009b      	lsls	r3, r3, #2
 8100c84:	220f      	movs	r2, #15
 8100c86:	fa02 f303 	lsl.w	r3, r2, r3
 8100c8a:	43db      	mvns	r3, r3
 8100c8c:	69ba      	ldr	r2, [r7, #24]
 8100c8e:	4013      	ands	r3, r2
 8100c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100c92:	687b      	ldr	r3, [r7, #4]
 8100c94:	4a20      	ldr	r2, [pc, #128]	; (8100d18 <HAL_GPIO_Init+0x240>)
 8100c96:	4293      	cmp	r3, r2
 8100c98:	d052      	beq.n	8100d40 <HAL_GPIO_Init+0x268>
 8100c9a:	687b      	ldr	r3, [r7, #4]
 8100c9c:	4a1f      	ldr	r2, [pc, #124]	; (8100d1c <HAL_GPIO_Init+0x244>)
 8100c9e:	4293      	cmp	r3, r2
 8100ca0:	d031      	beq.n	8100d06 <HAL_GPIO_Init+0x22e>
 8100ca2:	687b      	ldr	r3, [r7, #4]
 8100ca4:	4a1e      	ldr	r2, [pc, #120]	; (8100d20 <HAL_GPIO_Init+0x248>)
 8100ca6:	4293      	cmp	r3, r2
 8100ca8:	d02b      	beq.n	8100d02 <HAL_GPIO_Init+0x22a>
 8100caa:	687b      	ldr	r3, [r7, #4]
 8100cac:	4a1d      	ldr	r2, [pc, #116]	; (8100d24 <HAL_GPIO_Init+0x24c>)
 8100cae:	4293      	cmp	r3, r2
 8100cb0:	d025      	beq.n	8100cfe <HAL_GPIO_Init+0x226>
 8100cb2:	687b      	ldr	r3, [r7, #4]
 8100cb4:	4a1c      	ldr	r2, [pc, #112]	; (8100d28 <HAL_GPIO_Init+0x250>)
 8100cb6:	4293      	cmp	r3, r2
 8100cb8:	d01f      	beq.n	8100cfa <HAL_GPIO_Init+0x222>
 8100cba:	687b      	ldr	r3, [r7, #4]
 8100cbc:	4a1b      	ldr	r2, [pc, #108]	; (8100d2c <HAL_GPIO_Init+0x254>)
 8100cbe:	4293      	cmp	r3, r2
 8100cc0:	d019      	beq.n	8100cf6 <HAL_GPIO_Init+0x21e>
 8100cc2:	687b      	ldr	r3, [r7, #4]
 8100cc4:	4a1a      	ldr	r2, [pc, #104]	; (8100d30 <HAL_GPIO_Init+0x258>)
 8100cc6:	4293      	cmp	r3, r2
 8100cc8:	d013      	beq.n	8100cf2 <HAL_GPIO_Init+0x21a>
 8100cca:	687b      	ldr	r3, [r7, #4]
 8100ccc:	4a19      	ldr	r2, [pc, #100]	; (8100d34 <HAL_GPIO_Init+0x25c>)
 8100cce:	4293      	cmp	r3, r2
 8100cd0:	d00d      	beq.n	8100cee <HAL_GPIO_Init+0x216>
 8100cd2:	687b      	ldr	r3, [r7, #4]
 8100cd4:	4a18      	ldr	r2, [pc, #96]	; (8100d38 <HAL_GPIO_Init+0x260>)
 8100cd6:	4293      	cmp	r3, r2
 8100cd8:	d007      	beq.n	8100cea <HAL_GPIO_Init+0x212>
 8100cda:	687b      	ldr	r3, [r7, #4]
 8100cdc:	4a17      	ldr	r2, [pc, #92]	; (8100d3c <HAL_GPIO_Init+0x264>)
 8100cde:	4293      	cmp	r3, r2
 8100ce0:	d101      	bne.n	8100ce6 <HAL_GPIO_Init+0x20e>
 8100ce2:	2309      	movs	r3, #9
 8100ce4:	e02d      	b.n	8100d42 <HAL_GPIO_Init+0x26a>
 8100ce6:	230a      	movs	r3, #10
 8100ce8:	e02b      	b.n	8100d42 <HAL_GPIO_Init+0x26a>
 8100cea:	2308      	movs	r3, #8
 8100cec:	e029      	b.n	8100d42 <HAL_GPIO_Init+0x26a>
 8100cee:	2307      	movs	r3, #7
 8100cf0:	e027      	b.n	8100d42 <HAL_GPIO_Init+0x26a>
 8100cf2:	2306      	movs	r3, #6
 8100cf4:	e025      	b.n	8100d42 <HAL_GPIO_Init+0x26a>
 8100cf6:	2305      	movs	r3, #5
 8100cf8:	e023      	b.n	8100d42 <HAL_GPIO_Init+0x26a>
 8100cfa:	2304      	movs	r3, #4
 8100cfc:	e021      	b.n	8100d42 <HAL_GPIO_Init+0x26a>
 8100cfe:	2303      	movs	r3, #3
 8100d00:	e01f      	b.n	8100d42 <HAL_GPIO_Init+0x26a>
 8100d02:	2302      	movs	r3, #2
 8100d04:	e01d      	b.n	8100d42 <HAL_GPIO_Init+0x26a>
 8100d06:	2301      	movs	r3, #1
 8100d08:	e01b      	b.n	8100d42 <HAL_GPIO_Init+0x26a>
 8100d0a:	bf00      	nop
 8100d0c:	580000c0 	.word	0x580000c0
 8100d10:	58024400 	.word	0x58024400
 8100d14:	58000400 	.word	0x58000400
 8100d18:	58020000 	.word	0x58020000
 8100d1c:	58020400 	.word	0x58020400
 8100d20:	58020800 	.word	0x58020800
 8100d24:	58020c00 	.word	0x58020c00
 8100d28:	58021000 	.word	0x58021000
 8100d2c:	58021400 	.word	0x58021400
 8100d30:	58021800 	.word	0x58021800
 8100d34:	58021c00 	.word	0x58021c00
 8100d38:	58022000 	.word	0x58022000
 8100d3c:	58022400 	.word	0x58022400
 8100d40:	2300      	movs	r3, #0
 8100d42:	69fa      	ldr	r2, [r7, #28]
 8100d44:	f002 0203 	and.w	r2, r2, #3
 8100d48:	0092      	lsls	r2, r2, #2
 8100d4a:	4093      	lsls	r3, r2
 8100d4c:	69ba      	ldr	r2, [r7, #24]
 8100d4e:	4313      	orrs	r3, r2
 8100d50:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100d52:	4938      	ldr	r1, [pc, #224]	; (8100e34 <HAL_GPIO_Init+0x35c>)
 8100d54:	69fb      	ldr	r3, [r7, #28]
 8100d56:	089b      	lsrs	r3, r3, #2
 8100d58:	3302      	adds	r3, #2
 8100d5a:	69ba      	ldr	r2, [r7, #24]
 8100d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100d64:	681b      	ldr	r3, [r3, #0]
 8100d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100d68:	693b      	ldr	r3, [r7, #16]
 8100d6a:	43db      	mvns	r3, r3
 8100d6c:	69ba      	ldr	r2, [r7, #24]
 8100d6e:	4013      	ands	r3, r2
 8100d70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8100d72:	683b      	ldr	r3, [r7, #0]
 8100d74:	685b      	ldr	r3, [r3, #4]
 8100d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8100d7a:	2b00      	cmp	r3, #0
 8100d7c:	d003      	beq.n	8100d86 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8100d7e:	69ba      	ldr	r2, [r7, #24]
 8100d80:	693b      	ldr	r3, [r7, #16]
 8100d82:	4313      	orrs	r3, r2
 8100d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8100d86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100d8a:	69bb      	ldr	r3, [r7, #24]
 8100d8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8100d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100d92:	685b      	ldr	r3, [r3, #4]
 8100d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100d96:	693b      	ldr	r3, [r7, #16]
 8100d98:	43db      	mvns	r3, r3
 8100d9a:	69ba      	ldr	r2, [r7, #24]
 8100d9c:	4013      	ands	r3, r2
 8100d9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8100da0:	683b      	ldr	r3, [r7, #0]
 8100da2:	685b      	ldr	r3, [r3, #4]
 8100da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8100da8:	2b00      	cmp	r3, #0
 8100daa:	d003      	beq.n	8100db4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8100dac:	69ba      	ldr	r2, [r7, #24]
 8100dae:	693b      	ldr	r3, [r7, #16]
 8100db0:	4313      	orrs	r3, r2
 8100db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8100db4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100db8:	69bb      	ldr	r3, [r7, #24]
 8100dba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8100dbc:	697b      	ldr	r3, [r7, #20]
 8100dbe:	685b      	ldr	r3, [r3, #4]
 8100dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100dc2:	693b      	ldr	r3, [r7, #16]
 8100dc4:	43db      	mvns	r3, r3
 8100dc6:	69ba      	ldr	r2, [r7, #24]
 8100dc8:	4013      	ands	r3, r2
 8100dca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8100dcc:	683b      	ldr	r3, [r7, #0]
 8100dce:	685b      	ldr	r3, [r3, #4]
 8100dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8100dd4:	2b00      	cmp	r3, #0
 8100dd6:	d003      	beq.n	8100de0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8100dd8:	69ba      	ldr	r2, [r7, #24]
 8100dda:	693b      	ldr	r3, [r7, #16]
 8100ddc:	4313      	orrs	r3, r2
 8100dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8100de0:	697b      	ldr	r3, [r7, #20]
 8100de2:	69ba      	ldr	r2, [r7, #24]
 8100de4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8100de6:	697b      	ldr	r3, [r7, #20]
 8100de8:	681b      	ldr	r3, [r3, #0]
 8100dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100dec:	693b      	ldr	r3, [r7, #16]
 8100dee:	43db      	mvns	r3, r3
 8100df0:	69ba      	ldr	r2, [r7, #24]
 8100df2:	4013      	ands	r3, r2
 8100df4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8100df6:	683b      	ldr	r3, [r7, #0]
 8100df8:	685b      	ldr	r3, [r3, #4]
 8100dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100dfe:	2b00      	cmp	r3, #0
 8100e00:	d003      	beq.n	8100e0a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8100e02:	69ba      	ldr	r2, [r7, #24]
 8100e04:	693b      	ldr	r3, [r7, #16]
 8100e06:	4313      	orrs	r3, r2
 8100e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8100e0a:	697b      	ldr	r3, [r7, #20]
 8100e0c:	69ba      	ldr	r2, [r7, #24]
 8100e0e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8100e10:	69fb      	ldr	r3, [r7, #28]
 8100e12:	3301      	adds	r3, #1
 8100e14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100e16:	683b      	ldr	r3, [r7, #0]
 8100e18:	681a      	ldr	r2, [r3, #0]
 8100e1a:	69fb      	ldr	r3, [r7, #28]
 8100e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8100e20:	2b00      	cmp	r3, #0
 8100e22:	f47f ae63 	bne.w	8100aec <HAL_GPIO_Init+0x14>
  }
}
 8100e26:	bf00      	nop
 8100e28:	bf00      	nop
 8100e2a:	3724      	adds	r7, #36	; 0x24
 8100e2c:	46bd      	mov	sp, r7
 8100e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e32:	4770      	bx	lr
 8100e34:	58000400 	.word	0x58000400

08100e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8100e38:	b480      	push	{r7}
 8100e3a:	b083      	sub	sp, #12
 8100e3c:	af00      	add	r7, sp, #0
 8100e3e:	6078      	str	r0, [r7, #4]
 8100e40:	460b      	mov	r3, r1
 8100e42:	807b      	strh	r3, [r7, #2]
 8100e44:	4613      	mov	r3, r2
 8100e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8100e48:	787b      	ldrb	r3, [r7, #1]
 8100e4a:	2b00      	cmp	r3, #0
 8100e4c:	d003      	beq.n	8100e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8100e4e:	887a      	ldrh	r2, [r7, #2]
 8100e50:	687b      	ldr	r3, [r7, #4]
 8100e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8100e54:	e003      	b.n	8100e5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8100e56:	887b      	ldrh	r3, [r7, #2]
 8100e58:	041a      	lsls	r2, r3, #16
 8100e5a:	687b      	ldr	r3, [r7, #4]
 8100e5c:	619a      	str	r2, [r3, #24]
}
 8100e5e:	bf00      	nop
 8100e60:	370c      	adds	r7, #12
 8100e62:	46bd      	mov	sp, r7
 8100e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e68:	4770      	bx	lr

08100e6a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8100e6a:	b480      	push	{r7}
 8100e6c:	b085      	sub	sp, #20
 8100e6e:	af00      	add	r7, sp, #0
 8100e70:	6078      	str	r0, [r7, #4]
 8100e72:	460b      	mov	r3, r1
 8100e74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8100e76:	687b      	ldr	r3, [r7, #4]
 8100e78:	695b      	ldr	r3, [r3, #20]
 8100e7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8100e7c:	887a      	ldrh	r2, [r7, #2]
 8100e7e:	68fb      	ldr	r3, [r7, #12]
 8100e80:	4013      	ands	r3, r2
 8100e82:	041a      	lsls	r2, r3, #16
 8100e84:	68fb      	ldr	r3, [r7, #12]
 8100e86:	43d9      	mvns	r1, r3
 8100e88:	887b      	ldrh	r3, [r7, #2]
 8100e8a:	400b      	ands	r3, r1
 8100e8c:	431a      	orrs	r2, r3
 8100e8e:	687b      	ldr	r3, [r7, #4]
 8100e90:	619a      	str	r2, [r3, #24]
}
 8100e92:	bf00      	nop
 8100e94:	3714      	adds	r7, #20
 8100e96:	46bd      	mov	sp, r7
 8100e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e9c:	4770      	bx	lr
	...

08100ea0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100ea0:	b480      	push	{r7}
 8100ea2:	b083      	sub	sp, #12
 8100ea4:	af00      	add	r7, sp, #0
 8100ea6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8100ea8:	4b05      	ldr	r3, [pc, #20]	; (8100ec0 <HAL_HSEM_ActivateNotification+0x20>)
 8100eaa:	681a      	ldr	r2, [r3, #0]
 8100eac:	4904      	ldr	r1, [pc, #16]	; (8100ec0 <HAL_HSEM_ActivateNotification+0x20>)
 8100eae:	687b      	ldr	r3, [r7, #4]
 8100eb0:	4313      	orrs	r3, r2
 8100eb2:	600b      	str	r3, [r1, #0]
#endif
}
 8100eb4:	bf00      	nop
 8100eb6:	370c      	adds	r7, #12
 8100eb8:	46bd      	mov	sp, r7
 8100eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ebe:	4770      	bx	lr
 8100ec0:	58026510 	.word	0x58026510

08100ec4 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8100ec4:	b580      	push	{r7, lr}
 8100ec6:	b084      	sub	sp, #16
 8100ec8:	af00      	add	r7, sp, #0
 8100eca:	60f8      	str	r0, [r7, #12]
 8100ecc:	460b      	mov	r3, r1
 8100ece:	607a      	str	r2, [r7, #4]
 8100ed0:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8100ed2:	4b37      	ldr	r3, [pc, #220]	; (8100fb0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100ed4:	681b      	ldr	r3, [r3, #0]
 8100ed6:	f023 0201 	bic.w	r2, r3, #1
 8100eda:	4935      	ldr	r1, [pc, #212]	; (8100fb0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100edc:	68fb      	ldr	r3, [r7, #12]
 8100ede:	4313      	orrs	r3, r2
 8100ee0:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8100ee2:	687b      	ldr	r3, [r7, #4]
 8100ee4:	2b00      	cmp	r3, #0
 8100ee6:	d123      	bne.n	8100f30 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8100ee8:	f7ff fde2 	bl	8100ab0 <HAL_GetCurrentCPUID>
 8100eec:	4603      	mov	r3, r0
 8100eee:	2b03      	cmp	r3, #3
 8100ef0:	d158      	bne.n	8100fa4 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8100ef2:	4b2f      	ldr	r3, [pc, #188]	; (8100fb0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100ef4:	691b      	ldr	r3, [r3, #16]
 8100ef6:	4a2e      	ldr	r2, [pc, #184]	; (8100fb0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100ef8:	f023 0301 	bic.w	r3, r3, #1
 8100efc:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100efe:	4b2d      	ldr	r3, [pc, #180]	; (8100fb4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100f00:	691b      	ldr	r3, [r3, #16]
 8100f02:	4a2c      	ldr	r2, [pc, #176]	; (8100fb4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100f04:	f043 0304 	orr.w	r3, r3, #4
 8100f08:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8100f0a:	f3bf 8f4f 	dsb	sy
}
 8100f0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100f10:	f3bf 8f6f 	isb	sy
}
 8100f14:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100f16:	7afb      	ldrb	r3, [r7, #11]
 8100f18:	2b01      	cmp	r3, #1
 8100f1a:	d101      	bne.n	8100f20 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100f1c:	bf30      	wfi
 8100f1e:	e000      	b.n	8100f22 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100f20:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100f22:	4b24      	ldr	r3, [pc, #144]	; (8100fb4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100f24:	691b      	ldr	r3, [r3, #16]
 8100f26:	4a23      	ldr	r2, [pc, #140]	; (8100fb4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100f28:	f023 0304 	bic.w	r3, r3, #4
 8100f2c:	6113      	str	r3, [r2, #16]
 8100f2e:	e03c      	b.n	8100faa <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8100f30:	687b      	ldr	r3, [r7, #4]
 8100f32:	2b01      	cmp	r3, #1
 8100f34:	d123      	bne.n	8100f7e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8100f36:	f7ff fdbb 	bl	8100ab0 <HAL_GetCurrentCPUID>
 8100f3a:	4603      	mov	r3, r0
 8100f3c:	2b01      	cmp	r3, #1
 8100f3e:	d133      	bne.n	8100fa8 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8100f40:	4b1b      	ldr	r3, [pc, #108]	; (8100fb0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100f42:	695b      	ldr	r3, [r3, #20]
 8100f44:	4a1a      	ldr	r2, [pc, #104]	; (8100fb0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100f46:	f023 0302 	bic.w	r3, r3, #2
 8100f4a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100f4c:	4b19      	ldr	r3, [pc, #100]	; (8100fb4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100f4e:	691b      	ldr	r3, [r3, #16]
 8100f50:	4a18      	ldr	r2, [pc, #96]	; (8100fb4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100f52:	f043 0304 	orr.w	r3, r3, #4
 8100f56:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8100f58:	f3bf 8f4f 	dsb	sy
}
 8100f5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100f5e:	f3bf 8f6f 	isb	sy
}
 8100f62:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100f64:	7afb      	ldrb	r3, [r7, #11]
 8100f66:	2b01      	cmp	r3, #1
 8100f68:	d101      	bne.n	8100f6e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100f6a:	bf30      	wfi
 8100f6c:	e000      	b.n	8100f70 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100f6e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100f70:	4b10      	ldr	r3, [pc, #64]	; (8100fb4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100f72:	691b      	ldr	r3, [r3, #16]
 8100f74:	4a0f      	ldr	r2, [pc, #60]	; (8100fb4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100f76:	f023 0304 	bic.w	r3, r3, #4
 8100f7a:	6113      	str	r3, [r2, #16]
 8100f7c:	e015      	b.n	8100faa <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100f7e:	f7ff fd97 	bl	8100ab0 <HAL_GetCurrentCPUID>
 8100f82:	4603      	mov	r3, r0
 8100f84:	2b03      	cmp	r3, #3
 8100f86:	d106      	bne.n	8100f96 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8100f88:	4b09      	ldr	r3, [pc, #36]	; (8100fb0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100f8a:	691b      	ldr	r3, [r3, #16]
 8100f8c:	4a08      	ldr	r2, [pc, #32]	; (8100fb0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100f8e:	f023 0304 	bic.w	r3, r3, #4
 8100f92:	6113      	str	r3, [r2, #16]
 8100f94:	e009      	b.n	8100faa <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8100f96:	4b06      	ldr	r3, [pc, #24]	; (8100fb0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100f98:	695b      	ldr	r3, [r3, #20]
 8100f9a:	4a05      	ldr	r2, [pc, #20]	; (8100fb0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100f9c:	f023 0304 	bic.w	r3, r3, #4
 8100fa0:	6153      	str	r3, [r2, #20]
 8100fa2:	e002      	b.n	8100faa <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100fa4:	bf00      	nop
 8100fa6:	e000      	b.n	8100faa <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100fa8:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8100faa:	3710      	adds	r7, #16
 8100fac:	46bd      	mov	sp, r7
 8100fae:	bd80      	pop	{r7, pc}
 8100fb0:	58024800 	.word	0x58024800
 8100fb4:	e000ed00 	.word	0xe000ed00

08100fb8 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8100fb8:	b580      	push	{r7, lr}
 8100fba:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100fbc:	f7ff fd78 	bl	8100ab0 <HAL_GetCurrentCPUID>
 8100fc0:	4603      	mov	r3, r0
 8100fc2:	2b03      	cmp	r3, #3
 8100fc4:	d101      	bne.n	8100fca <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8100fc6:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8100fc8:	e001      	b.n	8100fce <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8100fca:	bf40      	sev
    __WFE ();
 8100fcc:	bf20      	wfe
}
 8100fce:	bf00      	nop
 8100fd0:	bd80      	pop	{r7, pc}
	...

08100fd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8100fd4:	b480      	push	{r7}
 8100fd6:	b089      	sub	sp, #36	; 0x24
 8100fd8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8100fda:	4bb3      	ldr	r3, [pc, #716]	; (81012a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100fdc:	691b      	ldr	r3, [r3, #16]
 8100fde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8100fe2:	2b18      	cmp	r3, #24
 8100fe4:	f200 8155 	bhi.w	8101292 <HAL_RCC_GetSysClockFreq+0x2be>
 8100fe8:	a201      	add	r2, pc, #4	; (adr r2, 8100ff0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8100fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100fee:	bf00      	nop
 8100ff0:	08101055 	.word	0x08101055
 8100ff4:	08101293 	.word	0x08101293
 8100ff8:	08101293 	.word	0x08101293
 8100ffc:	08101293 	.word	0x08101293
 8101000:	08101293 	.word	0x08101293
 8101004:	08101293 	.word	0x08101293
 8101008:	08101293 	.word	0x08101293
 810100c:	08101293 	.word	0x08101293
 8101010:	0810107b 	.word	0x0810107b
 8101014:	08101293 	.word	0x08101293
 8101018:	08101293 	.word	0x08101293
 810101c:	08101293 	.word	0x08101293
 8101020:	08101293 	.word	0x08101293
 8101024:	08101293 	.word	0x08101293
 8101028:	08101293 	.word	0x08101293
 810102c:	08101293 	.word	0x08101293
 8101030:	08101081 	.word	0x08101081
 8101034:	08101293 	.word	0x08101293
 8101038:	08101293 	.word	0x08101293
 810103c:	08101293 	.word	0x08101293
 8101040:	08101293 	.word	0x08101293
 8101044:	08101293 	.word	0x08101293
 8101048:	08101293 	.word	0x08101293
 810104c:	08101293 	.word	0x08101293
 8101050:	08101087 	.word	0x08101087
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101054:	4b94      	ldr	r3, [pc, #592]	; (81012a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101056:	681b      	ldr	r3, [r3, #0]
 8101058:	f003 0320 	and.w	r3, r3, #32
 810105c:	2b00      	cmp	r3, #0
 810105e:	d009      	beq.n	8101074 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8101060:	4b91      	ldr	r3, [pc, #580]	; (81012a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101062:	681b      	ldr	r3, [r3, #0]
 8101064:	08db      	lsrs	r3, r3, #3
 8101066:	f003 0303 	and.w	r3, r3, #3
 810106a:	4a90      	ldr	r2, [pc, #576]	; (81012ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 810106c:	fa22 f303 	lsr.w	r3, r2, r3
 8101070:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8101072:	e111      	b.n	8101298 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8101074:	4b8d      	ldr	r3, [pc, #564]	; (81012ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101076:	61bb      	str	r3, [r7, #24]
    break;
 8101078:	e10e      	b.n	8101298 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 810107a:	4b8d      	ldr	r3, [pc, #564]	; (81012b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810107c:	61bb      	str	r3, [r7, #24]
    break;
 810107e:	e10b      	b.n	8101298 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8101080:	4b8c      	ldr	r3, [pc, #560]	; (81012b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8101082:	61bb      	str	r3, [r7, #24]
    break;
 8101084:	e108      	b.n	8101298 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101086:	4b88      	ldr	r3, [pc, #544]	; (81012a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810108a:	f003 0303 	and.w	r3, r3, #3
 810108e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8101090:	4b85      	ldr	r3, [pc, #532]	; (81012a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101094:	091b      	lsrs	r3, r3, #4
 8101096:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810109a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 810109c:	4b82      	ldr	r3, [pc, #520]	; (81012a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810109e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81010a0:	f003 0301 	and.w	r3, r3, #1
 81010a4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81010a6:	4b80      	ldr	r3, [pc, #512]	; (81012a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81010a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81010aa:	08db      	lsrs	r3, r3, #3
 81010ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81010b0:	68fa      	ldr	r2, [r7, #12]
 81010b2:	fb02 f303 	mul.w	r3, r2, r3
 81010b6:	ee07 3a90 	vmov	s15, r3
 81010ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81010be:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81010c2:	693b      	ldr	r3, [r7, #16]
 81010c4:	2b00      	cmp	r3, #0
 81010c6:	f000 80e1 	beq.w	810128c <HAL_RCC_GetSysClockFreq+0x2b8>
 81010ca:	697b      	ldr	r3, [r7, #20]
 81010cc:	2b02      	cmp	r3, #2
 81010ce:	f000 8083 	beq.w	81011d8 <HAL_RCC_GetSysClockFreq+0x204>
 81010d2:	697b      	ldr	r3, [r7, #20]
 81010d4:	2b02      	cmp	r3, #2
 81010d6:	f200 80a1 	bhi.w	810121c <HAL_RCC_GetSysClockFreq+0x248>
 81010da:	697b      	ldr	r3, [r7, #20]
 81010dc:	2b00      	cmp	r3, #0
 81010de:	d003      	beq.n	81010e8 <HAL_RCC_GetSysClockFreq+0x114>
 81010e0:	697b      	ldr	r3, [r7, #20]
 81010e2:	2b01      	cmp	r3, #1
 81010e4:	d056      	beq.n	8101194 <HAL_RCC_GetSysClockFreq+0x1c0>
 81010e6:	e099      	b.n	810121c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81010e8:	4b6f      	ldr	r3, [pc, #444]	; (81012a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81010ea:	681b      	ldr	r3, [r3, #0]
 81010ec:	f003 0320 	and.w	r3, r3, #32
 81010f0:	2b00      	cmp	r3, #0
 81010f2:	d02d      	beq.n	8101150 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81010f4:	4b6c      	ldr	r3, [pc, #432]	; (81012a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81010f6:	681b      	ldr	r3, [r3, #0]
 81010f8:	08db      	lsrs	r3, r3, #3
 81010fa:	f003 0303 	and.w	r3, r3, #3
 81010fe:	4a6b      	ldr	r2, [pc, #428]	; (81012ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101100:	fa22 f303 	lsr.w	r3, r2, r3
 8101104:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101106:	687b      	ldr	r3, [r7, #4]
 8101108:	ee07 3a90 	vmov	s15, r3
 810110c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101110:	693b      	ldr	r3, [r7, #16]
 8101112:	ee07 3a90 	vmov	s15, r3
 8101116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810111a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810111e:	4b62      	ldr	r3, [pc, #392]	; (81012a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101126:	ee07 3a90 	vmov	s15, r3
 810112a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810112e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101132:	eddf 5a61 	vldr	s11, [pc, #388]	; 81012b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810113a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810113e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101146:	ee67 7a27 	vmul.f32	s15, s14, s15
 810114a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 810114e:	e087      	b.n	8101260 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101150:	693b      	ldr	r3, [r7, #16]
 8101152:	ee07 3a90 	vmov	s15, r3
 8101156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810115a:	eddf 6a58 	vldr	s13, [pc, #352]	; 81012bc <HAL_RCC_GetSysClockFreq+0x2e8>
 810115e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101162:	4b51      	ldr	r3, [pc, #324]	; (81012a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810116a:	ee07 3a90 	vmov	s15, r3
 810116e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101172:	ed97 6a02 	vldr	s12, [r7, #8]
 8101176:	eddf 5a50 	vldr	s11, [pc, #320]	; 81012b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 810117a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810117e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810118a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810118e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101192:	e065      	b.n	8101260 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101194:	693b      	ldr	r3, [r7, #16]
 8101196:	ee07 3a90 	vmov	s15, r3
 810119a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810119e:	eddf 6a48 	vldr	s13, [pc, #288]	; 81012c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 81011a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81011a6:	4b40      	ldr	r3, [pc, #256]	; (81012a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81011aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81011ae:	ee07 3a90 	vmov	s15, r3
 81011b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81011b6:	ed97 6a02 	vldr	s12, [r7, #8]
 81011ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81012b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 81011be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81011c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81011c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81011ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81011ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 81011d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81011d6:	e043      	b.n	8101260 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81011d8:	693b      	ldr	r3, [r7, #16]
 81011da:	ee07 3a90 	vmov	s15, r3
 81011de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81011e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 81012c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 81011e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81011ea:	4b2f      	ldr	r3, [pc, #188]	; (81012a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81011ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81011f2:	ee07 3a90 	vmov	s15, r3
 81011f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81011fa:	ed97 6a02 	vldr	s12, [r7, #8]
 81011fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81012b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810120a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810120e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101216:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810121a:	e021      	b.n	8101260 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810121c:	693b      	ldr	r3, [r7, #16]
 810121e:	ee07 3a90 	vmov	s15, r3
 8101222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101226:	eddf 6a26 	vldr	s13, [pc, #152]	; 81012c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 810122a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810122e:	4b1e      	ldr	r3, [pc, #120]	; (81012a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101236:	ee07 3a90 	vmov	s15, r3
 810123a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810123e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101242:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81012b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810124a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810124e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101256:	ee67 7a27 	vmul.f32	s15, s14, s15
 810125a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810125e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8101260:	4b11      	ldr	r3, [pc, #68]	; (81012a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101264:	0a5b      	lsrs	r3, r3, #9
 8101266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810126a:	3301      	adds	r3, #1
 810126c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 810126e:	683b      	ldr	r3, [r7, #0]
 8101270:	ee07 3a90 	vmov	s15, r3
 8101274:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101278:	edd7 6a07 	vldr	s13, [r7, #28]
 810127c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101284:	ee17 3a90 	vmov	r3, s15
 8101288:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 810128a:	e005      	b.n	8101298 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 810128c:	2300      	movs	r3, #0
 810128e:	61bb      	str	r3, [r7, #24]
    break;
 8101290:	e002      	b.n	8101298 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8101292:	4b07      	ldr	r3, [pc, #28]	; (81012b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101294:	61bb      	str	r3, [r7, #24]
    break;
 8101296:	bf00      	nop
  }

  return sysclockfreq;
 8101298:	69bb      	ldr	r3, [r7, #24]
}
 810129a:	4618      	mov	r0, r3
 810129c:	3724      	adds	r7, #36	; 0x24
 810129e:	46bd      	mov	sp, r7
 81012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012a4:	4770      	bx	lr
 81012a6:	bf00      	nop
 81012a8:	58024400 	.word	0x58024400
 81012ac:	03d09000 	.word	0x03d09000
 81012b0:	003d0900 	.word	0x003d0900
 81012b4:	017d7840 	.word	0x017d7840
 81012b8:	46000000 	.word	0x46000000
 81012bc:	4c742400 	.word	0x4c742400
 81012c0:	4a742400 	.word	0x4a742400
 81012c4:	4bbebc20 	.word	0x4bbebc20

081012c8 <__NVIC_SetPriority>:
{
 81012c8:	b480      	push	{r7}
 81012ca:	b083      	sub	sp, #12
 81012cc:	af00      	add	r7, sp, #0
 81012ce:	4603      	mov	r3, r0
 81012d0:	6039      	str	r1, [r7, #0]
 81012d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81012d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81012d8:	2b00      	cmp	r3, #0
 81012da:	db0a      	blt.n	81012f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81012dc:	683b      	ldr	r3, [r7, #0]
 81012de:	b2da      	uxtb	r2, r3
 81012e0:	490c      	ldr	r1, [pc, #48]	; (8101314 <__NVIC_SetPriority+0x4c>)
 81012e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81012e6:	0112      	lsls	r2, r2, #4
 81012e8:	b2d2      	uxtb	r2, r2
 81012ea:	440b      	add	r3, r1
 81012ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 81012f0:	e00a      	b.n	8101308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81012f2:	683b      	ldr	r3, [r7, #0]
 81012f4:	b2da      	uxtb	r2, r3
 81012f6:	4908      	ldr	r1, [pc, #32]	; (8101318 <__NVIC_SetPriority+0x50>)
 81012f8:	88fb      	ldrh	r3, [r7, #6]
 81012fa:	f003 030f 	and.w	r3, r3, #15
 81012fe:	3b04      	subs	r3, #4
 8101300:	0112      	lsls	r2, r2, #4
 8101302:	b2d2      	uxtb	r2, r2
 8101304:	440b      	add	r3, r1
 8101306:	761a      	strb	r2, [r3, #24]
}
 8101308:	bf00      	nop
 810130a:	370c      	adds	r7, #12
 810130c:	46bd      	mov	sp, r7
 810130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101312:	4770      	bx	lr
 8101314:	e000e100 	.word	0xe000e100
 8101318:	e000ed00 	.word	0xe000ed00

0810131c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 810131c:	b580      	push	{r7, lr}
 810131e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8101320:	2100      	movs	r1, #0
 8101322:	f06f 0004 	mvn.w	r0, #4
 8101326:	f7ff ffcf 	bl	81012c8 <__NVIC_SetPriority>
#endif
}
 810132a:	bf00      	nop
 810132c:	bd80      	pop	{r7, pc}
	...

08101330 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8101330:	b480      	push	{r7}
 8101332:	b083      	sub	sp, #12
 8101334:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8101336:	f3ef 8305 	mrs	r3, IPSR
 810133a:	603b      	str	r3, [r7, #0]
  return(result);
 810133c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810133e:	2b00      	cmp	r3, #0
 8101340:	d003      	beq.n	810134a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8101342:	f06f 0305 	mvn.w	r3, #5
 8101346:	607b      	str	r3, [r7, #4]
 8101348:	e00c      	b.n	8101364 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 810134a:	4b0a      	ldr	r3, [pc, #40]	; (8101374 <osKernelInitialize+0x44>)
 810134c:	681b      	ldr	r3, [r3, #0]
 810134e:	2b00      	cmp	r3, #0
 8101350:	d105      	bne.n	810135e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8101352:	4b08      	ldr	r3, [pc, #32]	; (8101374 <osKernelInitialize+0x44>)
 8101354:	2201      	movs	r2, #1
 8101356:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8101358:	2300      	movs	r3, #0
 810135a:	607b      	str	r3, [r7, #4]
 810135c:	e002      	b.n	8101364 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 810135e:	f04f 33ff 	mov.w	r3, #4294967295
 8101362:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8101364:	687b      	ldr	r3, [r7, #4]
}
 8101366:	4618      	mov	r0, r3
 8101368:	370c      	adds	r7, #12
 810136a:	46bd      	mov	sp, r7
 810136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101370:	4770      	bx	lr
 8101372:	bf00      	nop
 8101374:	10000098 	.word	0x10000098

08101378 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8101378:	b580      	push	{r7, lr}
 810137a:	b082      	sub	sp, #8
 810137c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810137e:	f3ef 8305 	mrs	r3, IPSR
 8101382:	603b      	str	r3, [r7, #0]
  return(result);
 8101384:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8101386:	2b00      	cmp	r3, #0
 8101388:	d003      	beq.n	8101392 <osKernelStart+0x1a>
    stat = osErrorISR;
 810138a:	f06f 0305 	mvn.w	r3, #5
 810138e:	607b      	str	r3, [r7, #4]
 8101390:	e010      	b.n	81013b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8101392:	4b0b      	ldr	r3, [pc, #44]	; (81013c0 <osKernelStart+0x48>)
 8101394:	681b      	ldr	r3, [r3, #0]
 8101396:	2b01      	cmp	r3, #1
 8101398:	d109      	bne.n	81013ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 810139a:	f7ff ffbf 	bl	810131c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 810139e:	4b08      	ldr	r3, [pc, #32]	; (81013c0 <osKernelStart+0x48>)
 81013a0:	2202      	movs	r2, #2
 81013a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 81013a4:	f001 fcb8 	bl	8102d18 <vTaskStartScheduler>
      stat = osOK;
 81013a8:	2300      	movs	r3, #0
 81013aa:	607b      	str	r3, [r7, #4]
 81013ac:	e002      	b.n	81013b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 81013ae:	f04f 33ff 	mov.w	r3, #4294967295
 81013b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 81013b4:	687b      	ldr	r3, [r7, #4]
}
 81013b6:	4618      	mov	r0, r3
 81013b8:	3708      	adds	r7, #8
 81013ba:	46bd      	mov	sp, r7
 81013bc:	bd80      	pop	{r7, pc}
 81013be:	bf00      	nop
 81013c0:	10000098 	.word	0x10000098

081013c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 81013c4:	b580      	push	{r7, lr}
 81013c6:	b08e      	sub	sp, #56	; 0x38
 81013c8:	af04      	add	r7, sp, #16
 81013ca:	60f8      	str	r0, [r7, #12]
 81013cc:	60b9      	str	r1, [r7, #8]
 81013ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 81013d0:	2300      	movs	r3, #0
 81013d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81013d4:	f3ef 8305 	mrs	r3, IPSR
 81013d8:	617b      	str	r3, [r7, #20]
  return(result);
 81013da:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 81013dc:	2b00      	cmp	r3, #0
 81013de:	d17e      	bne.n	81014de <osThreadNew+0x11a>
 81013e0:	68fb      	ldr	r3, [r7, #12]
 81013e2:	2b00      	cmp	r3, #0
 81013e4:	d07b      	beq.n	81014de <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 81013e6:	2380      	movs	r3, #128	; 0x80
 81013e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 81013ea:	2318      	movs	r3, #24
 81013ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 81013ee:	2300      	movs	r3, #0
 81013f0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 81013f2:	f04f 33ff 	mov.w	r3, #4294967295
 81013f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 81013f8:	687b      	ldr	r3, [r7, #4]
 81013fa:	2b00      	cmp	r3, #0
 81013fc:	d045      	beq.n	810148a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 81013fe:	687b      	ldr	r3, [r7, #4]
 8101400:	681b      	ldr	r3, [r3, #0]
 8101402:	2b00      	cmp	r3, #0
 8101404:	d002      	beq.n	810140c <osThreadNew+0x48>
        name = attr->name;
 8101406:	687b      	ldr	r3, [r7, #4]
 8101408:	681b      	ldr	r3, [r3, #0]
 810140a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 810140c:	687b      	ldr	r3, [r7, #4]
 810140e:	699b      	ldr	r3, [r3, #24]
 8101410:	2b00      	cmp	r3, #0
 8101412:	d002      	beq.n	810141a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8101414:	687b      	ldr	r3, [r7, #4]
 8101416:	699b      	ldr	r3, [r3, #24]
 8101418:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 810141a:	69fb      	ldr	r3, [r7, #28]
 810141c:	2b00      	cmp	r3, #0
 810141e:	d008      	beq.n	8101432 <osThreadNew+0x6e>
 8101420:	69fb      	ldr	r3, [r7, #28]
 8101422:	2b38      	cmp	r3, #56	; 0x38
 8101424:	d805      	bhi.n	8101432 <osThreadNew+0x6e>
 8101426:	687b      	ldr	r3, [r7, #4]
 8101428:	685b      	ldr	r3, [r3, #4]
 810142a:	f003 0301 	and.w	r3, r3, #1
 810142e:	2b00      	cmp	r3, #0
 8101430:	d001      	beq.n	8101436 <osThreadNew+0x72>
        return (NULL);
 8101432:	2300      	movs	r3, #0
 8101434:	e054      	b.n	81014e0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8101436:	687b      	ldr	r3, [r7, #4]
 8101438:	695b      	ldr	r3, [r3, #20]
 810143a:	2b00      	cmp	r3, #0
 810143c:	d003      	beq.n	8101446 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 810143e:	687b      	ldr	r3, [r7, #4]
 8101440:	695b      	ldr	r3, [r3, #20]
 8101442:	089b      	lsrs	r3, r3, #2
 8101444:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8101446:	687b      	ldr	r3, [r7, #4]
 8101448:	689b      	ldr	r3, [r3, #8]
 810144a:	2b00      	cmp	r3, #0
 810144c:	d00e      	beq.n	810146c <osThreadNew+0xa8>
 810144e:	687b      	ldr	r3, [r7, #4]
 8101450:	68db      	ldr	r3, [r3, #12]
 8101452:	2bbb      	cmp	r3, #187	; 0xbb
 8101454:	d90a      	bls.n	810146c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8101456:	687b      	ldr	r3, [r7, #4]
 8101458:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810145a:	2b00      	cmp	r3, #0
 810145c:	d006      	beq.n	810146c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810145e:	687b      	ldr	r3, [r7, #4]
 8101460:	695b      	ldr	r3, [r3, #20]
 8101462:	2b00      	cmp	r3, #0
 8101464:	d002      	beq.n	810146c <osThreadNew+0xa8>
        mem = 1;
 8101466:	2301      	movs	r3, #1
 8101468:	61bb      	str	r3, [r7, #24]
 810146a:	e010      	b.n	810148e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 810146c:	687b      	ldr	r3, [r7, #4]
 810146e:	689b      	ldr	r3, [r3, #8]
 8101470:	2b00      	cmp	r3, #0
 8101472:	d10c      	bne.n	810148e <osThreadNew+0xca>
 8101474:	687b      	ldr	r3, [r7, #4]
 8101476:	68db      	ldr	r3, [r3, #12]
 8101478:	2b00      	cmp	r3, #0
 810147a:	d108      	bne.n	810148e <osThreadNew+0xca>
 810147c:	687b      	ldr	r3, [r7, #4]
 810147e:	691b      	ldr	r3, [r3, #16]
 8101480:	2b00      	cmp	r3, #0
 8101482:	d104      	bne.n	810148e <osThreadNew+0xca>
          mem = 0;
 8101484:	2300      	movs	r3, #0
 8101486:	61bb      	str	r3, [r7, #24]
 8101488:	e001      	b.n	810148e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 810148a:	2300      	movs	r3, #0
 810148c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 810148e:	69bb      	ldr	r3, [r7, #24]
 8101490:	2b01      	cmp	r3, #1
 8101492:	d110      	bne.n	81014b6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8101494:	687b      	ldr	r3, [r7, #4]
 8101496:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8101498:	687a      	ldr	r2, [r7, #4]
 810149a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810149c:	9202      	str	r2, [sp, #8]
 810149e:	9301      	str	r3, [sp, #4]
 81014a0:	69fb      	ldr	r3, [r7, #28]
 81014a2:	9300      	str	r3, [sp, #0]
 81014a4:	68bb      	ldr	r3, [r7, #8]
 81014a6:	6a3a      	ldr	r2, [r7, #32]
 81014a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 81014aa:	68f8      	ldr	r0, [r7, #12]
 81014ac:	f001 fa48 	bl	8102940 <xTaskCreateStatic>
 81014b0:	4603      	mov	r3, r0
 81014b2:	613b      	str	r3, [r7, #16]
 81014b4:	e013      	b.n	81014de <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 81014b6:	69bb      	ldr	r3, [r7, #24]
 81014b8:	2b00      	cmp	r3, #0
 81014ba:	d110      	bne.n	81014de <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 81014bc:	6a3b      	ldr	r3, [r7, #32]
 81014be:	b29a      	uxth	r2, r3
 81014c0:	f107 0310 	add.w	r3, r7, #16
 81014c4:	9301      	str	r3, [sp, #4]
 81014c6:	69fb      	ldr	r3, [r7, #28]
 81014c8:	9300      	str	r3, [sp, #0]
 81014ca:	68bb      	ldr	r3, [r7, #8]
 81014cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 81014ce:	68f8      	ldr	r0, [r7, #12]
 81014d0:	f001 fa93 	bl	81029fa <xTaskCreate>
 81014d4:	4603      	mov	r3, r0
 81014d6:	2b01      	cmp	r3, #1
 81014d8:	d001      	beq.n	81014de <osThreadNew+0x11a>
            hTask = NULL;
 81014da:	2300      	movs	r3, #0
 81014dc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 81014de:	693b      	ldr	r3, [r7, #16]
}
 81014e0:	4618      	mov	r0, r3
 81014e2:	3728      	adds	r7, #40	; 0x28
 81014e4:	46bd      	mov	sp, r7
 81014e6:	bd80      	pop	{r7, pc}

081014e8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 81014e8:	b580      	push	{r7, lr}
 81014ea:	b084      	sub	sp, #16
 81014ec:	af00      	add	r7, sp, #0
 81014ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81014f0:	f3ef 8305 	mrs	r3, IPSR
 81014f4:	60bb      	str	r3, [r7, #8]
  return(result);
 81014f6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 81014f8:	2b00      	cmp	r3, #0
 81014fa:	d003      	beq.n	8101504 <osDelay+0x1c>
    stat = osErrorISR;
 81014fc:	f06f 0305 	mvn.w	r3, #5
 8101500:	60fb      	str	r3, [r7, #12]
 8101502:	e007      	b.n	8101514 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8101504:	2300      	movs	r3, #0
 8101506:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8101508:	687b      	ldr	r3, [r7, #4]
 810150a:	2b00      	cmp	r3, #0
 810150c:	d002      	beq.n	8101514 <osDelay+0x2c>
      vTaskDelay(ticks);
 810150e:	6878      	ldr	r0, [r7, #4]
 8101510:	f001 fbce 	bl	8102cb0 <vTaskDelay>
    }
  }

  return (stat);
 8101514:	68fb      	ldr	r3, [r7, #12]
}
 8101516:	4618      	mov	r0, r3
 8101518:	3710      	adds	r7, #16
 810151a:	46bd      	mov	sp, r7
 810151c:	bd80      	pop	{r7, pc}
	...

08101520 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8101520:	b480      	push	{r7}
 8101522:	b085      	sub	sp, #20
 8101524:	af00      	add	r7, sp, #0
 8101526:	60f8      	str	r0, [r7, #12]
 8101528:	60b9      	str	r1, [r7, #8]
 810152a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 810152c:	68fb      	ldr	r3, [r7, #12]
 810152e:	4a07      	ldr	r2, [pc, #28]	; (810154c <vApplicationGetIdleTaskMemory+0x2c>)
 8101530:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8101532:	68bb      	ldr	r3, [r7, #8]
 8101534:	4a06      	ldr	r2, [pc, #24]	; (8101550 <vApplicationGetIdleTaskMemory+0x30>)
 8101536:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8101538:	687b      	ldr	r3, [r7, #4]
 810153a:	2280      	movs	r2, #128	; 0x80
 810153c:	601a      	str	r2, [r3, #0]
}
 810153e:	bf00      	nop
 8101540:	3714      	adds	r7, #20
 8101542:	46bd      	mov	sp, r7
 8101544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101548:	4770      	bx	lr
 810154a:	bf00      	nop
 810154c:	1000009c 	.word	0x1000009c
 8101550:	10000158 	.word	0x10000158

08101554 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8101554:	b480      	push	{r7}
 8101556:	b085      	sub	sp, #20
 8101558:	af00      	add	r7, sp, #0
 810155a:	60f8      	str	r0, [r7, #12]
 810155c:	60b9      	str	r1, [r7, #8]
 810155e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8101560:	68fb      	ldr	r3, [r7, #12]
 8101562:	4a07      	ldr	r2, [pc, #28]	; (8101580 <vApplicationGetTimerTaskMemory+0x2c>)
 8101564:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8101566:	68bb      	ldr	r3, [r7, #8]
 8101568:	4a06      	ldr	r2, [pc, #24]	; (8101584 <vApplicationGetTimerTaskMemory+0x30>)
 810156a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 810156c:	687b      	ldr	r3, [r7, #4]
 810156e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8101572:	601a      	str	r2, [r3, #0]
}
 8101574:	bf00      	nop
 8101576:	3714      	adds	r7, #20
 8101578:	46bd      	mov	sp, r7
 810157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810157e:	4770      	bx	lr
 8101580:	10000358 	.word	0x10000358
 8101584:	10000414 	.word	0x10000414

08101588 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8101588:	b580      	push	{r7, lr}
 810158a:	b08a      	sub	sp, #40	; 0x28
 810158c:	af00      	add	r7, sp, #0
 810158e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8101590:	2300      	movs	r3, #0
 8101592:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8101594:	f001 fc30 	bl	8102df8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8101598:	4b5b      	ldr	r3, [pc, #364]	; (8101708 <pvPortMalloc+0x180>)
 810159a:	681b      	ldr	r3, [r3, #0]
 810159c:	2b00      	cmp	r3, #0
 810159e:	d101      	bne.n	81015a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 81015a0:	f000 f920 	bl	81017e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 81015a4:	4b59      	ldr	r3, [pc, #356]	; (810170c <pvPortMalloc+0x184>)
 81015a6:	681a      	ldr	r2, [r3, #0]
 81015a8:	687b      	ldr	r3, [r7, #4]
 81015aa:	4013      	ands	r3, r2
 81015ac:	2b00      	cmp	r3, #0
 81015ae:	f040 8093 	bne.w	81016d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 81015b2:	687b      	ldr	r3, [r7, #4]
 81015b4:	2b00      	cmp	r3, #0
 81015b6:	d01d      	beq.n	81015f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 81015b8:	2208      	movs	r2, #8
 81015ba:	687b      	ldr	r3, [r7, #4]
 81015bc:	4413      	add	r3, r2
 81015be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 81015c0:	687b      	ldr	r3, [r7, #4]
 81015c2:	f003 0307 	and.w	r3, r3, #7
 81015c6:	2b00      	cmp	r3, #0
 81015c8:	d014      	beq.n	81015f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 81015ca:	687b      	ldr	r3, [r7, #4]
 81015cc:	f023 0307 	bic.w	r3, r3, #7
 81015d0:	3308      	adds	r3, #8
 81015d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 81015d4:	687b      	ldr	r3, [r7, #4]
 81015d6:	f003 0307 	and.w	r3, r3, #7
 81015da:	2b00      	cmp	r3, #0
 81015dc:	d00a      	beq.n	81015f4 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 81015de:	f04f 0350 	mov.w	r3, #80	; 0x50
 81015e2:	f383 8811 	msr	BASEPRI, r3
 81015e6:	f3bf 8f6f 	isb	sy
 81015ea:	f3bf 8f4f 	dsb	sy
 81015ee:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 81015f0:	bf00      	nop
 81015f2:	e7fe      	b.n	81015f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 81015f4:	687b      	ldr	r3, [r7, #4]
 81015f6:	2b00      	cmp	r3, #0
 81015f8:	d06e      	beq.n	81016d8 <pvPortMalloc+0x150>
 81015fa:	4b45      	ldr	r3, [pc, #276]	; (8101710 <pvPortMalloc+0x188>)
 81015fc:	681b      	ldr	r3, [r3, #0]
 81015fe:	687a      	ldr	r2, [r7, #4]
 8101600:	429a      	cmp	r2, r3
 8101602:	d869      	bhi.n	81016d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8101604:	4b43      	ldr	r3, [pc, #268]	; (8101714 <pvPortMalloc+0x18c>)
 8101606:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8101608:	4b42      	ldr	r3, [pc, #264]	; (8101714 <pvPortMalloc+0x18c>)
 810160a:	681b      	ldr	r3, [r3, #0]
 810160c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810160e:	e004      	b.n	810161a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8101610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101612:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8101614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101616:	681b      	ldr	r3, [r3, #0]
 8101618:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810161c:	685b      	ldr	r3, [r3, #4]
 810161e:	687a      	ldr	r2, [r7, #4]
 8101620:	429a      	cmp	r2, r3
 8101622:	d903      	bls.n	810162c <pvPortMalloc+0xa4>
 8101624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101626:	681b      	ldr	r3, [r3, #0]
 8101628:	2b00      	cmp	r3, #0
 810162a:	d1f1      	bne.n	8101610 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 810162c:	4b36      	ldr	r3, [pc, #216]	; (8101708 <pvPortMalloc+0x180>)
 810162e:	681b      	ldr	r3, [r3, #0]
 8101630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101632:	429a      	cmp	r2, r3
 8101634:	d050      	beq.n	81016d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8101636:	6a3b      	ldr	r3, [r7, #32]
 8101638:	681b      	ldr	r3, [r3, #0]
 810163a:	2208      	movs	r2, #8
 810163c:	4413      	add	r3, r2
 810163e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8101640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101642:	681a      	ldr	r2, [r3, #0]
 8101644:	6a3b      	ldr	r3, [r7, #32]
 8101646:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8101648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810164a:	685a      	ldr	r2, [r3, #4]
 810164c:	687b      	ldr	r3, [r7, #4]
 810164e:	1ad2      	subs	r2, r2, r3
 8101650:	2308      	movs	r3, #8
 8101652:	005b      	lsls	r3, r3, #1
 8101654:	429a      	cmp	r2, r3
 8101656:	d91f      	bls.n	8101698 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8101658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810165a:	687b      	ldr	r3, [r7, #4]
 810165c:	4413      	add	r3, r2
 810165e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8101660:	69bb      	ldr	r3, [r7, #24]
 8101662:	f003 0307 	and.w	r3, r3, #7
 8101666:	2b00      	cmp	r3, #0
 8101668:	d00a      	beq.n	8101680 <pvPortMalloc+0xf8>
	__asm volatile
 810166a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810166e:	f383 8811 	msr	BASEPRI, r3
 8101672:	f3bf 8f6f 	isb	sy
 8101676:	f3bf 8f4f 	dsb	sy
 810167a:	613b      	str	r3, [r7, #16]
}
 810167c:	bf00      	nop
 810167e:	e7fe      	b.n	810167e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8101680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101682:	685a      	ldr	r2, [r3, #4]
 8101684:	687b      	ldr	r3, [r7, #4]
 8101686:	1ad2      	subs	r2, r2, r3
 8101688:	69bb      	ldr	r3, [r7, #24]
 810168a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 810168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810168e:	687a      	ldr	r2, [r7, #4]
 8101690:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8101692:	69b8      	ldr	r0, [r7, #24]
 8101694:	f000 f908 	bl	81018a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8101698:	4b1d      	ldr	r3, [pc, #116]	; (8101710 <pvPortMalloc+0x188>)
 810169a:	681a      	ldr	r2, [r3, #0]
 810169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810169e:	685b      	ldr	r3, [r3, #4]
 81016a0:	1ad3      	subs	r3, r2, r3
 81016a2:	4a1b      	ldr	r2, [pc, #108]	; (8101710 <pvPortMalloc+0x188>)
 81016a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 81016a6:	4b1a      	ldr	r3, [pc, #104]	; (8101710 <pvPortMalloc+0x188>)
 81016a8:	681a      	ldr	r2, [r3, #0]
 81016aa:	4b1b      	ldr	r3, [pc, #108]	; (8101718 <pvPortMalloc+0x190>)
 81016ac:	681b      	ldr	r3, [r3, #0]
 81016ae:	429a      	cmp	r2, r3
 81016b0:	d203      	bcs.n	81016ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 81016b2:	4b17      	ldr	r3, [pc, #92]	; (8101710 <pvPortMalloc+0x188>)
 81016b4:	681b      	ldr	r3, [r3, #0]
 81016b6:	4a18      	ldr	r2, [pc, #96]	; (8101718 <pvPortMalloc+0x190>)
 81016b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 81016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81016bc:	685a      	ldr	r2, [r3, #4]
 81016be:	4b13      	ldr	r3, [pc, #76]	; (810170c <pvPortMalloc+0x184>)
 81016c0:	681b      	ldr	r3, [r3, #0]
 81016c2:	431a      	orrs	r2, r3
 81016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81016c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 81016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81016ca:	2200      	movs	r2, #0
 81016cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 81016ce:	4b13      	ldr	r3, [pc, #76]	; (810171c <pvPortMalloc+0x194>)
 81016d0:	681b      	ldr	r3, [r3, #0]
 81016d2:	3301      	adds	r3, #1
 81016d4:	4a11      	ldr	r2, [pc, #68]	; (810171c <pvPortMalloc+0x194>)
 81016d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 81016d8:	f001 fb9c 	bl	8102e14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 81016dc:	69fb      	ldr	r3, [r7, #28]
 81016de:	f003 0307 	and.w	r3, r3, #7
 81016e2:	2b00      	cmp	r3, #0
 81016e4:	d00a      	beq.n	81016fc <pvPortMalloc+0x174>
	__asm volatile
 81016e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81016ea:	f383 8811 	msr	BASEPRI, r3
 81016ee:	f3bf 8f6f 	isb	sy
 81016f2:	f3bf 8f4f 	dsb	sy
 81016f6:	60fb      	str	r3, [r7, #12]
}
 81016f8:	bf00      	nop
 81016fa:	e7fe      	b.n	81016fa <pvPortMalloc+0x172>
	return pvReturn;
 81016fc:	69fb      	ldr	r3, [r7, #28]
}
 81016fe:	4618      	mov	r0, r3
 8101700:	3728      	adds	r7, #40	; 0x28
 8101702:	46bd      	mov	sp, r7
 8101704:	bd80      	pop	{r7, pc}
 8101706:	bf00      	nop
 8101708:	1000441c 	.word	0x1000441c
 810170c:	10004430 	.word	0x10004430
 8101710:	10004420 	.word	0x10004420
 8101714:	10004414 	.word	0x10004414
 8101718:	10004424 	.word	0x10004424
 810171c:	10004428 	.word	0x10004428

08101720 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8101720:	b580      	push	{r7, lr}
 8101722:	b086      	sub	sp, #24
 8101724:	af00      	add	r7, sp, #0
 8101726:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8101728:	687b      	ldr	r3, [r7, #4]
 810172a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 810172c:	687b      	ldr	r3, [r7, #4]
 810172e:	2b00      	cmp	r3, #0
 8101730:	d04d      	beq.n	81017ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8101732:	2308      	movs	r3, #8
 8101734:	425b      	negs	r3, r3
 8101736:	697a      	ldr	r2, [r7, #20]
 8101738:	4413      	add	r3, r2
 810173a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 810173c:	697b      	ldr	r3, [r7, #20]
 810173e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8101740:	693b      	ldr	r3, [r7, #16]
 8101742:	685a      	ldr	r2, [r3, #4]
 8101744:	4b24      	ldr	r3, [pc, #144]	; (81017d8 <vPortFree+0xb8>)
 8101746:	681b      	ldr	r3, [r3, #0]
 8101748:	4013      	ands	r3, r2
 810174a:	2b00      	cmp	r3, #0
 810174c:	d10a      	bne.n	8101764 <vPortFree+0x44>
	__asm volatile
 810174e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101752:	f383 8811 	msr	BASEPRI, r3
 8101756:	f3bf 8f6f 	isb	sy
 810175a:	f3bf 8f4f 	dsb	sy
 810175e:	60fb      	str	r3, [r7, #12]
}
 8101760:	bf00      	nop
 8101762:	e7fe      	b.n	8101762 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8101764:	693b      	ldr	r3, [r7, #16]
 8101766:	681b      	ldr	r3, [r3, #0]
 8101768:	2b00      	cmp	r3, #0
 810176a:	d00a      	beq.n	8101782 <vPortFree+0x62>
	__asm volatile
 810176c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101770:	f383 8811 	msr	BASEPRI, r3
 8101774:	f3bf 8f6f 	isb	sy
 8101778:	f3bf 8f4f 	dsb	sy
 810177c:	60bb      	str	r3, [r7, #8]
}
 810177e:	bf00      	nop
 8101780:	e7fe      	b.n	8101780 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8101782:	693b      	ldr	r3, [r7, #16]
 8101784:	685a      	ldr	r2, [r3, #4]
 8101786:	4b14      	ldr	r3, [pc, #80]	; (81017d8 <vPortFree+0xb8>)
 8101788:	681b      	ldr	r3, [r3, #0]
 810178a:	4013      	ands	r3, r2
 810178c:	2b00      	cmp	r3, #0
 810178e:	d01e      	beq.n	81017ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8101790:	693b      	ldr	r3, [r7, #16]
 8101792:	681b      	ldr	r3, [r3, #0]
 8101794:	2b00      	cmp	r3, #0
 8101796:	d11a      	bne.n	81017ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8101798:	693b      	ldr	r3, [r7, #16]
 810179a:	685a      	ldr	r2, [r3, #4]
 810179c:	4b0e      	ldr	r3, [pc, #56]	; (81017d8 <vPortFree+0xb8>)
 810179e:	681b      	ldr	r3, [r3, #0]
 81017a0:	43db      	mvns	r3, r3
 81017a2:	401a      	ands	r2, r3
 81017a4:	693b      	ldr	r3, [r7, #16]
 81017a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 81017a8:	f001 fb26 	bl	8102df8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 81017ac:	693b      	ldr	r3, [r7, #16]
 81017ae:	685a      	ldr	r2, [r3, #4]
 81017b0:	4b0a      	ldr	r3, [pc, #40]	; (81017dc <vPortFree+0xbc>)
 81017b2:	681b      	ldr	r3, [r3, #0]
 81017b4:	4413      	add	r3, r2
 81017b6:	4a09      	ldr	r2, [pc, #36]	; (81017dc <vPortFree+0xbc>)
 81017b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 81017ba:	6938      	ldr	r0, [r7, #16]
 81017bc:	f000 f874 	bl	81018a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 81017c0:	4b07      	ldr	r3, [pc, #28]	; (81017e0 <vPortFree+0xc0>)
 81017c2:	681b      	ldr	r3, [r3, #0]
 81017c4:	3301      	adds	r3, #1
 81017c6:	4a06      	ldr	r2, [pc, #24]	; (81017e0 <vPortFree+0xc0>)
 81017c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 81017ca:	f001 fb23 	bl	8102e14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 81017ce:	bf00      	nop
 81017d0:	3718      	adds	r7, #24
 81017d2:	46bd      	mov	sp, r7
 81017d4:	bd80      	pop	{r7, pc}
 81017d6:	bf00      	nop
 81017d8:	10004430 	.word	0x10004430
 81017dc:	10004420 	.word	0x10004420
 81017e0:	1000442c 	.word	0x1000442c

081017e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 81017e4:	b480      	push	{r7}
 81017e6:	b085      	sub	sp, #20
 81017e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 81017ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 81017ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 81017f0:	4b27      	ldr	r3, [pc, #156]	; (8101890 <prvHeapInit+0xac>)
 81017f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 81017f4:	68fb      	ldr	r3, [r7, #12]
 81017f6:	f003 0307 	and.w	r3, r3, #7
 81017fa:	2b00      	cmp	r3, #0
 81017fc:	d00c      	beq.n	8101818 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 81017fe:	68fb      	ldr	r3, [r7, #12]
 8101800:	3307      	adds	r3, #7
 8101802:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8101804:	68fb      	ldr	r3, [r7, #12]
 8101806:	f023 0307 	bic.w	r3, r3, #7
 810180a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 810180c:	68ba      	ldr	r2, [r7, #8]
 810180e:	68fb      	ldr	r3, [r7, #12]
 8101810:	1ad3      	subs	r3, r2, r3
 8101812:	4a1f      	ldr	r2, [pc, #124]	; (8101890 <prvHeapInit+0xac>)
 8101814:	4413      	add	r3, r2
 8101816:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8101818:	68fb      	ldr	r3, [r7, #12]
 810181a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 810181c:	4a1d      	ldr	r2, [pc, #116]	; (8101894 <prvHeapInit+0xb0>)
 810181e:	687b      	ldr	r3, [r7, #4]
 8101820:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8101822:	4b1c      	ldr	r3, [pc, #112]	; (8101894 <prvHeapInit+0xb0>)
 8101824:	2200      	movs	r2, #0
 8101826:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8101828:	687b      	ldr	r3, [r7, #4]
 810182a:	68ba      	ldr	r2, [r7, #8]
 810182c:	4413      	add	r3, r2
 810182e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8101830:	2208      	movs	r2, #8
 8101832:	68fb      	ldr	r3, [r7, #12]
 8101834:	1a9b      	subs	r3, r3, r2
 8101836:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8101838:	68fb      	ldr	r3, [r7, #12]
 810183a:	f023 0307 	bic.w	r3, r3, #7
 810183e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8101840:	68fb      	ldr	r3, [r7, #12]
 8101842:	4a15      	ldr	r2, [pc, #84]	; (8101898 <prvHeapInit+0xb4>)
 8101844:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8101846:	4b14      	ldr	r3, [pc, #80]	; (8101898 <prvHeapInit+0xb4>)
 8101848:	681b      	ldr	r3, [r3, #0]
 810184a:	2200      	movs	r2, #0
 810184c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810184e:	4b12      	ldr	r3, [pc, #72]	; (8101898 <prvHeapInit+0xb4>)
 8101850:	681b      	ldr	r3, [r3, #0]
 8101852:	2200      	movs	r2, #0
 8101854:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8101856:	687b      	ldr	r3, [r7, #4]
 8101858:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 810185a:	683b      	ldr	r3, [r7, #0]
 810185c:	68fa      	ldr	r2, [r7, #12]
 810185e:	1ad2      	subs	r2, r2, r3
 8101860:	683b      	ldr	r3, [r7, #0]
 8101862:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8101864:	4b0c      	ldr	r3, [pc, #48]	; (8101898 <prvHeapInit+0xb4>)
 8101866:	681a      	ldr	r2, [r3, #0]
 8101868:	683b      	ldr	r3, [r7, #0]
 810186a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810186c:	683b      	ldr	r3, [r7, #0]
 810186e:	685b      	ldr	r3, [r3, #4]
 8101870:	4a0a      	ldr	r2, [pc, #40]	; (810189c <prvHeapInit+0xb8>)
 8101872:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8101874:	683b      	ldr	r3, [r7, #0]
 8101876:	685b      	ldr	r3, [r3, #4]
 8101878:	4a09      	ldr	r2, [pc, #36]	; (81018a0 <prvHeapInit+0xbc>)
 810187a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 810187c:	4b09      	ldr	r3, [pc, #36]	; (81018a4 <prvHeapInit+0xc0>)
 810187e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8101882:	601a      	str	r2, [r3, #0]
}
 8101884:	bf00      	nop
 8101886:	3714      	adds	r7, #20
 8101888:	46bd      	mov	sp, r7
 810188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810188e:	4770      	bx	lr
 8101890:	10000814 	.word	0x10000814
 8101894:	10004414 	.word	0x10004414
 8101898:	1000441c 	.word	0x1000441c
 810189c:	10004424 	.word	0x10004424
 81018a0:	10004420 	.word	0x10004420
 81018a4:	10004430 	.word	0x10004430

081018a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 81018a8:	b480      	push	{r7}
 81018aa:	b085      	sub	sp, #20
 81018ac:	af00      	add	r7, sp, #0
 81018ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 81018b0:	4b28      	ldr	r3, [pc, #160]	; (8101954 <prvInsertBlockIntoFreeList+0xac>)
 81018b2:	60fb      	str	r3, [r7, #12]
 81018b4:	e002      	b.n	81018bc <prvInsertBlockIntoFreeList+0x14>
 81018b6:	68fb      	ldr	r3, [r7, #12]
 81018b8:	681b      	ldr	r3, [r3, #0]
 81018ba:	60fb      	str	r3, [r7, #12]
 81018bc:	68fb      	ldr	r3, [r7, #12]
 81018be:	681b      	ldr	r3, [r3, #0]
 81018c0:	687a      	ldr	r2, [r7, #4]
 81018c2:	429a      	cmp	r2, r3
 81018c4:	d8f7      	bhi.n	81018b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 81018c6:	68fb      	ldr	r3, [r7, #12]
 81018c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 81018ca:	68fb      	ldr	r3, [r7, #12]
 81018cc:	685b      	ldr	r3, [r3, #4]
 81018ce:	68ba      	ldr	r2, [r7, #8]
 81018d0:	4413      	add	r3, r2
 81018d2:	687a      	ldr	r2, [r7, #4]
 81018d4:	429a      	cmp	r2, r3
 81018d6:	d108      	bne.n	81018ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 81018d8:	68fb      	ldr	r3, [r7, #12]
 81018da:	685a      	ldr	r2, [r3, #4]
 81018dc:	687b      	ldr	r3, [r7, #4]
 81018de:	685b      	ldr	r3, [r3, #4]
 81018e0:	441a      	add	r2, r3
 81018e2:	68fb      	ldr	r3, [r7, #12]
 81018e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 81018e6:	68fb      	ldr	r3, [r7, #12]
 81018e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 81018ea:	687b      	ldr	r3, [r7, #4]
 81018ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 81018ee:	687b      	ldr	r3, [r7, #4]
 81018f0:	685b      	ldr	r3, [r3, #4]
 81018f2:	68ba      	ldr	r2, [r7, #8]
 81018f4:	441a      	add	r2, r3
 81018f6:	68fb      	ldr	r3, [r7, #12]
 81018f8:	681b      	ldr	r3, [r3, #0]
 81018fa:	429a      	cmp	r2, r3
 81018fc:	d118      	bne.n	8101930 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 81018fe:	68fb      	ldr	r3, [r7, #12]
 8101900:	681a      	ldr	r2, [r3, #0]
 8101902:	4b15      	ldr	r3, [pc, #84]	; (8101958 <prvInsertBlockIntoFreeList+0xb0>)
 8101904:	681b      	ldr	r3, [r3, #0]
 8101906:	429a      	cmp	r2, r3
 8101908:	d00d      	beq.n	8101926 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 810190a:	687b      	ldr	r3, [r7, #4]
 810190c:	685a      	ldr	r2, [r3, #4]
 810190e:	68fb      	ldr	r3, [r7, #12]
 8101910:	681b      	ldr	r3, [r3, #0]
 8101912:	685b      	ldr	r3, [r3, #4]
 8101914:	441a      	add	r2, r3
 8101916:	687b      	ldr	r3, [r7, #4]
 8101918:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 810191a:	68fb      	ldr	r3, [r7, #12]
 810191c:	681b      	ldr	r3, [r3, #0]
 810191e:	681a      	ldr	r2, [r3, #0]
 8101920:	687b      	ldr	r3, [r7, #4]
 8101922:	601a      	str	r2, [r3, #0]
 8101924:	e008      	b.n	8101938 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8101926:	4b0c      	ldr	r3, [pc, #48]	; (8101958 <prvInsertBlockIntoFreeList+0xb0>)
 8101928:	681a      	ldr	r2, [r3, #0]
 810192a:	687b      	ldr	r3, [r7, #4]
 810192c:	601a      	str	r2, [r3, #0]
 810192e:	e003      	b.n	8101938 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8101930:	68fb      	ldr	r3, [r7, #12]
 8101932:	681a      	ldr	r2, [r3, #0]
 8101934:	687b      	ldr	r3, [r7, #4]
 8101936:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8101938:	68fa      	ldr	r2, [r7, #12]
 810193a:	687b      	ldr	r3, [r7, #4]
 810193c:	429a      	cmp	r2, r3
 810193e:	d002      	beq.n	8101946 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8101940:	68fb      	ldr	r3, [r7, #12]
 8101942:	687a      	ldr	r2, [r7, #4]
 8101944:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8101946:	bf00      	nop
 8101948:	3714      	adds	r7, #20
 810194a:	46bd      	mov	sp, r7
 810194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101950:	4770      	bx	lr
 8101952:	bf00      	nop
 8101954:	10004414 	.word	0x10004414
 8101958:	1000441c 	.word	0x1000441c

0810195c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 810195c:	b480      	push	{r7}
 810195e:	b083      	sub	sp, #12
 8101960:	af00      	add	r7, sp, #0
 8101962:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8101964:	687b      	ldr	r3, [r7, #4]
 8101966:	f103 0208 	add.w	r2, r3, #8
 810196a:	687b      	ldr	r3, [r7, #4]
 810196c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810196e:	687b      	ldr	r3, [r7, #4]
 8101970:	f04f 32ff 	mov.w	r2, #4294967295
 8101974:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8101976:	687b      	ldr	r3, [r7, #4]
 8101978:	f103 0208 	add.w	r2, r3, #8
 810197c:	687b      	ldr	r3, [r7, #4]
 810197e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8101980:	687b      	ldr	r3, [r7, #4]
 8101982:	f103 0208 	add.w	r2, r3, #8
 8101986:	687b      	ldr	r3, [r7, #4]
 8101988:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 810198a:	687b      	ldr	r3, [r7, #4]
 810198c:	2200      	movs	r2, #0
 810198e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8101990:	bf00      	nop
 8101992:	370c      	adds	r7, #12
 8101994:	46bd      	mov	sp, r7
 8101996:	f85d 7b04 	ldr.w	r7, [sp], #4
 810199a:	4770      	bx	lr

0810199c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 810199c:	b480      	push	{r7}
 810199e:	b083      	sub	sp, #12
 81019a0:	af00      	add	r7, sp, #0
 81019a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 81019a4:	687b      	ldr	r3, [r7, #4]
 81019a6:	2200      	movs	r2, #0
 81019a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 81019aa:	bf00      	nop
 81019ac:	370c      	adds	r7, #12
 81019ae:	46bd      	mov	sp, r7
 81019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019b4:	4770      	bx	lr

081019b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81019b6:	b480      	push	{r7}
 81019b8:	b085      	sub	sp, #20
 81019ba:	af00      	add	r7, sp, #0
 81019bc:	6078      	str	r0, [r7, #4]
 81019be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 81019c0:	687b      	ldr	r3, [r7, #4]
 81019c2:	685b      	ldr	r3, [r3, #4]
 81019c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 81019c6:	683b      	ldr	r3, [r7, #0]
 81019c8:	68fa      	ldr	r2, [r7, #12]
 81019ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 81019cc:	68fb      	ldr	r3, [r7, #12]
 81019ce:	689a      	ldr	r2, [r3, #8]
 81019d0:	683b      	ldr	r3, [r7, #0]
 81019d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 81019d4:	68fb      	ldr	r3, [r7, #12]
 81019d6:	689b      	ldr	r3, [r3, #8]
 81019d8:	683a      	ldr	r2, [r7, #0]
 81019da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 81019dc:	68fb      	ldr	r3, [r7, #12]
 81019de:	683a      	ldr	r2, [r7, #0]
 81019e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 81019e2:	683b      	ldr	r3, [r7, #0]
 81019e4:	687a      	ldr	r2, [r7, #4]
 81019e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 81019e8:	687b      	ldr	r3, [r7, #4]
 81019ea:	681b      	ldr	r3, [r3, #0]
 81019ec:	1c5a      	adds	r2, r3, #1
 81019ee:	687b      	ldr	r3, [r7, #4]
 81019f0:	601a      	str	r2, [r3, #0]
}
 81019f2:	bf00      	nop
 81019f4:	3714      	adds	r7, #20
 81019f6:	46bd      	mov	sp, r7
 81019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019fc:	4770      	bx	lr

081019fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81019fe:	b480      	push	{r7}
 8101a00:	b085      	sub	sp, #20
 8101a02:	af00      	add	r7, sp, #0
 8101a04:	6078      	str	r0, [r7, #4]
 8101a06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8101a08:	683b      	ldr	r3, [r7, #0]
 8101a0a:	681b      	ldr	r3, [r3, #0]
 8101a0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8101a0e:	68bb      	ldr	r3, [r7, #8]
 8101a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101a14:	d103      	bne.n	8101a1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8101a16:	687b      	ldr	r3, [r7, #4]
 8101a18:	691b      	ldr	r3, [r3, #16]
 8101a1a:	60fb      	str	r3, [r7, #12]
 8101a1c:	e00c      	b.n	8101a38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8101a1e:	687b      	ldr	r3, [r7, #4]
 8101a20:	3308      	adds	r3, #8
 8101a22:	60fb      	str	r3, [r7, #12]
 8101a24:	e002      	b.n	8101a2c <vListInsert+0x2e>
 8101a26:	68fb      	ldr	r3, [r7, #12]
 8101a28:	685b      	ldr	r3, [r3, #4]
 8101a2a:	60fb      	str	r3, [r7, #12]
 8101a2c:	68fb      	ldr	r3, [r7, #12]
 8101a2e:	685b      	ldr	r3, [r3, #4]
 8101a30:	681b      	ldr	r3, [r3, #0]
 8101a32:	68ba      	ldr	r2, [r7, #8]
 8101a34:	429a      	cmp	r2, r3
 8101a36:	d2f6      	bcs.n	8101a26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8101a38:	68fb      	ldr	r3, [r7, #12]
 8101a3a:	685a      	ldr	r2, [r3, #4]
 8101a3c:	683b      	ldr	r3, [r7, #0]
 8101a3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8101a40:	683b      	ldr	r3, [r7, #0]
 8101a42:	685b      	ldr	r3, [r3, #4]
 8101a44:	683a      	ldr	r2, [r7, #0]
 8101a46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8101a48:	683b      	ldr	r3, [r7, #0]
 8101a4a:	68fa      	ldr	r2, [r7, #12]
 8101a4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8101a4e:	68fb      	ldr	r3, [r7, #12]
 8101a50:	683a      	ldr	r2, [r7, #0]
 8101a52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8101a54:	683b      	ldr	r3, [r7, #0]
 8101a56:	687a      	ldr	r2, [r7, #4]
 8101a58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8101a5a:	687b      	ldr	r3, [r7, #4]
 8101a5c:	681b      	ldr	r3, [r3, #0]
 8101a5e:	1c5a      	adds	r2, r3, #1
 8101a60:	687b      	ldr	r3, [r7, #4]
 8101a62:	601a      	str	r2, [r3, #0]
}
 8101a64:	bf00      	nop
 8101a66:	3714      	adds	r7, #20
 8101a68:	46bd      	mov	sp, r7
 8101a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a6e:	4770      	bx	lr

08101a70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8101a70:	b480      	push	{r7}
 8101a72:	b085      	sub	sp, #20
 8101a74:	af00      	add	r7, sp, #0
 8101a76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8101a78:	687b      	ldr	r3, [r7, #4]
 8101a7a:	691b      	ldr	r3, [r3, #16]
 8101a7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8101a7e:	687b      	ldr	r3, [r7, #4]
 8101a80:	685b      	ldr	r3, [r3, #4]
 8101a82:	687a      	ldr	r2, [r7, #4]
 8101a84:	6892      	ldr	r2, [r2, #8]
 8101a86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8101a88:	687b      	ldr	r3, [r7, #4]
 8101a8a:	689b      	ldr	r3, [r3, #8]
 8101a8c:	687a      	ldr	r2, [r7, #4]
 8101a8e:	6852      	ldr	r2, [r2, #4]
 8101a90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8101a92:	68fb      	ldr	r3, [r7, #12]
 8101a94:	685b      	ldr	r3, [r3, #4]
 8101a96:	687a      	ldr	r2, [r7, #4]
 8101a98:	429a      	cmp	r2, r3
 8101a9a:	d103      	bne.n	8101aa4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8101a9c:	687b      	ldr	r3, [r7, #4]
 8101a9e:	689a      	ldr	r2, [r3, #8]
 8101aa0:	68fb      	ldr	r3, [r7, #12]
 8101aa2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8101aa4:	687b      	ldr	r3, [r7, #4]
 8101aa6:	2200      	movs	r2, #0
 8101aa8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8101aaa:	68fb      	ldr	r3, [r7, #12]
 8101aac:	681b      	ldr	r3, [r3, #0]
 8101aae:	1e5a      	subs	r2, r3, #1
 8101ab0:	68fb      	ldr	r3, [r7, #12]
 8101ab2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8101ab4:	68fb      	ldr	r3, [r7, #12]
 8101ab6:	681b      	ldr	r3, [r3, #0]
}
 8101ab8:	4618      	mov	r0, r3
 8101aba:	3714      	adds	r7, #20
 8101abc:	46bd      	mov	sp, r7
 8101abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ac2:	4770      	bx	lr

08101ac4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8101ac4:	b480      	push	{r7}
 8101ac6:	b085      	sub	sp, #20
 8101ac8:	af00      	add	r7, sp, #0
 8101aca:	60f8      	str	r0, [r7, #12]
 8101acc:	60b9      	str	r1, [r7, #8]
 8101ace:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8101ad0:	68fb      	ldr	r3, [r7, #12]
 8101ad2:	3b04      	subs	r3, #4
 8101ad4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8101ad6:	68fb      	ldr	r3, [r7, #12]
 8101ad8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8101adc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8101ade:	68fb      	ldr	r3, [r7, #12]
 8101ae0:	3b04      	subs	r3, #4
 8101ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8101ae4:	68bb      	ldr	r3, [r7, #8]
 8101ae6:	f023 0201 	bic.w	r2, r3, #1
 8101aea:	68fb      	ldr	r3, [r7, #12]
 8101aec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8101aee:	68fb      	ldr	r3, [r7, #12]
 8101af0:	3b04      	subs	r3, #4
 8101af2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8101af4:	4a0c      	ldr	r2, [pc, #48]	; (8101b28 <pxPortInitialiseStack+0x64>)
 8101af6:	68fb      	ldr	r3, [r7, #12]
 8101af8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8101afa:	68fb      	ldr	r3, [r7, #12]
 8101afc:	3b14      	subs	r3, #20
 8101afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8101b00:	687a      	ldr	r2, [r7, #4]
 8101b02:	68fb      	ldr	r3, [r7, #12]
 8101b04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8101b06:	68fb      	ldr	r3, [r7, #12]
 8101b08:	3b04      	subs	r3, #4
 8101b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8101b0c:	68fb      	ldr	r3, [r7, #12]
 8101b0e:	f06f 0202 	mvn.w	r2, #2
 8101b12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8101b14:	68fb      	ldr	r3, [r7, #12]
 8101b16:	3b20      	subs	r3, #32
 8101b18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8101b1a:	68fb      	ldr	r3, [r7, #12]
}
 8101b1c:	4618      	mov	r0, r3
 8101b1e:	3714      	adds	r7, #20
 8101b20:	46bd      	mov	sp, r7
 8101b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b26:	4770      	bx	lr
 8101b28:	08101b2d 	.word	0x08101b2d

08101b2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8101b2c:	b480      	push	{r7}
 8101b2e:	b085      	sub	sp, #20
 8101b30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8101b32:	2300      	movs	r3, #0
 8101b34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8101b36:	4b12      	ldr	r3, [pc, #72]	; (8101b80 <prvTaskExitError+0x54>)
 8101b38:	681b      	ldr	r3, [r3, #0]
 8101b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101b3e:	d00a      	beq.n	8101b56 <prvTaskExitError+0x2a>
	__asm volatile
 8101b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101b44:	f383 8811 	msr	BASEPRI, r3
 8101b48:	f3bf 8f6f 	isb	sy
 8101b4c:	f3bf 8f4f 	dsb	sy
 8101b50:	60fb      	str	r3, [r7, #12]
}
 8101b52:	bf00      	nop
 8101b54:	e7fe      	b.n	8101b54 <prvTaskExitError+0x28>
	__asm volatile
 8101b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101b5a:	f383 8811 	msr	BASEPRI, r3
 8101b5e:	f3bf 8f6f 	isb	sy
 8101b62:	f3bf 8f4f 	dsb	sy
 8101b66:	60bb      	str	r3, [r7, #8]
}
 8101b68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8101b6a:	bf00      	nop
 8101b6c:	687b      	ldr	r3, [r7, #4]
 8101b6e:	2b00      	cmp	r3, #0
 8101b70:	d0fc      	beq.n	8101b6c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8101b72:	bf00      	nop
 8101b74:	bf00      	nop
 8101b76:	3714      	adds	r7, #20
 8101b78:	46bd      	mov	sp, r7
 8101b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b7e:	4770      	bx	lr
 8101b80:	10000010 	.word	0x10000010
	...

08101b90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8101b90:	4b07      	ldr	r3, [pc, #28]	; (8101bb0 <pxCurrentTCBConst2>)
 8101b92:	6819      	ldr	r1, [r3, #0]
 8101b94:	6808      	ldr	r0, [r1, #0]
 8101b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8101b9a:	f380 8809 	msr	PSP, r0
 8101b9e:	f3bf 8f6f 	isb	sy
 8101ba2:	f04f 0000 	mov.w	r0, #0
 8101ba6:	f380 8811 	msr	BASEPRI, r0
 8101baa:	4770      	bx	lr
 8101bac:	f3af 8000 	nop.w

08101bb0 <pxCurrentTCBConst2>:
 8101bb0:	1000443c 	.word	0x1000443c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8101bb4:	bf00      	nop
 8101bb6:	bf00      	nop

08101bb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8101bb8:	4808      	ldr	r0, [pc, #32]	; (8101bdc <prvPortStartFirstTask+0x24>)
 8101bba:	6800      	ldr	r0, [r0, #0]
 8101bbc:	6800      	ldr	r0, [r0, #0]
 8101bbe:	f380 8808 	msr	MSP, r0
 8101bc2:	f04f 0000 	mov.w	r0, #0
 8101bc6:	f380 8814 	msr	CONTROL, r0
 8101bca:	b662      	cpsie	i
 8101bcc:	b661      	cpsie	f
 8101bce:	f3bf 8f4f 	dsb	sy
 8101bd2:	f3bf 8f6f 	isb	sy
 8101bd6:	df00      	svc	0
 8101bd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8101bda:	bf00      	nop
 8101bdc:	e000ed08 	.word	0xe000ed08

08101be0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8101be0:	b580      	push	{r7, lr}
 8101be2:	b086      	sub	sp, #24
 8101be4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8101be6:	4b46      	ldr	r3, [pc, #280]	; (8101d00 <xPortStartScheduler+0x120>)
 8101be8:	681b      	ldr	r3, [r3, #0]
 8101bea:	4a46      	ldr	r2, [pc, #280]	; (8101d04 <xPortStartScheduler+0x124>)
 8101bec:	4293      	cmp	r3, r2
 8101bee:	d10a      	bne.n	8101c06 <xPortStartScheduler+0x26>
	__asm volatile
 8101bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101bf4:	f383 8811 	msr	BASEPRI, r3
 8101bf8:	f3bf 8f6f 	isb	sy
 8101bfc:	f3bf 8f4f 	dsb	sy
 8101c00:	613b      	str	r3, [r7, #16]
}
 8101c02:	bf00      	nop
 8101c04:	e7fe      	b.n	8101c04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8101c06:	4b3e      	ldr	r3, [pc, #248]	; (8101d00 <xPortStartScheduler+0x120>)
 8101c08:	681b      	ldr	r3, [r3, #0]
 8101c0a:	4a3f      	ldr	r2, [pc, #252]	; (8101d08 <xPortStartScheduler+0x128>)
 8101c0c:	4293      	cmp	r3, r2
 8101c0e:	d10a      	bne.n	8101c26 <xPortStartScheduler+0x46>
	__asm volatile
 8101c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101c14:	f383 8811 	msr	BASEPRI, r3
 8101c18:	f3bf 8f6f 	isb	sy
 8101c1c:	f3bf 8f4f 	dsb	sy
 8101c20:	60fb      	str	r3, [r7, #12]
}
 8101c22:	bf00      	nop
 8101c24:	e7fe      	b.n	8101c24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8101c26:	4b39      	ldr	r3, [pc, #228]	; (8101d0c <xPortStartScheduler+0x12c>)
 8101c28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8101c2a:	697b      	ldr	r3, [r7, #20]
 8101c2c:	781b      	ldrb	r3, [r3, #0]
 8101c2e:	b2db      	uxtb	r3, r3
 8101c30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8101c32:	697b      	ldr	r3, [r7, #20]
 8101c34:	22ff      	movs	r2, #255	; 0xff
 8101c36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8101c38:	697b      	ldr	r3, [r7, #20]
 8101c3a:	781b      	ldrb	r3, [r3, #0]
 8101c3c:	b2db      	uxtb	r3, r3
 8101c3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8101c40:	78fb      	ldrb	r3, [r7, #3]
 8101c42:	b2db      	uxtb	r3, r3
 8101c44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8101c48:	b2da      	uxtb	r2, r3
 8101c4a:	4b31      	ldr	r3, [pc, #196]	; (8101d10 <xPortStartScheduler+0x130>)
 8101c4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8101c4e:	4b31      	ldr	r3, [pc, #196]	; (8101d14 <xPortStartScheduler+0x134>)
 8101c50:	2207      	movs	r2, #7
 8101c52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8101c54:	e009      	b.n	8101c6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8101c56:	4b2f      	ldr	r3, [pc, #188]	; (8101d14 <xPortStartScheduler+0x134>)
 8101c58:	681b      	ldr	r3, [r3, #0]
 8101c5a:	3b01      	subs	r3, #1
 8101c5c:	4a2d      	ldr	r2, [pc, #180]	; (8101d14 <xPortStartScheduler+0x134>)
 8101c5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8101c60:	78fb      	ldrb	r3, [r7, #3]
 8101c62:	b2db      	uxtb	r3, r3
 8101c64:	005b      	lsls	r3, r3, #1
 8101c66:	b2db      	uxtb	r3, r3
 8101c68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8101c6a:	78fb      	ldrb	r3, [r7, #3]
 8101c6c:	b2db      	uxtb	r3, r3
 8101c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101c72:	2b80      	cmp	r3, #128	; 0x80
 8101c74:	d0ef      	beq.n	8101c56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8101c76:	4b27      	ldr	r3, [pc, #156]	; (8101d14 <xPortStartScheduler+0x134>)
 8101c78:	681b      	ldr	r3, [r3, #0]
 8101c7a:	f1c3 0307 	rsb	r3, r3, #7
 8101c7e:	2b04      	cmp	r3, #4
 8101c80:	d00a      	beq.n	8101c98 <xPortStartScheduler+0xb8>
	__asm volatile
 8101c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101c86:	f383 8811 	msr	BASEPRI, r3
 8101c8a:	f3bf 8f6f 	isb	sy
 8101c8e:	f3bf 8f4f 	dsb	sy
 8101c92:	60bb      	str	r3, [r7, #8]
}
 8101c94:	bf00      	nop
 8101c96:	e7fe      	b.n	8101c96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8101c98:	4b1e      	ldr	r3, [pc, #120]	; (8101d14 <xPortStartScheduler+0x134>)
 8101c9a:	681b      	ldr	r3, [r3, #0]
 8101c9c:	021b      	lsls	r3, r3, #8
 8101c9e:	4a1d      	ldr	r2, [pc, #116]	; (8101d14 <xPortStartScheduler+0x134>)
 8101ca0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8101ca2:	4b1c      	ldr	r3, [pc, #112]	; (8101d14 <xPortStartScheduler+0x134>)
 8101ca4:	681b      	ldr	r3, [r3, #0]
 8101ca6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8101caa:	4a1a      	ldr	r2, [pc, #104]	; (8101d14 <xPortStartScheduler+0x134>)
 8101cac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8101cae:	687b      	ldr	r3, [r7, #4]
 8101cb0:	b2da      	uxtb	r2, r3
 8101cb2:	697b      	ldr	r3, [r7, #20]
 8101cb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8101cb6:	4b18      	ldr	r3, [pc, #96]	; (8101d18 <xPortStartScheduler+0x138>)
 8101cb8:	681b      	ldr	r3, [r3, #0]
 8101cba:	4a17      	ldr	r2, [pc, #92]	; (8101d18 <xPortStartScheduler+0x138>)
 8101cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101cc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8101cc2:	4b15      	ldr	r3, [pc, #84]	; (8101d18 <xPortStartScheduler+0x138>)
 8101cc4:	681b      	ldr	r3, [r3, #0]
 8101cc6:	4a14      	ldr	r2, [pc, #80]	; (8101d18 <xPortStartScheduler+0x138>)
 8101cc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8101ccc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8101cce:	f000 f8dd 	bl	8101e8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8101cd2:	4b12      	ldr	r3, [pc, #72]	; (8101d1c <xPortStartScheduler+0x13c>)
 8101cd4:	2200      	movs	r2, #0
 8101cd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8101cd8:	f000 f8fc 	bl	8101ed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8101cdc:	4b10      	ldr	r3, [pc, #64]	; (8101d20 <xPortStartScheduler+0x140>)
 8101cde:	681b      	ldr	r3, [r3, #0]
 8101ce0:	4a0f      	ldr	r2, [pc, #60]	; (8101d20 <xPortStartScheduler+0x140>)
 8101ce2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8101ce6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8101ce8:	f7ff ff66 	bl	8101bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8101cec:	f001 f9fa 	bl	81030e4 <vTaskSwitchContext>
	prvTaskExitError();
 8101cf0:	f7ff ff1c 	bl	8101b2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8101cf4:	2300      	movs	r3, #0
}
 8101cf6:	4618      	mov	r0, r3
 8101cf8:	3718      	adds	r7, #24
 8101cfa:	46bd      	mov	sp, r7
 8101cfc:	bd80      	pop	{r7, pc}
 8101cfe:	bf00      	nop
 8101d00:	e000ed00 	.word	0xe000ed00
 8101d04:	410fc271 	.word	0x410fc271
 8101d08:	410fc270 	.word	0x410fc270
 8101d0c:	e000e400 	.word	0xe000e400
 8101d10:	10004434 	.word	0x10004434
 8101d14:	10004438 	.word	0x10004438
 8101d18:	e000ed20 	.word	0xe000ed20
 8101d1c:	10000010 	.word	0x10000010
 8101d20:	e000ef34 	.word	0xe000ef34

08101d24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8101d24:	b480      	push	{r7}
 8101d26:	b083      	sub	sp, #12
 8101d28:	af00      	add	r7, sp, #0
	__asm volatile
 8101d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101d2e:	f383 8811 	msr	BASEPRI, r3
 8101d32:	f3bf 8f6f 	isb	sy
 8101d36:	f3bf 8f4f 	dsb	sy
 8101d3a:	607b      	str	r3, [r7, #4]
}
 8101d3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8101d3e:	4b0f      	ldr	r3, [pc, #60]	; (8101d7c <vPortEnterCritical+0x58>)
 8101d40:	681b      	ldr	r3, [r3, #0]
 8101d42:	3301      	adds	r3, #1
 8101d44:	4a0d      	ldr	r2, [pc, #52]	; (8101d7c <vPortEnterCritical+0x58>)
 8101d46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8101d48:	4b0c      	ldr	r3, [pc, #48]	; (8101d7c <vPortEnterCritical+0x58>)
 8101d4a:	681b      	ldr	r3, [r3, #0]
 8101d4c:	2b01      	cmp	r3, #1
 8101d4e:	d10f      	bne.n	8101d70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8101d50:	4b0b      	ldr	r3, [pc, #44]	; (8101d80 <vPortEnterCritical+0x5c>)
 8101d52:	681b      	ldr	r3, [r3, #0]
 8101d54:	b2db      	uxtb	r3, r3
 8101d56:	2b00      	cmp	r3, #0
 8101d58:	d00a      	beq.n	8101d70 <vPortEnterCritical+0x4c>
	__asm volatile
 8101d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101d5e:	f383 8811 	msr	BASEPRI, r3
 8101d62:	f3bf 8f6f 	isb	sy
 8101d66:	f3bf 8f4f 	dsb	sy
 8101d6a:	603b      	str	r3, [r7, #0]
}
 8101d6c:	bf00      	nop
 8101d6e:	e7fe      	b.n	8101d6e <vPortEnterCritical+0x4a>
	}
}
 8101d70:	bf00      	nop
 8101d72:	370c      	adds	r7, #12
 8101d74:	46bd      	mov	sp, r7
 8101d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d7a:	4770      	bx	lr
 8101d7c:	10000010 	.word	0x10000010
 8101d80:	e000ed04 	.word	0xe000ed04

08101d84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8101d84:	b480      	push	{r7}
 8101d86:	b083      	sub	sp, #12
 8101d88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8101d8a:	4b12      	ldr	r3, [pc, #72]	; (8101dd4 <vPortExitCritical+0x50>)
 8101d8c:	681b      	ldr	r3, [r3, #0]
 8101d8e:	2b00      	cmp	r3, #0
 8101d90:	d10a      	bne.n	8101da8 <vPortExitCritical+0x24>
	__asm volatile
 8101d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101d96:	f383 8811 	msr	BASEPRI, r3
 8101d9a:	f3bf 8f6f 	isb	sy
 8101d9e:	f3bf 8f4f 	dsb	sy
 8101da2:	607b      	str	r3, [r7, #4]
}
 8101da4:	bf00      	nop
 8101da6:	e7fe      	b.n	8101da6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8101da8:	4b0a      	ldr	r3, [pc, #40]	; (8101dd4 <vPortExitCritical+0x50>)
 8101daa:	681b      	ldr	r3, [r3, #0]
 8101dac:	3b01      	subs	r3, #1
 8101dae:	4a09      	ldr	r2, [pc, #36]	; (8101dd4 <vPortExitCritical+0x50>)
 8101db0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8101db2:	4b08      	ldr	r3, [pc, #32]	; (8101dd4 <vPortExitCritical+0x50>)
 8101db4:	681b      	ldr	r3, [r3, #0]
 8101db6:	2b00      	cmp	r3, #0
 8101db8:	d105      	bne.n	8101dc6 <vPortExitCritical+0x42>
 8101dba:	2300      	movs	r3, #0
 8101dbc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8101dbe:	683b      	ldr	r3, [r7, #0]
 8101dc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8101dc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8101dc6:	bf00      	nop
 8101dc8:	370c      	adds	r7, #12
 8101dca:	46bd      	mov	sp, r7
 8101dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dd0:	4770      	bx	lr
 8101dd2:	bf00      	nop
 8101dd4:	10000010 	.word	0x10000010
	...

08101de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8101de0:	f3ef 8009 	mrs	r0, PSP
 8101de4:	f3bf 8f6f 	isb	sy
 8101de8:	4b15      	ldr	r3, [pc, #84]	; (8101e40 <pxCurrentTCBConst>)
 8101dea:	681a      	ldr	r2, [r3, #0]
 8101dec:	f01e 0f10 	tst.w	lr, #16
 8101df0:	bf08      	it	eq
 8101df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8101df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8101dfa:	6010      	str	r0, [r2, #0]
 8101dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8101e00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8101e04:	f380 8811 	msr	BASEPRI, r0
 8101e08:	f3bf 8f4f 	dsb	sy
 8101e0c:	f3bf 8f6f 	isb	sy
 8101e10:	f001 f968 	bl	81030e4 <vTaskSwitchContext>
 8101e14:	f04f 0000 	mov.w	r0, #0
 8101e18:	f380 8811 	msr	BASEPRI, r0
 8101e1c:	bc09      	pop	{r0, r3}
 8101e1e:	6819      	ldr	r1, [r3, #0]
 8101e20:	6808      	ldr	r0, [r1, #0]
 8101e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8101e26:	f01e 0f10 	tst.w	lr, #16
 8101e2a:	bf08      	it	eq
 8101e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8101e30:	f380 8809 	msr	PSP, r0
 8101e34:	f3bf 8f6f 	isb	sy
 8101e38:	4770      	bx	lr
 8101e3a:	bf00      	nop
 8101e3c:	f3af 8000 	nop.w

08101e40 <pxCurrentTCBConst>:
 8101e40:	1000443c 	.word	0x1000443c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8101e44:	bf00      	nop
 8101e46:	bf00      	nop

08101e48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8101e48:	b580      	push	{r7, lr}
 8101e4a:	b082      	sub	sp, #8
 8101e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8101e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101e52:	f383 8811 	msr	BASEPRI, r3
 8101e56:	f3bf 8f6f 	isb	sy
 8101e5a:	f3bf 8f4f 	dsb	sy
 8101e5e:	607b      	str	r3, [r7, #4]
}
 8101e60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8101e62:	f001 f885 	bl	8102f70 <xTaskIncrementTick>
 8101e66:	4603      	mov	r3, r0
 8101e68:	2b00      	cmp	r3, #0
 8101e6a:	d003      	beq.n	8101e74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8101e6c:	4b06      	ldr	r3, [pc, #24]	; (8101e88 <xPortSysTickHandler+0x40>)
 8101e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8101e72:	601a      	str	r2, [r3, #0]
 8101e74:	2300      	movs	r3, #0
 8101e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8101e78:	683b      	ldr	r3, [r7, #0]
 8101e7a:	f383 8811 	msr	BASEPRI, r3
}
 8101e7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8101e80:	bf00      	nop
 8101e82:	3708      	adds	r7, #8
 8101e84:	46bd      	mov	sp, r7
 8101e86:	bd80      	pop	{r7, pc}
 8101e88:	e000ed04 	.word	0xe000ed04

08101e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8101e8c:	b480      	push	{r7}
 8101e8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8101e90:	4b0b      	ldr	r3, [pc, #44]	; (8101ec0 <vPortSetupTimerInterrupt+0x34>)
 8101e92:	2200      	movs	r2, #0
 8101e94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8101e96:	4b0b      	ldr	r3, [pc, #44]	; (8101ec4 <vPortSetupTimerInterrupt+0x38>)
 8101e98:	2200      	movs	r2, #0
 8101e9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8101e9c:	4b0a      	ldr	r3, [pc, #40]	; (8101ec8 <vPortSetupTimerInterrupt+0x3c>)
 8101e9e:	681b      	ldr	r3, [r3, #0]
 8101ea0:	4a0a      	ldr	r2, [pc, #40]	; (8101ecc <vPortSetupTimerInterrupt+0x40>)
 8101ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8101ea6:	099b      	lsrs	r3, r3, #6
 8101ea8:	4a09      	ldr	r2, [pc, #36]	; (8101ed0 <vPortSetupTimerInterrupt+0x44>)
 8101eaa:	3b01      	subs	r3, #1
 8101eac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8101eae:	4b04      	ldr	r3, [pc, #16]	; (8101ec0 <vPortSetupTimerInterrupt+0x34>)
 8101eb0:	2207      	movs	r2, #7
 8101eb2:	601a      	str	r2, [r3, #0]
}
 8101eb4:	bf00      	nop
 8101eb6:	46bd      	mov	sp, r7
 8101eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ebc:	4770      	bx	lr
 8101ebe:	bf00      	nop
 8101ec0:	e000e010 	.word	0xe000e010
 8101ec4:	e000e018 	.word	0xe000e018
 8101ec8:	10000004 	.word	0x10000004
 8101ecc:	10624dd3 	.word	0x10624dd3
 8101ed0:	e000e014 	.word	0xe000e014

08101ed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8101ed4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8101ee4 <vPortEnableVFP+0x10>
 8101ed8:	6801      	ldr	r1, [r0, #0]
 8101eda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8101ede:	6001      	str	r1, [r0, #0]
 8101ee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8101ee2:	bf00      	nop
 8101ee4:	e000ed88 	.word	0xe000ed88

08101ee8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8101ee8:	b480      	push	{r7}
 8101eea:	b085      	sub	sp, #20
 8101eec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8101eee:	f3ef 8305 	mrs	r3, IPSR
 8101ef2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8101ef4:	68fb      	ldr	r3, [r7, #12]
 8101ef6:	2b0f      	cmp	r3, #15
 8101ef8:	d914      	bls.n	8101f24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8101efa:	4a17      	ldr	r2, [pc, #92]	; (8101f58 <vPortValidateInterruptPriority+0x70>)
 8101efc:	68fb      	ldr	r3, [r7, #12]
 8101efe:	4413      	add	r3, r2
 8101f00:	781b      	ldrb	r3, [r3, #0]
 8101f02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8101f04:	4b15      	ldr	r3, [pc, #84]	; (8101f5c <vPortValidateInterruptPriority+0x74>)
 8101f06:	781b      	ldrb	r3, [r3, #0]
 8101f08:	7afa      	ldrb	r2, [r7, #11]
 8101f0a:	429a      	cmp	r2, r3
 8101f0c:	d20a      	bcs.n	8101f24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8101f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101f12:	f383 8811 	msr	BASEPRI, r3
 8101f16:	f3bf 8f6f 	isb	sy
 8101f1a:	f3bf 8f4f 	dsb	sy
 8101f1e:	607b      	str	r3, [r7, #4]
}
 8101f20:	bf00      	nop
 8101f22:	e7fe      	b.n	8101f22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8101f24:	4b0e      	ldr	r3, [pc, #56]	; (8101f60 <vPortValidateInterruptPriority+0x78>)
 8101f26:	681b      	ldr	r3, [r3, #0]
 8101f28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8101f2c:	4b0d      	ldr	r3, [pc, #52]	; (8101f64 <vPortValidateInterruptPriority+0x7c>)
 8101f2e:	681b      	ldr	r3, [r3, #0]
 8101f30:	429a      	cmp	r2, r3
 8101f32:	d90a      	bls.n	8101f4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8101f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101f38:	f383 8811 	msr	BASEPRI, r3
 8101f3c:	f3bf 8f6f 	isb	sy
 8101f40:	f3bf 8f4f 	dsb	sy
 8101f44:	603b      	str	r3, [r7, #0]
}
 8101f46:	bf00      	nop
 8101f48:	e7fe      	b.n	8101f48 <vPortValidateInterruptPriority+0x60>
	}
 8101f4a:	bf00      	nop
 8101f4c:	3714      	adds	r7, #20
 8101f4e:	46bd      	mov	sp, r7
 8101f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f54:	4770      	bx	lr
 8101f56:	bf00      	nop
 8101f58:	e000e3f0 	.word	0xe000e3f0
 8101f5c:	10004434 	.word	0x10004434
 8101f60:	e000ed0c 	.word	0xe000ed0c
 8101f64:	10004438 	.word	0x10004438

08101f68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8101f68:	b580      	push	{r7, lr}
 8101f6a:	b084      	sub	sp, #16
 8101f6c:	af00      	add	r7, sp, #0
 8101f6e:	6078      	str	r0, [r7, #4]
 8101f70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8101f72:	687b      	ldr	r3, [r7, #4]
 8101f74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8101f76:	68fb      	ldr	r3, [r7, #12]
 8101f78:	2b00      	cmp	r3, #0
 8101f7a:	d10a      	bne.n	8101f92 <xQueueGenericReset+0x2a>
	__asm volatile
 8101f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101f80:	f383 8811 	msr	BASEPRI, r3
 8101f84:	f3bf 8f6f 	isb	sy
 8101f88:	f3bf 8f4f 	dsb	sy
 8101f8c:	60bb      	str	r3, [r7, #8]
}
 8101f8e:	bf00      	nop
 8101f90:	e7fe      	b.n	8101f90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8101f92:	f7ff fec7 	bl	8101d24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8101f96:	68fb      	ldr	r3, [r7, #12]
 8101f98:	681a      	ldr	r2, [r3, #0]
 8101f9a:	68fb      	ldr	r3, [r7, #12]
 8101f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8101f9e:	68f9      	ldr	r1, [r7, #12]
 8101fa0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8101fa2:	fb01 f303 	mul.w	r3, r1, r3
 8101fa6:	441a      	add	r2, r3
 8101fa8:	68fb      	ldr	r3, [r7, #12]
 8101faa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8101fac:	68fb      	ldr	r3, [r7, #12]
 8101fae:	2200      	movs	r2, #0
 8101fb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8101fb2:	68fb      	ldr	r3, [r7, #12]
 8101fb4:	681a      	ldr	r2, [r3, #0]
 8101fb6:	68fb      	ldr	r3, [r7, #12]
 8101fb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8101fba:	68fb      	ldr	r3, [r7, #12]
 8101fbc:	681a      	ldr	r2, [r3, #0]
 8101fbe:	68fb      	ldr	r3, [r7, #12]
 8101fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8101fc2:	3b01      	subs	r3, #1
 8101fc4:	68f9      	ldr	r1, [r7, #12]
 8101fc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8101fc8:	fb01 f303 	mul.w	r3, r1, r3
 8101fcc:	441a      	add	r2, r3
 8101fce:	68fb      	ldr	r3, [r7, #12]
 8101fd0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8101fd2:	68fb      	ldr	r3, [r7, #12]
 8101fd4:	22ff      	movs	r2, #255	; 0xff
 8101fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8101fda:	68fb      	ldr	r3, [r7, #12]
 8101fdc:	22ff      	movs	r2, #255	; 0xff
 8101fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8101fe2:	683b      	ldr	r3, [r7, #0]
 8101fe4:	2b00      	cmp	r3, #0
 8101fe6:	d114      	bne.n	8102012 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8101fe8:	68fb      	ldr	r3, [r7, #12]
 8101fea:	691b      	ldr	r3, [r3, #16]
 8101fec:	2b00      	cmp	r3, #0
 8101fee:	d01a      	beq.n	8102026 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8101ff0:	68fb      	ldr	r3, [r7, #12]
 8101ff2:	3310      	adds	r3, #16
 8101ff4:	4618      	mov	r0, r3
 8101ff6:	f001 f929 	bl	810324c <xTaskRemoveFromEventList>
 8101ffa:	4603      	mov	r3, r0
 8101ffc:	2b00      	cmp	r3, #0
 8101ffe:	d012      	beq.n	8102026 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8102000:	4b0c      	ldr	r3, [pc, #48]	; (8102034 <xQueueGenericReset+0xcc>)
 8102002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102006:	601a      	str	r2, [r3, #0]
 8102008:	f3bf 8f4f 	dsb	sy
 810200c:	f3bf 8f6f 	isb	sy
 8102010:	e009      	b.n	8102026 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8102012:	68fb      	ldr	r3, [r7, #12]
 8102014:	3310      	adds	r3, #16
 8102016:	4618      	mov	r0, r3
 8102018:	f7ff fca0 	bl	810195c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 810201c:	68fb      	ldr	r3, [r7, #12]
 810201e:	3324      	adds	r3, #36	; 0x24
 8102020:	4618      	mov	r0, r3
 8102022:	f7ff fc9b 	bl	810195c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8102026:	f7ff fead 	bl	8101d84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 810202a:	2301      	movs	r3, #1
}
 810202c:	4618      	mov	r0, r3
 810202e:	3710      	adds	r7, #16
 8102030:	46bd      	mov	sp, r7
 8102032:	bd80      	pop	{r7, pc}
 8102034:	e000ed04 	.word	0xe000ed04

08102038 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8102038:	b580      	push	{r7, lr}
 810203a:	b08e      	sub	sp, #56	; 0x38
 810203c:	af02      	add	r7, sp, #8
 810203e:	60f8      	str	r0, [r7, #12]
 8102040:	60b9      	str	r1, [r7, #8]
 8102042:	607a      	str	r2, [r7, #4]
 8102044:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8102046:	68fb      	ldr	r3, [r7, #12]
 8102048:	2b00      	cmp	r3, #0
 810204a:	d10a      	bne.n	8102062 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 810204c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102050:	f383 8811 	msr	BASEPRI, r3
 8102054:	f3bf 8f6f 	isb	sy
 8102058:	f3bf 8f4f 	dsb	sy
 810205c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 810205e:	bf00      	nop
 8102060:	e7fe      	b.n	8102060 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8102062:	683b      	ldr	r3, [r7, #0]
 8102064:	2b00      	cmp	r3, #0
 8102066:	d10a      	bne.n	810207e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8102068:	f04f 0350 	mov.w	r3, #80	; 0x50
 810206c:	f383 8811 	msr	BASEPRI, r3
 8102070:	f3bf 8f6f 	isb	sy
 8102074:	f3bf 8f4f 	dsb	sy
 8102078:	627b      	str	r3, [r7, #36]	; 0x24
}
 810207a:	bf00      	nop
 810207c:	e7fe      	b.n	810207c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810207e:	687b      	ldr	r3, [r7, #4]
 8102080:	2b00      	cmp	r3, #0
 8102082:	d002      	beq.n	810208a <xQueueGenericCreateStatic+0x52>
 8102084:	68bb      	ldr	r3, [r7, #8]
 8102086:	2b00      	cmp	r3, #0
 8102088:	d001      	beq.n	810208e <xQueueGenericCreateStatic+0x56>
 810208a:	2301      	movs	r3, #1
 810208c:	e000      	b.n	8102090 <xQueueGenericCreateStatic+0x58>
 810208e:	2300      	movs	r3, #0
 8102090:	2b00      	cmp	r3, #0
 8102092:	d10a      	bne.n	81020aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8102094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102098:	f383 8811 	msr	BASEPRI, r3
 810209c:	f3bf 8f6f 	isb	sy
 81020a0:	f3bf 8f4f 	dsb	sy
 81020a4:	623b      	str	r3, [r7, #32]
}
 81020a6:	bf00      	nop
 81020a8:	e7fe      	b.n	81020a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 81020aa:	687b      	ldr	r3, [r7, #4]
 81020ac:	2b00      	cmp	r3, #0
 81020ae:	d102      	bne.n	81020b6 <xQueueGenericCreateStatic+0x7e>
 81020b0:	68bb      	ldr	r3, [r7, #8]
 81020b2:	2b00      	cmp	r3, #0
 81020b4:	d101      	bne.n	81020ba <xQueueGenericCreateStatic+0x82>
 81020b6:	2301      	movs	r3, #1
 81020b8:	e000      	b.n	81020bc <xQueueGenericCreateStatic+0x84>
 81020ba:	2300      	movs	r3, #0
 81020bc:	2b00      	cmp	r3, #0
 81020be:	d10a      	bne.n	81020d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 81020c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81020c4:	f383 8811 	msr	BASEPRI, r3
 81020c8:	f3bf 8f6f 	isb	sy
 81020cc:	f3bf 8f4f 	dsb	sy
 81020d0:	61fb      	str	r3, [r7, #28]
}
 81020d2:	bf00      	nop
 81020d4:	e7fe      	b.n	81020d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 81020d6:	2350      	movs	r3, #80	; 0x50
 81020d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 81020da:	697b      	ldr	r3, [r7, #20]
 81020dc:	2b50      	cmp	r3, #80	; 0x50
 81020de:	d00a      	beq.n	81020f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 81020e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81020e4:	f383 8811 	msr	BASEPRI, r3
 81020e8:	f3bf 8f6f 	isb	sy
 81020ec:	f3bf 8f4f 	dsb	sy
 81020f0:	61bb      	str	r3, [r7, #24]
}
 81020f2:	bf00      	nop
 81020f4:	e7fe      	b.n	81020f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 81020f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81020f8:	683b      	ldr	r3, [r7, #0]
 81020fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 81020fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81020fe:	2b00      	cmp	r3, #0
 8102100:	d00d      	beq.n	810211e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8102102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102104:	2201      	movs	r2, #1
 8102106:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810210a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 810210e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102110:	9300      	str	r3, [sp, #0]
 8102112:	4613      	mov	r3, r2
 8102114:	687a      	ldr	r2, [r7, #4]
 8102116:	68b9      	ldr	r1, [r7, #8]
 8102118:	68f8      	ldr	r0, [r7, #12]
 810211a:	f000 f805 	bl	8102128 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810211e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8102120:	4618      	mov	r0, r3
 8102122:	3730      	adds	r7, #48	; 0x30
 8102124:	46bd      	mov	sp, r7
 8102126:	bd80      	pop	{r7, pc}

08102128 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8102128:	b580      	push	{r7, lr}
 810212a:	b084      	sub	sp, #16
 810212c:	af00      	add	r7, sp, #0
 810212e:	60f8      	str	r0, [r7, #12]
 8102130:	60b9      	str	r1, [r7, #8]
 8102132:	607a      	str	r2, [r7, #4]
 8102134:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8102136:	68bb      	ldr	r3, [r7, #8]
 8102138:	2b00      	cmp	r3, #0
 810213a:	d103      	bne.n	8102144 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 810213c:	69bb      	ldr	r3, [r7, #24]
 810213e:	69ba      	ldr	r2, [r7, #24]
 8102140:	601a      	str	r2, [r3, #0]
 8102142:	e002      	b.n	810214a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8102144:	69bb      	ldr	r3, [r7, #24]
 8102146:	687a      	ldr	r2, [r7, #4]
 8102148:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 810214a:	69bb      	ldr	r3, [r7, #24]
 810214c:	68fa      	ldr	r2, [r7, #12]
 810214e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8102150:	69bb      	ldr	r3, [r7, #24]
 8102152:	68ba      	ldr	r2, [r7, #8]
 8102154:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8102156:	2101      	movs	r1, #1
 8102158:	69b8      	ldr	r0, [r7, #24]
 810215a:	f7ff ff05 	bl	8101f68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 810215e:	69bb      	ldr	r3, [r7, #24]
 8102160:	78fa      	ldrb	r2, [r7, #3]
 8102162:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8102166:	bf00      	nop
 8102168:	3710      	adds	r7, #16
 810216a:	46bd      	mov	sp, r7
 810216c:	bd80      	pop	{r7, pc}
	...

08102170 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8102170:	b580      	push	{r7, lr}
 8102172:	b08e      	sub	sp, #56	; 0x38
 8102174:	af00      	add	r7, sp, #0
 8102176:	60f8      	str	r0, [r7, #12]
 8102178:	60b9      	str	r1, [r7, #8]
 810217a:	607a      	str	r2, [r7, #4]
 810217c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 810217e:	2300      	movs	r3, #0
 8102180:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8102182:	68fb      	ldr	r3, [r7, #12]
 8102184:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8102186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102188:	2b00      	cmp	r3, #0
 810218a:	d10a      	bne.n	81021a2 <xQueueGenericSend+0x32>
	__asm volatile
 810218c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102190:	f383 8811 	msr	BASEPRI, r3
 8102194:	f3bf 8f6f 	isb	sy
 8102198:	f3bf 8f4f 	dsb	sy
 810219c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 810219e:	bf00      	nop
 81021a0:	e7fe      	b.n	81021a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 81021a2:	68bb      	ldr	r3, [r7, #8]
 81021a4:	2b00      	cmp	r3, #0
 81021a6:	d103      	bne.n	81021b0 <xQueueGenericSend+0x40>
 81021a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81021ac:	2b00      	cmp	r3, #0
 81021ae:	d101      	bne.n	81021b4 <xQueueGenericSend+0x44>
 81021b0:	2301      	movs	r3, #1
 81021b2:	e000      	b.n	81021b6 <xQueueGenericSend+0x46>
 81021b4:	2300      	movs	r3, #0
 81021b6:	2b00      	cmp	r3, #0
 81021b8:	d10a      	bne.n	81021d0 <xQueueGenericSend+0x60>
	__asm volatile
 81021ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 81021be:	f383 8811 	msr	BASEPRI, r3
 81021c2:	f3bf 8f6f 	isb	sy
 81021c6:	f3bf 8f4f 	dsb	sy
 81021ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 81021cc:	bf00      	nop
 81021ce:	e7fe      	b.n	81021ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 81021d0:	683b      	ldr	r3, [r7, #0]
 81021d2:	2b02      	cmp	r3, #2
 81021d4:	d103      	bne.n	81021de <xQueueGenericSend+0x6e>
 81021d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81021d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81021da:	2b01      	cmp	r3, #1
 81021dc:	d101      	bne.n	81021e2 <xQueueGenericSend+0x72>
 81021de:	2301      	movs	r3, #1
 81021e0:	e000      	b.n	81021e4 <xQueueGenericSend+0x74>
 81021e2:	2300      	movs	r3, #0
 81021e4:	2b00      	cmp	r3, #0
 81021e6:	d10a      	bne.n	81021fe <xQueueGenericSend+0x8e>
	__asm volatile
 81021e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81021ec:	f383 8811 	msr	BASEPRI, r3
 81021f0:	f3bf 8f6f 	isb	sy
 81021f4:	f3bf 8f4f 	dsb	sy
 81021f8:	623b      	str	r3, [r7, #32]
}
 81021fa:	bf00      	nop
 81021fc:	e7fe      	b.n	81021fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81021fe:	f001 f9e7 	bl	81035d0 <xTaskGetSchedulerState>
 8102202:	4603      	mov	r3, r0
 8102204:	2b00      	cmp	r3, #0
 8102206:	d102      	bne.n	810220e <xQueueGenericSend+0x9e>
 8102208:	687b      	ldr	r3, [r7, #4]
 810220a:	2b00      	cmp	r3, #0
 810220c:	d101      	bne.n	8102212 <xQueueGenericSend+0xa2>
 810220e:	2301      	movs	r3, #1
 8102210:	e000      	b.n	8102214 <xQueueGenericSend+0xa4>
 8102212:	2300      	movs	r3, #0
 8102214:	2b00      	cmp	r3, #0
 8102216:	d10a      	bne.n	810222e <xQueueGenericSend+0xbe>
	__asm volatile
 8102218:	f04f 0350 	mov.w	r3, #80	; 0x50
 810221c:	f383 8811 	msr	BASEPRI, r3
 8102220:	f3bf 8f6f 	isb	sy
 8102224:	f3bf 8f4f 	dsb	sy
 8102228:	61fb      	str	r3, [r7, #28]
}
 810222a:	bf00      	nop
 810222c:	e7fe      	b.n	810222c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810222e:	f7ff fd79 	bl	8101d24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8102232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8102236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810223a:	429a      	cmp	r2, r3
 810223c:	d302      	bcc.n	8102244 <xQueueGenericSend+0xd4>
 810223e:	683b      	ldr	r3, [r7, #0]
 8102240:	2b02      	cmp	r3, #2
 8102242:	d129      	bne.n	8102298 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8102244:	683a      	ldr	r2, [r7, #0]
 8102246:	68b9      	ldr	r1, [r7, #8]
 8102248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810224a:	f000 fa0b 	bl	8102664 <prvCopyDataToQueue>
 810224e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8102250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102254:	2b00      	cmp	r3, #0
 8102256:	d010      	beq.n	810227a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8102258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810225a:	3324      	adds	r3, #36	; 0x24
 810225c:	4618      	mov	r0, r3
 810225e:	f000 fff5 	bl	810324c <xTaskRemoveFromEventList>
 8102262:	4603      	mov	r3, r0
 8102264:	2b00      	cmp	r3, #0
 8102266:	d013      	beq.n	8102290 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8102268:	4b3f      	ldr	r3, [pc, #252]	; (8102368 <xQueueGenericSend+0x1f8>)
 810226a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810226e:	601a      	str	r2, [r3, #0]
 8102270:	f3bf 8f4f 	dsb	sy
 8102274:	f3bf 8f6f 	isb	sy
 8102278:	e00a      	b.n	8102290 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 810227a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810227c:	2b00      	cmp	r3, #0
 810227e:	d007      	beq.n	8102290 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8102280:	4b39      	ldr	r3, [pc, #228]	; (8102368 <xQueueGenericSend+0x1f8>)
 8102282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102286:	601a      	str	r2, [r3, #0]
 8102288:	f3bf 8f4f 	dsb	sy
 810228c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8102290:	f7ff fd78 	bl	8101d84 <vPortExitCritical>
				return pdPASS;
 8102294:	2301      	movs	r3, #1
 8102296:	e063      	b.n	8102360 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8102298:	687b      	ldr	r3, [r7, #4]
 810229a:	2b00      	cmp	r3, #0
 810229c:	d103      	bne.n	81022a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810229e:	f7ff fd71 	bl	8101d84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 81022a2:	2300      	movs	r3, #0
 81022a4:	e05c      	b.n	8102360 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 81022a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81022a8:	2b00      	cmp	r3, #0
 81022aa:	d106      	bne.n	81022ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 81022ac:	f107 0314 	add.w	r3, r7, #20
 81022b0:	4618      	mov	r0, r3
 81022b2:	f001 f82f 	bl	8103314 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 81022b6:	2301      	movs	r3, #1
 81022b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 81022ba:	f7ff fd63 	bl	8101d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 81022be:	f000 fd9b 	bl	8102df8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 81022c2:	f7ff fd2f 	bl	8101d24 <vPortEnterCritical>
 81022c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81022c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81022cc:	b25b      	sxtb	r3, r3
 81022ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 81022d2:	d103      	bne.n	81022dc <xQueueGenericSend+0x16c>
 81022d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81022d6:	2200      	movs	r2, #0
 81022d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81022dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81022de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81022e2:	b25b      	sxtb	r3, r3
 81022e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81022e8:	d103      	bne.n	81022f2 <xQueueGenericSend+0x182>
 81022ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81022ec:	2200      	movs	r2, #0
 81022ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81022f2:	f7ff fd47 	bl	8101d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81022f6:	1d3a      	adds	r2, r7, #4
 81022f8:	f107 0314 	add.w	r3, r7, #20
 81022fc:	4611      	mov	r1, r2
 81022fe:	4618      	mov	r0, r3
 8102300:	f001 f81e 	bl	8103340 <xTaskCheckForTimeOut>
 8102304:	4603      	mov	r3, r0
 8102306:	2b00      	cmp	r3, #0
 8102308:	d124      	bne.n	8102354 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 810230a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810230c:	f000 faa2 	bl	8102854 <prvIsQueueFull>
 8102310:	4603      	mov	r3, r0
 8102312:	2b00      	cmp	r3, #0
 8102314:	d018      	beq.n	8102348 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8102316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102318:	3310      	adds	r3, #16
 810231a:	687a      	ldr	r2, [r7, #4]
 810231c:	4611      	mov	r1, r2
 810231e:	4618      	mov	r0, r3
 8102320:	f000 ff44 	bl	81031ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8102324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8102326:	f000 fa2d 	bl	8102784 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 810232a:	f000 fd73 	bl	8102e14 <xTaskResumeAll>
 810232e:	4603      	mov	r3, r0
 8102330:	2b00      	cmp	r3, #0
 8102332:	f47f af7c 	bne.w	810222e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8102336:	4b0c      	ldr	r3, [pc, #48]	; (8102368 <xQueueGenericSend+0x1f8>)
 8102338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810233c:	601a      	str	r2, [r3, #0]
 810233e:	f3bf 8f4f 	dsb	sy
 8102342:	f3bf 8f6f 	isb	sy
 8102346:	e772      	b.n	810222e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8102348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810234a:	f000 fa1b 	bl	8102784 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810234e:	f000 fd61 	bl	8102e14 <xTaskResumeAll>
 8102352:	e76c      	b.n	810222e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8102354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8102356:	f000 fa15 	bl	8102784 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810235a:	f000 fd5b 	bl	8102e14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 810235e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8102360:	4618      	mov	r0, r3
 8102362:	3738      	adds	r7, #56	; 0x38
 8102364:	46bd      	mov	sp, r7
 8102366:	bd80      	pop	{r7, pc}
 8102368:	e000ed04 	.word	0xe000ed04

0810236c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 810236c:	b580      	push	{r7, lr}
 810236e:	b090      	sub	sp, #64	; 0x40
 8102370:	af00      	add	r7, sp, #0
 8102372:	60f8      	str	r0, [r7, #12]
 8102374:	60b9      	str	r1, [r7, #8]
 8102376:	607a      	str	r2, [r7, #4]
 8102378:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810237a:	68fb      	ldr	r3, [r7, #12]
 810237c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 810237e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102380:	2b00      	cmp	r3, #0
 8102382:	d10a      	bne.n	810239a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8102384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102388:	f383 8811 	msr	BASEPRI, r3
 810238c:	f3bf 8f6f 	isb	sy
 8102390:	f3bf 8f4f 	dsb	sy
 8102394:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8102396:	bf00      	nop
 8102398:	e7fe      	b.n	8102398 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810239a:	68bb      	ldr	r3, [r7, #8]
 810239c:	2b00      	cmp	r3, #0
 810239e:	d103      	bne.n	81023a8 <xQueueGenericSendFromISR+0x3c>
 81023a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81023a4:	2b00      	cmp	r3, #0
 81023a6:	d101      	bne.n	81023ac <xQueueGenericSendFromISR+0x40>
 81023a8:	2301      	movs	r3, #1
 81023aa:	e000      	b.n	81023ae <xQueueGenericSendFromISR+0x42>
 81023ac:	2300      	movs	r3, #0
 81023ae:	2b00      	cmp	r3, #0
 81023b0:	d10a      	bne.n	81023c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 81023b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81023b6:	f383 8811 	msr	BASEPRI, r3
 81023ba:	f3bf 8f6f 	isb	sy
 81023be:	f3bf 8f4f 	dsb	sy
 81023c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 81023c4:	bf00      	nop
 81023c6:	e7fe      	b.n	81023c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 81023c8:	683b      	ldr	r3, [r7, #0]
 81023ca:	2b02      	cmp	r3, #2
 81023cc:	d103      	bne.n	81023d6 <xQueueGenericSendFromISR+0x6a>
 81023ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81023d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81023d2:	2b01      	cmp	r3, #1
 81023d4:	d101      	bne.n	81023da <xQueueGenericSendFromISR+0x6e>
 81023d6:	2301      	movs	r3, #1
 81023d8:	e000      	b.n	81023dc <xQueueGenericSendFromISR+0x70>
 81023da:	2300      	movs	r3, #0
 81023dc:	2b00      	cmp	r3, #0
 81023de:	d10a      	bne.n	81023f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 81023e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81023e4:	f383 8811 	msr	BASEPRI, r3
 81023e8:	f3bf 8f6f 	isb	sy
 81023ec:	f3bf 8f4f 	dsb	sy
 81023f0:	623b      	str	r3, [r7, #32]
}
 81023f2:	bf00      	nop
 81023f4:	e7fe      	b.n	81023f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 81023f6:	f7ff fd77 	bl	8101ee8 <vPortValidateInterruptPriority>
	__asm volatile
 81023fa:	f3ef 8211 	mrs	r2, BASEPRI
 81023fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102402:	f383 8811 	msr	BASEPRI, r3
 8102406:	f3bf 8f6f 	isb	sy
 810240a:	f3bf 8f4f 	dsb	sy
 810240e:	61fa      	str	r2, [r7, #28]
 8102410:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8102412:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8102414:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8102416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810241a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810241c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810241e:	429a      	cmp	r2, r3
 8102420:	d302      	bcc.n	8102428 <xQueueGenericSendFromISR+0xbc>
 8102422:	683b      	ldr	r3, [r7, #0]
 8102424:	2b02      	cmp	r3, #2
 8102426:	d12f      	bne.n	8102488 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8102428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810242a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810242e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8102432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102436:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8102438:	683a      	ldr	r2, [r7, #0]
 810243a:	68b9      	ldr	r1, [r7, #8]
 810243c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 810243e:	f000 f911 	bl	8102664 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8102442:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8102446:	f1b3 3fff 	cmp.w	r3, #4294967295
 810244a:	d112      	bne.n	8102472 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810244c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102450:	2b00      	cmp	r3, #0
 8102452:	d016      	beq.n	8102482 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8102454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102456:	3324      	adds	r3, #36	; 0x24
 8102458:	4618      	mov	r0, r3
 810245a:	f000 fef7 	bl	810324c <xTaskRemoveFromEventList>
 810245e:	4603      	mov	r3, r0
 8102460:	2b00      	cmp	r3, #0
 8102462:	d00e      	beq.n	8102482 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8102464:	687b      	ldr	r3, [r7, #4]
 8102466:	2b00      	cmp	r3, #0
 8102468:	d00b      	beq.n	8102482 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 810246a:	687b      	ldr	r3, [r7, #4]
 810246c:	2201      	movs	r2, #1
 810246e:	601a      	str	r2, [r3, #0]
 8102470:	e007      	b.n	8102482 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8102472:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8102476:	3301      	adds	r3, #1
 8102478:	b2db      	uxtb	r3, r3
 810247a:	b25a      	sxtb	r2, r3
 810247c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810247e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8102482:	2301      	movs	r3, #1
 8102484:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8102486:	e001      	b.n	810248c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8102488:	2300      	movs	r3, #0
 810248a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810248c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810248e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8102490:	697b      	ldr	r3, [r7, #20]
 8102492:	f383 8811 	msr	BASEPRI, r3
}
 8102496:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8102498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 810249a:	4618      	mov	r0, r3
 810249c:	3740      	adds	r7, #64	; 0x40
 810249e:	46bd      	mov	sp, r7
 81024a0:	bd80      	pop	{r7, pc}
	...

081024a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 81024a4:	b580      	push	{r7, lr}
 81024a6:	b08c      	sub	sp, #48	; 0x30
 81024a8:	af00      	add	r7, sp, #0
 81024aa:	60f8      	str	r0, [r7, #12]
 81024ac:	60b9      	str	r1, [r7, #8]
 81024ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 81024b0:	2300      	movs	r3, #0
 81024b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 81024b4:	68fb      	ldr	r3, [r7, #12]
 81024b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 81024b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81024ba:	2b00      	cmp	r3, #0
 81024bc:	d10a      	bne.n	81024d4 <xQueueReceive+0x30>
	__asm volatile
 81024be:	f04f 0350 	mov.w	r3, #80	; 0x50
 81024c2:	f383 8811 	msr	BASEPRI, r3
 81024c6:	f3bf 8f6f 	isb	sy
 81024ca:	f3bf 8f4f 	dsb	sy
 81024ce:	623b      	str	r3, [r7, #32]
}
 81024d0:	bf00      	nop
 81024d2:	e7fe      	b.n	81024d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 81024d4:	68bb      	ldr	r3, [r7, #8]
 81024d6:	2b00      	cmp	r3, #0
 81024d8:	d103      	bne.n	81024e2 <xQueueReceive+0x3e>
 81024da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81024de:	2b00      	cmp	r3, #0
 81024e0:	d101      	bne.n	81024e6 <xQueueReceive+0x42>
 81024e2:	2301      	movs	r3, #1
 81024e4:	e000      	b.n	81024e8 <xQueueReceive+0x44>
 81024e6:	2300      	movs	r3, #0
 81024e8:	2b00      	cmp	r3, #0
 81024ea:	d10a      	bne.n	8102502 <xQueueReceive+0x5e>
	__asm volatile
 81024ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 81024f0:	f383 8811 	msr	BASEPRI, r3
 81024f4:	f3bf 8f6f 	isb	sy
 81024f8:	f3bf 8f4f 	dsb	sy
 81024fc:	61fb      	str	r3, [r7, #28]
}
 81024fe:	bf00      	nop
 8102500:	e7fe      	b.n	8102500 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8102502:	f001 f865 	bl	81035d0 <xTaskGetSchedulerState>
 8102506:	4603      	mov	r3, r0
 8102508:	2b00      	cmp	r3, #0
 810250a:	d102      	bne.n	8102512 <xQueueReceive+0x6e>
 810250c:	687b      	ldr	r3, [r7, #4]
 810250e:	2b00      	cmp	r3, #0
 8102510:	d101      	bne.n	8102516 <xQueueReceive+0x72>
 8102512:	2301      	movs	r3, #1
 8102514:	e000      	b.n	8102518 <xQueueReceive+0x74>
 8102516:	2300      	movs	r3, #0
 8102518:	2b00      	cmp	r3, #0
 810251a:	d10a      	bne.n	8102532 <xQueueReceive+0x8e>
	__asm volatile
 810251c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102520:	f383 8811 	msr	BASEPRI, r3
 8102524:	f3bf 8f6f 	isb	sy
 8102528:	f3bf 8f4f 	dsb	sy
 810252c:	61bb      	str	r3, [r7, #24]
}
 810252e:	bf00      	nop
 8102530:	e7fe      	b.n	8102530 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8102532:	f7ff fbf7 	bl	8101d24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8102536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810253a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810253e:	2b00      	cmp	r3, #0
 8102540:	d01f      	beq.n	8102582 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8102542:	68b9      	ldr	r1, [r7, #8]
 8102544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8102546:	f000 f8f7 	bl	8102738 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810254c:	1e5a      	subs	r2, r3, #1
 810254e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102550:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8102552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102554:	691b      	ldr	r3, [r3, #16]
 8102556:	2b00      	cmp	r3, #0
 8102558:	d00f      	beq.n	810257a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810255a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810255c:	3310      	adds	r3, #16
 810255e:	4618      	mov	r0, r3
 8102560:	f000 fe74 	bl	810324c <xTaskRemoveFromEventList>
 8102564:	4603      	mov	r3, r0
 8102566:	2b00      	cmp	r3, #0
 8102568:	d007      	beq.n	810257a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810256a:	4b3d      	ldr	r3, [pc, #244]	; (8102660 <xQueueReceive+0x1bc>)
 810256c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102570:	601a      	str	r2, [r3, #0]
 8102572:	f3bf 8f4f 	dsb	sy
 8102576:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810257a:	f7ff fc03 	bl	8101d84 <vPortExitCritical>
				return pdPASS;
 810257e:	2301      	movs	r3, #1
 8102580:	e069      	b.n	8102656 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8102582:	687b      	ldr	r3, [r7, #4]
 8102584:	2b00      	cmp	r3, #0
 8102586:	d103      	bne.n	8102590 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8102588:	f7ff fbfc 	bl	8101d84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810258c:	2300      	movs	r3, #0
 810258e:	e062      	b.n	8102656 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8102590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102592:	2b00      	cmp	r3, #0
 8102594:	d106      	bne.n	81025a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8102596:	f107 0310 	add.w	r3, r7, #16
 810259a:	4618      	mov	r0, r3
 810259c:	f000 feba 	bl	8103314 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 81025a0:	2301      	movs	r3, #1
 81025a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 81025a4:	f7ff fbee 	bl	8101d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 81025a8:	f000 fc26 	bl	8102df8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 81025ac:	f7ff fbba 	bl	8101d24 <vPortEnterCritical>
 81025b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81025b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81025b6:	b25b      	sxtb	r3, r3
 81025b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81025bc:	d103      	bne.n	81025c6 <xQueueReceive+0x122>
 81025be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81025c0:	2200      	movs	r2, #0
 81025c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81025c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81025c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81025cc:	b25b      	sxtb	r3, r3
 81025ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 81025d2:	d103      	bne.n	81025dc <xQueueReceive+0x138>
 81025d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81025d6:	2200      	movs	r2, #0
 81025d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81025dc:	f7ff fbd2 	bl	8101d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81025e0:	1d3a      	adds	r2, r7, #4
 81025e2:	f107 0310 	add.w	r3, r7, #16
 81025e6:	4611      	mov	r1, r2
 81025e8:	4618      	mov	r0, r3
 81025ea:	f000 fea9 	bl	8103340 <xTaskCheckForTimeOut>
 81025ee:	4603      	mov	r3, r0
 81025f0:	2b00      	cmp	r3, #0
 81025f2:	d123      	bne.n	810263c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81025f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81025f6:	f000 f917 	bl	8102828 <prvIsQueueEmpty>
 81025fa:	4603      	mov	r3, r0
 81025fc:	2b00      	cmp	r3, #0
 81025fe:	d017      	beq.n	8102630 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8102600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102602:	3324      	adds	r3, #36	; 0x24
 8102604:	687a      	ldr	r2, [r7, #4]
 8102606:	4611      	mov	r1, r2
 8102608:	4618      	mov	r0, r3
 810260a:	f000 fdcf 	bl	81031ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810260e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8102610:	f000 f8b8 	bl	8102784 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8102614:	f000 fbfe 	bl	8102e14 <xTaskResumeAll>
 8102618:	4603      	mov	r3, r0
 810261a:	2b00      	cmp	r3, #0
 810261c:	d189      	bne.n	8102532 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 810261e:	4b10      	ldr	r3, [pc, #64]	; (8102660 <xQueueReceive+0x1bc>)
 8102620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102624:	601a      	str	r2, [r3, #0]
 8102626:	f3bf 8f4f 	dsb	sy
 810262a:	f3bf 8f6f 	isb	sy
 810262e:	e780      	b.n	8102532 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8102630:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8102632:	f000 f8a7 	bl	8102784 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8102636:	f000 fbed 	bl	8102e14 <xTaskResumeAll>
 810263a:	e77a      	b.n	8102532 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 810263c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810263e:	f000 f8a1 	bl	8102784 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8102642:	f000 fbe7 	bl	8102e14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8102646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8102648:	f000 f8ee 	bl	8102828 <prvIsQueueEmpty>
 810264c:	4603      	mov	r3, r0
 810264e:	2b00      	cmp	r3, #0
 8102650:	f43f af6f 	beq.w	8102532 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8102654:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8102656:	4618      	mov	r0, r3
 8102658:	3730      	adds	r7, #48	; 0x30
 810265a:	46bd      	mov	sp, r7
 810265c:	bd80      	pop	{r7, pc}
 810265e:	bf00      	nop
 8102660:	e000ed04 	.word	0xe000ed04

08102664 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8102664:	b580      	push	{r7, lr}
 8102666:	b086      	sub	sp, #24
 8102668:	af00      	add	r7, sp, #0
 810266a:	60f8      	str	r0, [r7, #12]
 810266c:	60b9      	str	r1, [r7, #8]
 810266e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8102670:	2300      	movs	r3, #0
 8102672:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8102674:	68fb      	ldr	r3, [r7, #12]
 8102676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102678:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810267a:	68fb      	ldr	r3, [r7, #12]
 810267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810267e:	2b00      	cmp	r3, #0
 8102680:	d10d      	bne.n	810269e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8102682:	68fb      	ldr	r3, [r7, #12]
 8102684:	681b      	ldr	r3, [r3, #0]
 8102686:	2b00      	cmp	r3, #0
 8102688:	d14d      	bne.n	8102726 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810268a:	68fb      	ldr	r3, [r7, #12]
 810268c:	689b      	ldr	r3, [r3, #8]
 810268e:	4618      	mov	r0, r3
 8102690:	f000 ffbc 	bl	810360c <xTaskPriorityDisinherit>
 8102694:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8102696:	68fb      	ldr	r3, [r7, #12]
 8102698:	2200      	movs	r2, #0
 810269a:	609a      	str	r2, [r3, #8]
 810269c:	e043      	b.n	8102726 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810269e:	687b      	ldr	r3, [r7, #4]
 81026a0:	2b00      	cmp	r3, #0
 81026a2:	d119      	bne.n	81026d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 81026a4:	68fb      	ldr	r3, [r7, #12]
 81026a6:	6858      	ldr	r0, [r3, #4]
 81026a8:	68fb      	ldr	r3, [r7, #12]
 81026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81026ac:	461a      	mov	r2, r3
 81026ae:	68b9      	ldr	r1, [r7, #8]
 81026b0:	f001 fcdf 	bl	8104072 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 81026b4:	68fb      	ldr	r3, [r7, #12]
 81026b6:	685a      	ldr	r2, [r3, #4]
 81026b8:	68fb      	ldr	r3, [r7, #12]
 81026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81026bc:	441a      	add	r2, r3
 81026be:	68fb      	ldr	r3, [r7, #12]
 81026c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 81026c2:	68fb      	ldr	r3, [r7, #12]
 81026c4:	685a      	ldr	r2, [r3, #4]
 81026c6:	68fb      	ldr	r3, [r7, #12]
 81026c8:	689b      	ldr	r3, [r3, #8]
 81026ca:	429a      	cmp	r2, r3
 81026cc:	d32b      	bcc.n	8102726 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 81026ce:	68fb      	ldr	r3, [r7, #12]
 81026d0:	681a      	ldr	r2, [r3, #0]
 81026d2:	68fb      	ldr	r3, [r7, #12]
 81026d4:	605a      	str	r2, [r3, #4]
 81026d6:	e026      	b.n	8102726 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 81026d8:	68fb      	ldr	r3, [r7, #12]
 81026da:	68d8      	ldr	r0, [r3, #12]
 81026dc:	68fb      	ldr	r3, [r7, #12]
 81026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81026e0:	461a      	mov	r2, r3
 81026e2:	68b9      	ldr	r1, [r7, #8]
 81026e4:	f001 fcc5 	bl	8104072 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 81026e8:	68fb      	ldr	r3, [r7, #12]
 81026ea:	68da      	ldr	r2, [r3, #12]
 81026ec:	68fb      	ldr	r3, [r7, #12]
 81026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81026f0:	425b      	negs	r3, r3
 81026f2:	441a      	add	r2, r3
 81026f4:	68fb      	ldr	r3, [r7, #12]
 81026f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 81026f8:	68fb      	ldr	r3, [r7, #12]
 81026fa:	68da      	ldr	r2, [r3, #12]
 81026fc:	68fb      	ldr	r3, [r7, #12]
 81026fe:	681b      	ldr	r3, [r3, #0]
 8102700:	429a      	cmp	r2, r3
 8102702:	d207      	bcs.n	8102714 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8102704:	68fb      	ldr	r3, [r7, #12]
 8102706:	689a      	ldr	r2, [r3, #8]
 8102708:	68fb      	ldr	r3, [r7, #12]
 810270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810270c:	425b      	negs	r3, r3
 810270e:	441a      	add	r2, r3
 8102710:	68fb      	ldr	r3, [r7, #12]
 8102712:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8102714:	687b      	ldr	r3, [r7, #4]
 8102716:	2b02      	cmp	r3, #2
 8102718:	d105      	bne.n	8102726 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810271a:	693b      	ldr	r3, [r7, #16]
 810271c:	2b00      	cmp	r3, #0
 810271e:	d002      	beq.n	8102726 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8102720:	693b      	ldr	r3, [r7, #16]
 8102722:	3b01      	subs	r3, #1
 8102724:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8102726:	693b      	ldr	r3, [r7, #16]
 8102728:	1c5a      	adds	r2, r3, #1
 810272a:	68fb      	ldr	r3, [r7, #12]
 810272c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 810272e:	697b      	ldr	r3, [r7, #20]
}
 8102730:	4618      	mov	r0, r3
 8102732:	3718      	adds	r7, #24
 8102734:	46bd      	mov	sp, r7
 8102736:	bd80      	pop	{r7, pc}

08102738 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8102738:	b580      	push	{r7, lr}
 810273a:	b082      	sub	sp, #8
 810273c:	af00      	add	r7, sp, #0
 810273e:	6078      	str	r0, [r7, #4]
 8102740:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8102742:	687b      	ldr	r3, [r7, #4]
 8102744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102746:	2b00      	cmp	r3, #0
 8102748:	d018      	beq.n	810277c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810274a:	687b      	ldr	r3, [r7, #4]
 810274c:	68da      	ldr	r2, [r3, #12]
 810274e:	687b      	ldr	r3, [r7, #4]
 8102750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102752:	441a      	add	r2, r3
 8102754:	687b      	ldr	r3, [r7, #4]
 8102756:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8102758:	687b      	ldr	r3, [r7, #4]
 810275a:	68da      	ldr	r2, [r3, #12]
 810275c:	687b      	ldr	r3, [r7, #4]
 810275e:	689b      	ldr	r3, [r3, #8]
 8102760:	429a      	cmp	r2, r3
 8102762:	d303      	bcc.n	810276c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8102764:	687b      	ldr	r3, [r7, #4]
 8102766:	681a      	ldr	r2, [r3, #0]
 8102768:	687b      	ldr	r3, [r7, #4]
 810276a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810276c:	687b      	ldr	r3, [r7, #4]
 810276e:	68d9      	ldr	r1, [r3, #12]
 8102770:	687b      	ldr	r3, [r7, #4]
 8102772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102774:	461a      	mov	r2, r3
 8102776:	6838      	ldr	r0, [r7, #0]
 8102778:	f001 fc7b 	bl	8104072 <memcpy>
	}
}
 810277c:	bf00      	nop
 810277e:	3708      	adds	r7, #8
 8102780:	46bd      	mov	sp, r7
 8102782:	bd80      	pop	{r7, pc}

08102784 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8102784:	b580      	push	{r7, lr}
 8102786:	b084      	sub	sp, #16
 8102788:	af00      	add	r7, sp, #0
 810278a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810278c:	f7ff faca 	bl	8101d24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8102790:	687b      	ldr	r3, [r7, #4]
 8102792:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8102796:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8102798:	e011      	b.n	81027be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810279a:	687b      	ldr	r3, [r7, #4]
 810279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810279e:	2b00      	cmp	r3, #0
 81027a0:	d012      	beq.n	81027c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 81027a2:	687b      	ldr	r3, [r7, #4]
 81027a4:	3324      	adds	r3, #36	; 0x24
 81027a6:	4618      	mov	r0, r3
 81027a8:	f000 fd50 	bl	810324c <xTaskRemoveFromEventList>
 81027ac:	4603      	mov	r3, r0
 81027ae:	2b00      	cmp	r3, #0
 81027b0:	d001      	beq.n	81027b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 81027b2:	f000 fe27 	bl	8103404 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 81027b6:	7bfb      	ldrb	r3, [r7, #15]
 81027b8:	3b01      	subs	r3, #1
 81027ba:	b2db      	uxtb	r3, r3
 81027bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 81027be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81027c2:	2b00      	cmp	r3, #0
 81027c4:	dce9      	bgt.n	810279a <prvUnlockQueue+0x16>
 81027c6:	e000      	b.n	81027ca <prvUnlockQueue+0x46>
					break;
 81027c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 81027ca:	687b      	ldr	r3, [r7, #4]
 81027cc:	22ff      	movs	r2, #255	; 0xff
 81027ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 81027d2:	f7ff fad7 	bl	8101d84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 81027d6:	f7ff faa5 	bl	8101d24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 81027da:	687b      	ldr	r3, [r7, #4]
 81027dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81027e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 81027e2:	e011      	b.n	8102808 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81027e4:	687b      	ldr	r3, [r7, #4]
 81027e6:	691b      	ldr	r3, [r3, #16]
 81027e8:	2b00      	cmp	r3, #0
 81027ea:	d012      	beq.n	8102812 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81027ec:	687b      	ldr	r3, [r7, #4]
 81027ee:	3310      	adds	r3, #16
 81027f0:	4618      	mov	r0, r3
 81027f2:	f000 fd2b 	bl	810324c <xTaskRemoveFromEventList>
 81027f6:	4603      	mov	r3, r0
 81027f8:	2b00      	cmp	r3, #0
 81027fa:	d001      	beq.n	8102800 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 81027fc:	f000 fe02 	bl	8103404 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8102800:	7bbb      	ldrb	r3, [r7, #14]
 8102802:	3b01      	subs	r3, #1
 8102804:	b2db      	uxtb	r3, r3
 8102806:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8102808:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810280c:	2b00      	cmp	r3, #0
 810280e:	dce9      	bgt.n	81027e4 <prvUnlockQueue+0x60>
 8102810:	e000      	b.n	8102814 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8102812:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8102814:	687b      	ldr	r3, [r7, #4]
 8102816:	22ff      	movs	r2, #255	; 0xff
 8102818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 810281c:	f7ff fab2 	bl	8101d84 <vPortExitCritical>
}
 8102820:	bf00      	nop
 8102822:	3710      	adds	r7, #16
 8102824:	46bd      	mov	sp, r7
 8102826:	bd80      	pop	{r7, pc}

08102828 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8102828:	b580      	push	{r7, lr}
 810282a:	b084      	sub	sp, #16
 810282c:	af00      	add	r7, sp, #0
 810282e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8102830:	f7ff fa78 	bl	8101d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8102834:	687b      	ldr	r3, [r7, #4]
 8102836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102838:	2b00      	cmp	r3, #0
 810283a:	d102      	bne.n	8102842 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 810283c:	2301      	movs	r3, #1
 810283e:	60fb      	str	r3, [r7, #12]
 8102840:	e001      	b.n	8102846 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8102842:	2300      	movs	r3, #0
 8102844:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8102846:	f7ff fa9d 	bl	8101d84 <vPortExitCritical>

	return xReturn;
 810284a:	68fb      	ldr	r3, [r7, #12]
}
 810284c:	4618      	mov	r0, r3
 810284e:	3710      	adds	r7, #16
 8102850:	46bd      	mov	sp, r7
 8102852:	bd80      	pop	{r7, pc}

08102854 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8102854:	b580      	push	{r7, lr}
 8102856:	b084      	sub	sp, #16
 8102858:	af00      	add	r7, sp, #0
 810285a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810285c:	f7ff fa62 	bl	8101d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8102860:	687b      	ldr	r3, [r7, #4]
 8102862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8102864:	687b      	ldr	r3, [r7, #4]
 8102866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102868:	429a      	cmp	r2, r3
 810286a:	d102      	bne.n	8102872 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810286c:	2301      	movs	r3, #1
 810286e:	60fb      	str	r3, [r7, #12]
 8102870:	e001      	b.n	8102876 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8102872:	2300      	movs	r3, #0
 8102874:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8102876:	f7ff fa85 	bl	8101d84 <vPortExitCritical>

	return xReturn;
 810287a:	68fb      	ldr	r3, [r7, #12]
}
 810287c:	4618      	mov	r0, r3
 810287e:	3710      	adds	r7, #16
 8102880:	46bd      	mov	sp, r7
 8102882:	bd80      	pop	{r7, pc}

08102884 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8102884:	b480      	push	{r7}
 8102886:	b085      	sub	sp, #20
 8102888:	af00      	add	r7, sp, #0
 810288a:	6078      	str	r0, [r7, #4]
 810288c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810288e:	2300      	movs	r3, #0
 8102890:	60fb      	str	r3, [r7, #12]
 8102892:	e014      	b.n	81028be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8102894:	4a0f      	ldr	r2, [pc, #60]	; (81028d4 <vQueueAddToRegistry+0x50>)
 8102896:	68fb      	ldr	r3, [r7, #12]
 8102898:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 810289c:	2b00      	cmp	r3, #0
 810289e:	d10b      	bne.n	81028b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 81028a0:	490c      	ldr	r1, [pc, #48]	; (81028d4 <vQueueAddToRegistry+0x50>)
 81028a2:	68fb      	ldr	r3, [r7, #12]
 81028a4:	683a      	ldr	r2, [r7, #0]
 81028a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 81028aa:	4a0a      	ldr	r2, [pc, #40]	; (81028d4 <vQueueAddToRegistry+0x50>)
 81028ac:	68fb      	ldr	r3, [r7, #12]
 81028ae:	00db      	lsls	r3, r3, #3
 81028b0:	4413      	add	r3, r2
 81028b2:	687a      	ldr	r2, [r7, #4]
 81028b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 81028b6:	e006      	b.n	81028c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 81028b8:	68fb      	ldr	r3, [r7, #12]
 81028ba:	3301      	adds	r3, #1
 81028bc:	60fb      	str	r3, [r7, #12]
 81028be:	68fb      	ldr	r3, [r7, #12]
 81028c0:	2b07      	cmp	r3, #7
 81028c2:	d9e7      	bls.n	8102894 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 81028c4:	bf00      	nop
 81028c6:	bf00      	nop
 81028c8:	3714      	adds	r7, #20
 81028ca:	46bd      	mov	sp, r7
 81028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028d0:	4770      	bx	lr
 81028d2:	bf00      	nop
 81028d4:	10004a78 	.word	0x10004a78

081028d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 81028d8:	b580      	push	{r7, lr}
 81028da:	b086      	sub	sp, #24
 81028dc:	af00      	add	r7, sp, #0
 81028de:	60f8      	str	r0, [r7, #12]
 81028e0:	60b9      	str	r1, [r7, #8]
 81028e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 81028e4:	68fb      	ldr	r3, [r7, #12]
 81028e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 81028e8:	f7ff fa1c 	bl	8101d24 <vPortEnterCritical>
 81028ec:	697b      	ldr	r3, [r7, #20]
 81028ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81028f2:	b25b      	sxtb	r3, r3
 81028f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81028f8:	d103      	bne.n	8102902 <vQueueWaitForMessageRestricted+0x2a>
 81028fa:	697b      	ldr	r3, [r7, #20]
 81028fc:	2200      	movs	r2, #0
 81028fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8102902:	697b      	ldr	r3, [r7, #20]
 8102904:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8102908:	b25b      	sxtb	r3, r3
 810290a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810290e:	d103      	bne.n	8102918 <vQueueWaitForMessageRestricted+0x40>
 8102910:	697b      	ldr	r3, [r7, #20]
 8102912:	2200      	movs	r2, #0
 8102914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8102918:	f7ff fa34 	bl	8101d84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 810291c:	697b      	ldr	r3, [r7, #20]
 810291e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102920:	2b00      	cmp	r3, #0
 8102922:	d106      	bne.n	8102932 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8102924:	697b      	ldr	r3, [r7, #20]
 8102926:	3324      	adds	r3, #36	; 0x24
 8102928:	687a      	ldr	r2, [r7, #4]
 810292a:	68b9      	ldr	r1, [r7, #8]
 810292c:	4618      	mov	r0, r3
 810292e:	f000 fc61 	bl	81031f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8102932:	6978      	ldr	r0, [r7, #20]
 8102934:	f7ff ff26 	bl	8102784 <prvUnlockQueue>
	}
 8102938:	bf00      	nop
 810293a:	3718      	adds	r7, #24
 810293c:	46bd      	mov	sp, r7
 810293e:	bd80      	pop	{r7, pc}

08102940 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8102940:	b580      	push	{r7, lr}
 8102942:	b08e      	sub	sp, #56	; 0x38
 8102944:	af04      	add	r7, sp, #16
 8102946:	60f8      	str	r0, [r7, #12]
 8102948:	60b9      	str	r1, [r7, #8]
 810294a:	607a      	str	r2, [r7, #4]
 810294c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 810294e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102950:	2b00      	cmp	r3, #0
 8102952:	d10a      	bne.n	810296a <xTaskCreateStatic+0x2a>
	__asm volatile
 8102954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102958:	f383 8811 	msr	BASEPRI, r3
 810295c:	f3bf 8f6f 	isb	sy
 8102960:	f3bf 8f4f 	dsb	sy
 8102964:	623b      	str	r3, [r7, #32]
}
 8102966:	bf00      	nop
 8102968:	e7fe      	b.n	8102968 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 810296a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810296c:	2b00      	cmp	r3, #0
 810296e:	d10a      	bne.n	8102986 <xTaskCreateStatic+0x46>
	__asm volatile
 8102970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102974:	f383 8811 	msr	BASEPRI, r3
 8102978:	f3bf 8f6f 	isb	sy
 810297c:	f3bf 8f4f 	dsb	sy
 8102980:	61fb      	str	r3, [r7, #28]
}
 8102982:	bf00      	nop
 8102984:	e7fe      	b.n	8102984 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8102986:	23bc      	movs	r3, #188	; 0xbc
 8102988:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 810298a:	693b      	ldr	r3, [r7, #16]
 810298c:	2bbc      	cmp	r3, #188	; 0xbc
 810298e:	d00a      	beq.n	81029a6 <xTaskCreateStatic+0x66>
	__asm volatile
 8102990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102994:	f383 8811 	msr	BASEPRI, r3
 8102998:	f3bf 8f6f 	isb	sy
 810299c:	f3bf 8f4f 	dsb	sy
 81029a0:	61bb      	str	r3, [r7, #24]
}
 81029a2:	bf00      	nop
 81029a4:	e7fe      	b.n	81029a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 81029a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 81029a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81029aa:	2b00      	cmp	r3, #0
 81029ac:	d01e      	beq.n	81029ec <xTaskCreateStatic+0xac>
 81029ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81029b0:	2b00      	cmp	r3, #0
 81029b2:	d01b      	beq.n	81029ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81029b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81029b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 81029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81029ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81029bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 81029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81029c0:	2202      	movs	r2, #2
 81029c2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 81029c6:	2300      	movs	r3, #0
 81029c8:	9303      	str	r3, [sp, #12]
 81029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81029cc:	9302      	str	r3, [sp, #8]
 81029ce:	f107 0314 	add.w	r3, r7, #20
 81029d2:	9301      	str	r3, [sp, #4]
 81029d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81029d6:	9300      	str	r3, [sp, #0]
 81029d8:	683b      	ldr	r3, [r7, #0]
 81029da:	687a      	ldr	r2, [r7, #4]
 81029dc:	68b9      	ldr	r1, [r7, #8]
 81029de:	68f8      	ldr	r0, [r7, #12]
 81029e0:	f000 f850 	bl	8102a84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 81029e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 81029e6:	f000 f8f3 	bl	8102bd0 <prvAddNewTaskToReadyList>
 81029ea:	e001      	b.n	81029f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 81029ec:	2300      	movs	r3, #0
 81029ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 81029f0:	697b      	ldr	r3, [r7, #20]
	}
 81029f2:	4618      	mov	r0, r3
 81029f4:	3728      	adds	r7, #40	; 0x28
 81029f6:	46bd      	mov	sp, r7
 81029f8:	bd80      	pop	{r7, pc}

081029fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 81029fa:	b580      	push	{r7, lr}
 81029fc:	b08c      	sub	sp, #48	; 0x30
 81029fe:	af04      	add	r7, sp, #16
 8102a00:	60f8      	str	r0, [r7, #12]
 8102a02:	60b9      	str	r1, [r7, #8]
 8102a04:	603b      	str	r3, [r7, #0]
 8102a06:	4613      	mov	r3, r2
 8102a08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8102a0a:	88fb      	ldrh	r3, [r7, #6]
 8102a0c:	009b      	lsls	r3, r3, #2
 8102a0e:	4618      	mov	r0, r3
 8102a10:	f7fe fdba 	bl	8101588 <pvPortMalloc>
 8102a14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8102a16:	697b      	ldr	r3, [r7, #20]
 8102a18:	2b00      	cmp	r3, #0
 8102a1a:	d00e      	beq.n	8102a3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8102a1c:	20bc      	movs	r0, #188	; 0xbc
 8102a1e:	f7fe fdb3 	bl	8101588 <pvPortMalloc>
 8102a22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8102a24:	69fb      	ldr	r3, [r7, #28]
 8102a26:	2b00      	cmp	r3, #0
 8102a28:	d003      	beq.n	8102a32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8102a2a:	69fb      	ldr	r3, [r7, #28]
 8102a2c:	697a      	ldr	r2, [r7, #20]
 8102a2e:	631a      	str	r2, [r3, #48]	; 0x30
 8102a30:	e005      	b.n	8102a3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8102a32:	6978      	ldr	r0, [r7, #20]
 8102a34:	f7fe fe74 	bl	8101720 <vPortFree>
 8102a38:	e001      	b.n	8102a3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8102a3a:	2300      	movs	r3, #0
 8102a3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8102a3e:	69fb      	ldr	r3, [r7, #28]
 8102a40:	2b00      	cmp	r3, #0
 8102a42:	d017      	beq.n	8102a74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8102a44:	69fb      	ldr	r3, [r7, #28]
 8102a46:	2200      	movs	r2, #0
 8102a48:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8102a4c:	88fa      	ldrh	r2, [r7, #6]
 8102a4e:	2300      	movs	r3, #0
 8102a50:	9303      	str	r3, [sp, #12]
 8102a52:	69fb      	ldr	r3, [r7, #28]
 8102a54:	9302      	str	r3, [sp, #8]
 8102a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102a58:	9301      	str	r3, [sp, #4]
 8102a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102a5c:	9300      	str	r3, [sp, #0]
 8102a5e:	683b      	ldr	r3, [r7, #0]
 8102a60:	68b9      	ldr	r1, [r7, #8]
 8102a62:	68f8      	ldr	r0, [r7, #12]
 8102a64:	f000 f80e 	bl	8102a84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8102a68:	69f8      	ldr	r0, [r7, #28]
 8102a6a:	f000 f8b1 	bl	8102bd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8102a6e:	2301      	movs	r3, #1
 8102a70:	61bb      	str	r3, [r7, #24]
 8102a72:	e002      	b.n	8102a7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8102a74:	f04f 33ff 	mov.w	r3, #4294967295
 8102a78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8102a7a:	69bb      	ldr	r3, [r7, #24]
	}
 8102a7c:	4618      	mov	r0, r3
 8102a7e:	3720      	adds	r7, #32
 8102a80:	46bd      	mov	sp, r7
 8102a82:	bd80      	pop	{r7, pc}

08102a84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8102a84:	b580      	push	{r7, lr}
 8102a86:	b088      	sub	sp, #32
 8102a88:	af00      	add	r7, sp, #0
 8102a8a:	60f8      	str	r0, [r7, #12]
 8102a8c:	60b9      	str	r1, [r7, #8]
 8102a8e:	607a      	str	r2, [r7, #4]
 8102a90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8102a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102a94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8102a96:	687b      	ldr	r3, [r7, #4]
 8102a98:	009b      	lsls	r3, r3, #2
 8102a9a:	461a      	mov	r2, r3
 8102a9c:	21a5      	movs	r1, #165	; 0xa5
 8102a9e:	f001 faf6 	bl	810408e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8102aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8102aa6:	687b      	ldr	r3, [r7, #4]
 8102aa8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8102aac:	3b01      	subs	r3, #1
 8102aae:	009b      	lsls	r3, r3, #2
 8102ab0:	4413      	add	r3, r2
 8102ab2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8102ab4:	69bb      	ldr	r3, [r7, #24]
 8102ab6:	f023 0307 	bic.w	r3, r3, #7
 8102aba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8102abc:	69bb      	ldr	r3, [r7, #24]
 8102abe:	f003 0307 	and.w	r3, r3, #7
 8102ac2:	2b00      	cmp	r3, #0
 8102ac4:	d00a      	beq.n	8102adc <prvInitialiseNewTask+0x58>
	__asm volatile
 8102ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102aca:	f383 8811 	msr	BASEPRI, r3
 8102ace:	f3bf 8f6f 	isb	sy
 8102ad2:	f3bf 8f4f 	dsb	sy
 8102ad6:	617b      	str	r3, [r7, #20]
}
 8102ad8:	bf00      	nop
 8102ada:	e7fe      	b.n	8102ada <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8102adc:	68bb      	ldr	r3, [r7, #8]
 8102ade:	2b00      	cmp	r3, #0
 8102ae0:	d01f      	beq.n	8102b22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8102ae2:	2300      	movs	r3, #0
 8102ae4:	61fb      	str	r3, [r7, #28]
 8102ae6:	e012      	b.n	8102b0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8102ae8:	68ba      	ldr	r2, [r7, #8]
 8102aea:	69fb      	ldr	r3, [r7, #28]
 8102aec:	4413      	add	r3, r2
 8102aee:	7819      	ldrb	r1, [r3, #0]
 8102af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8102af2:	69fb      	ldr	r3, [r7, #28]
 8102af4:	4413      	add	r3, r2
 8102af6:	3334      	adds	r3, #52	; 0x34
 8102af8:	460a      	mov	r2, r1
 8102afa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8102afc:	68ba      	ldr	r2, [r7, #8]
 8102afe:	69fb      	ldr	r3, [r7, #28]
 8102b00:	4413      	add	r3, r2
 8102b02:	781b      	ldrb	r3, [r3, #0]
 8102b04:	2b00      	cmp	r3, #0
 8102b06:	d006      	beq.n	8102b16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8102b08:	69fb      	ldr	r3, [r7, #28]
 8102b0a:	3301      	adds	r3, #1
 8102b0c:	61fb      	str	r3, [r7, #28]
 8102b0e:	69fb      	ldr	r3, [r7, #28]
 8102b10:	2b0f      	cmp	r3, #15
 8102b12:	d9e9      	bls.n	8102ae8 <prvInitialiseNewTask+0x64>
 8102b14:	e000      	b.n	8102b18 <prvInitialiseNewTask+0x94>
			{
				break;
 8102b16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8102b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102b1a:	2200      	movs	r2, #0
 8102b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8102b20:	e003      	b.n	8102b2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8102b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102b24:	2200      	movs	r2, #0
 8102b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8102b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102b2c:	2b37      	cmp	r3, #55	; 0x37
 8102b2e:	d901      	bls.n	8102b34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8102b30:	2337      	movs	r3, #55	; 0x37
 8102b32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8102b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8102b38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8102b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8102b3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8102b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102b42:	2200      	movs	r2, #0
 8102b44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8102b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102b48:	3304      	adds	r3, #4
 8102b4a:	4618      	mov	r0, r3
 8102b4c:	f7fe ff26 	bl	810199c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8102b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102b52:	3318      	adds	r3, #24
 8102b54:	4618      	mov	r0, r3
 8102b56:	f7fe ff21 	bl	810199c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8102b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8102b5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8102b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102b62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8102b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102b68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8102b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8102b6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8102b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102b72:	2200      	movs	r2, #0
 8102b74:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8102b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102b7a:	2200      	movs	r2, #0
 8102b7c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8102b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102b82:	3354      	adds	r3, #84	; 0x54
 8102b84:	2260      	movs	r2, #96	; 0x60
 8102b86:	2100      	movs	r1, #0
 8102b88:	4618      	mov	r0, r3
 8102b8a:	f001 fa80 	bl	810408e <memset>
 8102b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102b90:	4a0c      	ldr	r2, [pc, #48]	; (8102bc4 <prvInitialiseNewTask+0x140>)
 8102b92:	659a      	str	r2, [r3, #88]	; 0x58
 8102b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102b96:	4a0c      	ldr	r2, [pc, #48]	; (8102bc8 <prvInitialiseNewTask+0x144>)
 8102b98:	65da      	str	r2, [r3, #92]	; 0x5c
 8102b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102b9c:	4a0b      	ldr	r2, [pc, #44]	; (8102bcc <prvInitialiseNewTask+0x148>)
 8102b9e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8102ba0:	683a      	ldr	r2, [r7, #0]
 8102ba2:	68f9      	ldr	r1, [r7, #12]
 8102ba4:	69b8      	ldr	r0, [r7, #24]
 8102ba6:	f7fe ff8d 	bl	8101ac4 <pxPortInitialiseStack>
 8102baa:	4602      	mov	r2, r0
 8102bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102bae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8102bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102bb2:	2b00      	cmp	r3, #0
 8102bb4:	d002      	beq.n	8102bbc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8102bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8102bba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8102bbc:	bf00      	nop
 8102bbe:	3720      	adds	r7, #32
 8102bc0:	46bd      	mov	sp, r7
 8102bc2:	bd80      	pop	{r7, pc}
 8102bc4:	08104ed4 	.word	0x08104ed4
 8102bc8:	08104ef4 	.word	0x08104ef4
 8102bcc:	08104eb4 	.word	0x08104eb4

08102bd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8102bd0:	b580      	push	{r7, lr}
 8102bd2:	b082      	sub	sp, #8
 8102bd4:	af00      	add	r7, sp, #0
 8102bd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8102bd8:	f7ff f8a4 	bl	8101d24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8102bdc:	4b2d      	ldr	r3, [pc, #180]	; (8102c94 <prvAddNewTaskToReadyList+0xc4>)
 8102bde:	681b      	ldr	r3, [r3, #0]
 8102be0:	3301      	adds	r3, #1
 8102be2:	4a2c      	ldr	r2, [pc, #176]	; (8102c94 <prvAddNewTaskToReadyList+0xc4>)
 8102be4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8102be6:	4b2c      	ldr	r3, [pc, #176]	; (8102c98 <prvAddNewTaskToReadyList+0xc8>)
 8102be8:	681b      	ldr	r3, [r3, #0]
 8102bea:	2b00      	cmp	r3, #0
 8102bec:	d109      	bne.n	8102c02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8102bee:	4a2a      	ldr	r2, [pc, #168]	; (8102c98 <prvAddNewTaskToReadyList+0xc8>)
 8102bf0:	687b      	ldr	r3, [r7, #4]
 8102bf2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8102bf4:	4b27      	ldr	r3, [pc, #156]	; (8102c94 <prvAddNewTaskToReadyList+0xc4>)
 8102bf6:	681b      	ldr	r3, [r3, #0]
 8102bf8:	2b01      	cmp	r3, #1
 8102bfa:	d110      	bne.n	8102c1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8102bfc:	f000 fc26 	bl	810344c <prvInitialiseTaskLists>
 8102c00:	e00d      	b.n	8102c1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8102c02:	4b26      	ldr	r3, [pc, #152]	; (8102c9c <prvAddNewTaskToReadyList+0xcc>)
 8102c04:	681b      	ldr	r3, [r3, #0]
 8102c06:	2b00      	cmp	r3, #0
 8102c08:	d109      	bne.n	8102c1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8102c0a:	4b23      	ldr	r3, [pc, #140]	; (8102c98 <prvAddNewTaskToReadyList+0xc8>)
 8102c0c:	681b      	ldr	r3, [r3, #0]
 8102c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102c10:	687b      	ldr	r3, [r7, #4]
 8102c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c14:	429a      	cmp	r2, r3
 8102c16:	d802      	bhi.n	8102c1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8102c18:	4a1f      	ldr	r2, [pc, #124]	; (8102c98 <prvAddNewTaskToReadyList+0xc8>)
 8102c1a:	687b      	ldr	r3, [r7, #4]
 8102c1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8102c1e:	4b20      	ldr	r3, [pc, #128]	; (8102ca0 <prvAddNewTaskToReadyList+0xd0>)
 8102c20:	681b      	ldr	r3, [r3, #0]
 8102c22:	3301      	adds	r3, #1
 8102c24:	4a1e      	ldr	r2, [pc, #120]	; (8102ca0 <prvAddNewTaskToReadyList+0xd0>)
 8102c26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8102c28:	4b1d      	ldr	r3, [pc, #116]	; (8102ca0 <prvAddNewTaskToReadyList+0xd0>)
 8102c2a:	681a      	ldr	r2, [r3, #0]
 8102c2c:	687b      	ldr	r3, [r7, #4]
 8102c2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8102c30:	687b      	ldr	r3, [r7, #4]
 8102c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102c34:	4b1b      	ldr	r3, [pc, #108]	; (8102ca4 <prvAddNewTaskToReadyList+0xd4>)
 8102c36:	681b      	ldr	r3, [r3, #0]
 8102c38:	429a      	cmp	r2, r3
 8102c3a:	d903      	bls.n	8102c44 <prvAddNewTaskToReadyList+0x74>
 8102c3c:	687b      	ldr	r3, [r7, #4]
 8102c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c40:	4a18      	ldr	r2, [pc, #96]	; (8102ca4 <prvAddNewTaskToReadyList+0xd4>)
 8102c42:	6013      	str	r3, [r2, #0]
 8102c44:	687b      	ldr	r3, [r7, #4]
 8102c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102c48:	4613      	mov	r3, r2
 8102c4a:	009b      	lsls	r3, r3, #2
 8102c4c:	4413      	add	r3, r2
 8102c4e:	009b      	lsls	r3, r3, #2
 8102c50:	4a15      	ldr	r2, [pc, #84]	; (8102ca8 <prvAddNewTaskToReadyList+0xd8>)
 8102c52:	441a      	add	r2, r3
 8102c54:	687b      	ldr	r3, [r7, #4]
 8102c56:	3304      	adds	r3, #4
 8102c58:	4619      	mov	r1, r3
 8102c5a:	4610      	mov	r0, r2
 8102c5c:	f7fe feab 	bl	81019b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8102c60:	f7ff f890 	bl	8101d84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8102c64:	4b0d      	ldr	r3, [pc, #52]	; (8102c9c <prvAddNewTaskToReadyList+0xcc>)
 8102c66:	681b      	ldr	r3, [r3, #0]
 8102c68:	2b00      	cmp	r3, #0
 8102c6a:	d00e      	beq.n	8102c8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8102c6c:	4b0a      	ldr	r3, [pc, #40]	; (8102c98 <prvAddNewTaskToReadyList+0xc8>)
 8102c6e:	681b      	ldr	r3, [r3, #0]
 8102c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102c72:	687b      	ldr	r3, [r7, #4]
 8102c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c76:	429a      	cmp	r2, r3
 8102c78:	d207      	bcs.n	8102c8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8102c7a:	4b0c      	ldr	r3, [pc, #48]	; (8102cac <prvAddNewTaskToReadyList+0xdc>)
 8102c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102c80:	601a      	str	r2, [r3, #0]
 8102c82:	f3bf 8f4f 	dsb	sy
 8102c86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8102c8a:	bf00      	nop
 8102c8c:	3708      	adds	r7, #8
 8102c8e:	46bd      	mov	sp, r7
 8102c90:	bd80      	pop	{r7, pc}
 8102c92:	bf00      	nop
 8102c94:	10004910 	.word	0x10004910
 8102c98:	1000443c 	.word	0x1000443c
 8102c9c:	1000491c 	.word	0x1000491c
 8102ca0:	1000492c 	.word	0x1000492c
 8102ca4:	10004918 	.word	0x10004918
 8102ca8:	10004440 	.word	0x10004440
 8102cac:	e000ed04 	.word	0xe000ed04

08102cb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8102cb0:	b580      	push	{r7, lr}
 8102cb2:	b084      	sub	sp, #16
 8102cb4:	af00      	add	r7, sp, #0
 8102cb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8102cb8:	2300      	movs	r3, #0
 8102cba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8102cbc:	687b      	ldr	r3, [r7, #4]
 8102cbe:	2b00      	cmp	r3, #0
 8102cc0:	d017      	beq.n	8102cf2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8102cc2:	4b13      	ldr	r3, [pc, #76]	; (8102d10 <vTaskDelay+0x60>)
 8102cc4:	681b      	ldr	r3, [r3, #0]
 8102cc6:	2b00      	cmp	r3, #0
 8102cc8:	d00a      	beq.n	8102ce0 <vTaskDelay+0x30>
	__asm volatile
 8102cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102cce:	f383 8811 	msr	BASEPRI, r3
 8102cd2:	f3bf 8f6f 	isb	sy
 8102cd6:	f3bf 8f4f 	dsb	sy
 8102cda:	60bb      	str	r3, [r7, #8]
}
 8102cdc:	bf00      	nop
 8102cde:	e7fe      	b.n	8102cde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8102ce0:	f000 f88a 	bl	8102df8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8102ce4:	2100      	movs	r1, #0
 8102ce6:	6878      	ldr	r0, [r7, #4]
 8102ce8:	f000 fcfe 	bl	81036e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8102cec:	f000 f892 	bl	8102e14 <xTaskResumeAll>
 8102cf0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8102cf2:	68fb      	ldr	r3, [r7, #12]
 8102cf4:	2b00      	cmp	r3, #0
 8102cf6:	d107      	bne.n	8102d08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8102cf8:	4b06      	ldr	r3, [pc, #24]	; (8102d14 <vTaskDelay+0x64>)
 8102cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102cfe:	601a      	str	r2, [r3, #0]
 8102d00:	f3bf 8f4f 	dsb	sy
 8102d04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8102d08:	bf00      	nop
 8102d0a:	3710      	adds	r7, #16
 8102d0c:	46bd      	mov	sp, r7
 8102d0e:	bd80      	pop	{r7, pc}
 8102d10:	10004938 	.word	0x10004938
 8102d14:	e000ed04 	.word	0xe000ed04

08102d18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8102d18:	b580      	push	{r7, lr}
 8102d1a:	b08a      	sub	sp, #40	; 0x28
 8102d1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8102d1e:	2300      	movs	r3, #0
 8102d20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8102d22:	2300      	movs	r3, #0
 8102d24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8102d26:	463a      	mov	r2, r7
 8102d28:	1d39      	adds	r1, r7, #4
 8102d2a:	f107 0308 	add.w	r3, r7, #8
 8102d2e:	4618      	mov	r0, r3
 8102d30:	f7fe fbf6 	bl	8101520 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8102d34:	6839      	ldr	r1, [r7, #0]
 8102d36:	687b      	ldr	r3, [r7, #4]
 8102d38:	68ba      	ldr	r2, [r7, #8]
 8102d3a:	9202      	str	r2, [sp, #8]
 8102d3c:	9301      	str	r3, [sp, #4]
 8102d3e:	2300      	movs	r3, #0
 8102d40:	9300      	str	r3, [sp, #0]
 8102d42:	2300      	movs	r3, #0
 8102d44:	460a      	mov	r2, r1
 8102d46:	4924      	ldr	r1, [pc, #144]	; (8102dd8 <vTaskStartScheduler+0xc0>)
 8102d48:	4824      	ldr	r0, [pc, #144]	; (8102ddc <vTaskStartScheduler+0xc4>)
 8102d4a:	f7ff fdf9 	bl	8102940 <xTaskCreateStatic>
 8102d4e:	4603      	mov	r3, r0
 8102d50:	4a23      	ldr	r2, [pc, #140]	; (8102de0 <vTaskStartScheduler+0xc8>)
 8102d52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8102d54:	4b22      	ldr	r3, [pc, #136]	; (8102de0 <vTaskStartScheduler+0xc8>)
 8102d56:	681b      	ldr	r3, [r3, #0]
 8102d58:	2b00      	cmp	r3, #0
 8102d5a:	d002      	beq.n	8102d62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8102d5c:	2301      	movs	r3, #1
 8102d5e:	617b      	str	r3, [r7, #20]
 8102d60:	e001      	b.n	8102d66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8102d62:	2300      	movs	r3, #0
 8102d64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8102d66:	697b      	ldr	r3, [r7, #20]
 8102d68:	2b01      	cmp	r3, #1
 8102d6a:	d102      	bne.n	8102d72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8102d6c:	f000 fd10 	bl	8103790 <xTimerCreateTimerTask>
 8102d70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8102d72:	697b      	ldr	r3, [r7, #20]
 8102d74:	2b01      	cmp	r3, #1
 8102d76:	d11b      	bne.n	8102db0 <vTaskStartScheduler+0x98>
	__asm volatile
 8102d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102d7c:	f383 8811 	msr	BASEPRI, r3
 8102d80:	f3bf 8f6f 	isb	sy
 8102d84:	f3bf 8f4f 	dsb	sy
 8102d88:	613b      	str	r3, [r7, #16]
}
 8102d8a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8102d8c:	4b15      	ldr	r3, [pc, #84]	; (8102de4 <vTaskStartScheduler+0xcc>)
 8102d8e:	681b      	ldr	r3, [r3, #0]
 8102d90:	3354      	adds	r3, #84	; 0x54
 8102d92:	4a15      	ldr	r2, [pc, #84]	; (8102de8 <vTaskStartScheduler+0xd0>)
 8102d94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8102d96:	4b15      	ldr	r3, [pc, #84]	; (8102dec <vTaskStartScheduler+0xd4>)
 8102d98:	f04f 32ff 	mov.w	r2, #4294967295
 8102d9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8102d9e:	4b14      	ldr	r3, [pc, #80]	; (8102df0 <vTaskStartScheduler+0xd8>)
 8102da0:	2201      	movs	r2, #1
 8102da2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8102da4:	4b13      	ldr	r3, [pc, #76]	; (8102df4 <vTaskStartScheduler+0xdc>)
 8102da6:	2200      	movs	r2, #0
 8102da8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8102daa:	f7fe ff19 	bl	8101be0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8102dae:	e00e      	b.n	8102dce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8102db0:	697b      	ldr	r3, [r7, #20]
 8102db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102db6:	d10a      	bne.n	8102dce <vTaskStartScheduler+0xb6>
	__asm volatile
 8102db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102dbc:	f383 8811 	msr	BASEPRI, r3
 8102dc0:	f3bf 8f6f 	isb	sy
 8102dc4:	f3bf 8f4f 	dsb	sy
 8102dc8:	60fb      	str	r3, [r7, #12]
}
 8102dca:	bf00      	nop
 8102dcc:	e7fe      	b.n	8102dcc <vTaskStartScheduler+0xb4>
}
 8102dce:	bf00      	nop
 8102dd0:	3718      	adds	r7, #24
 8102dd2:	46bd      	mov	sp, r7
 8102dd4:	bd80      	pop	{r7, pc}
 8102dd6:	bf00      	nop
 8102dd8:	08104e68 	.word	0x08104e68
 8102ddc:	0810341d 	.word	0x0810341d
 8102de0:	10004934 	.word	0x10004934
 8102de4:	1000443c 	.word	0x1000443c
 8102de8:	10000014 	.word	0x10000014
 8102dec:	10004930 	.word	0x10004930
 8102df0:	1000491c 	.word	0x1000491c
 8102df4:	10004914 	.word	0x10004914

08102df8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8102df8:	b480      	push	{r7}
 8102dfa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8102dfc:	4b04      	ldr	r3, [pc, #16]	; (8102e10 <vTaskSuspendAll+0x18>)
 8102dfe:	681b      	ldr	r3, [r3, #0]
 8102e00:	3301      	adds	r3, #1
 8102e02:	4a03      	ldr	r2, [pc, #12]	; (8102e10 <vTaskSuspendAll+0x18>)
 8102e04:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8102e06:	bf00      	nop
 8102e08:	46bd      	mov	sp, r7
 8102e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e0e:	4770      	bx	lr
 8102e10:	10004938 	.word	0x10004938

08102e14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8102e14:	b580      	push	{r7, lr}
 8102e16:	b084      	sub	sp, #16
 8102e18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8102e1a:	2300      	movs	r3, #0
 8102e1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8102e1e:	2300      	movs	r3, #0
 8102e20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8102e22:	4b42      	ldr	r3, [pc, #264]	; (8102f2c <xTaskResumeAll+0x118>)
 8102e24:	681b      	ldr	r3, [r3, #0]
 8102e26:	2b00      	cmp	r3, #0
 8102e28:	d10a      	bne.n	8102e40 <xTaskResumeAll+0x2c>
	__asm volatile
 8102e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102e2e:	f383 8811 	msr	BASEPRI, r3
 8102e32:	f3bf 8f6f 	isb	sy
 8102e36:	f3bf 8f4f 	dsb	sy
 8102e3a:	603b      	str	r3, [r7, #0]
}
 8102e3c:	bf00      	nop
 8102e3e:	e7fe      	b.n	8102e3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8102e40:	f7fe ff70 	bl	8101d24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8102e44:	4b39      	ldr	r3, [pc, #228]	; (8102f2c <xTaskResumeAll+0x118>)
 8102e46:	681b      	ldr	r3, [r3, #0]
 8102e48:	3b01      	subs	r3, #1
 8102e4a:	4a38      	ldr	r2, [pc, #224]	; (8102f2c <xTaskResumeAll+0x118>)
 8102e4c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8102e4e:	4b37      	ldr	r3, [pc, #220]	; (8102f2c <xTaskResumeAll+0x118>)
 8102e50:	681b      	ldr	r3, [r3, #0]
 8102e52:	2b00      	cmp	r3, #0
 8102e54:	d162      	bne.n	8102f1c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8102e56:	4b36      	ldr	r3, [pc, #216]	; (8102f30 <xTaskResumeAll+0x11c>)
 8102e58:	681b      	ldr	r3, [r3, #0]
 8102e5a:	2b00      	cmp	r3, #0
 8102e5c:	d05e      	beq.n	8102f1c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8102e5e:	e02f      	b.n	8102ec0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8102e60:	4b34      	ldr	r3, [pc, #208]	; (8102f34 <xTaskResumeAll+0x120>)
 8102e62:	68db      	ldr	r3, [r3, #12]
 8102e64:	68db      	ldr	r3, [r3, #12]
 8102e66:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8102e68:	68fb      	ldr	r3, [r7, #12]
 8102e6a:	3318      	adds	r3, #24
 8102e6c:	4618      	mov	r0, r3
 8102e6e:	f7fe fdff 	bl	8101a70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8102e72:	68fb      	ldr	r3, [r7, #12]
 8102e74:	3304      	adds	r3, #4
 8102e76:	4618      	mov	r0, r3
 8102e78:	f7fe fdfa 	bl	8101a70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8102e7c:	68fb      	ldr	r3, [r7, #12]
 8102e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102e80:	4b2d      	ldr	r3, [pc, #180]	; (8102f38 <xTaskResumeAll+0x124>)
 8102e82:	681b      	ldr	r3, [r3, #0]
 8102e84:	429a      	cmp	r2, r3
 8102e86:	d903      	bls.n	8102e90 <xTaskResumeAll+0x7c>
 8102e88:	68fb      	ldr	r3, [r7, #12]
 8102e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102e8c:	4a2a      	ldr	r2, [pc, #168]	; (8102f38 <xTaskResumeAll+0x124>)
 8102e8e:	6013      	str	r3, [r2, #0]
 8102e90:	68fb      	ldr	r3, [r7, #12]
 8102e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102e94:	4613      	mov	r3, r2
 8102e96:	009b      	lsls	r3, r3, #2
 8102e98:	4413      	add	r3, r2
 8102e9a:	009b      	lsls	r3, r3, #2
 8102e9c:	4a27      	ldr	r2, [pc, #156]	; (8102f3c <xTaskResumeAll+0x128>)
 8102e9e:	441a      	add	r2, r3
 8102ea0:	68fb      	ldr	r3, [r7, #12]
 8102ea2:	3304      	adds	r3, #4
 8102ea4:	4619      	mov	r1, r3
 8102ea6:	4610      	mov	r0, r2
 8102ea8:	f7fe fd85 	bl	81019b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8102eac:	68fb      	ldr	r3, [r7, #12]
 8102eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102eb0:	4b23      	ldr	r3, [pc, #140]	; (8102f40 <xTaskResumeAll+0x12c>)
 8102eb2:	681b      	ldr	r3, [r3, #0]
 8102eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102eb6:	429a      	cmp	r2, r3
 8102eb8:	d302      	bcc.n	8102ec0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8102eba:	4b22      	ldr	r3, [pc, #136]	; (8102f44 <xTaskResumeAll+0x130>)
 8102ebc:	2201      	movs	r2, #1
 8102ebe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8102ec0:	4b1c      	ldr	r3, [pc, #112]	; (8102f34 <xTaskResumeAll+0x120>)
 8102ec2:	681b      	ldr	r3, [r3, #0]
 8102ec4:	2b00      	cmp	r3, #0
 8102ec6:	d1cb      	bne.n	8102e60 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8102ec8:	68fb      	ldr	r3, [r7, #12]
 8102eca:	2b00      	cmp	r3, #0
 8102ecc:	d001      	beq.n	8102ed2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8102ece:	f000 fb5f 	bl	8103590 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8102ed2:	4b1d      	ldr	r3, [pc, #116]	; (8102f48 <xTaskResumeAll+0x134>)
 8102ed4:	681b      	ldr	r3, [r3, #0]
 8102ed6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8102ed8:	687b      	ldr	r3, [r7, #4]
 8102eda:	2b00      	cmp	r3, #0
 8102edc:	d010      	beq.n	8102f00 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8102ede:	f000 f847 	bl	8102f70 <xTaskIncrementTick>
 8102ee2:	4603      	mov	r3, r0
 8102ee4:	2b00      	cmp	r3, #0
 8102ee6:	d002      	beq.n	8102eee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8102ee8:	4b16      	ldr	r3, [pc, #88]	; (8102f44 <xTaskResumeAll+0x130>)
 8102eea:	2201      	movs	r2, #1
 8102eec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8102eee:	687b      	ldr	r3, [r7, #4]
 8102ef0:	3b01      	subs	r3, #1
 8102ef2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8102ef4:	687b      	ldr	r3, [r7, #4]
 8102ef6:	2b00      	cmp	r3, #0
 8102ef8:	d1f1      	bne.n	8102ede <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8102efa:	4b13      	ldr	r3, [pc, #76]	; (8102f48 <xTaskResumeAll+0x134>)
 8102efc:	2200      	movs	r2, #0
 8102efe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8102f00:	4b10      	ldr	r3, [pc, #64]	; (8102f44 <xTaskResumeAll+0x130>)
 8102f02:	681b      	ldr	r3, [r3, #0]
 8102f04:	2b00      	cmp	r3, #0
 8102f06:	d009      	beq.n	8102f1c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8102f08:	2301      	movs	r3, #1
 8102f0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8102f0c:	4b0f      	ldr	r3, [pc, #60]	; (8102f4c <xTaskResumeAll+0x138>)
 8102f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102f12:	601a      	str	r2, [r3, #0]
 8102f14:	f3bf 8f4f 	dsb	sy
 8102f18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8102f1c:	f7fe ff32 	bl	8101d84 <vPortExitCritical>

	return xAlreadyYielded;
 8102f20:	68bb      	ldr	r3, [r7, #8]
}
 8102f22:	4618      	mov	r0, r3
 8102f24:	3710      	adds	r7, #16
 8102f26:	46bd      	mov	sp, r7
 8102f28:	bd80      	pop	{r7, pc}
 8102f2a:	bf00      	nop
 8102f2c:	10004938 	.word	0x10004938
 8102f30:	10004910 	.word	0x10004910
 8102f34:	100048d0 	.word	0x100048d0
 8102f38:	10004918 	.word	0x10004918
 8102f3c:	10004440 	.word	0x10004440
 8102f40:	1000443c 	.word	0x1000443c
 8102f44:	10004924 	.word	0x10004924
 8102f48:	10004920 	.word	0x10004920
 8102f4c:	e000ed04 	.word	0xe000ed04

08102f50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8102f50:	b480      	push	{r7}
 8102f52:	b083      	sub	sp, #12
 8102f54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8102f56:	4b05      	ldr	r3, [pc, #20]	; (8102f6c <xTaskGetTickCount+0x1c>)
 8102f58:	681b      	ldr	r3, [r3, #0]
 8102f5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8102f5c:	687b      	ldr	r3, [r7, #4]
}
 8102f5e:	4618      	mov	r0, r3
 8102f60:	370c      	adds	r7, #12
 8102f62:	46bd      	mov	sp, r7
 8102f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f68:	4770      	bx	lr
 8102f6a:	bf00      	nop
 8102f6c:	10004914 	.word	0x10004914

08102f70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8102f70:	b580      	push	{r7, lr}
 8102f72:	b086      	sub	sp, #24
 8102f74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8102f76:	2300      	movs	r3, #0
 8102f78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8102f7a:	4b4f      	ldr	r3, [pc, #316]	; (81030b8 <xTaskIncrementTick+0x148>)
 8102f7c:	681b      	ldr	r3, [r3, #0]
 8102f7e:	2b00      	cmp	r3, #0
 8102f80:	f040 808f 	bne.w	81030a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8102f84:	4b4d      	ldr	r3, [pc, #308]	; (81030bc <xTaskIncrementTick+0x14c>)
 8102f86:	681b      	ldr	r3, [r3, #0]
 8102f88:	3301      	adds	r3, #1
 8102f8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8102f8c:	4a4b      	ldr	r2, [pc, #300]	; (81030bc <xTaskIncrementTick+0x14c>)
 8102f8e:	693b      	ldr	r3, [r7, #16]
 8102f90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8102f92:	693b      	ldr	r3, [r7, #16]
 8102f94:	2b00      	cmp	r3, #0
 8102f96:	d120      	bne.n	8102fda <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8102f98:	4b49      	ldr	r3, [pc, #292]	; (81030c0 <xTaskIncrementTick+0x150>)
 8102f9a:	681b      	ldr	r3, [r3, #0]
 8102f9c:	681b      	ldr	r3, [r3, #0]
 8102f9e:	2b00      	cmp	r3, #0
 8102fa0:	d00a      	beq.n	8102fb8 <xTaskIncrementTick+0x48>
	__asm volatile
 8102fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102fa6:	f383 8811 	msr	BASEPRI, r3
 8102faa:	f3bf 8f6f 	isb	sy
 8102fae:	f3bf 8f4f 	dsb	sy
 8102fb2:	603b      	str	r3, [r7, #0]
}
 8102fb4:	bf00      	nop
 8102fb6:	e7fe      	b.n	8102fb6 <xTaskIncrementTick+0x46>
 8102fb8:	4b41      	ldr	r3, [pc, #260]	; (81030c0 <xTaskIncrementTick+0x150>)
 8102fba:	681b      	ldr	r3, [r3, #0]
 8102fbc:	60fb      	str	r3, [r7, #12]
 8102fbe:	4b41      	ldr	r3, [pc, #260]	; (81030c4 <xTaskIncrementTick+0x154>)
 8102fc0:	681b      	ldr	r3, [r3, #0]
 8102fc2:	4a3f      	ldr	r2, [pc, #252]	; (81030c0 <xTaskIncrementTick+0x150>)
 8102fc4:	6013      	str	r3, [r2, #0]
 8102fc6:	4a3f      	ldr	r2, [pc, #252]	; (81030c4 <xTaskIncrementTick+0x154>)
 8102fc8:	68fb      	ldr	r3, [r7, #12]
 8102fca:	6013      	str	r3, [r2, #0]
 8102fcc:	4b3e      	ldr	r3, [pc, #248]	; (81030c8 <xTaskIncrementTick+0x158>)
 8102fce:	681b      	ldr	r3, [r3, #0]
 8102fd0:	3301      	adds	r3, #1
 8102fd2:	4a3d      	ldr	r2, [pc, #244]	; (81030c8 <xTaskIncrementTick+0x158>)
 8102fd4:	6013      	str	r3, [r2, #0]
 8102fd6:	f000 fadb 	bl	8103590 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8102fda:	4b3c      	ldr	r3, [pc, #240]	; (81030cc <xTaskIncrementTick+0x15c>)
 8102fdc:	681b      	ldr	r3, [r3, #0]
 8102fde:	693a      	ldr	r2, [r7, #16]
 8102fe0:	429a      	cmp	r2, r3
 8102fe2:	d349      	bcc.n	8103078 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8102fe4:	4b36      	ldr	r3, [pc, #216]	; (81030c0 <xTaskIncrementTick+0x150>)
 8102fe6:	681b      	ldr	r3, [r3, #0]
 8102fe8:	681b      	ldr	r3, [r3, #0]
 8102fea:	2b00      	cmp	r3, #0
 8102fec:	d104      	bne.n	8102ff8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8102fee:	4b37      	ldr	r3, [pc, #220]	; (81030cc <xTaskIncrementTick+0x15c>)
 8102ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8102ff4:	601a      	str	r2, [r3, #0]
					break;
 8102ff6:	e03f      	b.n	8103078 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8102ff8:	4b31      	ldr	r3, [pc, #196]	; (81030c0 <xTaskIncrementTick+0x150>)
 8102ffa:	681b      	ldr	r3, [r3, #0]
 8102ffc:	68db      	ldr	r3, [r3, #12]
 8102ffe:	68db      	ldr	r3, [r3, #12]
 8103000:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8103002:	68bb      	ldr	r3, [r7, #8]
 8103004:	685b      	ldr	r3, [r3, #4]
 8103006:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8103008:	693a      	ldr	r2, [r7, #16]
 810300a:	687b      	ldr	r3, [r7, #4]
 810300c:	429a      	cmp	r2, r3
 810300e:	d203      	bcs.n	8103018 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8103010:	4a2e      	ldr	r2, [pc, #184]	; (81030cc <xTaskIncrementTick+0x15c>)
 8103012:	687b      	ldr	r3, [r7, #4]
 8103014:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8103016:	e02f      	b.n	8103078 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8103018:	68bb      	ldr	r3, [r7, #8]
 810301a:	3304      	adds	r3, #4
 810301c:	4618      	mov	r0, r3
 810301e:	f7fe fd27 	bl	8101a70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8103022:	68bb      	ldr	r3, [r7, #8]
 8103024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103026:	2b00      	cmp	r3, #0
 8103028:	d004      	beq.n	8103034 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810302a:	68bb      	ldr	r3, [r7, #8]
 810302c:	3318      	adds	r3, #24
 810302e:	4618      	mov	r0, r3
 8103030:	f7fe fd1e 	bl	8101a70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8103034:	68bb      	ldr	r3, [r7, #8]
 8103036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103038:	4b25      	ldr	r3, [pc, #148]	; (81030d0 <xTaskIncrementTick+0x160>)
 810303a:	681b      	ldr	r3, [r3, #0]
 810303c:	429a      	cmp	r2, r3
 810303e:	d903      	bls.n	8103048 <xTaskIncrementTick+0xd8>
 8103040:	68bb      	ldr	r3, [r7, #8]
 8103042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103044:	4a22      	ldr	r2, [pc, #136]	; (81030d0 <xTaskIncrementTick+0x160>)
 8103046:	6013      	str	r3, [r2, #0]
 8103048:	68bb      	ldr	r3, [r7, #8]
 810304a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810304c:	4613      	mov	r3, r2
 810304e:	009b      	lsls	r3, r3, #2
 8103050:	4413      	add	r3, r2
 8103052:	009b      	lsls	r3, r3, #2
 8103054:	4a1f      	ldr	r2, [pc, #124]	; (81030d4 <xTaskIncrementTick+0x164>)
 8103056:	441a      	add	r2, r3
 8103058:	68bb      	ldr	r3, [r7, #8]
 810305a:	3304      	adds	r3, #4
 810305c:	4619      	mov	r1, r3
 810305e:	4610      	mov	r0, r2
 8103060:	f7fe fca9 	bl	81019b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8103064:	68bb      	ldr	r3, [r7, #8]
 8103066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103068:	4b1b      	ldr	r3, [pc, #108]	; (81030d8 <xTaskIncrementTick+0x168>)
 810306a:	681b      	ldr	r3, [r3, #0]
 810306c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810306e:	429a      	cmp	r2, r3
 8103070:	d3b8      	bcc.n	8102fe4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8103072:	2301      	movs	r3, #1
 8103074:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8103076:	e7b5      	b.n	8102fe4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8103078:	4b17      	ldr	r3, [pc, #92]	; (81030d8 <xTaskIncrementTick+0x168>)
 810307a:	681b      	ldr	r3, [r3, #0]
 810307c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810307e:	4915      	ldr	r1, [pc, #84]	; (81030d4 <xTaskIncrementTick+0x164>)
 8103080:	4613      	mov	r3, r2
 8103082:	009b      	lsls	r3, r3, #2
 8103084:	4413      	add	r3, r2
 8103086:	009b      	lsls	r3, r3, #2
 8103088:	440b      	add	r3, r1
 810308a:	681b      	ldr	r3, [r3, #0]
 810308c:	2b01      	cmp	r3, #1
 810308e:	d901      	bls.n	8103094 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8103090:	2301      	movs	r3, #1
 8103092:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8103094:	4b11      	ldr	r3, [pc, #68]	; (81030dc <xTaskIncrementTick+0x16c>)
 8103096:	681b      	ldr	r3, [r3, #0]
 8103098:	2b00      	cmp	r3, #0
 810309a:	d007      	beq.n	81030ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 810309c:	2301      	movs	r3, #1
 810309e:	617b      	str	r3, [r7, #20]
 81030a0:	e004      	b.n	81030ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 81030a2:	4b0f      	ldr	r3, [pc, #60]	; (81030e0 <xTaskIncrementTick+0x170>)
 81030a4:	681b      	ldr	r3, [r3, #0]
 81030a6:	3301      	adds	r3, #1
 81030a8:	4a0d      	ldr	r2, [pc, #52]	; (81030e0 <xTaskIncrementTick+0x170>)
 81030aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 81030ac:	697b      	ldr	r3, [r7, #20]
}
 81030ae:	4618      	mov	r0, r3
 81030b0:	3718      	adds	r7, #24
 81030b2:	46bd      	mov	sp, r7
 81030b4:	bd80      	pop	{r7, pc}
 81030b6:	bf00      	nop
 81030b8:	10004938 	.word	0x10004938
 81030bc:	10004914 	.word	0x10004914
 81030c0:	100048c8 	.word	0x100048c8
 81030c4:	100048cc 	.word	0x100048cc
 81030c8:	10004928 	.word	0x10004928
 81030cc:	10004930 	.word	0x10004930
 81030d0:	10004918 	.word	0x10004918
 81030d4:	10004440 	.word	0x10004440
 81030d8:	1000443c 	.word	0x1000443c
 81030dc:	10004924 	.word	0x10004924
 81030e0:	10004920 	.word	0x10004920

081030e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 81030e4:	b480      	push	{r7}
 81030e6:	b085      	sub	sp, #20
 81030e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 81030ea:	4b2a      	ldr	r3, [pc, #168]	; (8103194 <vTaskSwitchContext+0xb0>)
 81030ec:	681b      	ldr	r3, [r3, #0]
 81030ee:	2b00      	cmp	r3, #0
 81030f0:	d003      	beq.n	81030fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 81030f2:	4b29      	ldr	r3, [pc, #164]	; (8103198 <vTaskSwitchContext+0xb4>)
 81030f4:	2201      	movs	r2, #1
 81030f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 81030f8:	e046      	b.n	8103188 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 81030fa:	4b27      	ldr	r3, [pc, #156]	; (8103198 <vTaskSwitchContext+0xb4>)
 81030fc:	2200      	movs	r2, #0
 81030fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8103100:	4b26      	ldr	r3, [pc, #152]	; (810319c <vTaskSwitchContext+0xb8>)
 8103102:	681b      	ldr	r3, [r3, #0]
 8103104:	60fb      	str	r3, [r7, #12]
 8103106:	e010      	b.n	810312a <vTaskSwitchContext+0x46>
 8103108:	68fb      	ldr	r3, [r7, #12]
 810310a:	2b00      	cmp	r3, #0
 810310c:	d10a      	bne.n	8103124 <vTaskSwitchContext+0x40>
	__asm volatile
 810310e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103112:	f383 8811 	msr	BASEPRI, r3
 8103116:	f3bf 8f6f 	isb	sy
 810311a:	f3bf 8f4f 	dsb	sy
 810311e:	607b      	str	r3, [r7, #4]
}
 8103120:	bf00      	nop
 8103122:	e7fe      	b.n	8103122 <vTaskSwitchContext+0x3e>
 8103124:	68fb      	ldr	r3, [r7, #12]
 8103126:	3b01      	subs	r3, #1
 8103128:	60fb      	str	r3, [r7, #12]
 810312a:	491d      	ldr	r1, [pc, #116]	; (81031a0 <vTaskSwitchContext+0xbc>)
 810312c:	68fa      	ldr	r2, [r7, #12]
 810312e:	4613      	mov	r3, r2
 8103130:	009b      	lsls	r3, r3, #2
 8103132:	4413      	add	r3, r2
 8103134:	009b      	lsls	r3, r3, #2
 8103136:	440b      	add	r3, r1
 8103138:	681b      	ldr	r3, [r3, #0]
 810313a:	2b00      	cmp	r3, #0
 810313c:	d0e4      	beq.n	8103108 <vTaskSwitchContext+0x24>
 810313e:	68fa      	ldr	r2, [r7, #12]
 8103140:	4613      	mov	r3, r2
 8103142:	009b      	lsls	r3, r3, #2
 8103144:	4413      	add	r3, r2
 8103146:	009b      	lsls	r3, r3, #2
 8103148:	4a15      	ldr	r2, [pc, #84]	; (81031a0 <vTaskSwitchContext+0xbc>)
 810314a:	4413      	add	r3, r2
 810314c:	60bb      	str	r3, [r7, #8]
 810314e:	68bb      	ldr	r3, [r7, #8]
 8103150:	685b      	ldr	r3, [r3, #4]
 8103152:	685a      	ldr	r2, [r3, #4]
 8103154:	68bb      	ldr	r3, [r7, #8]
 8103156:	605a      	str	r2, [r3, #4]
 8103158:	68bb      	ldr	r3, [r7, #8]
 810315a:	685a      	ldr	r2, [r3, #4]
 810315c:	68bb      	ldr	r3, [r7, #8]
 810315e:	3308      	adds	r3, #8
 8103160:	429a      	cmp	r2, r3
 8103162:	d104      	bne.n	810316e <vTaskSwitchContext+0x8a>
 8103164:	68bb      	ldr	r3, [r7, #8]
 8103166:	685b      	ldr	r3, [r3, #4]
 8103168:	685a      	ldr	r2, [r3, #4]
 810316a:	68bb      	ldr	r3, [r7, #8]
 810316c:	605a      	str	r2, [r3, #4]
 810316e:	68bb      	ldr	r3, [r7, #8]
 8103170:	685b      	ldr	r3, [r3, #4]
 8103172:	68db      	ldr	r3, [r3, #12]
 8103174:	4a0b      	ldr	r2, [pc, #44]	; (81031a4 <vTaskSwitchContext+0xc0>)
 8103176:	6013      	str	r3, [r2, #0]
 8103178:	4a08      	ldr	r2, [pc, #32]	; (810319c <vTaskSwitchContext+0xb8>)
 810317a:	68fb      	ldr	r3, [r7, #12]
 810317c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810317e:	4b09      	ldr	r3, [pc, #36]	; (81031a4 <vTaskSwitchContext+0xc0>)
 8103180:	681b      	ldr	r3, [r3, #0]
 8103182:	3354      	adds	r3, #84	; 0x54
 8103184:	4a08      	ldr	r2, [pc, #32]	; (81031a8 <vTaskSwitchContext+0xc4>)
 8103186:	6013      	str	r3, [r2, #0]
}
 8103188:	bf00      	nop
 810318a:	3714      	adds	r7, #20
 810318c:	46bd      	mov	sp, r7
 810318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103192:	4770      	bx	lr
 8103194:	10004938 	.word	0x10004938
 8103198:	10004924 	.word	0x10004924
 810319c:	10004918 	.word	0x10004918
 81031a0:	10004440 	.word	0x10004440
 81031a4:	1000443c 	.word	0x1000443c
 81031a8:	10000014 	.word	0x10000014

081031ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 81031ac:	b580      	push	{r7, lr}
 81031ae:	b084      	sub	sp, #16
 81031b0:	af00      	add	r7, sp, #0
 81031b2:	6078      	str	r0, [r7, #4]
 81031b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 81031b6:	687b      	ldr	r3, [r7, #4]
 81031b8:	2b00      	cmp	r3, #0
 81031ba:	d10a      	bne.n	81031d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 81031bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 81031c0:	f383 8811 	msr	BASEPRI, r3
 81031c4:	f3bf 8f6f 	isb	sy
 81031c8:	f3bf 8f4f 	dsb	sy
 81031cc:	60fb      	str	r3, [r7, #12]
}
 81031ce:	bf00      	nop
 81031d0:	e7fe      	b.n	81031d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 81031d2:	4b07      	ldr	r3, [pc, #28]	; (81031f0 <vTaskPlaceOnEventList+0x44>)
 81031d4:	681b      	ldr	r3, [r3, #0]
 81031d6:	3318      	adds	r3, #24
 81031d8:	4619      	mov	r1, r3
 81031da:	6878      	ldr	r0, [r7, #4]
 81031dc:	f7fe fc0f 	bl	81019fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 81031e0:	2101      	movs	r1, #1
 81031e2:	6838      	ldr	r0, [r7, #0]
 81031e4:	f000 fa80 	bl	81036e8 <prvAddCurrentTaskToDelayedList>
}
 81031e8:	bf00      	nop
 81031ea:	3710      	adds	r7, #16
 81031ec:	46bd      	mov	sp, r7
 81031ee:	bd80      	pop	{r7, pc}
 81031f0:	1000443c 	.word	0x1000443c

081031f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 81031f4:	b580      	push	{r7, lr}
 81031f6:	b086      	sub	sp, #24
 81031f8:	af00      	add	r7, sp, #0
 81031fa:	60f8      	str	r0, [r7, #12]
 81031fc:	60b9      	str	r1, [r7, #8]
 81031fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8103200:	68fb      	ldr	r3, [r7, #12]
 8103202:	2b00      	cmp	r3, #0
 8103204:	d10a      	bne.n	810321c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8103206:	f04f 0350 	mov.w	r3, #80	; 0x50
 810320a:	f383 8811 	msr	BASEPRI, r3
 810320e:	f3bf 8f6f 	isb	sy
 8103212:	f3bf 8f4f 	dsb	sy
 8103216:	617b      	str	r3, [r7, #20]
}
 8103218:	bf00      	nop
 810321a:	e7fe      	b.n	810321a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810321c:	4b0a      	ldr	r3, [pc, #40]	; (8103248 <vTaskPlaceOnEventListRestricted+0x54>)
 810321e:	681b      	ldr	r3, [r3, #0]
 8103220:	3318      	adds	r3, #24
 8103222:	4619      	mov	r1, r3
 8103224:	68f8      	ldr	r0, [r7, #12]
 8103226:	f7fe fbc6 	bl	81019b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 810322a:	687b      	ldr	r3, [r7, #4]
 810322c:	2b00      	cmp	r3, #0
 810322e:	d002      	beq.n	8103236 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8103230:	f04f 33ff 	mov.w	r3, #4294967295
 8103234:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8103236:	6879      	ldr	r1, [r7, #4]
 8103238:	68b8      	ldr	r0, [r7, #8]
 810323a:	f000 fa55 	bl	81036e8 <prvAddCurrentTaskToDelayedList>
	}
 810323e:	bf00      	nop
 8103240:	3718      	adds	r7, #24
 8103242:	46bd      	mov	sp, r7
 8103244:	bd80      	pop	{r7, pc}
 8103246:	bf00      	nop
 8103248:	1000443c 	.word	0x1000443c

0810324c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810324c:	b580      	push	{r7, lr}
 810324e:	b086      	sub	sp, #24
 8103250:	af00      	add	r7, sp, #0
 8103252:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8103254:	687b      	ldr	r3, [r7, #4]
 8103256:	68db      	ldr	r3, [r3, #12]
 8103258:	68db      	ldr	r3, [r3, #12]
 810325a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810325c:	693b      	ldr	r3, [r7, #16]
 810325e:	2b00      	cmp	r3, #0
 8103260:	d10a      	bne.n	8103278 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8103262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103266:	f383 8811 	msr	BASEPRI, r3
 810326a:	f3bf 8f6f 	isb	sy
 810326e:	f3bf 8f4f 	dsb	sy
 8103272:	60fb      	str	r3, [r7, #12]
}
 8103274:	bf00      	nop
 8103276:	e7fe      	b.n	8103276 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8103278:	693b      	ldr	r3, [r7, #16]
 810327a:	3318      	adds	r3, #24
 810327c:	4618      	mov	r0, r3
 810327e:	f7fe fbf7 	bl	8101a70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8103282:	4b1e      	ldr	r3, [pc, #120]	; (81032fc <xTaskRemoveFromEventList+0xb0>)
 8103284:	681b      	ldr	r3, [r3, #0]
 8103286:	2b00      	cmp	r3, #0
 8103288:	d11d      	bne.n	81032c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 810328a:	693b      	ldr	r3, [r7, #16]
 810328c:	3304      	adds	r3, #4
 810328e:	4618      	mov	r0, r3
 8103290:	f7fe fbee 	bl	8101a70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8103294:	693b      	ldr	r3, [r7, #16]
 8103296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103298:	4b19      	ldr	r3, [pc, #100]	; (8103300 <xTaskRemoveFromEventList+0xb4>)
 810329a:	681b      	ldr	r3, [r3, #0]
 810329c:	429a      	cmp	r2, r3
 810329e:	d903      	bls.n	81032a8 <xTaskRemoveFromEventList+0x5c>
 81032a0:	693b      	ldr	r3, [r7, #16]
 81032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81032a4:	4a16      	ldr	r2, [pc, #88]	; (8103300 <xTaskRemoveFromEventList+0xb4>)
 81032a6:	6013      	str	r3, [r2, #0]
 81032a8:	693b      	ldr	r3, [r7, #16]
 81032aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81032ac:	4613      	mov	r3, r2
 81032ae:	009b      	lsls	r3, r3, #2
 81032b0:	4413      	add	r3, r2
 81032b2:	009b      	lsls	r3, r3, #2
 81032b4:	4a13      	ldr	r2, [pc, #76]	; (8103304 <xTaskRemoveFromEventList+0xb8>)
 81032b6:	441a      	add	r2, r3
 81032b8:	693b      	ldr	r3, [r7, #16]
 81032ba:	3304      	adds	r3, #4
 81032bc:	4619      	mov	r1, r3
 81032be:	4610      	mov	r0, r2
 81032c0:	f7fe fb79 	bl	81019b6 <vListInsertEnd>
 81032c4:	e005      	b.n	81032d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 81032c6:	693b      	ldr	r3, [r7, #16]
 81032c8:	3318      	adds	r3, #24
 81032ca:	4619      	mov	r1, r3
 81032cc:	480e      	ldr	r0, [pc, #56]	; (8103308 <xTaskRemoveFromEventList+0xbc>)
 81032ce:	f7fe fb72 	bl	81019b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 81032d2:	693b      	ldr	r3, [r7, #16]
 81032d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81032d6:	4b0d      	ldr	r3, [pc, #52]	; (810330c <xTaskRemoveFromEventList+0xc0>)
 81032d8:	681b      	ldr	r3, [r3, #0]
 81032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81032dc:	429a      	cmp	r2, r3
 81032de:	d905      	bls.n	81032ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 81032e0:	2301      	movs	r3, #1
 81032e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 81032e4:	4b0a      	ldr	r3, [pc, #40]	; (8103310 <xTaskRemoveFromEventList+0xc4>)
 81032e6:	2201      	movs	r2, #1
 81032e8:	601a      	str	r2, [r3, #0]
 81032ea:	e001      	b.n	81032f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 81032ec:	2300      	movs	r3, #0
 81032ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 81032f0:	697b      	ldr	r3, [r7, #20]
}
 81032f2:	4618      	mov	r0, r3
 81032f4:	3718      	adds	r7, #24
 81032f6:	46bd      	mov	sp, r7
 81032f8:	bd80      	pop	{r7, pc}
 81032fa:	bf00      	nop
 81032fc:	10004938 	.word	0x10004938
 8103300:	10004918 	.word	0x10004918
 8103304:	10004440 	.word	0x10004440
 8103308:	100048d0 	.word	0x100048d0
 810330c:	1000443c 	.word	0x1000443c
 8103310:	10004924 	.word	0x10004924

08103314 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8103314:	b480      	push	{r7}
 8103316:	b083      	sub	sp, #12
 8103318:	af00      	add	r7, sp, #0
 810331a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 810331c:	4b06      	ldr	r3, [pc, #24]	; (8103338 <vTaskInternalSetTimeOutState+0x24>)
 810331e:	681a      	ldr	r2, [r3, #0]
 8103320:	687b      	ldr	r3, [r7, #4]
 8103322:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8103324:	4b05      	ldr	r3, [pc, #20]	; (810333c <vTaskInternalSetTimeOutState+0x28>)
 8103326:	681a      	ldr	r2, [r3, #0]
 8103328:	687b      	ldr	r3, [r7, #4]
 810332a:	605a      	str	r2, [r3, #4]
}
 810332c:	bf00      	nop
 810332e:	370c      	adds	r7, #12
 8103330:	46bd      	mov	sp, r7
 8103332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103336:	4770      	bx	lr
 8103338:	10004928 	.word	0x10004928
 810333c:	10004914 	.word	0x10004914

08103340 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8103340:	b580      	push	{r7, lr}
 8103342:	b088      	sub	sp, #32
 8103344:	af00      	add	r7, sp, #0
 8103346:	6078      	str	r0, [r7, #4]
 8103348:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 810334a:	687b      	ldr	r3, [r7, #4]
 810334c:	2b00      	cmp	r3, #0
 810334e:	d10a      	bne.n	8103366 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8103350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103354:	f383 8811 	msr	BASEPRI, r3
 8103358:	f3bf 8f6f 	isb	sy
 810335c:	f3bf 8f4f 	dsb	sy
 8103360:	613b      	str	r3, [r7, #16]
}
 8103362:	bf00      	nop
 8103364:	e7fe      	b.n	8103364 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8103366:	683b      	ldr	r3, [r7, #0]
 8103368:	2b00      	cmp	r3, #0
 810336a:	d10a      	bne.n	8103382 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 810336c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103370:	f383 8811 	msr	BASEPRI, r3
 8103374:	f3bf 8f6f 	isb	sy
 8103378:	f3bf 8f4f 	dsb	sy
 810337c:	60fb      	str	r3, [r7, #12]
}
 810337e:	bf00      	nop
 8103380:	e7fe      	b.n	8103380 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8103382:	f7fe fccf 	bl	8101d24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8103386:	4b1d      	ldr	r3, [pc, #116]	; (81033fc <xTaskCheckForTimeOut+0xbc>)
 8103388:	681b      	ldr	r3, [r3, #0]
 810338a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810338c:	687b      	ldr	r3, [r7, #4]
 810338e:	685b      	ldr	r3, [r3, #4]
 8103390:	69ba      	ldr	r2, [r7, #24]
 8103392:	1ad3      	subs	r3, r2, r3
 8103394:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8103396:	683b      	ldr	r3, [r7, #0]
 8103398:	681b      	ldr	r3, [r3, #0]
 810339a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810339e:	d102      	bne.n	81033a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 81033a0:	2300      	movs	r3, #0
 81033a2:	61fb      	str	r3, [r7, #28]
 81033a4:	e023      	b.n	81033ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 81033a6:	687b      	ldr	r3, [r7, #4]
 81033a8:	681a      	ldr	r2, [r3, #0]
 81033aa:	4b15      	ldr	r3, [pc, #84]	; (8103400 <xTaskCheckForTimeOut+0xc0>)
 81033ac:	681b      	ldr	r3, [r3, #0]
 81033ae:	429a      	cmp	r2, r3
 81033b0:	d007      	beq.n	81033c2 <xTaskCheckForTimeOut+0x82>
 81033b2:	687b      	ldr	r3, [r7, #4]
 81033b4:	685b      	ldr	r3, [r3, #4]
 81033b6:	69ba      	ldr	r2, [r7, #24]
 81033b8:	429a      	cmp	r2, r3
 81033ba:	d302      	bcc.n	81033c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 81033bc:	2301      	movs	r3, #1
 81033be:	61fb      	str	r3, [r7, #28]
 81033c0:	e015      	b.n	81033ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 81033c2:	683b      	ldr	r3, [r7, #0]
 81033c4:	681b      	ldr	r3, [r3, #0]
 81033c6:	697a      	ldr	r2, [r7, #20]
 81033c8:	429a      	cmp	r2, r3
 81033ca:	d20b      	bcs.n	81033e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 81033cc:	683b      	ldr	r3, [r7, #0]
 81033ce:	681a      	ldr	r2, [r3, #0]
 81033d0:	697b      	ldr	r3, [r7, #20]
 81033d2:	1ad2      	subs	r2, r2, r3
 81033d4:	683b      	ldr	r3, [r7, #0]
 81033d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 81033d8:	6878      	ldr	r0, [r7, #4]
 81033da:	f7ff ff9b 	bl	8103314 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 81033de:	2300      	movs	r3, #0
 81033e0:	61fb      	str	r3, [r7, #28]
 81033e2:	e004      	b.n	81033ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 81033e4:	683b      	ldr	r3, [r7, #0]
 81033e6:	2200      	movs	r2, #0
 81033e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 81033ea:	2301      	movs	r3, #1
 81033ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 81033ee:	f7fe fcc9 	bl	8101d84 <vPortExitCritical>

	return xReturn;
 81033f2:	69fb      	ldr	r3, [r7, #28]
}
 81033f4:	4618      	mov	r0, r3
 81033f6:	3720      	adds	r7, #32
 81033f8:	46bd      	mov	sp, r7
 81033fa:	bd80      	pop	{r7, pc}
 81033fc:	10004914 	.word	0x10004914
 8103400:	10004928 	.word	0x10004928

08103404 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8103404:	b480      	push	{r7}
 8103406:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8103408:	4b03      	ldr	r3, [pc, #12]	; (8103418 <vTaskMissedYield+0x14>)
 810340a:	2201      	movs	r2, #1
 810340c:	601a      	str	r2, [r3, #0]
}
 810340e:	bf00      	nop
 8103410:	46bd      	mov	sp, r7
 8103412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103416:	4770      	bx	lr
 8103418:	10004924 	.word	0x10004924

0810341c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 810341c:	b580      	push	{r7, lr}
 810341e:	b082      	sub	sp, #8
 8103420:	af00      	add	r7, sp, #0
 8103422:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8103424:	f000 f852 	bl	81034cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8103428:	4b06      	ldr	r3, [pc, #24]	; (8103444 <prvIdleTask+0x28>)
 810342a:	681b      	ldr	r3, [r3, #0]
 810342c:	2b01      	cmp	r3, #1
 810342e:	d9f9      	bls.n	8103424 <prvIdleTask+0x8>
			{
				taskYIELD();
 8103430:	4b05      	ldr	r3, [pc, #20]	; (8103448 <prvIdleTask+0x2c>)
 8103432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8103436:	601a      	str	r2, [r3, #0]
 8103438:	f3bf 8f4f 	dsb	sy
 810343c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8103440:	e7f0      	b.n	8103424 <prvIdleTask+0x8>
 8103442:	bf00      	nop
 8103444:	10004440 	.word	0x10004440
 8103448:	e000ed04 	.word	0xe000ed04

0810344c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 810344c:	b580      	push	{r7, lr}
 810344e:	b082      	sub	sp, #8
 8103450:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8103452:	2300      	movs	r3, #0
 8103454:	607b      	str	r3, [r7, #4]
 8103456:	e00c      	b.n	8103472 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8103458:	687a      	ldr	r2, [r7, #4]
 810345a:	4613      	mov	r3, r2
 810345c:	009b      	lsls	r3, r3, #2
 810345e:	4413      	add	r3, r2
 8103460:	009b      	lsls	r3, r3, #2
 8103462:	4a12      	ldr	r2, [pc, #72]	; (81034ac <prvInitialiseTaskLists+0x60>)
 8103464:	4413      	add	r3, r2
 8103466:	4618      	mov	r0, r3
 8103468:	f7fe fa78 	bl	810195c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810346c:	687b      	ldr	r3, [r7, #4]
 810346e:	3301      	adds	r3, #1
 8103470:	607b      	str	r3, [r7, #4]
 8103472:	687b      	ldr	r3, [r7, #4]
 8103474:	2b37      	cmp	r3, #55	; 0x37
 8103476:	d9ef      	bls.n	8103458 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8103478:	480d      	ldr	r0, [pc, #52]	; (81034b0 <prvInitialiseTaskLists+0x64>)
 810347a:	f7fe fa6f 	bl	810195c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810347e:	480d      	ldr	r0, [pc, #52]	; (81034b4 <prvInitialiseTaskLists+0x68>)
 8103480:	f7fe fa6c 	bl	810195c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8103484:	480c      	ldr	r0, [pc, #48]	; (81034b8 <prvInitialiseTaskLists+0x6c>)
 8103486:	f7fe fa69 	bl	810195c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810348a:	480c      	ldr	r0, [pc, #48]	; (81034bc <prvInitialiseTaskLists+0x70>)
 810348c:	f7fe fa66 	bl	810195c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8103490:	480b      	ldr	r0, [pc, #44]	; (81034c0 <prvInitialiseTaskLists+0x74>)
 8103492:	f7fe fa63 	bl	810195c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8103496:	4b0b      	ldr	r3, [pc, #44]	; (81034c4 <prvInitialiseTaskLists+0x78>)
 8103498:	4a05      	ldr	r2, [pc, #20]	; (81034b0 <prvInitialiseTaskLists+0x64>)
 810349a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 810349c:	4b0a      	ldr	r3, [pc, #40]	; (81034c8 <prvInitialiseTaskLists+0x7c>)
 810349e:	4a05      	ldr	r2, [pc, #20]	; (81034b4 <prvInitialiseTaskLists+0x68>)
 81034a0:	601a      	str	r2, [r3, #0]
}
 81034a2:	bf00      	nop
 81034a4:	3708      	adds	r7, #8
 81034a6:	46bd      	mov	sp, r7
 81034a8:	bd80      	pop	{r7, pc}
 81034aa:	bf00      	nop
 81034ac:	10004440 	.word	0x10004440
 81034b0:	100048a0 	.word	0x100048a0
 81034b4:	100048b4 	.word	0x100048b4
 81034b8:	100048d0 	.word	0x100048d0
 81034bc:	100048e4 	.word	0x100048e4
 81034c0:	100048fc 	.word	0x100048fc
 81034c4:	100048c8 	.word	0x100048c8
 81034c8:	100048cc 	.word	0x100048cc

081034cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 81034cc:	b580      	push	{r7, lr}
 81034ce:	b082      	sub	sp, #8
 81034d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 81034d2:	e019      	b.n	8103508 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 81034d4:	f7fe fc26 	bl	8101d24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81034d8:	4b10      	ldr	r3, [pc, #64]	; (810351c <prvCheckTasksWaitingTermination+0x50>)
 81034da:	68db      	ldr	r3, [r3, #12]
 81034dc:	68db      	ldr	r3, [r3, #12]
 81034de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81034e0:	687b      	ldr	r3, [r7, #4]
 81034e2:	3304      	adds	r3, #4
 81034e4:	4618      	mov	r0, r3
 81034e6:	f7fe fac3 	bl	8101a70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 81034ea:	4b0d      	ldr	r3, [pc, #52]	; (8103520 <prvCheckTasksWaitingTermination+0x54>)
 81034ec:	681b      	ldr	r3, [r3, #0]
 81034ee:	3b01      	subs	r3, #1
 81034f0:	4a0b      	ldr	r2, [pc, #44]	; (8103520 <prvCheckTasksWaitingTermination+0x54>)
 81034f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 81034f4:	4b0b      	ldr	r3, [pc, #44]	; (8103524 <prvCheckTasksWaitingTermination+0x58>)
 81034f6:	681b      	ldr	r3, [r3, #0]
 81034f8:	3b01      	subs	r3, #1
 81034fa:	4a0a      	ldr	r2, [pc, #40]	; (8103524 <prvCheckTasksWaitingTermination+0x58>)
 81034fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 81034fe:	f7fe fc41 	bl	8101d84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8103502:	6878      	ldr	r0, [r7, #4]
 8103504:	f000 f810 	bl	8103528 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8103508:	4b06      	ldr	r3, [pc, #24]	; (8103524 <prvCheckTasksWaitingTermination+0x58>)
 810350a:	681b      	ldr	r3, [r3, #0]
 810350c:	2b00      	cmp	r3, #0
 810350e:	d1e1      	bne.n	81034d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8103510:	bf00      	nop
 8103512:	bf00      	nop
 8103514:	3708      	adds	r7, #8
 8103516:	46bd      	mov	sp, r7
 8103518:	bd80      	pop	{r7, pc}
 810351a:	bf00      	nop
 810351c:	100048e4 	.word	0x100048e4
 8103520:	10004910 	.word	0x10004910
 8103524:	100048f8 	.word	0x100048f8

08103528 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8103528:	b580      	push	{r7, lr}
 810352a:	b084      	sub	sp, #16
 810352c:	af00      	add	r7, sp, #0
 810352e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8103530:	687b      	ldr	r3, [r7, #4]
 8103532:	3354      	adds	r3, #84	; 0x54
 8103534:	4618      	mov	r0, r3
 8103536:	f000 fe33 	bl	81041a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 810353a:	687b      	ldr	r3, [r7, #4]
 810353c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8103540:	2b00      	cmp	r3, #0
 8103542:	d108      	bne.n	8103556 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8103544:	687b      	ldr	r3, [r7, #4]
 8103546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103548:	4618      	mov	r0, r3
 810354a:	f7fe f8e9 	bl	8101720 <vPortFree>
				vPortFree( pxTCB );
 810354e:	6878      	ldr	r0, [r7, #4]
 8103550:	f7fe f8e6 	bl	8101720 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8103554:	e018      	b.n	8103588 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8103556:	687b      	ldr	r3, [r7, #4]
 8103558:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 810355c:	2b01      	cmp	r3, #1
 810355e:	d103      	bne.n	8103568 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8103560:	6878      	ldr	r0, [r7, #4]
 8103562:	f7fe f8dd 	bl	8101720 <vPortFree>
	}
 8103566:	e00f      	b.n	8103588 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8103568:	687b      	ldr	r3, [r7, #4]
 810356a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 810356e:	2b02      	cmp	r3, #2
 8103570:	d00a      	beq.n	8103588 <prvDeleteTCB+0x60>
	__asm volatile
 8103572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103576:	f383 8811 	msr	BASEPRI, r3
 810357a:	f3bf 8f6f 	isb	sy
 810357e:	f3bf 8f4f 	dsb	sy
 8103582:	60fb      	str	r3, [r7, #12]
}
 8103584:	bf00      	nop
 8103586:	e7fe      	b.n	8103586 <prvDeleteTCB+0x5e>
	}
 8103588:	bf00      	nop
 810358a:	3710      	adds	r7, #16
 810358c:	46bd      	mov	sp, r7
 810358e:	bd80      	pop	{r7, pc}

08103590 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8103590:	b480      	push	{r7}
 8103592:	b083      	sub	sp, #12
 8103594:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8103596:	4b0c      	ldr	r3, [pc, #48]	; (81035c8 <prvResetNextTaskUnblockTime+0x38>)
 8103598:	681b      	ldr	r3, [r3, #0]
 810359a:	681b      	ldr	r3, [r3, #0]
 810359c:	2b00      	cmp	r3, #0
 810359e:	d104      	bne.n	81035aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 81035a0:	4b0a      	ldr	r3, [pc, #40]	; (81035cc <prvResetNextTaskUnblockTime+0x3c>)
 81035a2:	f04f 32ff 	mov.w	r2, #4294967295
 81035a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 81035a8:	e008      	b.n	81035bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81035aa:	4b07      	ldr	r3, [pc, #28]	; (81035c8 <prvResetNextTaskUnblockTime+0x38>)
 81035ac:	681b      	ldr	r3, [r3, #0]
 81035ae:	68db      	ldr	r3, [r3, #12]
 81035b0:	68db      	ldr	r3, [r3, #12]
 81035b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 81035b4:	687b      	ldr	r3, [r7, #4]
 81035b6:	685b      	ldr	r3, [r3, #4]
 81035b8:	4a04      	ldr	r2, [pc, #16]	; (81035cc <prvResetNextTaskUnblockTime+0x3c>)
 81035ba:	6013      	str	r3, [r2, #0]
}
 81035bc:	bf00      	nop
 81035be:	370c      	adds	r7, #12
 81035c0:	46bd      	mov	sp, r7
 81035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035c6:	4770      	bx	lr
 81035c8:	100048c8 	.word	0x100048c8
 81035cc:	10004930 	.word	0x10004930

081035d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 81035d0:	b480      	push	{r7}
 81035d2:	b083      	sub	sp, #12
 81035d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 81035d6:	4b0b      	ldr	r3, [pc, #44]	; (8103604 <xTaskGetSchedulerState+0x34>)
 81035d8:	681b      	ldr	r3, [r3, #0]
 81035da:	2b00      	cmp	r3, #0
 81035dc:	d102      	bne.n	81035e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 81035de:	2301      	movs	r3, #1
 81035e0:	607b      	str	r3, [r7, #4]
 81035e2:	e008      	b.n	81035f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81035e4:	4b08      	ldr	r3, [pc, #32]	; (8103608 <xTaskGetSchedulerState+0x38>)
 81035e6:	681b      	ldr	r3, [r3, #0]
 81035e8:	2b00      	cmp	r3, #0
 81035ea:	d102      	bne.n	81035f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 81035ec:	2302      	movs	r3, #2
 81035ee:	607b      	str	r3, [r7, #4]
 81035f0:	e001      	b.n	81035f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 81035f2:	2300      	movs	r3, #0
 81035f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 81035f6:	687b      	ldr	r3, [r7, #4]
	}
 81035f8:	4618      	mov	r0, r3
 81035fa:	370c      	adds	r7, #12
 81035fc:	46bd      	mov	sp, r7
 81035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103602:	4770      	bx	lr
 8103604:	1000491c 	.word	0x1000491c
 8103608:	10004938 	.word	0x10004938

0810360c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 810360c:	b580      	push	{r7, lr}
 810360e:	b086      	sub	sp, #24
 8103610:	af00      	add	r7, sp, #0
 8103612:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8103614:	687b      	ldr	r3, [r7, #4]
 8103616:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8103618:	2300      	movs	r3, #0
 810361a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810361c:	687b      	ldr	r3, [r7, #4]
 810361e:	2b00      	cmp	r3, #0
 8103620:	d056      	beq.n	81036d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8103622:	4b2e      	ldr	r3, [pc, #184]	; (81036dc <xTaskPriorityDisinherit+0xd0>)
 8103624:	681b      	ldr	r3, [r3, #0]
 8103626:	693a      	ldr	r2, [r7, #16]
 8103628:	429a      	cmp	r2, r3
 810362a:	d00a      	beq.n	8103642 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 810362c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103630:	f383 8811 	msr	BASEPRI, r3
 8103634:	f3bf 8f6f 	isb	sy
 8103638:	f3bf 8f4f 	dsb	sy
 810363c:	60fb      	str	r3, [r7, #12]
}
 810363e:	bf00      	nop
 8103640:	e7fe      	b.n	8103640 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8103642:	693b      	ldr	r3, [r7, #16]
 8103644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103646:	2b00      	cmp	r3, #0
 8103648:	d10a      	bne.n	8103660 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 810364a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810364e:	f383 8811 	msr	BASEPRI, r3
 8103652:	f3bf 8f6f 	isb	sy
 8103656:	f3bf 8f4f 	dsb	sy
 810365a:	60bb      	str	r3, [r7, #8]
}
 810365c:	bf00      	nop
 810365e:	e7fe      	b.n	810365e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8103660:	693b      	ldr	r3, [r7, #16]
 8103662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103664:	1e5a      	subs	r2, r3, #1
 8103666:	693b      	ldr	r3, [r7, #16]
 8103668:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810366a:	693b      	ldr	r3, [r7, #16]
 810366c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810366e:	693b      	ldr	r3, [r7, #16]
 8103670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103672:	429a      	cmp	r2, r3
 8103674:	d02c      	beq.n	81036d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8103676:	693b      	ldr	r3, [r7, #16]
 8103678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810367a:	2b00      	cmp	r3, #0
 810367c:	d128      	bne.n	81036d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810367e:	693b      	ldr	r3, [r7, #16]
 8103680:	3304      	adds	r3, #4
 8103682:	4618      	mov	r0, r3
 8103684:	f7fe f9f4 	bl	8101a70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8103688:	693b      	ldr	r3, [r7, #16]
 810368a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810368c:	693b      	ldr	r3, [r7, #16]
 810368e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8103690:	693b      	ldr	r3, [r7, #16]
 8103692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103694:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8103698:	693b      	ldr	r3, [r7, #16]
 810369a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810369c:	693b      	ldr	r3, [r7, #16]
 810369e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81036a0:	4b0f      	ldr	r3, [pc, #60]	; (81036e0 <xTaskPriorityDisinherit+0xd4>)
 81036a2:	681b      	ldr	r3, [r3, #0]
 81036a4:	429a      	cmp	r2, r3
 81036a6:	d903      	bls.n	81036b0 <xTaskPriorityDisinherit+0xa4>
 81036a8:	693b      	ldr	r3, [r7, #16]
 81036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81036ac:	4a0c      	ldr	r2, [pc, #48]	; (81036e0 <xTaskPriorityDisinherit+0xd4>)
 81036ae:	6013      	str	r3, [r2, #0]
 81036b0:	693b      	ldr	r3, [r7, #16]
 81036b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81036b4:	4613      	mov	r3, r2
 81036b6:	009b      	lsls	r3, r3, #2
 81036b8:	4413      	add	r3, r2
 81036ba:	009b      	lsls	r3, r3, #2
 81036bc:	4a09      	ldr	r2, [pc, #36]	; (81036e4 <xTaskPriorityDisinherit+0xd8>)
 81036be:	441a      	add	r2, r3
 81036c0:	693b      	ldr	r3, [r7, #16]
 81036c2:	3304      	adds	r3, #4
 81036c4:	4619      	mov	r1, r3
 81036c6:	4610      	mov	r0, r2
 81036c8:	f7fe f975 	bl	81019b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 81036cc:	2301      	movs	r3, #1
 81036ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 81036d0:	697b      	ldr	r3, [r7, #20]
	}
 81036d2:	4618      	mov	r0, r3
 81036d4:	3718      	adds	r7, #24
 81036d6:	46bd      	mov	sp, r7
 81036d8:	bd80      	pop	{r7, pc}
 81036da:	bf00      	nop
 81036dc:	1000443c 	.word	0x1000443c
 81036e0:	10004918 	.word	0x10004918
 81036e4:	10004440 	.word	0x10004440

081036e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 81036e8:	b580      	push	{r7, lr}
 81036ea:	b084      	sub	sp, #16
 81036ec:	af00      	add	r7, sp, #0
 81036ee:	6078      	str	r0, [r7, #4]
 81036f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 81036f2:	4b21      	ldr	r3, [pc, #132]	; (8103778 <prvAddCurrentTaskToDelayedList+0x90>)
 81036f4:	681b      	ldr	r3, [r3, #0]
 81036f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 81036f8:	4b20      	ldr	r3, [pc, #128]	; (810377c <prvAddCurrentTaskToDelayedList+0x94>)
 81036fa:	681b      	ldr	r3, [r3, #0]
 81036fc:	3304      	adds	r3, #4
 81036fe:	4618      	mov	r0, r3
 8103700:	f7fe f9b6 	bl	8101a70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8103704:	687b      	ldr	r3, [r7, #4]
 8103706:	f1b3 3fff 	cmp.w	r3, #4294967295
 810370a:	d10a      	bne.n	8103722 <prvAddCurrentTaskToDelayedList+0x3a>
 810370c:	683b      	ldr	r3, [r7, #0]
 810370e:	2b00      	cmp	r3, #0
 8103710:	d007      	beq.n	8103722 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8103712:	4b1a      	ldr	r3, [pc, #104]	; (810377c <prvAddCurrentTaskToDelayedList+0x94>)
 8103714:	681b      	ldr	r3, [r3, #0]
 8103716:	3304      	adds	r3, #4
 8103718:	4619      	mov	r1, r3
 810371a:	4819      	ldr	r0, [pc, #100]	; (8103780 <prvAddCurrentTaskToDelayedList+0x98>)
 810371c:	f7fe f94b 	bl	81019b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8103720:	e026      	b.n	8103770 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8103722:	68fa      	ldr	r2, [r7, #12]
 8103724:	687b      	ldr	r3, [r7, #4]
 8103726:	4413      	add	r3, r2
 8103728:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810372a:	4b14      	ldr	r3, [pc, #80]	; (810377c <prvAddCurrentTaskToDelayedList+0x94>)
 810372c:	681b      	ldr	r3, [r3, #0]
 810372e:	68ba      	ldr	r2, [r7, #8]
 8103730:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8103732:	68ba      	ldr	r2, [r7, #8]
 8103734:	68fb      	ldr	r3, [r7, #12]
 8103736:	429a      	cmp	r2, r3
 8103738:	d209      	bcs.n	810374e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810373a:	4b12      	ldr	r3, [pc, #72]	; (8103784 <prvAddCurrentTaskToDelayedList+0x9c>)
 810373c:	681a      	ldr	r2, [r3, #0]
 810373e:	4b0f      	ldr	r3, [pc, #60]	; (810377c <prvAddCurrentTaskToDelayedList+0x94>)
 8103740:	681b      	ldr	r3, [r3, #0]
 8103742:	3304      	adds	r3, #4
 8103744:	4619      	mov	r1, r3
 8103746:	4610      	mov	r0, r2
 8103748:	f7fe f959 	bl	81019fe <vListInsert>
}
 810374c:	e010      	b.n	8103770 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810374e:	4b0e      	ldr	r3, [pc, #56]	; (8103788 <prvAddCurrentTaskToDelayedList+0xa0>)
 8103750:	681a      	ldr	r2, [r3, #0]
 8103752:	4b0a      	ldr	r3, [pc, #40]	; (810377c <prvAddCurrentTaskToDelayedList+0x94>)
 8103754:	681b      	ldr	r3, [r3, #0]
 8103756:	3304      	adds	r3, #4
 8103758:	4619      	mov	r1, r3
 810375a:	4610      	mov	r0, r2
 810375c:	f7fe f94f 	bl	81019fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8103760:	4b0a      	ldr	r3, [pc, #40]	; (810378c <prvAddCurrentTaskToDelayedList+0xa4>)
 8103762:	681b      	ldr	r3, [r3, #0]
 8103764:	68ba      	ldr	r2, [r7, #8]
 8103766:	429a      	cmp	r2, r3
 8103768:	d202      	bcs.n	8103770 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 810376a:	4a08      	ldr	r2, [pc, #32]	; (810378c <prvAddCurrentTaskToDelayedList+0xa4>)
 810376c:	68bb      	ldr	r3, [r7, #8]
 810376e:	6013      	str	r3, [r2, #0]
}
 8103770:	bf00      	nop
 8103772:	3710      	adds	r7, #16
 8103774:	46bd      	mov	sp, r7
 8103776:	bd80      	pop	{r7, pc}
 8103778:	10004914 	.word	0x10004914
 810377c:	1000443c 	.word	0x1000443c
 8103780:	100048fc 	.word	0x100048fc
 8103784:	100048cc 	.word	0x100048cc
 8103788:	100048c8 	.word	0x100048c8
 810378c:	10004930 	.word	0x10004930

08103790 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8103790:	b580      	push	{r7, lr}
 8103792:	b08a      	sub	sp, #40	; 0x28
 8103794:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8103796:	2300      	movs	r3, #0
 8103798:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 810379a:	f000 fb07 	bl	8103dac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 810379e:	4b1c      	ldr	r3, [pc, #112]	; (8103810 <xTimerCreateTimerTask+0x80>)
 81037a0:	681b      	ldr	r3, [r3, #0]
 81037a2:	2b00      	cmp	r3, #0
 81037a4:	d021      	beq.n	81037ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 81037a6:	2300      	movs	r3, #0
 81037a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 81037aa:	2300      	movs	r3, #0
 81037ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 81037ae:	1d3a      	adds	r2, r7, #4
 81037b0:	f107 0108 	add.w	r1, r7, #8
 81037b4:	f107 030c 	add.w	r3, r7, #12
 81037b8:	4618      	mov	r0, r3
 81037ba:	f7fd fecb 	bl	8101554 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 81037be:	6879      	ldr	r1, [r7, #4]
 81037c0:	68bb      	ldr	r3, [r7, #8]
 81037c2:	68fa      	ldr	r2, [r7, #12]
 81037c4:	9202      	str	r2, [sp, #8]
 81037c6:	9301      	str	r3, [sp, #4]
 81037c8:	2302      	movs	r3, #2
 81037ca:	9300      	str	r3, [sp, #0]
 81037cc:	2300      	movs	r3, #0
 81037ce:	460a      	mov	r2, r1
 81037d0:	4910      	ldr	r1, [pc, #64]	; (8103814 <xTimerCreateTimerTask+0x84>)
 81037d2:	4811      	ldr	r0, [pc, #68]	; (8103818 <xTimerCreateTimerTask+0x88>)
 81037d4:	f7ff f8b4 	bl	8102940 <xTaskCreateStatic>
 81037d8:	4603      	mov	r3, r0
 81037da:	4a10      	ldr	r2, [pc, #64]	; (810381c <xTimerCreateTimerTask+0x8c>)
 81037dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 81037de:	4b0f      	ldr	r3, [pc, #60]	; (810381c <xTimerCreateTimerTask+0x8c>)
 81037e0:	681b      	ldr	r3, [r3, #0]
 81037e2:	2b00      	cmp	r3, #0
 81037e4:	d001      	beq.n	81037ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 81037e6:	2301      	movs	r3, #1
 81037e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 81037ea:	697b      	ldr	r3, [r7, #20]
 81037ec:	2b00      	cmp	r3, #0
 81037ee:	d10a      	bne.n	8103806 <xTimerCreateTimerTask+0x76>
	__asm volatile
 81037f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81037f4:	f383 8811 	msr	BASEPRI, r3
 81037f8:	f3bf 8f6f 	isb	sy
 81037fc:	f3bf 8f4f 	dsb	sy
 8103800:	613b      	str	r3, [r7, #16]
}
 8103802:	bf00      	nop
 8103804:	e7fe      	b.n	8103804 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8103806:	697b      	ldr	r3, [r7, #20]
}
 8103808:	4618      	mov	r0, r3
 810380a:	3718      	adds	r7, #24
 810380c:	46bd      	mov	sp, r7
 810380e:	bd80      	pop	{r7, pc}
 8103810:	1000496c 	.word	0x1000496c
 8103814:	08104e70 	.word	0x08104e70
 8103818:	08103955 	.word	0x08103955
 810381c:	10004970 	.word	0x10004970

08103820 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8103820:	b580      	push	{r7, lr}
 8103822:	b08a      	sub	sp, #40	; 0x28
 8103824:	af00      	add	r7, sp, #0
 8103826:	60f8      	str	r0, [r7, #12]
 8103828:	60b9      	str	r1, [r7, #8]
 810382a:	607a      	str	r2, [r7, #4]
 810382c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 810382e:	2300      	movs	r3, #0
 8103830:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8103832:	68fb      	ldr	r3, [r7, #12]
 8103834:	2b00      	cmp	r3, #0
 8103836:	d10a      	bne.n	810384e <xTimerGenericCommand+0x2e>
	__asm volatile
 8103838:	f04f 0350 	mov.w	r3, #80	; 0x50
 810383c:	f383 8811 	msr	BASEPRI, r3
 8103840:	f3bf 8f6f 	isb	sy
 8103844:	f3bf 8f4f 	dsb	sy
 8103848:	623b      	str	r3, [r7, #32]
}
 810384a:	bf00      	nop
 810384c:	e7fe      	b.n	810384c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 810384e:	4b1a      	ldr	r3, [pc, #104]	; (81038b8 <xTimerGenericCommand+0x98>)
 8103850:	681b      	ldr	r3, [r3, #0]
 8103852:	2b00      	cmp	r3, #0
 8103854:	d02a      	beq.n	81038ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8103856:	68bb      	ldr	r3, [r7, #8]
 8103858:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 810385a:	687b      	ldr	r3, [r7, #4]
 810385c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 810385e:	68fb      	ldr	r3, [r7, #12]
 8103860:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8103862:	68bb      	ldr	r3, [r7, #8]
 8103864:	2b05      	cmp	r3, #5
 8103866:	dc18      	bgt.n	810389a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8103868:	f7ff feb2 	bl	81035d0 <xTaskGetSchedulerState>
 810386c:	4603      	mov	r3, r0
 810386e:	2b02      	cmp	r3, #2
 8103870:	d109      	bne.n	8103886 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8103872:	4b11      	ldr	r3, [pc, #68]	; (81038b8 <xTimerGenericCommand+0x98>)
 8103874:	6818      	ldr	r0, [r3, #0]
 8103876:	f107 0110 	add.w	r1, r7, #16
 810387a:	2300      	movs	r3, #0
 810387c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810387e:	f7fe fc77 	bl	8102170 <xQueueGenericSend>
 8103882:	6278      	str	r0, [r7, #36]	; 0x24
 8103884:	e012      	b.n	81038ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8103886:	4b0c      	ldr	r3, [pc, #48]	; (81038b8 <xTimerGenericCommand+0x98>)
 8103888:	6818      	ldr	r0, [r3, #0]
 810388a:	f107 0110 	add.w	r1, r7, #16
 810388e:	2300      	movs	r3, #0
 8103890:	2200      	movs	r2, #0
 8103892:	f7fe fc6d 	bl	8102170 <xQueueGenericSend>
 8103896:	6278      	str	r0, [r7, #36]	; 0x24
 8103898:	e008      	b.n	81038ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 810389a:	4b07      	ldr	r3, [pc, #28]	; (81038b8 <xTimerGenericCommand+0x98>)
 810389c:	6818      	ldr	r0, [r3, #0]
 810389e:	f107 0110 	add.w	r1, r7, #16
 81038a2:	2300      	movs	r3, #0
 81038a4:	683a      	ldr	r2, [r7, #0]
 81038a6:	f7fe fd61 	bl	810236c <xQueueGenericSendFromISR>
 81038aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 81038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 81038ae:	4618      	mov	r0, r3
 81038b0:	3728      	adds	r7, #40	; 0x28
 81038b2:	46bd      	mov	sp, r7
 81038b4:	bd80      	pop	{r7, pc}
 81038b6:	bf00      	nop
 81038b8:	1000496c 	.word	0x1000496c

081038bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 81038bc:	b580      	push	{r7, lr}
 81038be:	b088      	sub	sp, #32
 81038c0:	af02      	add	r7, sp, #8
 81038c2:	6078      	str	r0, [r7, #4]
 81038c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81038c6:	4b22      	ldr	r3, [pc, #136]	; (8103950 <prvProcessExpiredTimer+0x94>)
 81038c8:	681b      	ldr	r3, [r3, #0]
 81038ca:	68db      	ldr	r3, [r3, #12]
 81038cc:	68db      	ldr	r3, [r3, #12]
 81038ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81038d0:	697b      	ldr	r3, [r7, #20]
 81038d2:	3304      	adds	r3, #4
 81038d4:	4618      	mov	r0, r3
 81038d6:	f7fe f8cb 	bl	8101a70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81038da:	697b      	ldr	r3, [r7, #20]
 81038dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81038e0:	f003 0304 	and.w	r3, r3, #4
 81038e4:	2b00      	cmp	r3, #0
 81038e6:	d022      	beq.n	810392e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 81038e8:	697b      	ldr	r3, [r7, #20]
 81038ea:	699a      	ldr	r2, [r3, #24]
 81038ec:	687b      	ldr	r3, [r7, #4]
 81038ee:	18d1      	adds	r1, r2, r3
 81038f0:	687b      	ldr	r3, [r7, #4]
 81038f2:	683a      	ldr	r2, [r7, #0]
 81038f4:	6978      	ldr	r0, [r7, #20]
 81038f6:	f000 f8d1 	bl	8103a9c <prvInsertTimerInActiveList>
 81038fa:	4603      	mov	r3, r0
 81038fc:	2b00      	cmp	r3, #0
 81038fe:	d01f      	beq.n	8103940 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8103900:	2300      	movs	r3, #0
 8103902:	9300      	str	r3, [sp, #0]
 8103904:	2300      	movs	r3, #0
 8103906:	687a      	ldr	r2, [r7, #4]
 8103908:	2100      	movs	r1, #0
 810390a:	6978      	ldr	r0, [r7, #20]
 810390c:	f7ff ff88 	bl	8103820 <xTimerGenericCommand>
 8103910:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8103912:	693b      	ldr	r3, [r7, #16]
 8103914:	2b00      	cmp	r3, #0
 8103916:	d113      	bne.n	8103940 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8103918:	f04f 0350 	mov.w	r3, #80	; 0x50
 810391c:	f383 8811 	msr	BASEPRI, r3
 8103920:	f3bf 8f6f 	isb	sy
 8103924:	f3bf 8f4f 	dsb	sy
 8103928:	60fb      	str	r3, [r7, #12]
}
 810392a:	bf00      	nop
 810392c:	e7fe      	b.n	810392c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810392e:	697b      	ldr	r3, [r7, #20]
 8103930:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8103934:	f023 0301 	bic.w	r3, r3, #1
 8103938:	b2da      	uxtb	r2, r3
 810393a:	697b      	ldr	r3, [r7, #20]
 810393c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8103940:	697b      	ldr	r3, [r7, #20]
 8103942:	6a1b      	ldr	r3, [r3, #32]
 8103944:	6978      	ldr	r0, [r7, #20]
 8103946:	4798      	blx	r3
}
 8103948:	bf00      	nop
 810394a:	3718      	adds	r7, #24
 810394c:	46bd      	mov	sp, r7
 810394e:	bd80      	pop	{r7, pc}
 8103950:	10004964 	.word	0x10004964

08103954 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8103954:	b580      	push	{r7, lr}
 8103956:	b084      	sub	sp, #16
 8103958:	af00      	add	r7, sp, #0
 810395a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810395c:	f107 0308 	add.w	r3, r7, #8
 8103960:	4618      	mov	r0, r3
 8103962:	f000 f857 	bl	8103a14 <prvGetNextExpireTime>
 8103966:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8103968:	68bb      	ldr	r3, [r7, #8]
 810396a:	4619      	mov	r1, r3
 810396c:	68f8      	ldr	r0, [r7, #12]
 810396e:	f000 f803 	bl	8103978 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8103972:	f000 f8d5 	bl	8103b20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8103976:	e7f1      	b.n	810395c <prvTimerTask+0x8>

08103978 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8103978:	b580      	push	{r7, lr}
 810397a:	b084      	sub	sp, #16
 810397c:	af00      	add	r7, sp, #0
 810397e:	6078      	str	r0, [r7, #4]
 8103980:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8103982:	f7ff fa39 	bl	8102df8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8103986:	f107 0308 	add.w	r3, r7, #8
 810398a:	4618      	mov	r0, r3
 810398c:	f000 f866 	bl	8103a5c <prvSampleTimeNow>
 8103990:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8103992:	68bb      	ldr	r3, [r7, #8]
 8103994:	2b00      	cmp	r3, #0
 8103996:	d130      	bne.n	81039fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8103998:	683b      	ldr	r3, [r7, #0]
 810399a:	2b00      	cmp	r3, #0
 810399c:	d10a      	bne.n	81039b4 <prvProcessTimerOrBlockTask+0x3c>
 810399e:	687a      	ldr	r2, [r7, #4]
 81039a0:	68fb      	ldr	r3, [r7, #12]
 81039a2:	429a      	cmp	r2, r3
 81039a4:	d806      	bhi.n	81039b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 81039a6:	f7ff fa35 	bl	8102e14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 81039aa:	68f9      	ldr	r1, [r7, #12]
 81039ac:	6878      	ldr	r0, [r7, #4]
 81039ae:	f7ff ff85 	bl	81038bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 81039b2:	e024      	b.n	81039fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 81039b4:	683b      	ldr	r3, [r7, #0]
 81039b6:	2b00      	cmp	r3, #0
 81039b8:	d008      	beq.n	81039cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 81039ba:	4b13      	ldr	r3, [pc, #76]	; (8103a08 <prvProcessTimerOrBlockTask+0x90>)
 81039bc:	681b      	ldr	r3, [r3, #0]
 81039be:	681b      	ldr	r3, [r3, #0]
 81039c0:	2b00      	cmp	r3, #0
 81039c2:	d101      	bne.n	81039c8 <prvProcessTimerOrBlockTask+0x50>
 81039c4:	2301      	movs	r3, #1
 81039c6:	e000      	b.n	81039ca <prvProcessTimerOrBlockTask+0x52>
 81039c8:	2300      	movs	r3, #0
 81039ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 81039cc:	4b0f      	ldr	r3, [pc, #60]	; (8103a0c <prvProcessTimerOrBlockTask+0x94>)
 81039ce:	6818      	ldr	r0, [r3, #0]
 81039d0:	687a      	ldr	r2, [r7, #4]
 81039d2:	68fb      	ldr	r3, [r7, #12]
 81039d4:	1ad3      	subs	r3, r2, r3
 81039d6:	683a      	ldr	r2, [r7, #0]
 81039d8:	4619      	mov	r1, r3
 81039da:	f7fe ff7d 	bl	81028d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 81039de:	f7ff fa19 	bl	8102e14 <xTaskResumeAll>
 81039e2:	4603      	mov	r3, r0
 81039e4:	2b00      	cmp	r3, #0
 81039e6:	d10a      	bne.n	81039fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 81039e8:	4b09      	ldr	r3, [pc, #36]	; (8103a10 <prvProcessTimerOrBlockTask+0x98>)
 81039ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81039ee:	601a      	str	r2, [r3, #0]
 81039f0:	f3bf 8f4f 	dsb	sy
 81039f4:	f3bf 8f6f 	isb	sy
}
 81039f8:	e001      	b.n	81039fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 81039fa:	f7ff fa0b 	bl	8102e14 <xTaskResumeAll>
}
 81039fe:	bf00      	nop
 8103a00:	3710      	adds	r7, #16
 8103a02:	46bd      	mov	sp, r7
 8103a04:	bd80      	pop	{r7, pc}
 8103a06:	bf00      	nop
 8103a08:	10004968 	.word	0x10004968
 8103a0c:	1000496c 	.word	0x1000496c
 8103a10:	e000ed04 	.word	0xe000ed04

08103a14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8103a14:	b480      	push	{r7}
 8103a16:	b085      	sub	sp, #20
 8103a18:	af00      	add	r7, sp, #0
 8103a1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8103a1c:	4b0e      	ldr	r3, [pc, #56]	; (8103a58 <prvGetNextExpireTime+0x44>)
 8103a1e:	681b      	ldr	r3, [r3, #0]
 8103a20:	681b      	ldr	r3, [r3, #0]
 8103a22:	2b00      	cmp	r3, #0
 8103a24:	d101      	bne.n	8103a2a <prvGetNextExpireTime+0x16>
 8103a26:	2201      	movs	r2, #1
 8103a28:	e000      	b.n	8103a2c <prvGetNextExpireTime+0x18>
 8103a2a:	2200      	movs	r2, #0
 8103a2c:	687b      	ldr	r3, [r7, #4]
 8103a2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8103a30:	687b      	ldr	r3, [r7, #4]
 8103a32:	681b      	ldr	r3, [r3, #0]
 8103a34:	2b00      	cmp	r3, #0
 8103a36:	d105      	bne.n	8103a44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8103a38:	4b07      	ldr	r3, [pc, #28]	; (8103a58 <prvGetNextExpireTime+0x44>)
 8103a3a:	681b      	ldr	r3, [r3, #0]
 8103a3c:	68db      	ldr	r3, [r3, #12]
 8103a3e:	681b      	ldr	r3, [r3, #0]
 8103a40:	60fb      	str	r3, [r7, #12]
 8103a42:	e001      	b.n	8103a48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8103a44:	2300      	movs	r3, #0
 8103a46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8103a48:	68fb      	ldr	r3, [r7, #12]
}
 8103a4a:	4618      	mov	r0, r3
 8103a4c:	3714      	adds	r7, #20
 8103a4e:	46bd      	mov	sp, r7
 8103a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a54:	4770      	bx	lr
 8103a56:	bf00      	nop
 8103a58:	10004964 	.word	0x10004964

08103a5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8103a5c:	b580      	push	{r7, lr}
 8103a5e:	b084      	sub	sp, #16
 8103a60:	af00      	add	r7, sp, #0
 8103a62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8103a64:	f7ff fa74 	bl	8102f50 <xTaskGetTickCount>
 8103a68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8103a6a:	4b0b      	ldr	r3, [pc, #44]	; (8103a98 <prvSampleTimeNow+0x3c>)
 8103a6c:	681b      	ldr	r3, [r3, #0]
 8103a6e:	68fa      	ldr	r2, [r7, #12]
 8103a70:	429a      	cmp	r2, r3
 8103a72:	d205      	bcs.n	8103a80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8103a74:	f000 f936 	bl	8103ce4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8103a78:	687b      	ldr	r3, [r7, #4]
 8103a7a:	2201      	movs	r2, #1
 8103a7c:	601a      	str	r2, [r3, #0]
 8103a7e:	e002      	b.n	8103a86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8103a80:	687b      	ldr	r3, [r7, #4]
 8103a82:	2200      	movs	r2, #0
 8103a84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8103a86:	4a04      	ldr	r2, [pc, #16]	; (8103a98 <prvSampleTimeNow+0x3c>)
 8103a88:	68fb      	ldr	r3, [r7, #12]
 8103a8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8103a8c:	68fb      	ldr	r3, [r7, #12]
}
 8103a8e:	4618      	mov	r0, r3
 8103a90:	3710      	adds	r7, #16
 8103a92:	46bd      	mov	sp, r7
 8103a94:	bd80      	pop	{r7, pc}
 8103a96:	bf00      	nop
 8103a98:	10004974 	.word	0x10004974

08103a9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8103a9c:	b580      	push	{r7, lr}
 8103a9e:	b086      	sub	sp, #24
 8103aa0:	af00      	add	r7, sp, #0
 8103aa2:	60f8      	str	r0, [r7, #12]
 8103aa4:	60b9      	str	r1, [r7, #8]
 8103aa6:	607a      	str	r2, [r7, #4]
 8103aa8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8103aaa:	2300      	movs	r3, #0
 8103aac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8103aae:	68fb      	ldr	r3, [r7, #12]
 8103ab0:	68ba      	ldr	r2, [r7, #8]
 8103ab2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8103ab4:	68fb      	ldr	r3, [r7, #12]
 8103ab6:	68fa      	ldr	r2, [r7, #12]
 8103ab8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8103aba:	68ba      	ldr	r2, [r7, #8]
 8103abc:	687b      	ldr	r3, [r7, #4]
 8103abe:	429a      	cmp	r2, r3
 8103ac0:	d812      	bhi.n	8103ae8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8103ac2:	687a      	ldr	r2, [r7, #4]
 8103ac4:	683b      	ldr	r3, [r7, #0]
 8103ac6:	1ad2      	subs	r2, r2, r3
 8103ac8:	68fb      	ldr	r3, [r7, #12]
 8103aca:	699b      	ldr	r3, [r3, #24]
 8103acc:	429a      	cmp	r2, r3
 8103ace:	d302      	bcc.n	8103ad6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8103ad0:	2301      	movs	r3, #1
 8103ad2:	617b      	str	r3, [r7, #20]
 8103ad4:	e01b      	b.n	8103b0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8103ad6:	4b10      	ldr	r3, [pc, #64]	; (8103b18 <prvInsertTimerInActiveList+0x7c>)
 8103ad8:	681a      	ldr	r2, [r3, #0]
 8103ada:	68fb      	ldr	r3, [r7, #12]
 8103adc:	3304      	adds	r3, #4
 8103ade:	4619      	mov	r1, r3
 8103ae0:	4610      	mov	r0, r2
 8103ae2:	f7fd ff8c 	bl	81019fe <vListInsert>
 8103ae6:	e012      	b.n	8103b0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8103ae8:	687a      	ldr	r2, [r7, #4]
 8103aea:	683b      	ldr	r3, [r7, #0]
 8103aec:	429a      	cmp	r2, r3
 8103aee:	d206      	bcs.n	8103afe <prvInsertTimerInActiveList+0x62>
 8103af0:	68ba      	ldr	r2, [r7, #8]
 8103af2:	683b      	ldr	r3, [r7, #0]
 8103af4:	429a      	cmp	r2, r3
 8103af6:	d302      	bcc.n	8103afe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8103af8:	2301      	movs	r3, #1
 8103afa:	617b      	str	r3, [r7, #20]
 8103afc:	e007      	b.n	8103b0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8103afe:	4b07      	ldr	r3, [pc, #28]	; (8103b1c <prvInsertTimerInActiveList+0x80>)
 8103b00:	681a      	ldr	r2, [r3, #0]
 8103b02:	68fb      	ldr	r3, [r7, #12]
 8103b04:	3304      	adds	r3, #4
 8103b06:	4619      	mov	r1, r3
 8103b08:	4610      	mov	r0, r2
 8103b0a:	f7fd ff78 	bl	81019fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8103b0e:	697b      	ldr	r3, [r7, #20]
}
 8103b10:	4618      	mov	r0, r3
 8103b12:	3718      	adds	r7, #24
 8103b14:	46bd      	mov	sp, r7
 8103b16:	bd80      	pop	{r7, pc}
 8103b18:	10004968 	.word	0x10004968
 8103b1c:	10004964 	.word	0x10004964

08103b20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8103b20:	b580      	push	{r7, lr}
 8103b22:	b08e      	sub	sp, #56	; 0x38
 8103b24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8103b26:	e0ca      	b.n	8103cbe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8103b28:	687b      	ldr	r3, [r7, #4]
 8103b2a:	2b00      	cmp	r3, #0
 8103b2c:	da18      	bge.n	8103b60 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8103b2e:	1d3b      	adds	r3, r7, #4
 8103b30:	3304      	adds	r3, #4
 8103b32:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8103b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103b36:	2b00      	cmp	r3, #0
 8103b38:	d10a      	bne.n	8103b50 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8103b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103b3e:	f383 8811 	msr	BASEPRI, r3
 8103b42:	f3bf 8f6f 	isb	sy
 8103b46:	f3bf 8f4f 	dsb	sy
 8103b4a:	61fb      	str	r3, [r7, #28]
}
 8103b4c:	bf00      	nop
 8103b4e:	e7fe      	b.n	8103b4e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8103b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103b52:	681b      	ldr	r3, [r3, #0]
 8103b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8103b56:	6850      	ldr	r0, [r2, #4]
 8103b58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8103b5a:	6892      	ldr	r2, [r2, #8]
 8103b5c:	4611      	mov	r1, r2
 8103b5e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8103b60:	687b      	ldr	r3, [r7, #4]
 8103b62:	2b00      	cmp	r3, #0
 8103b64:	f2c0 80aa 	blt.w	8103cbc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8103b68:	68fb      	ldr	r3, [r7, #12]
 8103b6a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8103b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103b6e:	695b      	ldr	r3, [r3, #20]
 8103b70:	2b00      	cmp	r3, #0
 8103b72:	d004      	beq.n	8103b7e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8103b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103b76:	3304      	adds	r3, #4
 8103b78:	4618      	mov	r0, r3
 8103b7a:	f7fd ff79 	bl	8101a70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8103b7e:	463b      	mov	r3, r7
 8103b80:	4618      	mov	r0, r3
 8103b82:	f7ff ff6b 	bl	8103a5c <prvSampleTimeNow>
 8103b86:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8103b88:	687b      	ldr	r3, [r7, #4]
 8103b8a:	2b09      	cmp	r3, #9
 8103b8c:	f200 8097 	bhi.w	8103cbe <prvProcessReceivedCommands+0x19e>
 8103b90:	a201      	add	r2, pc, #4	; (adr r2, 8103b98 <prvProcessReceivedCommands+0x78>)
 8103b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103b96:	bf00      	nop
 8103b98:	08103bc1 	.word	0x08103bc1
 8103b9c:	08103bc1 	.word	0x08103bc1
 8103ba0:	08103bc1 	.word	0x08103bc1
 8103ba4:	08103c35 	.word	0x08103c35
 8103ba8:	08103c49 	.word	0x08103c49
 8103bac:	08103c93 	.word	0x08103c93
 8103bb0:	08103bc1 	.word	0x08103bc1
 8103bb4:	08103bc1 	.word	0x08103bc1
 8103bb8:	08103c35 	.word	0x08103c35
 8103bbc:	08103c49 	.word	0x08103c49
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8103bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103bc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8103bc6:	f043 0301 	orr.w	r3, r3, #1
 8103bca:	b2da      	uxtb	r2, r3
 8103bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103bce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8103bd2:	68ba      	ldr	r2, [r7, #8]
 8103bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103bd6:	699b      	ldr	r3, [r3, #24]
 8103bd8:	18d1      	adds	r1, r2, r3
 8103bda:	68bb      	ldr	r3, [r7, #8]
 8103bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103bde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8103be0:	f7ff ff5c 	bl	8103a9c <prvInsertTimerInActiveList>
 8103be4:	4603      	mov	r3, r0
 8103be6:	2b00      	cmp	r3, #0
 8103be8:	d069      	beq.n	8103cbe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8103bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103bec:	6a1b      	ldr	r3, [r3, #32]
 8103bee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8103bf0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8103bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103bf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8103bf8:	f003 0304 	and.w	r3, r3, #4
 8103bfc:	2b00      	cmp	r3, #0
 8103bfe:	d05e      	beq.n	8103cbe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8103c00:	68ba      	ldr	r2, [r7, #8]
 8103c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103c04:	699b      	ldr	r3, [r3, #24]
 8103c06:	441a      	add	r2, r3
 8103c08:	2300      	movs	r3, #0
 8103c0a:	9300      	str	r3, [sp, #0]
 8103c0c:	2300      	movs	r3, #0
 8103c0e:	2100      	movs	r1, #0
 8103c10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8103c12:	f7ff fe05 	bl	8103820 <xTimerGenericCommand>
 8103c16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8103c18:	6a3b      	ldr	r3, [r7, #32]
 8103c1a:	2b00      	cmp	r3, #0
 8103c1c:	d14f      	bne.n	8103cbe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8103c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103c22:	f383 8811 	msr	BASEPRI, r3
 8103c26:	f3bf 8f6f 	isb	sy
 8103c2a:	f3bf 8f4f 	dsb	sy
 8103c2e:	61bb      	str	r3, [r7, #24]
}
 8103c30:	bf00      	nop
 8103c32:	e7fe      	b.n	8103c32 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8103c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103c36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8103c3a:	f023 0301 	bic.w	r3, r3, #1
 8103c3e:	b2da      	uxtb	r2, r3
 8103c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103c42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8103c46:	e03a      	b.n	8103cbe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8103c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103c4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8103c4e:	f043 0301 	orr.w	r3, r3, #1
 8103c52:	b2da      	uxtb	r2, r3
 8103c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103c56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8103c5a:	68ba      	ldr	r2, [r7, #8]
 8103c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103c5e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8103c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103c62:	699b      	ldr	r3, [r3, #24]
 8103c64:	2b00      	cmp	r3, #0
 8103c66:	d10a      	bne.n	8103c7e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8103c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103c6c:	f383 8811 	msr	BASEPRI, r3
 8103c70:	f3bf 8f6f 	isb	sy
 8103c74:	f3bf 8f4f 	dsb	sy
 8103c78:	617b      	str	r3, [r7, #20]
}
 8103c7a:	bf00      	nop
 8103c7c:	e7fe      	b.n	8103c7c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8103c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103c80:	699a      	ldr	r2, [r3, #24]
 8103c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103c84:	18d1      	adds	r1, r2, r3
 8103c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103c8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8103c8c:	f7ff ff06 	bl	8103a9c <prvInsertTimerInActiveList>
					break;
 8103c90:	e015      	b.n	8103cbe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8103c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103c94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8103c98:	f003 0302 	and.w	r3, r3, #2
 8103c9c:	2b00      	cmp	r3, #0
 8103c9e:	d103      	bne.n	8103ca8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8103ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8103ca2:	f7fd fd3d 	bl	8101720 <vPortFree>
 8103ca6:	e00a      	b.n	8103cbe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8103ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103caa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8103cae:	f023 0301 	bic.w	r3, r3, #1
 8103cb2:	b2da      	uxtb	r2, r3
 8103cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103cb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8103cba:	e000      	b.n	8103cbe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8103cbc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8103cbe:	4b08      	ldr	r3, [pc, #32]	; (8103ce0 <prvProcessReceivedCommands+0x1c0>)
 8103cc0:	681b      	ldr	r3, [r3, #0]
 8103cc2:	1d39      	adds	r1, r7, #4
 8103cc4:	2200      	movs	r2, #0
 8103cc6:	4618      	mov	r0, r3
 8103cc8:	f7fe fbec 	bl	81024a4 <xQueueReceive>
 8103ccc:	4603      	mov	r3, r0
 8103cce:	2b00      	cmp	r3, #0
 8103cd0:	f47f af2a 	bne.w	8103b28 <prvProcessReceivedCommands+0x8>
	}
}
 8103cd4:	bf00      	nop
 8103cd6:	bf00      	nop
 8103cd8:	3730      	adds	r7, #48	; 0x30
 8103cda:	46bd      	mov	sp, r7
 8103cdc:	bd80      	pop	{r7, pc}
 8103cde:	bf00      	nop
 8103ce0:	1000496c 	.word	0x1000496c

08103ce4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8103ce4:	b580      	push	{r7, lr}
 8103ce6:	b088      	sub	sp, #32
 8103ce8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8103cea:	e048      	b.n	8103d7e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8103cec:	4b2d      	ldr	r3, [pc, #180]	; (8103da4 <prvSwitchTimerLists+0xc0>)
 8103cee:	681b      	ldr	r3, [r3, #0]
 8103cf0:	68db      	ldr	r3, [r3, #12]
 8103cf2:	681b      	ldr	r3, [r3, #0]
 8103cf4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8103cf6:	4b2b      	ldr	r3, [pc, #172]	; (8103da4 <prvSwitchTimerLists+0xc0>)
 8103cf8:	681b      	ldr	r3, [r3, #0]
 8103cfa:	68db      	ldr	r3, [r3, #12]
 8103cfc:	68db      	ldr	r3, [r3, #12]
 8103cfe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8103d00:	68fb      	ldr	r3, [r7, #12]
 8103d02:	3304      	adds	r3, #4
 8103d04:	4618      	mov	r0, r3
 8103d06:	f7fd feb3 	bl	8101a70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8103d0a:	68fb      	ldr	r3, [r7, #12]
 8103d0c:	6a1b      	ldr	r3, [r3, #32]
 8103d0e:	68f8      	ldr	r0, [r7, #12]
 8103d10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8103d12:	68fb      	ldr	r3, [r7, #12]
 8103d14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8103d18:	f003 0304 	and.w	r3, r3, #4
 8103d1c:	2b00      	cmp	r3, #0
 8103d1e:	d02e      	beq.n	8103d7e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8103d20:	68fb      	ldr	r3, [r7, #12]
 8103d22:	699b      	ldr	r3, [r3, #24]
 8103d24:	693a      	ldr	r2, [r7, #16]
 8103d26:	4413      	add	r3, r2
 8103d28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8103d2a:	68ba      	ldr	r2, [r7, #8]
 8103d2c:	693b      	ldr	r3, [r7, #16]
 8103d2e:	429a      	cmp	r2, r3
 8103d30:	d90e      	bls.n	8103d50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8103d32:	68fb      	ldr	r3, [r7, #12]
 8103d34:	68ba      	ldr	r2, [r7, #8]
 8103d36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8103d38:	68fb      	ldr	r3, [r7, #12]
 8103d3a:	68fa      	ldr	r2, [r7, #12]
 8103d3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8103d3e:	4b19      	ldr	r3, [pc, #100]	; (8103da4 <prvSwitchTimerLists+0xc0>)
 8103d40:	681a      	ldr	r2, [r3, #0]
 8103d42:	68fb      	ldr	r3, [r7, #12]
 8103d44:	3304      	adds	r3, #4
 8103d46:	4619      	mov	r1, r3
 8103d48:	4610      	mov	r0, r2
 8103d4a:	f7fd fe58 	bl	81019fe <vListInsert>
 8103d4e:	e016      	b.n	8103d7e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8103d50:	2300      	movs	r3, #0
 8103d52:	9300      	str	r3, [sp, #0]
 8103d54:	2300      	movs	r3, #0
 8103d56:	693a      	ldr	r2, [r7, #16]
 8103d58:	2100      	movs	r1, #0
 8103d5a:	68f8      	ldr	r0, [r7, #12]
 8103d5c:	f7ff fd60 	bl	8103820 <xTimerGenericCommand>
 8103d60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8103d62:	687b      	ldr	r3, [r7, #4]
 8103d64:	2b00      	cmp	r3, #0
 8103d66:	d10a      	bne.n	8103d7e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8103d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103d6c:	f383 8811 	msr	BASEPRI, r3
 8103d70:	f3bf 8f6f 	isb	sy
 8103d74:	f3bf 8f4f 	dsb	sy
 8103d78:	603b      	str	r3, [r7, #0]
}
 8103d7a:	bf00      	nop
 8103d7c:	e7fe      	b.n	8103d7c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8103d7e:	4b09      	ldr	r3, [pc, #36]	; (8103da4 <prvSwitchTimerLists+0xc0>)
 8103d80:	681b      	ldr	r3, [r3, #0]
 8103d82:	681b      	ldr	r3, [r3, #0]
 8103d84:	2b00      	cmp	r3, #0
 8103d86:	d1b1      	bne.n	8103cec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8103d88:	4b06      	ldr	r3, [pc, #24]	; (8103da4 <prvSwitchTimerLists+0xc0>)
 8103d8a:	681b      	ldr	r3, [r3, #0]
 8103d8c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8103d8e:	4b06      	ldr	r3, [pc, #24]	; (8103da8 <prvSwitchTimerLists+0xc4>)
 8103d90:	681b      	ldr	r3, [r3, #0]
 8103d92:	4a04      	ldr	r2, [pc, #16]	; (8103da4 <prvSwitchTimerLists+0xc0>)
 8103d94:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8103d96:	4a04      	ldr	r2, [pc, #16]	; (8103da8 <prvSwitchTimerLists+0xc4>)
 8103d98:	697b      	ldr	r3, [r7, #20]
 8103d9a:	6013      	str	r3, [r2, #0]
}
 8103d9c:	bf00      	nop
 8103d9e:	3718      	adds	r7, #24
 8103da0:	46bd      	mov	sp, r7
 8103da2:	bd80      	pop	{r7, pc}
 8103da4:	10004964 	.word	0x10004964
 8103da8:	10004968 	.word	0x10004968

08103dac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8103dac:	b580      	push	{r7, lr}
 8103dae:	b082      	sub	sp, #8
 8103db0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8103db2:	f7fd ffb7 	bl	8101d24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8103db6:	4b15      	ldr	r3, [pc, #84]	; (8103e0c <prvCheckForValidListAndQueue+0x60>)
 8103db8:	681b      	ldr	r3, [r3, #0]
 8103dba:	2b00      	cmp	r3, #0
 8103dbc:	d120      	bne.n	8103e00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8103dbe:	4814      	ldr	r0, [pc, #80]	; (8103e10 <prvCheckForValidListAndQueue+0x64>)
 8103dc0:	f7fd fdcc 	bl	810195c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8103dc4:	4813      	ldr	r0, [pc, #76]	; (8103e14 <prvCheckForValidListAndQueue+0x68>)
 8103dc6:	f7fd fdc9 	bl	810195c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8103dca:	4b13      	ldr	r3, [pc, #76]	; (8103e18 <prvCheckForValidListAndQueue+0x6c>)
 8103dcc:	4a10      	ldr	r2, [pc, #64]	; (8103e10 <prvCheckForValidListAndQueue+0x64>)
 8103dce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8103dd0:	4b12      	ldr	r3, [pc, #72]	; (8103e1c <prvCheckForValidListAndQueue+0x70>)
 8103dd2:	4a10      	ldr	r2, [pc, #64]	; (8103e14 <prvCheckForValidListAndQueue+0x68>)
 8103dd4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8103dd6:	2300      	movs	r3, #0
 8103dd8:	9300      	str	r3, [sp, #0]
 8103dda:	4b11      	ldr	r3, [pc, #68]	; (8103e20 <prvCheckForValidListAndQueue+0x74>)
 8103ddc:	4a11      	ldr	r2, [pc, #68]	; (8103e24 <prvCheckForValidListAndQueue+0x78>)
 8103dde:	2110      	movs	r1, #16
 8103de0:	200a      	movs	r0, #10
 8103de2:	f7fe f929 	bl	8102038 <xQueueGenericCreateStatic>
 8103de6:	4603      	mov	r3, r0
 8103de8:	4a08      	ldr	r2, [pc, #32]	; (8103e0c <prvCheckForValidListAndQueue+0x60>)
 8103dea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8103dec:	4b07      	ldr	r3, [pc, #28]	; (8103e0c <prvCheckForValidListAndQueue+0x60>)
 8103dee:	681b      	ldr	r3, [r3, #0]
 8103df0:	2b00      	cmp	r3, #0
 8103df2:	d005      	beq.n	8103e00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8103df4:	4b05      	ldr	r3, [pc, #20]	; (8103e0c <prvCheckForValidListAndQueue+0x60>)
 8103df6:	681b      	ldr	r3, [r3, #0]
 8103df8:	490b      	ldr	r1, [pc, #44]	; (8103e28 <prvCheckForValidListAndQueue+0x7c>)
 8103dfa:	4618      	mov	r0, r3
 8103dfc:	f7fe fd42 	bl	8102884 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8103e00:	f7fd ffc0 	bl	8101d84 <vPortExitCritical>
}
 8103e04:	bf00      	nop
 8103e06:	46bd      	mov	sp, r7
 8103e08:	bd80      	pop	{r7, pc}
 8103e0a:	bf00      	nop
 8103e0c:	1000496c 	.word	0x1000496c
 8103e10:	1000493c 	.word	0x1000493c
 8103e14:	10004950 	.word	0x10004950
 8103e18:	10004964 	.word	0x10004964
 8103e1c:	10004968 	.word	0x10004968
 8103e20:	10004a18 	.word	0x10004a18
 8103e24:	10004978 	.word	0x10004978
 8103e28:	08104e78 	.word	0x08104e78

08103e2c <__errno>:
 8103e2c:	4b01      	ldr	r3, [pc, #4]	; (8103e34 <__errno+0x8>)
 8103e2e:	6818      	ldr	r0, [r3, #0]
 8103e30:	4770      	bx	lr
 8103e32:	bf00      	nop
 8103e34:	10000014 	.word	0x10000014

08103e38 <std>:
 8103e38:	2300      	movs	r3, #0
 8103e3a:	b510      	push	{r4, lr}
 8103e3c:	4604      	mov	r4, r0
 8103e3e:	e9c0 3300 	strd	r3, r3, [r0]
 8103e42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8103e46:	6083      	str	r3, [r0, #8]
 8103e48:	8181      	strh	r1, [r0, #12]
 8103e4a:	6643      	str	r3, [r0, #100]	; 0x64
 8103e4c:	81c2      	strh	r2, [r0, #14]
 8103e4e:	6183      	str	r3, [r0, #24]
 8103e50:	4619      	mov	r1, r3
 8103e52:	2208      	movs	r2, #8
 8103e54:	305c      	adds	r0, #92	; 0x5c
 8103e56:	f000 f91a 	bl	810408e <memset>
 8103e5a:	4b05      	ldr	r3, [pc, #20]	; (8103e70 <std+0x38>)
 8103e5c:	6263      	str	r3, [r4, #36]	; 0x24
 8103e5e:	4b05      	ldr	r3, [pc, #20]	; (8103e74 <std+0x3c>)
 8103e60:	62a3      	str	r3, [r4, #40]	; 0x28
 8103e62:	4b05      	ldr	r3, [pc, #20]	; (8103e78 <std+0x40>)
 8103e64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8103e66:	4b05      	ldr	r3, [pc, #20]	; (8103e7c <std+0x44>)
 8103e68:	6224      	str	r4, [r4, #32]
 8103e6a:	6323      	str	r3, [r4, #48]	; 0x30
 8103e6c:	bd10      	pop	{r4, pc}
 8103e6e:	bf00      	nop
 8103e70:	08104279 	.word	0x08104279
 8103e74:	0810429b 	.word	0x0810429b
 8103e78:	081042d3 	.word	0x081042d3
 8103e7c:	081042f7 	.word	0x081042f7

08103e80 <_cleanup_r>:
 8103e80:	4901      	ldr	r1, [pc, #4]	; (8103e88 <_cleanup_r+0x8>)
 8103e82:	f000 b8af 	b.w	8103fe4 <_fwalk_reent>
 8103e86:	bf00      	nop
 8103e88:	08104451 	.word	0x08104451

08103e8c <__sfmoreglue>:
 8103e8c:	b570      	push	{r4, r5, r6, lr}
 8103e8e:	1e4a      	subs	r2, r1, #1
 8103e90:	2568      	movs	r5, #104	; 0x68
 8103e92:	4355      	muls	r5, r2
 8103e94:	460e      	mov	r6, r1
 8103e96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8103e9a:	f000 f901 	bl	81040a0 <_malloc_r>
 8103e9e:	4604      	mov	r4, r0
 8103ea0:	b140      	cbz	r0, 8103eb4 <__sfmoreglue+0x28>
 8103ea2:	2100      	movs	r1, #0
 8103ea4:	e9c0 1600 	strd	r1, r6, [r0]
 8103ea8:	300c      	adds	r0, #12
 8103eaa:	60a0      	str	r0, [r4, #8]
 8103eac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8103eb0:	f000 f8ed 	bl	810408e <memset>
 8103eb4:	4620      	mov	r0, r4
 8103eb6:	bd70      	pop	{r4, r5, r6, pc}

08103eb8 <__sfp_lock_acquire>:
 8103eb8:	4801      	ldr	r0, [pc, #4]	; (8103ec0 <__sfp_lock_acquire+0x8>)
 8103eba:	f000 b8d8 	b.w	810406e <__retarget_lock_acquire_recursive>
 8103ebe:	bf00      	nop
 8103ec0:	10004ac0 	.word	0x10004ac0

08103ec4 <__sfp_lock_release>:
 8103ec4:	4801      	ldr	r0, [pc, #4]	; (8103ecc <__sfp_lock_release+0x8>)
 8103ec6:	f000 b8d3 	b.w	8104070 <__retarget_lock_release_recursive>
 8103eca:	bf00      	nop
 8103ecc:	10004ac0 	.word	0x10004ac0

08103ed0 <__sinit_lock_acquire>:
 8103ed0:	4801      	ldr	r0, [pc, #4]	; (8103ed8 <__sinit_lock_acquire+0x8>)
 8103ed2:	f000 b8cc 	b.w	810406e <__retarget_lock_acquire_recursive>
 8103ed6:	bf00      	nop
 8103ed8:	10004abb 	.word	0x10004abb

08103edc <__sinit_lock_release>:
 8103edc:	4801      	ldr	r0, [pc, #4]	; (8103ee4 <__sinit_lock_release+0x8>)
 8103ede:	f000 b8c7 	b.w	8104070 <__retarget_lock_release_recursive>
 8103ee2:	bf00      	nop
 8103ee4:	10004abb 	.word	0x10004abb

08103ee8 <__sinit>:
 8103ee8:	b510      	push	{r4, lr}
 8103eea:	4604      	mov	r4, r0
 8103eec:	f7ff fff0 	bl	8103ed0 <__sinit_lock_acquire>
 8103ef0:	69a3      	ldr	r3, [r4, #24]
 8103ef2:	b11b      	cbz	r3, 8103efc <__sinit+0x14>
 8103ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8103ef8:	f7ff bff0 	b.w	8103edc <__sinit_lock_release>
 8103efc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8103f00:	6523      	str	r3, [r4, #80]	; 0x50
 8103f02:	4b13      	ldr	r3, [pc, #76]	; (8103f50 <__sinit+0x68>)
 8103f04:	4a13      	ldr	r2, [pc, #76]	; (8103f54 <__sinit+0x6c>)
 8103f06:	681b      	ldr	r3, [r3, #0]
 8103f08:	62a2      	str	r2, [r4, #40]	; 0x28
 8103f0a:	42a3      	cmp	r3, r4
 8103f0c:	bf04      	itt	eq
 8103f0e:	2301      	moveq	r3, #1
 8103f10:	61a3      	streq	r3, [r4, #24]
 8103f12:	4620      	mov	r0, r4
 8103f14:	f000 f820 	bl	8103f58 <__sfp>
 8103f18:	6060      	str	r0, [r4, #4]
 8103f1a:	4620      	mov	r0, r4
 8103f1c:	f000 f81c 	bl	8103f58 <__sfp>
 8103f20:	60a0      	str	r0, [r4, #8]
 8103f22:	4620      	mov	r0, r4
 8103f24:	f000 f818 	bl	8103f58 <__sfp>
 8103f28:	2200      	movs	r2, #0
 8103f2a:	60e0      	str	r0, [r4, #12]
 8103f2c:	2104      	movs	r1, #4
 8103f2e:	6860      	ldr	r0, [r4, #4]
 8103f30:	f7ff ff82 	bl	8103e38 <std>
 8103f34:	68a0      	ldr	r0, [r4, #8]
 8103f36:	2201      	movs	r2, #1
 8103f38:	2109      	movs	r1, #9
 8103f3a:	f7ff ff7d 	bl	8103e38 <std>
 8103f3e:	68e0      	ldr	r0, [r4, #12]
 8103f40:	2202      	movs	r2, #2
 8103f42:	2112      	movs	r1, #18
 8103f44:	f7ff ff78 	bl	8103e38 <std>
 8103f48:	2301      	movs	r3, #1
 8103f4a:	61a3      	str	r3, [r4, #24]
 8103f4c:	e7d2      	b.n	8103ef4 <__sinit+0xc>
 8103f4e:	bf00      	nop
 8103f50:	08104f14 	.word	0x08104f14
 8103f54:	08103e81 	.word	0x08103e81

08103f58 <__sfp>:
 8103f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8103f5a:	4607      	mov	r7, r0
 8103f5c:	f7ff ffac 	bl	8103eb8 <__sfp_lock_acquire>
 8103f60:	4b1e      	ldr	r3, [pc, #120]	; (8103fdc <__sfp+0x84>)
 8103f62:	681e      	ldr	r6, [r3, #0]
 8103f64:	69b3      	ldr	r3, [r6, #24]
 8103f66:	b913      	cbnz	r3, 8103f6e <__sfp+0x16>
 8103f68:	4630      	mov	r0, r6
 8103f6a:	f7ff ffbd 	bl	8103ee8 <__sinit>
 8103f6e:	3648      	adds	r6, #72	; 0x48
 8103f70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8103f74:	3b01      	subs	r3, #1
 8103f76:	d503      	bpl.n	8103f80 <__sfp+0x28>
 8103f78:	6833      	ldr	r3, [r6, #0]
 8103f7a:	b30b      	cbz	r3, 8103fc0 <__sfp+0x68>
 8103f7c:	6836      	ldr	r6, [r6, #0]
 8103f7e:	e7f7      	b.n	8103f70 <__sfp+0x18>
 8103f80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8103f84:	b9d5      	cbnz	r5, 8103fbc <__sfp+0x64>
 8103f86:	4b16      	ldr	r3, [pc, #88]	; (8103fe0 <__sfp+0x88>)
 8103f88:	60e3      	str	r3, [r4, #12]
 8103f8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8103f8e:	6665      	str	r5, [r4, #100]	; 0x64
 8103f90:	f000 f86c 	bl	810406c <__retarget_lock_init_recursive>
 8103f94:	f7ff ff96 	bl	8103ec4 <__sfp_lock_release>
 8103f98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8103f9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8103fa0:	6025      	str	r5, [r4, #0]
 8103fa2:	61a5      	str	r5, [r4, #24]
 8103fa4:	2208      	movs	r2, #8
 8103fa6:	4629      	mov	r1, r5
 8103fa8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8103fac:	f000 f86f 	bl	810408e <memset>
 8103fb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8103fb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8103fb8:	4620      	mov	r0, r4
 8103fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8103fbc:	3468      	adds	r4, #104	; 0x68
 8103fbe:	e7d9      	b.n	8103f74 <__sfp+0x1c>
 8103fc0:	2104      	movs	r1, #4
 8103fc2:	4638      	mov	r0, r7
 8103fc4:	f7ff ff62 	bl	8103e8c <__sfmoreglue>
 8103fc8:	4604      	mov	r4, r0
 8103fca:	6030      	str	r0, [r6, #0]
 8103fcc:	2800      	cmp	r0, #0
 8103fce:	d1d5      	bne.n	8103f7c <__sfp+0x24>
 8103fd0:	f7ff ff78 	bl	8103ec4 <__sfp_lock_release>
 8103fd4:	230c      	movs	r3, #12
 8103fd6:	603b      	str	r3, [r7, #0]
 8103fd8:	e7ee      	b.n	8103fb8 <__sfp+0x60>
 8103fda:	bf00      	nop
 8103fdc:	08104f14 	.word	0x08104f14
 8103fe0:	ffff0001 	.word	0xffff0001

08103fe4 <_fwalk_reent>:
 8103fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8103fe8:	4606      	mov	r6, r0
 8103fea:	4688      	mov	r8, r1
 8103fec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8103ff0:	2700      	movs	r7, #0
 8103ff2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8103ff6:	f1b9 0901 	subs.w	r9, r9, #1
 8103ffa:	d505      	bpl.n	8104008 <_fwalk_reent+0x24>
 8103ffc:	6824      	ldr	r4, [r4, #0]
 8103ffe:	2c00      	cmp	r4, #0
 8104000:	d1f7      	bne.n	8103ff2 <_fwalk_reent+0xe>
 8104002:	4638      	mov	r0, r7
 8104004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8104008:	89ab      	ldrh	r3, [r5, #12]
 810400a:	2b01      	cmp	r3, #1
 810400c:	d907      	bls.n	810401e <_fwalk_reent+0x3a>
 810400e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8104012:	3301      	adds	r3, #1
 8104014:	d003      	beq.n	810401e <_fwalk_reent+0x3a>
 8104016:	4629      	mov	r1, r5
 8104018:	4630      	mov	r0, r6
 810401a:	47c0      	blx	r8
 810401c:	4307      	orrs	r7, r0
 810401e:	3568      	adds	r5, #104	; 0x68
 8104020:	e7e9      	b.n	8103ff6 <_fwalk_reent+0x12>
	...

08104024 <__libc_init_array>:
 8104024:	b570      	push	{r4, r5, r6, lr}
 8104026:	4d0d      	ldr	r5, [pc, #52]	; (810405c <__libc_init_array+0x38>)
 8104028:	4c0d      	ldr	r4, [pc, #52]	; (8104060 <__libc_init_array+0x3c>)
 810402a:	1b64      	subs	r4, r4, r5
 810402c:	10a4      	asrs	r4, r4, #2
 810402e:	2600      	movs	r6, #0
 8104030:	42a6      	cmp	r6, r4
 8104032:	d109      	bne.n	8104048 <__libc_init_array+0x24>
 8104034:	4d0b      	ldr	r5, [pc, #44]	; (8104064 <__libc_init_array+0x40>)
 8104036:	4c0c      	ldr	r4, [pc, #48]	; (8104068 <__libc_init_array+0x44>)
 8104038:	f000 fefa 	bl	8104e30 <_init>
 810403c:	1b64      	subs	r4, r4, r5
 810403e:	10a4      	asrs	r4, r4, #2
 8104040:	2600      	movs	r6, #0
 8104042:	42a6      	cmp	r6, r4
 8104044:	d105      	bne.n	8104052 <__libc_init_array+0x2e>
 8104046:	bd70      	pop	{r4, r5, r6, pc}
 8104048:	f855 3b04 	ldr.w	r3, [r5], #4
 810404c:	4798      	blx	r3
 810404e:	3601      	adds	r6, #1
 8104050:	e7ee      	b.n	8104030 <__libc_init_array+0xc>
 8104052:	f855 3b04 	ldr.w	r3, [r5], #4
 8104056:	4798      	blx	r3
 8104058:	3601      	adds	r6, #1
 810405a:	e7f2      	b.n	8104042 <__libc_init_array+0x1e>
 810405c:	08104f4c 	.word	0x08104f4c
 8104060:	08104f4c 	.word	0x08104f4c
 8104064:	08104f4c 	.word	0x08104f4c
 8104068:	08104f50 	.word	0x08104f50

0810406c <__retarget_lock_init_recursive>:
 810406c:	4770      	bx	lr

0810406e <__retarget_lock_acquire_recursive>:
 810406e:	4770      	bx	lr

08104070 <__retarget_lock_release_recursive>:
 8104070:	4770      	bx	lr

08104072 <memcpy>:
 8104072:	440a      	add	r2, r1
 8104074:	4291      	cmp	r1, r2
 8104076:	f100 33ff 	add.w	r3, r0, #4294967295
 810407a:	d100      	bne.n	810407e <memcpy+0xc>
 810407c:	4770      	bx	lr
 810407e:	b510      	push	{r4, lr}
 8104080:	f811 4b01 	ldrb.w	r4, [r1], #1
 8104084:	f803 4f01 	strb.w	r4, [r3, #1]!
 8104088:	4291      	cmp	r1, r2
 810408a:	d1f9      	bne.n	8104080 <memcpy+0xe>
 810408c:	bd10      	pop	{r4, pc}

0810408e <memset>:
 810408e:	4402      	add	r2, r0
 8104090:	4603      	mov	r3, r0
 8104092:	4293      	cmp	r3, r2
 8104094:	d100      	bne.n	8104098 <memset+0xa>
 8104096:	4770      	bx	lr
 8104098:	f803 1b01 	strb.w	r1, [r3], #1
 810409c:	e7f9      	b.n	8104092 <memset+0x4>
	...

081040a0 <_malloc_r>:
 81040a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81040a2:	1ccd      	adds	r5, r1, #3
 81040a4:	f025 0503 	bic.w	r5, r5, #3
 81040a8:	3508      	adds	r5, #8
 81040aa:	2d0c      	cmp	r5, #12
 81040ac:	bf38      	it	cc
 81040ae:	250c      	movcc	r5, #12
 81040b0:	2d00      	cmp	r5, #0
 81040b2:	4606      	mov	r6, r0
 81040b4:	db01      	blt.n	81040ba <_malloc_r+0x1a>
 81040b6:	42a9      	cmp	r1, r5
 81040b8:	d903      	bls.n	81040c2 <_malloc_r+0x22>
 81040ba:	230c      	movs	r3, #12
 81040bc:	6033      	str	r3, [r6, #0]
 81040be:	2000      	movs	r0, #0
 81040c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81040c2:	f000 fa13 	bl	81044ec <__malloc_lock>
 81040c6:	4921      	ldr	r1, [pc, #132]	; (810414c <_malloc_r+0xac>)
 81040c8:	680a      	ldr	r2, [r1, #0]
 81040ca:	4614      	mov	r4, r2
 81040cc:	b99c      	cbnz	r4, 81040f6 <_malloc_r+0x56>
 81040ce:	4f20      	ldr	r7, [pc, #128]	; (8104150 <_malloc_r+0xb0>)
 81040d0:	683b      	ldr	r3, [r7, #0]
 81040d2:	b923      	cbnz	r3, 81040de <_malloc_r+0x3e>
 81040d4:	4621      	mov	r1, r4
 81040d6:	4630      	mov	r0, r6
 81040d8:	f000 f8be 	bl	8104258 <_sbrk_r>
 81040dc:	6038      	str	r0, [r7, #0]
 81040de:	4629      	mov	r1, r5
 81040e0:	4630      	mov	r0, r6
 81040e2:	f000 f8b9 	bl	8104258 <_sbrk_r>
 81040e6:	1c43      	adds	r3, r0, #1
 81040e8:	d123      	bne.n	8104132 <_malloc_r+0x92>
 81040ea:	230c      	movs	r3, #12
 81040ec:	6033      	str	r3, [r6, #0]
 81040ee:	4630      	mov	r0, r6
 81040f0:	f000 fa02 	bl	81044f8 <__malloc_unlock>
 81040f4:	e7e3      	b.n	81040be <_malloc_r+0x1e>
 81040f6:	6823      	ldr	r3, [r4, #0]
 81040f8:	1b5b      	subs	r3, r3, r5
 81040fa:	d417      	bmi.n	810412c <_malloc_r+0x8c>
 81040fc:	2b0b      	cmp	r3, #11
 81040fe:	d903      	bls.n	8104108 <_malloc_r+0x68>
 8104100:	6023      	str	r3, [r4, #0]
 8104102:	441c      	add	r4, r3
 8104104:	6025      	str	r5, [r4, #0]
 8104106:	e004      	b.n	8104112 <_malloc_r+0x72>
 8104108:	6863      	ldr	r3, [r4, #4]
 810410a:	42a2      	cmp	r2, r4
 810410c:	bf0c      	ite	eq
 810410e:	600b      	streq	r3, [r1, #0]
 8104110:	6053      	strne	r3, [r2, #4]
 8104112:	4630      	mov	r0, r6
 8104114:	f000 f9f0 	bl	81044f8 <__malloc_unlock>
 8104118:	f104 000b 	add.w	r0, r4, #11
 810411c:	1d23      	adds	r3, r4, #4
 810411e:	f020 0007 	bic.w	r0, r0, #7
 8104122:	1ac2      	subs	r2, r0, r3
 8104124:	d0cc      	beq.n	81040c0 <_malloc_r+0x20>
 8104126:	1a1b      	subs	r3, r3, r0
 8104128:	50a3      	str	r3, [r4, r2]
 810412a:	e7c9      	b.n	81040c0 <_malloc_r+0x20>
 810412c:	4622      	mov	r2, r4
 810412e:	6864      	ldr	r4, [r4, #4]
 8104130:	e7cc      	b.n	81040cc <_malloc_r+0x2c>
 8104132:	1cc4      	adds	r4, r0, #3
 8104134:	f024 0403 	bic.w	r4, r4, #3
 8104138:	42a0      	cmp	r0, r4
 810413a:	d0e3      	beq.n	8104104 <_malloc_r+0x64>
 810413c:	1a21      	subs	r1, r4, r0
 810413e:	4630      	mov	r0, r6
 8104140:	f000 f88a 	bl	8104258 <_sbrk_r>
 8104144:	3001      	adds	r0, #1
 8104146:	d1dd      	bne.n	8104104 <_malloc_r+0x64>
 8104148:	e7cf      	b.n	81040ea <_malloc_r+0x4a>
 810414a:	bf00      	nop
 810414c:	10004a68 	.word	0x10004a68
 8104150:	10004a6c 	.word	0x10004a6c

08104154 <iprintf>:
 8104154:	b40f      	push	{r0, r1, r2, r3}
 8104156:	4b0a      	ldr	r3, [pc, #40]	; (8104180 <iprintf+0x2c>)
 8104158:	b513      	push	{r0, r1, r4, lr}
 810415a:	681c      	ldr	r4, [r3, #0]
 810415c:	b124      	cbz	r4, 8104168 <iprintf+0x14>
 810415e:	69a3      	ldr	r3, [r4, #24]
 8104160:	b913      	cbnz	r3, 8104168 <iprintf+0x14>
 8104162:	4620      	mov	r0, r4
 8104164:	f7ff fec0 	bl	8103ee8 <__sinit>
 8104168:	ab05      	add	r3, sp, #20
 810416a:	9a04      	ldr	r2, [sp, #16]
 810416c:	68a1      	ldr	r1, [r4, #8]
 810416e:	9301      	str	r3, [sp, #4]
 8104170:	4620      	mov	r0, r4
 8104172:	f000 fa41 	bl	81045f8 <_vfiprintf_r>
 8104176:	b002      	add	sp, #8
 8104178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810417c:	b004      	add	sp, #16
 810417e:	4770      	bx	lr
 8104180:	10000014 	.word	0x10000014

08104184 <cleanup_glue>:
 8104184:	b538      	push	{r3, r4, r5, lr}
 8104186:	460c      	mov	r4, r1
 8104188:	6809      	ldr	r1, [r1, #0]
 810418a:	4605      	mov	r5, r0
 810418c:	b109      	cbz	r1, 8104192 <cleanup_glue+0xe>
 810418e:	f7ff fff9 	bl	8104184 <cleanup_glue>
 8104192:	4621      	mov	r1, r4
 8104194:	4628      	mov	r0, r5
 8104196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810419a:	f000 b9b3 	b.w	8104504 <_free_r>
	...

081041a0 <_reclaim_reent>:
 81041a0:	4b2c      	ldr	r3, [pc, #176]	; (8104254 <_reclaim_reent+0xb4>)
 81041a2:	681b      	ldr	r3, [r3, #0]
 81041a4:	4283      	cmp	r3, r0
 81041a6:	b570      	push	{r4, r5, r6, lr}
 81041a8:	4604      	mov	r4, r0
 81041aa:	d051      	beq.n	8104250 <_reclaim_reent+0xb0>
 81041ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 81041ae:	b143      	cbz	r3, 81041c2 <_reclaim_reent+0x22>
 81041b0:	68db      	ldr	r3, [r3, #12]
 81041b2:	2b00      	cmp	r3, #0
 81041b4:	d14a      	bne.n	810424c <_reclaim_reent+0xac>
 81041b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81041b8:	6819      	ldr	r1, [r3, #0]
 81041ba:	b111      	cbz	r1, 81041c2 <_reclaim_reent+0x22>
 81041bc:	4620      	mov	r0, r4
 81041be:	f000 f9a1 	bl	8104504 <_free_r>
 81041c2:	6961      	ldr	r1, [r4, #20]
 81041c4:	b111      	cbz	r1, 81041cc <_reclaim_reent+0x2c>
 81041c6:	4620      	mov	r0, r4
 81041c8:	f000 f99c 	bl	8104504 <_free_r>
 81041cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 81041ce:	b111      	cbz	r1, 81041d6 <_reclaim_reent+0x36>
 81041d0:	4620      	mov	r0, r4
 81041d2:	f000 f997 	bl	8104504 <_free_r>
 81041d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 81041d8:	b111      	cbz	r1, 81041e0 <_reclaim_reent+0x40>
 81041da:	4620      	mov	r0, r4
 81041dc:	f000 f992 	bl	8104504 <_free_r>
 81041e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 81041e2:	b111      	cbz	r1, 81041ea <_reclaim_reent+0x4a>
 81041e4:	4620      	mov	r0, r4
 81041e6:	f000 f98d 	bl	8104504 <_free_r>
 81041ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 81041ec:	b111      	cbz	r1, 81041f4 <_reclaim_reent+0x54>
 81041ee:	4620      	mov	r0, r4
 81041f0:	f000 f988 	bl	8104504 <_free_r>
 81041f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 81041f6:	b111      	cbz	r1, 81041fe <_reclaim_reent+0x5e>
 81041f8:	4620      	mov	r0, r4
 81041fa:	f000 f983 	bl	8104504 <_free_r>
 81041fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8104200:	b111      	cbz	r1, 8104208 <_reclaim_reent+0x68>
 8104202:	4620      	mov	r0, r4
 8104204:	f000 f97e 	bl	8104504 <_free_r>
 8104208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810420a:	b111      	cbz	r1, 8104212 <_reclaim_reent+0x72>
 810420c:	4620      	mov	r0, r4
 810420e:	f000 f979 	bl	8104504 <_free_r>
 8104212:	69a3      	ldr	r3, [r4, #24]
 8104214:	b1e3      	cbz	r3, 8104250 <_reclaim_reent+0xb0>
 8104216:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8104218:	4620      	mov	r0, r4
 810421a:	4798      	blx	r3
 810421c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 810421e:	b1b9      	cbz	r1, 8104250 <_reclaim_reent+0xb0>
 8104220:	4620      	mov	r0, r4
 8104222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8104226:	f7ff bfad 	b.w	8104184 <cleanup_glue>
 810422a:	5949      	ldr	r1, [r1, r5]
 810422c:	b941      	cbnz	r1, 8104240 <_reclaim_reent+0xa0>
 810422e:	3504      	adds	r5, #4
 8104230:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8104232:	2d80      	cmp	r5, #128	; 0x80
 8104234:	68d9      	ldr	r1, [r3, #12]
 8104236:	d1f8      	bne.n	810422a <_reclaim_reent+0x8a>
 8104238:	4620      	mov	r0, r4
 810423a:	f000 f963 	bl	8104504 <_free_r>
 810423e:	e7ba      	b.n	81041b6 <_reclaim_reent+0x16>
 8104240:	680e      	ldr	r6, [r1, #0]
 8104242:	4620      	mov	r0, r4
 8104244:	f000 f95e 	bl	8104504 <_free_r>
 8104248:	4631      	mov	r1, r6
 810424a:	e7ef      	b.n	810422c <_reclaim_reent+0x8c>
 810424c:	2500      	movs	r5, #0
 810424e:	e7ef      	b.n	8104230 <_reclaim_reent+0x90>
 8104250:	bd70      	pop	{r4, r5, r6, pc}
 8104252:	bf00      	nop
 8104254:	10000014 	.word	0x10000014

08104258 <_sbrk_r>:
 8104258:	b538      	push	{r3, r4, r5, lr}
 810425a:	4d06      	ldr	r5, [pc, #24]	; (8104274 <_sbrk_r+0x1c>)
 810425c:	2300      	movs	r3, #0
 810425e:	4604      	mov	r4, r0
 8104260:	4608      	mov	r0, r1
 8104262:	602b      	str	r3, [r5, #0]
 8104264:	f7fc fa38 	bl	81006d8 <_sbrk>
 8104268:	1c43      	adds	r3, r0, #1
 810426a:	d102      	bne.n	8104272 <_sbrk_r+0x1a>
 810426c:	682b      	ldr	r3, [r5, #0]
 810426e:	b103      	cbz	r3, 8104272 <_sbrk_r+0x1a>
 8104270:	6023      	str	r3, [r4, #0]
 8104272:	bd38      	pop	{r3, r4, r5, pc}
 8104274:	10004ac4 	.word	0x10004ac4

08104278 <__sread>:
 8104278:	b510      	push	{r4, lr}
 810427a:	460c      	mov	r4, r1
 810427c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8104280:	f000 fc7e 	bl	8104b80 <_read_r>
 8104284:	2800      	cmp	r0, #0
 8104286:	bfab      	itete	ge
 8104288:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810428a:	89a3      	ldrhlt	r3, [r4, #12]
 810428c:	181b      	addge	r3, r3, r0
 810428e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8104292:	bfac      	ite	ge
 8104294:	6563      	strge	r3, [r4, #84]	; 0x54
 8104296:	81a3      	strhlt	r3, [r4, #12]
 8104298:	bd10      	pop	{r4, pc}

0810429a <__swrite>:
 810429a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810429e:	461f      	mov	r7, r3
 81042a0:	898b      	ldrh	r3, [r1, #12]
 81042a2:	05db      	lsls	r3, r3, #23
 81042a4:	4605      	mov	r5, r0
 81042a6:	460c      	mov	r4, r1
 81042a8:	4616      	mov	r6, r2
 81042aa:	d505      	bpl.n	81042b8 <__swrite+0x1e>
 81042ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81042b0:	2302      	movs	r3, #2
 81042b2:	2200      	movs	r2, #0
 81042b4:	f000 f908 	bl	81044c8 <_lseek_r>
 81042b8:	89a3      	ldrh	r3, [r4, #12]
 81042ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 81042be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 81042c2:	81a3      	strh	r3, [r4, #12]
 81042c4:	4632      	mov	r2, r6
 81042c6:	463b      	mov	r3, r7
 81042c8:	4628      	mov	r0, r5
 81042ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 81042ce:	f000 b817 	b.w	8104300 <_write_r>

081042d2 <__sseek>:
 81042d2:	b510      	push	{r4, lr}
 81042d4:	460c      	mov	r4, r1
 81042d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81042da:	f000 f8f5 	bl	81044c8 <_lseek_r>
 81042de:	1c43      	adds	r3, r0, #1
 81042e0:	89a3      	ldrh	r3, [r4, #12]
 81042e2:	bf15      	itete	ne
 81042e4:	6560      	strne	r0, [r4, #84]	; 0x54
 81042e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 81042ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 81042ee:	81a3      	strheq	r3, [r4, #12]
 81042f0:	bf18      	it	ne
 81042f2:	81a3      	strhne	r3, [r4, #12]
 81042f4:	bd10      	pop	{r4, pc}

081042f6 <__sclose>:
 81042f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81042fa:	f000 b813 	b.w	8104324 <_close_r>
	...

08104300 <_write_r>:
 8104300:	b538      	push	{r3, r4, r5, lr}
 8104302:	4d07      	ldr	r5, [pc, #28]	; (8104320 <_write_r+0x20>)
 8104304:	4604      	mov	r4, r0
 8104306:	4608      	mov	r0, r1
 8104308:	4611      	mov	r1, r2
 810430a:	2200      	movs	r2, #0
 810430c:	602a      	str	r2, [r5, #0]
 810430e:	461a      	mov	r2, r3
 8104310:	f7fc f992 	bl	8100638 <_write>
 8104314:	1c43      	adds	r3, r0, #1
 8104316:	d102      	bne.n	810431e <_write_r+0x1e>
 8104318:	682b      	ldr	r3, [r5, #0]
 810431a:	b103      	cbz	r3, 810431e <_write_r+0x1e>
 810431c:	6023      	str	r3, [r4, #0]
 810431e:	bd38      	pop	{r3, r4, r5, pc}
 8104320:	10004ac4 	.word	0x10004ac4

08104324 <_close_r>:
 8104324:	b538      	push	{r3, r4, r5, lr}
 8104326:	4d06      	ldr	r5, [pc, #24]	; (8104340 <_close_r+0x1c>)
 8104328:	2300      	movs	r3, #0
 810432a:	4604      	mov	r4, r0
 810432c:	4608      	mov	r0, r1
 810432e:	602b      	str	r3, [r5, #0]
 8104330:	f7fc f99e 	bl	8100670 <_close>
 8104334:	1c43      	adds	r3, r0, #1
 8104336:	d102      	bne.n	810433e <_close_r+0x1a>
 8104338:	682b      	ldr	r3, [r5, #0]
 810433a:	b103      	cbz	r3, 810433e <_close_r+0x1a>
 810433c:	6023      	str	r3, [r4, #0]
 810433e:	bd38      	pop	{r3, r4, r5, pc}
 8104340:	10004ac4 	.word	0x10004ac4

08104344 <__sflush_r>:
 8104344:	898a      	ldrh	r2, [r1, #12]
 8104346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810434a:	4605      	mov	r5, r0
 810434c:	0710      	lsls	r0, r2, #28
 810434e:	460c      	mov	r4, r1
 8104350:	d458      	bmi.n	8104404 <__sflush_r+0xc0>
 8104352:	684b      	ldr	r3, [r1, #4]
 8104354:	2b00      	cmp	r3, #0
 8104356:	dc05      	bgt.n	8104364 <__sflush_r+0x20>
 8104358:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810435a:	2b00      	cmp	r3, #0
 810435c:	dc02      	bgt.n	8104364 <__sflush_r+0x20>
 810435e:	2000      	movs	r0, #0
 8104360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8104364:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8104366:	2e00      	cmp	r6, #0
 8104368:	d0f9      	beq.n	810435e <__sflush_r+0x1a>
 810436a:	2300      	movs	r3, #0
 810436c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8104370:	682f      	ldr	r7, [r5, #0]
 8104372:	602b      	str	r3, [r5, #0]
 8104374:	d032      	beq.n	81043dc <__sflush_r+0x98>
 8104376:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8104378:	89a3      	ldrh	r3, [r4, #12]
 810437a:	075a      	lsls	r2, r3, #29
 810437c:	d505      	bpl.n	810438a <__sflush_r+0x46>
 810437e:	6863      	ldr	r3, [r4, #4]
 8104380:	1ac0      	subs	r0, r0, r3
 8104382:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8104384:	b10b      	cbz	r3, 810438a <__sflush_r+0x46>
 8104386:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8104388:	1ac0      	subs	r0, r0, r3
 810438a:	2300      	movs	r3, #0
 810438c:	4602      	mov	r2, r0
 810438e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8104390:	6a21      	ldr	r1, [r4, #32]
 8104392:	4628      	mov	r0, r5
 8104394:	47b0      	blx	r6
 8104396:	1c43      	adds	r3, r0, #1
 8104398:	89a3      	ldrh	r3, [r4, #12]
 810439a:	d106      	bne.n	81043aa <__sflush_r+0x66>
 810439c:	6829      	ldr	r1, [r5, #0]
 810439e:	291d      	cmp	r1, #29
 81043a0:	d82c      	bhi.n	81043fc <__sflush_r+0xb8>
 81043a2:	4a2a      	ldr	r2, [pc, #168]	; (810444c <__sflush_r+0x108>)
 81043a4:	40ca      	lsrs	r2, r1
 81043a6:	07d6      	lsls	r6, r2, #31
 81043a8:	d528      	bpl.n	81043fc <__sflush_r+0xb8>
 81043aa:	2200      	movs	r2, #0
 81043ac:	6062      	str	r2, [r4, #4]
 81043ae:	04d9      	lsls	r1, r3, #19
 81043b0:	6922      	ldr	r2, [r4, #16]
 81043b2:	6022      	str	r2, [r4, #0]
 81043b4:	d504      	bpl.n	81043c0 <__sflush_r+0x7c>
 81043b6:	1c42      	adds	r2, r0, #1
 81043b8:	d101      	bne.n	81043be <__sflush_r+0x7a>
 81043ba:	682b      	ldr	r3, [r5, #0]
 81043bc:	b903      	cbnz	r3, 81043c0 <__sflush_r+0x7c>
 81043be:	6560      	str	r0, [r4, #84]	; 0x54
 81043c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 81043c2:	602f      	str	r7, [r5, #0]
 81043c4:	2900      	cmp	r1, #0
 81043c6:	d0ca      	beq.n	810435e <__sflush_r+0x1a>
 81043c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 81043cc:	4299      	cmp	r1, r3
 81043ce:	d002      	beq.n	81043d6 <__sflush_r+0x92>
 81043d0:	4628      	mov	r0, r5
 81043d2:	f000 f897 	bl	8104504 <_free_r>
 81043d6:	2000      	movs	r0, #0
 81043d8:	6360      	str	r0, [r4, #52]	; 0x34
 81043da:	e7c1      	b.n	8104360 <__sflush_r+0x1c>
 81043dc:	6a21      	ldr	r1, [r4, #32]
 81043de:	2301      	movs	r3, #1
 81043e0:	4628      	mov	r0, r5
 81043e2:	47b0      	blx	r6
 81043e4:	1c41      	adds	r1, r0, #1
 81043e6:	d1c7      	bne.n	8104378 <__sflush_r+0x34>
 81043e8:	682b      	ldr	r3, [r5, #0]
 81043ea:	2b00      	cmp	r3, #0
 81043ec:	d0c4      	beq.n	8104378 <__sflush_r+0x34>
 81043ee:	2b1d      	cmp	r3, #29
 81043f0:	d001      	beq.n	81043f6 <__sflush_r+0xb2>
 81043f2:	2b16      	cmp	r3, #22
 81043f4:	d101      	bne.n	81043fa <__sflush_r+0xb6>
 81043f6:	602f      	str	r7, [r5, #0]
 81043f8:	e7b1      	b.n	810435e <__sflush_r+0x1a>
 81043fa:	89a3      	ldrh	r3, [r4, #12]
 81043fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8104400:	81a3      	strh	r3, [r4, #12]
 8104402:	e7ad      	b.n	8104360 <__sflush_r+0x1c>
 8104404:	690f      	ldr	r7, [r1, #16]
 8104406:	2f00      	cmp	r7, #0
 8104408:	d0a9      	beq.n	810435e <__sflush_r+0x1a>
 810440a:	0793      	lsls	r3, r2, #30
 810440c:	680e      	ldr	r6, [r1, #0]
 810440e:	bf08      	it	eq
 8104410:	694b      	ldreq	r3, [r1, #20]
 8104412:	600f      	str	r7, [r1, #0]
 8104414:	bf18      	it	ne
 8104416:	2300      	movne	r3, #0
 8104418:	eba6 0807 	sub.w	r8, r6, r7
 810441c:	608b      	str	r3, [r1, #8]
 810441e:	f1b8 0f00 	cmp.w	r8, #0
 8104422:	dd9c      	ble.n	810435e <__sflush_r+0x1a>
 8104424:	6a21      	ldr	r1, [r4, #32]
 8104426:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8104428:	4643      	mov	r3, r8
 810442a:	463a      	mov	r2, r7
 810442c:	4628      	mov	r0, r5
 810442e:	47b0      	blx	r6
 8104430:	2800      	cmp	r0, #0
 8104432:	dc06      	bgt.n	8104442 <__sflush_r+0xfe>
 8104434:	89a3      	ldrh	r3, [r4, #12]
 8104436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810443a:	81a3      	strh	r3, [r4, #12]
 810443c:	f04f 30ff 	mov.w	r0, #4294967295
 8104440:	e78e      	b.n	8104360 <__sflush_r+0x1c>
 8104442:	4407      	add	r7, r0
 8104444:	eba8 0800 	sub.w	r8, r8, r0
 8104448:	e7e9      	b.n	810441e <__sflush_r+0xda>
 810444a:	bf00      	nop
 810444c:	20400001 	.word	0x20400001

08104450 <_fflush_r>:
 8104450:	b538      	push	{r3, r4, r5, lr}
 8104452:	690b      	ldr	r3, [r1, #16]
 8104454:	4605      	mov	r5, r0
 8104456:	460c      	mov	r4, r1
 8104458:	b913      	cbnz	r3, 8104460 <_fflush_r+0x10>
 810445a:	2500      	movs	r5, #0
 810445c:	4628      	mov	r0, r5
 810445e:	bd38      	pop	{r3, r4, r5, pc}
 8104460:	b118      	cbz	r0, 810446a <_fflush_r+0x1a>
 8104462:	6983      	ldr	r3, [r0, #24]
 8104464:	b90b      	cbnz	r3, 810446a <_fflush_r+0x1a>
 8104466:	f7ff fd3f 	bl	8103ee8 <__sinit>
 810446a:	4b14      	ldr	r3, [pc, #80]	; (81044bc <_fflush_r+0x6c>)
 810446c:	429c      	cmp	r4, r3
 810446e:	d11b      	bne.n	81044a8 <_fflush_r+0x58>
 8104470:	686c      	ldr	r4, [r5, #4]
 8104472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8104476:	2b00      	cmp	r3, #0
 8104478:	d0ef      	beq.n	810445a <_fflush_r+0xa>
 810447a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810447c:	07d0      	lsls	r0, r2, #31
 810447e:	d404      	bmi.n	810448a <_fflush_r+0x3a>
 8104480:	0599      	lsls	r1, r3, #22
 8104482:	d402      	bmi.n	810448a <_fflush_r+0x3a>
 8104484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8104486:	f7ff fdf2 	bl	810406e <__retarget_lock_acquire_recursive>
 810448a:	4628      	mov	r0, r5
 810448c:	4621      	mov	r1, r4
 810448e:	f7ff ff59 	bl	8104344 <__sflush_r>
 8104492:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8104494:	07da      	lsls	r2, r3, #31
 8104496:	4605      	mov	r5, r0
 8104498:	d4e0      	bmi.n	810445c <_fflush_r+0xc>
 810449a:	89a3      	ldrh	r3, [r4, #12]
 810449c:	059b      	lsls	r3, r3, #22
 810449e:	d4dd      	bmi.n	810445c <_fflush_r+0xc>
 81044a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81044a2:	f7ff fde5 	bl	8104070 <__retarget_lock_release_recursive>
 81044a6:	e7d9      	b.n	810445c <_fflush_r+0xc>
 81044a8:	4b05      	ldr	r3, [pc, #20]	; (81044c0 <_fflush_r+0x70>)
 81044aa:	429c      	cmp	r4, r3
 81044ac:	d101      	bne.n	81044b2 <_fflush_r+0x62>
 81044ae:	68ac      	ldr	r4, [r5, #8]
 81044b0:	e7df      	b.n	8104472 <_fflush_r+0x22>
 81044b2:	4b04      	ldr	r3, [pc, #16]	; (81044c4 <_fflush_r+0x74>)
 81044b4:	429c      	cmp	r4, r3
 81044b6:	bf08      	it	eq
 81044b8:	68ec      	ldreq	r4, [r5, #12]
 81044ba:	e7da      	b.n	8104472 <_fflush_r+0x22>
 81044bc:	08104ed4 	.word	0x08104ed4
 81044c0:	08104ef4 	.word	0x08104ef4
 81044c4:	08104eb4 	.word	0x08104eb4

081044c8 <_lseek_r>:
 81044c8:	b538      	push	{r3, r4, r5, lr}
 81044ca:	4d07      	ldr	r5, [pc, #28]	; (81044e8 <_lseek_r+0x20>)
 81044cc:	4604      	mov	r4, r0
 81044ce:	4608      	mov	r0, r1
 81044d0:	4611      	mov	r1, r2
 81044d2:	2200      	movs	r2, #0
 81044d4:	602a      	str	r2, [r5, #0]
 81044d6:	461a      	mov	r2, r3
 81044d8:	f7fc f8f1 	bl	81006be <_lseek>
 81044dc:	1c43      	adds	r3, r0, #1
 81044de:	d102      	bne.n	81044e6 <_lseek_r+0x1e>
 81044e0:	682b      	ldr	r3, [r5, #0]
 81044e2:	b103      	cbz	r3, 81044e6 <_lseek_r+0x1e>
 81044e4:	6023      	str	r3, [r4, #0]
 81044e6:	bd38      	pop	{r3, r4, r5, pc}
 81044e8:	10004ac4 	.word	0x10004ac4

081044ec <__malloc_lock>:
 81044ec:	4801      	ldr	r0, [pc, #4]	; (81044f4 <__malloc_lock+0x8>)
 81044ee:	f7ff bdbe 	b.w	810406e <__retarget_lock_acquire_recursive>
 81044f2:	bf00      	nop
 81044f4:	10004abc 	.word	0x10004abc

081044f8 <__malloc_unlock>:
 81044f8:	4801      	ldr	r0, [pc, #4]	; (8104500 <__malloc_unlock+0x8>)
 81044fa:	f7ff bdb9 	b.w	8104070 <__retarget_lock_release_recursive>
 81044fe:	bf00      	nop
 8104500:	10004abc 	.word	0x10004abc

08104504 <_free_r>:
 8104504:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8104506:	2900      	cmp	r1, #0
 8104508:	d048      	beq.n	810459c <_free_r+0x98>
 810450a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810450e:	9001      	str	r0, [sp, #4]
 8104510:	2b00      	cmp	r3, #0
 8104512:	f1a1 0404 	sub.w	r4, r1, #4
 8104516:	bfb8      	it	lt
 8104518:	18e4      	addlt	r4, r4, r3
 810451a:	f7ff ffe7 	bl	81044ec <__malloc_lock>
 810451e:	4a20      	ldr	r2, [pc, #128]	; (81045a0 <_free_r+0x9c>)
 8104520:	9801      	ldr	r0, [sp, #4]
 8104522:	6813      	ldr	r3, [r2, #0]
 8104524:	4615      	mov	r5, r2
 8104526:	b933      	cbnz	r3, 8104536 <_free_r+0x32>
 8104528:	6063      	str	r3, [r4, #4]
 810452a:	6014      	str	r4, [r2, #0]
 810452c:	b003      	add	sp, #12
 810452e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8104532:	f7ff bfe1 	b.w	81044f8 <__malloc_unlock>
 8104536:	42a3      	cmp	r3, r4
 8104538:	d90b      	bls.n	8104552 <_free_r+0x4e>
 810453a:	6821      	ldr	r1, [r4, #0]
 810453c:	1862      	adds	r2, r4, r1
 810453e:	4293      	cmp	r3, r2
 8104540:	bf04      	itt	eq
 8104542:	681a      	ldreq	r2, [r3, #0]
 8104544:	685b      	ldreq	r3, [r3, #4]
 8104546:	6063      	str	r3, [r4, #4]
 8104548:	bf04      	itt	eq
 810454a:	1852      	addeq	r2, r2, r1
 810454c:	6022      	streq	r2, [r4, #0]
 810454e:	602c      	str	r4, [r5, #0]
 8104550:	e7ec      	b.n	810452c <_free_r+0x28>
 8104552:	461a      	mov	r2, r3
 8104554:	685b      	ldr	r3, [r3, #4]
 8104556:	b10b      	cbz	r3, 810455c <_free_r+0x58>
 8104558:	42a3      	cmp	r3, r4
 810455a:	d9fa      	bls.n	8104552 <_free_r+0x4e>
 810455c:	6811      	ldr	r1, [r2, #0]
 810455e:	1855      	adds	r5, r2, r1
 8104560:	42a5      	cmp	r5, r4
 8104562:	d10b      	bne.n	810457c <_free_r+0x78>
 8104564:	6824      	ldr	r4, [r4, #0]
 8104566:	4421      	add	r1, r4
 8104568:	1854      	adds	r4, r2, r1
 810456a:	42a3      	cmp	r3, r4
 810456c:	6011      	str	r1, [r2, #0]
 810456e:	d1dd      	bne.n	810452c <_free_r+0x28>
 8104570:	681c      	ldr	r4, [r3, #0]
 8104572:	685b      	ldr	r3, [r3, #4]
 8104574:	6053      	str	r3, [r2, #4]
 8104576:	4421      	add	r1, r4
 8104578:	6011      	str	r1, [r2, #0]
 810457a:	e7d7      	b.n	810452c <_free_r+0x28>
 810457c:	d902      	bls.n	8104584 <_free_r+0x80>
 810457e:	230c      	movs	r3, #12
 8104580:	6003      	str	r3, [r0, #0]
 8104582:	e7d3      	b.n	810452c <_free_r+0x28>
 8104584:	6825      	ldr	r5, [r4, #0]
 8104586:	1961      	adds	r1, r4, r5
 8104588:	428b      	cmp	r3, r1
 810458a:	bf04      	itt	eq
 810458c:	6819      	ldreq	r1, [r3, #0]
 810458e:	685b      	ldreq	r3, [r3, #4]
 8104590:	6063      	str	r3, [r4, #4]
 8104592:	bf04      	itt	eq
 8104594:	1949      	addeq	r1, r1, r5
 8104596:	6021      	streq	r1, [r4, #0]
 8104598:	6054      	str	r4, [r2, #4]
 810459a:	e7c7      	b.n	810452c <_free_r+0x28>
 810459c:	b003      	add	sp, #12
 810459e:	bd30      	pop	{r4, r5, pc}
 81045a0:	10004a68 	.word	0x10004a68

081045a4 <__sfputc_r>:
 81045a4:	6893      	ldr	r3, [r2, #8]
 81045a6:	3b01      	subs	r3, #1
 81045a8:	2b00      	cmp	r3, #0
 81045aa:	b410      	push	{r4}
 81045ac:	6093      	str	r3, [r2, #8]
 81045ae:	da08      	bge.n	81045c2 <__sfputc_r+0x1e>
 81045b0:	6994      	ldr	r4, [r2, #24]
 81045b2:	42a3      	cmp	r3, r4
 81045b4:	db01      	blt.n	81045ba <__sfputc_r+0x16>
 81045b6:	290a      	cmp	r1, #10
 81045b8:	d103      	bne.n	81045c2 <__sfputc_r+0x1e>
 81045ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 81045be:	f000 baf1 	b.w	8104ba4 <__swbuf_r>
 81045c2:	6813      	ldr	r3, [r2, #0]
 81045c4:	1c58      	adds	r0, r3, #1
 81045c6:	6010      	str	r0, [r2, #0]
 81045c8:	7019      	strb	r1, [r3, #0]
 81045ca:	4608      	mov	r0, r1
 81045cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 81045d0:	4770      	bx	lr

081045d2 <__sfputs_r>:
 81045d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81045d4:	4606      	mov	r6, r0
 81045d6:	460f      	mov	r7, r1
 81045d8:	4614      	mov	r4, r2
 81045da:	18d5      	adds	r5, r2, r3
 81045dc:	42ac      	cmp	r4, r5
 81045de:	d101      	bne.n	81045e4 <__sfputs_r+0x12>
 81045e0:	2000      	movs	r0, #0
 81045e2:	e007      	b.n	81045f4 <__sfputs_r+0x22>
 81045e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 81045e8:	463a      	mov	r2, r7
 81045ea:	4630      	mov	r0, r6
 81045ec:	f7ff ffda 	bl	81045a4 <__sfputc_r>
 81045f0:	1c43      	adds	r3, r0, #1
 81045f2:	d1f3      	bne.n	81045dc <__sfputs_r+0xa>
 81045f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

081045f8 <_vfiprintf_r>:
 81045f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81045fc:	460d      	mov	r5, r1
 81045fe:	b09d      	sub	sp, #116	; 0x74
 8104600:	4614      	mov	r4, r2
 8104602:	4698      	mov	r8, r3
 8104604:	4606      	mov	r6, r0
 8104606:	b118      	cbz	r0, 8104610 <_vfiprintf_r+0x18>
 8104608:	6983      	ldr	r3, [r0, #24]
 810460a:	b90b      	cbnz	r3, 8104610 <_vfiprintf_r+0x18>
 810460c:	f7ff fc6c 	bl	8103ee8 <__sinit>
 8104610:	4b89      	ldr	r3, [pc, #548]	; (8104838 <_vfiprintf_r+0x240>)
 8104612:	429d      	cmp	r5, r3
 8104614:	d11b      	bne.n	810464e <_vfiprintf_r+0x56>
 8104616:	6875      	ldr	r5, [r6, #4]
 8104618:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810461a:	07d9      	lsls	r1, r3, #31
 810461c:	d405      	bmi.n	810462a <_vfiprintf_r+0x32>
 810461e:	89ab      	ldrh	r3, [r5, #12]
 8104620:	059a      	lsls	r2, r3, #22
 8104622:	d402      	bmi.n	810462a <_vfiprintf_r+0x32>
 8104624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8104626:	f7ff fd22 	bl	810406e <__retarget_lock_acquire_recursive>
 810462a:	89ab      	ldrh	r3, [r5, #12]
 810462c:	071b      	lsls	r3, r3, #28
 810462e:	d501      	bpl.n	8104634 <_vfiprintf_r+0x3c>
 8104630:	692b      	ldr	r3, [r5, #16]
 8104632:	b9eb      	cbnz	r3, 8104670 <_vfiprintf_r+0x78>
 8104634:	4629      	mov	r1, r5
 8104636:	4630      	mov	r0, r6
 8104638:	f000 fb06 	bl	8104c48 <__swsetup_r>
 810463c:	b1c0      	cbz	r0, 8104670 <_vfiprintf_r+0x78>
 810463e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8104640:	07dc      	lsls	r4, r3, #31
 8104642:	d50e      	bpl.n	8104662 <_vfiprintf_r+0x6a>
 8104644:	f04f 30ff 	mov.w	r0, #4294967295
 8104648:	b01d      	add	sp, #116	; 0x74
 810464a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810464e:	4b7b      	ldr	r3, [pc, #492]	; (810483c <_vfiprintf_r+0x244>)
 8104650:	429d      	cmp	r5, r3
 8104652:	d101      	bne.n	8104658 <_vfiprintf_r+0x60>
 8104654:	68b5      	ldr	r5, [r6, #8]
 8104656:	e7df      	b.n	8104618 <_vfiprintf_r+0x20>
 8104658:	4b79      	ldr	r3, [pc, #484]	; (8104840 <_vfiprintf_r+0x248>)
 810465a:	429d      	cmp	r5, r3
 810465c:	bf08      	it	eq
 810465e:	68f5      	ldreq	r5, [r6, #12]
 8104660:	e7da      	b.n	8104618 <_vfiprintf_r+0x20>
 8104662:	89ab      	ldrh	r3, [r5, #12]
 8104664:	0598      	lsls	r0, r3, #22
 8104666:	d4ed      	bmi.n	8104644 <_vfiprintf_r+0x4c>
 8104668:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810466a:	f7ff fd01 	bl	8104070 <__retarget_lock_release_recursive>
 810466e:	e7e9      	b.n	8104644 <_vfiprintf_r+0x4c>
 8104670:	2300      	movs	r3, #0
 8104672:	9309      	str	r3, [sp, #36]	; 0x24
 8104674:	2320      	movs	r3, #32
 8104676:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810467a:	f8cd 800c 	str.w	r8, [sp, #12]
 810467e:	2330      	movs	r3, #48	; 0x30
 8104680:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8104844 <_vfiprintf_r+0x24c>
 8104684:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8104688:	f04f 0901 	mov.w	r9, #1
 810468c:	4623      	mov	r3, r4
 810468e:	469a      	mov	sl, r3
 8104690:	f813 2b01 	ldrb.w	r2, [r3], #1
 8104694:	b10a      	cbz	r2, 810469a <_vfiprintf_r+0xa2>
 8104696:	2a25      	cmp	r2, #37	; 0x25
 8104698:	d1f9      	bne.n	810468e <_vfiprintf_r+0x96>
 810469a:	ebba 0b04 	subs.w	fp, sl, r4
 810469e:	d00b      	beq.n	81046b8 <_vfiprintf_r+0xc0>
 81046a0:	465b      	mov	r3, fp
 81046a2:	4622      	mov	r2, r4
 81046a4:	4629      	mov	r1, r5
 81046a6:	4630      	mov	r0, r6
 81046a8:	f7ff ff93 	bl	81045d2 <__sfputs_r>
 81046ac:	3001      	adds	r0, #1
 81046ae:	f000 80aa 	beq.w	8104806 <_vfiprintf_r+0x20e>
 81046b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 81046b4:	445a      	add	r2, fp
 81046b6:	9209      	str	r2, [sp, #36]	; 0x24
 81046b8:	f89a 3000 	ldrb.w	r3, [sl]
 81046bc:	2b00      	cmp	r3, #0
 81046be:	f000 80a2 	beq.w	8104806 <_vfiprintf_r+0x20e>
 81046c2:	2300      	movs	r3, #0
 81046c4:	f04f 32ff 	mov.w	r2, #4294967295
 81046c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 81046cc:	f10a 0a01 	add.w	sl, sl, #1
 81046d0:	9304      	str	r3, [sp, #16]
 81046d2:	9307      	str	r3, [sp, #28]
 81046d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 81046d8:	931a      	str	r3, [sp, #104]	; 0x68
 81046da:	4654      	mov	r4, sl
 81046dc:	2205      	movs	r2, #5
 81046de:	f814 1b01 	ldrb.w	r1, [r4], #1
 81046e2:	4858      	ldr	r0, [pc, #352]	; (8104844 <_vfiprintf_r+0x24c>)
 81046e4:	f7fb fdfc 	bl	81002e0 <memchr>
 81046e8:	9a04      	ldr	r2, [sp, #16]
 81046ea:	b9d8      	cbnz	r0, 8104724 <_vfiprintf_r+0x12c>
 81046ec:	06d1      	lsls	r1, r2, #27
 81046ee:	bf44      	itt	mi
 81046f0:	2320      	movmi	r3, #32
 81046f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 81046f6:	0713      	lsls	r3, r2, #28
 81046f8:	bf44      	itt	mi
 81046fa:	232b      	movmi	r3, #43	; 0x2b
 81046fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8104700:	f89a 3000 	ldrb.w	r3, [sl]
 8104704:	2b2a      	cmp	r3, #42	; 0x2a
 8104706:	d015      	beq.n	8104734 <_vfiprintf_r+0x13c>
 8104708:	9a07      	ldr	r2, [sp, #28]
 810470a:	4654      	mov	r4, sl
 810470c:	2000      	movs	r0, #0
 810470e:	f04f 0c0a 	mov.w	ip, #10
 8104712:	4621      	mov	r1, r4
 8104714:	f811 3b01 	ldrb.w	r3, [r1], #1
 8104718:	3b30      	subs	r3, #48	; 0x30
 810471a:	2b09      	cmp	r3, #9
 810471c:	d94e      	bls.n	81047bc <_vfiprintf_r+0x1c4>
 810471e:	b1b0      	cbz	r0, 810474e <_vfiprintf_r+0x156>
 8104720:	9207      	str	r2, [sp, #28]
 8104722:	e014      	b.n	810474e <_vfiprintf_r+0x156>
 8104724:	eba0 0308 	sub.w	r3, r0, r8
 8104728:	fa09 f303 	lsl.w	r3, r9, r3
 810472c:	4313      	orrs	r3, r2
 810472e:	9304      	str	r3, [sp, #16]
 8104730:	46a2      	mov	sl, r4
 8104732:	e7d2      	b.n	81046da <_vfiprintf_r+0xe2>
 8104734:	9b03      	ldr	r3, [sp, #12]
 8104736:	1d19      	adds	r1, r3, #4
 8104738:	681b      	ldr	r3, [r3, #0]
 810473a:	9103      	str	r1, [sp, #12]
 810473c:	2b00      	cmp	r3, #0
 810473e:	bfbb      	ittet	lt
 8104740:	425b      	neglt	r3, r3
 8104742:	f042 0202 	orrlt.w	r2, r2, #2
 8104746:	9307      	strge	r3, [sp, #28]
 8104748:	9307      	strlt	r3, [sp, #28]
 810474a:	bfb8      	it	lt
 810474c:	9204      	strlt	r2, [sp, #16]
 810474e:	7823      	ldrb	r3, [r4, #0]
 8104750:	2b2e      	cmp	r3, #46	; 0x2e
 8104752:	d10c      	bne.n	810476e <_vfiprintf_r+0x176>
 8104754:	7863      	ldrb	r3, [r4, #1]
 8104756:	2b2a      	cmp	r3, #42	; 0x2a
 8104758:	d135      	bne.n	81047c6 <_vfiprintf_r+0x1ce>
 810475a:	9b03      	ldr	r3, [sp, #12]
 810475c:	1d1a      	adds	r2, r3, #4
 810475e:	681b      	ldr	r3, [r3, #0]
 8104760:	9203      	str	r2, [sp, #12]
 8104762:	2b00      	cmp	r3, #0
 8104764:	bfb8      	it	lt
 8104766:	f04f 33ff 	movlt.w	r3, #4294967295
 810476a:	3402      	adds	r4, #2
 810476c:	9305      	str	r3, [sp, #20]
 810476e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8104854 <_vfiprintf_r+0x25c>
 8104772:	7821      	ldrb	r1, [r4, #0]
 8104774:	2203      	movs	r2, #3
 8104776:	4650      	mov	r0, sl
 8104778:	f7fb fdb2 	bl	81002e0 <memchr>
 810477c:	b140      	cbz	r0, 8104790 <_vfiprintf_r+0x198>
 810477e:	2340      	movs	r3, #64	; 0x40
 8104780:	eba0 000a 	sub.w	r0, r0, sl
 8104784:	fa03 f000 	lsl.w	r0, r3, r0
 8104788:	9b04      	ldr	r3, [sp, #16]
 810478a:	4303      	orrs	r3, r0
 810478c:	3401      	adds	r4, #1
 810478e:	9304      	str	r3, [sp, #16]
 8104790:	f814 1b01 	ldrb.w	r1, [r4], #1
 8104794:	482c      	ldr	r0, [pc, #176]	; (8104848 <_vfiprintf_r+0x250>)
 8104796:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810479a:	2206      	movs	r2, #6
 810479c:	f7fb fda0 	bl	81002e0 <memchr>
 81047a0:	2800      	cmp	r0, #0
 81047a2:	d03f      	beq.n	8104824 <_vfiprintf_r+0x22c>
 81047a4:	4b29      	ldr	r3, [pc, #164]	; (810484c <_vfiprintf_r+0x254>)
 81047a6:	bb1b      	cbnz	r3, 81047f0 <_vfiprintf_r+0x1f8>
 81047a8:	9b03      	ldr	r3, [sp, #12]
 81047aa:	3307      	adds	r3, #7
 81047ac:	f023 0307 	bic.w	r3, r3, #7
 81047b0:	3308      	adds	r3, #8
 81047b2:	9303      	str	r3, [sp, #12]
 81047b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81047b6:	443b      	add	r3, r7
 81047b8:	9309      	str	r3, [sp, #36]	; 0x24
 81047ba:	e767      	b.n	810468c <_vfiprintf_r+0x94>
 81047bc:	fb0c 3202 	mla	r2, ip, r2, r3
 81047c0:	460c      	mov	r4, r1
 81047c2:	2001      	movs	r0, #1
 81047c4:	e7a5      	b.n	8104712 <_vfiprintf_r+0x11a>
 81047c6:	2300      	movs	r3, #0
 81047c8:	3401      	adds	r4, #1
 81047ca:	9305      	str	r3, [sp, #20]
 81047cc:	4619      	mov	r1, r3
 81047ce:	f04f 0c0a 	mov.w	ip, #10
 81047d2:	4620      	mov	r0, r4
 81047d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 81047d8:	3a30      	subs	r2, #48	; 0x30
 81047da:	2a09      	cmp	r2, #9
 81047dc:	d903      	bls.n	81047e6 <_vfiprintf_r+0x1ee>
 81047de:	2b00      	cmp	r3, #0
 81047e0:	d0c5      	beq.n	810476e <_vfiprintf_r+0x176>
 81047e2:	9105      	str	r1, [sp, #20]
 81047e4:	e7c3      	b.n	810476e <_vfiprintf_r+0x176>
 81047e6:	fb0c 2101 	mla	r1, ip, r1, r2
 81047ea:	4604      	mov	r4, r0
 81047ec:	2301      	movs	r3, #1
 81047ee:	e7f0      	b.n	81047d2 <_vfiprintf_r+0x1da>
 81047f0:	ab03      	add	r3, sp, #12
 81047f2:	9300      	str	r3, [sp, #0]
 81047f4:	462a      	mov	r2, r5
 81047f6:	4b16      	ldr	r3, [pc, #88]	; (8104850 <_vfiprintf_r+0x258>)
 81047f8:	a904      	add	r1, sp, #16
 81047fa:	4630      	mov	r0, r6
 81047fc:	f3af 8000 	nop.w
 8104800:	4607      	mov	r7, r0
 8104802:	1c78      	adds	r0, r7, #1
 8104804:	d1d6      	bne.n	81047b4 <_vfiprintf_r+0x1bc>
 8104806:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8104808:	07d9      	lsls	r1, r3, #31
 810480a:	d405      	bmi.n	8104818 <_vfiprintf_r+0x220>
 810480c:	89ab      	ldrh	r3, [r5, #12]
 810480e:	059a      	lsls	r2, r3, #22
 8104810:	d402      	bmi.n	8104818 <_vfiprintf_r+0x220>
 8104812:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8104814:	f7ff fc2c 	bl	8104070 <__retarget_lock_release_recursive>
 8104818:	89ab      	ldrh	r3, [r5, #12]
 810481a:	065b      	lsls	r3, r3, #25
 810481c:	f53f af12 	bmi.w	8104644 <_vfiprintf_r+0x4c>
 8104820:	9809      	ldr	r0, [sp, #36]	; 0x24
 8104822:	e711      	b.n	8104648 <_vfiprintf_r+0x50>
 8104824:	ab03      	add	r3, sp, #12
 8104826:	9300      	str	r3, [sp, #0]
 8104828:	462a      	mov	r2, r5
 810482a:	4b09      	ldr	r3, [pc, #36]	; (8104850 <_vfiprintf_r+0x258>)
 810482c:	a904      	add	r1, sp, #16
 810482e:	4630      	mov	r0, r6
 8104830:	f000 f880 	bl	8104934 <_printf_i>
 8104834:	e7e4      	b.n	8104800 <_vfiprintf_r+0x208>
 8104836:	bf00      	nop
 8104838:	08104ed4 	.word	0x08104ed4
 810483c:	08104ef4 	.word	0x08104ef4
 8104840:	08104eb4 	.word	0x08104eb4
 8104844:	08104f18 	.word	0x08104f18
 8104848:	08104f22 	.word	0x08104f22
 810484c:	00000000 	.word	0x00000000
 8104850:	081045d3 	.word	0x081045d3
 8104854:	08104f1e 	.word	0x08104f1e

08104858 <_printf_common>:
 8104858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810485c:	4616      	mov	r6, r2
 810485e:	4699      	mov	r9, r3
 8104860:	688a      	ldr	r2, [r1, #8]
 8104862:	690b      	ldr	r3, [r1, #16]
 8104864:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8104868:	4293      	cmp	r3, r2
 810486a:	bfb8      	it	lt
 810486c:	4613      	movlt	r3, r2
 810486e:	6033      	str	r3, [r6, #0]
 8104870:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8104874:	4607      	mov	r7, r0
 8104876:	460c      	mov	r4, r1
 8104878:	b10a      	cbz	r2, 810487e <_printf_common+0x26>
 810487a:	3301      	adds	r3, #1
 810487c:	6033      	str	r3, [r6, #0]
 810487e:	6823      	ldr	r3, [r4, #0]
 8104880:	0699      	lsls	r1, r3, #26
 8104882:	bf42      	ittt	mi
 8104884:	6833      	ldrmi	r3, [r6, #0]
 8104886:	3302      	addmi	r3, #2
 8104888:	6033      	strmi	r3, [r6, #0]
 810488a:	6825      	ldr	r5, [r4, #0]
 810488c:	f015 0506 	ands.w	r5, r5, #6
 8104890:	d106      	bne.n	81048a0 <_printf_common+0x48>
 8104892:	f104 0a19 	add.w	sl, r4, #25
 8104896:	68e3      	ldr	r3, [r4, #12]
 8104898:	6832      	ldr	r2, [r6, #0]
 810489a:	1a9b      	subs	r3, r3, r2
 810489c:	42ab      	cmp	r3, r5
 810489e:	dc26      	bgt.n	81048ee <_printf_common+0x96>
 81048a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 81048a4:	1e13      	subs	r3, r2, #0
 81048a6:	6822      	ldr	r2, [r4, #0]
 81048a8:	bf18      	it	ne
 81048aa:	2301      	movne	r3, #1
 81048ac:	0692      	lsls	r2, r2, #26
 81048ae:	d42b      	bmi.n	8104908 <_printf_common+0xb0>
 81048b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 81048b4:	4649      	mov	r1, r9
 81048b6:	4638      	mov	r0, r7
 81048b8:	47c0      	blx	r8
 81048ba:	3001      	adds	r0, #1
 81048bc:	d01e      	beq.n	81048fc <_printf_common+0xa4>
 81048be:	6823      	ldr	r3, [r4, #0]
 81048c0:	68e5      	ldr	r5, [r4, #12]
 81048c2:	6832      	ldr	r2, [r6, #0]
 81048c4:	f003 0306 	and.w	r3, r3, #6
 81048c8:	2b04      	cmp	r3, #4
 81048ca:	bf08      	it	eq
 81048cc:	1aad      	subeq	r5, r5, r2
 81048ce:	68a3      	ldr	r3, [r4, #8]
 81048d0:	6922      	ldr	r2, [r4, #16]
 81048d2:	bf0c      	ite	eq
 81048d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81048d8:	2500      	movne	r5, #0
 81048da:	4293      	cmp	r3, r2
 81048dc:	bfc4      	itt	gt
 81048de:	1a9b      	subgt	r3, r3, r2
 81048e0:	18ed      	addgt	r5, r5, r3
 81048e2:	2600      	movs	r6, #0
 81048e4:	341a      	adds	r4, #26
 81048e6:	42b5      	cmp	r5, r6
 81048e8:	d11a      	bne.n	8104920 <_printf_common+0xc8>
 81048ea:	2000      	movs	r0, #0
 81048ec:	e008      	b.n	8104900 <_printf_common+0xa8>
 81048ee:	2301      	movs	r3, #1
 81048f0:	4652      	mov	r2, sl
 81048f2:	4649      	mov	r1, r9
 81048f4:	4638      	mov	r0, r7
 81048f6:	47c0      	blx	r8
 81048f8:	3001      	adds	r0, #1
 81048fa:	d103      	bne.n	8104904 <_printf_common+0xac>
 81048fc:	f04f 30ff 	mov.w	r0, #4294967295
 8104900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8104904:	3501      	adds	r5, #1
 8104906:	e7c6      	b.n	8104896 <_printf_common+0x3e>
 8104908:	18e1      	adds	r1, r4, r3
 810490a:	1c5a      	adds	r2, r3, #1
 810490c:	2030      	movs	r0, #48	; 0x30
 810490e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8104912:	4422      	add	r2, r4
 8104914:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8104918:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810491c:	3302      	adds	r3, #2
 810491e:	e7c7      	b.n	81048b0 <_printf_common+0x58>
 8104920:	2301      	movs	r3, #1
 8104922:	4622      	mov	r2, r4
 8104924:	4649      	mov	r1, r9
 8104926:	4638      	mov	r0, r7
 8104928:	47c0      	blx	r8
 810492a:	3001      	adds	r0, #1
 810492c:	d0e6      	beq.n	81048fc <_printf_common+0xa4>
 810492e:	3601      	adds	r6, #1
 8104930:	e7d9      	b.n	81048e6 <_printf_common+0x8e>
	...

08104934 <_printf_i>:
 8104934:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8104938:	460c      	mov	r4, r1
 810493a:	4691      	mov	r9, r2
 810493c:	7e27      	ldrb	r7, [r4, #24]
 810493e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8104940:	2f78      	cmp	r7, #120	; 0x78
 8104942:	4680      	mov	r8, r0
 8104944:	469a      	mov	sl, r3
 8104946:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810494a:	d807      	bhi.n	810495c <_printf_i+0x28>
 810494c:	2f62      	cmp	r7, #98	; 0x62
 810494e:	d80a      	bhi.n	8104966 <_printf_i+0x32>
 8104950:	2f00      	cmp	r7, #0
 8104952:	f000 80d8 	beq.w	8104b06 <_printf_i+0x1d2>
 8104956:	2f58      	cmp	r7, #88	; 0x58
 8104958:	f000 80a3 	beq.w	8104aa2 <_printf_i+0x16e>
 810495c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8104960:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8104964:	e03a      	b.n	81049dc <_printf_i+0xa8>
 8104966:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 810496a:	2b15      	cmp	r3, #21
 810496c:	d8f6      	bhi.n	810495c <_printf_i+0x28>
 810496e:	a001      	add	r0, pc, #4	; (adr r0, 8104974 <_printf_i+0x40>)
 8104970:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8104974:	081049cd 	.word	0x081049cd
 8104978:	081049e1 	.word	0x081049e1
 810497c:	0810495d 	.word	0x0810495d
 8104980:	0810495d 	.word	0x0810495d
 8104984:	0810495d 	.word	0x0810495d
 8104988:	0810495d 	.word	0x0810495d
 810498c:	081049e1 	.word	0x081049e1
 8104990:	0810495d 	.word	0x0810495d
 8104994:	0810495d 	.word	0x0810495d
 8104998:	0810495d 	.word	0x0810495d
 810499c:	0810495d 	.word	0x0810495d
 81049a0:	08104aed 	.word	0x08104aed
 81049a4:	08104a11 	.word	0x08104a11
 81049a8:	08104acf 	.word	0x08104acf
 81049ac:	0810495d 	.word	0x0810495d
 81049b0:	0810495d 	.word	0x0810495d
 81049b4:	08104b0f 	.word	0x08104b0f
 81049b8:	0810495d 	.word	0x0810495d
 81049bc:	08104a11 	.word	0x08104a11
 81049c0:	0810495d 	.word	0x0810495d
 81049c4:	0810495d 	.word	0x0810495d
 81049c8:	08104ad7 	.word	0x08104ad7
 81049cc:	680b      	ldr	r3, [r1, #0]
 81049ce:	1d1a      	adds	r2, r3, #4
 81049d0:	681b      	ldr	r3, [r3, #0]
 81049d2:	600a      	str	r2, [r1, #0]
 81049d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 81049d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 81049dc:	2301      	movs	r3, #1
 81049de:	e0a3      	b.n	8104b28 <_printf_i+0x1f4>
 81049e0:	6825      	ldr	r5, [r4, #0]
 81049e2:	6808      	ldr	r0, [r1, #0]
 81049e4:	062e      	lsls	r6, r5, #24
 81049e6:	f100 0304 	add.w	r3, r0, #4
 81049ea:	d50a      	bpl.n	8104a02 <_printf_i+0xce>
 81049ec:	6805      	ldr	r5, [r0, #0]
 81049ee:	600b      	str	r3, [r1, #0]
 81049f0:	2d00      	cmp	r5, #0
 81049f2:	da03      	bge.n	81049fc <_printf_i+0xc8>
 81049f4:	232d      	movs	r3, #45	; 0x2d
 81049f6:	426d      	negs	r5, r5
 81049f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81049fc:	485e      	ldr	r0, [pc, #376]	; (8104b78 <_printf_i+0x244>)
 81049fe:	230a      	movs	r3, #10
 8104a00:	e019      	b.n	8104a36 <_printf_i+0x102>
 8104a02:	f015 0f40 	tst.w	r5, #64	; 0x40
 8104a06:	6805      	ldr	r5, [r0, #0]
 8104a08:	600b      	str	r3, [r1, #0]
 8104a0a:	bf18      	it	ne
 8104a0c:	b22d      	sxthne	r5, r5
 8104a0e:	e7ef      	b.n	81049f0 <_printf_i+0xbc>
 8104a10:	680b      	ldr	r3, [r1, #0]
 8104a12:	6825      	ldr	r5, [r4, #0]
 8104a14:	1d18      	adds	r0, r3, #4
 8104a16:	6008      	str	r0, [r1, #0]
 8104a18:	0628      	lsls	r0, r5, #24
 8104a1a:	d501      	bpl.n	8104a20 <_printf_i+0xec>
 8104a1c:	681d      	ldr	r5, [r3, #0]
 8104a1e:	e002      	b.n	8104a26 <_printf_i+0xf2>
 8104a20:	0669      	lsls	r1, r5, #25
 8104a22:	d5fb      	bpl.n	8104a1c <_printf_i+0xe8>
 8104a24:	881d      	ldrh	r5, [r3, #0]
 8104a26:	4854      	ldr	r0, [pc, #336]	; (8104b78 <_printf_i+0x244>)
 8104a28:	2f6f      	cmp	r7, #111	; 0x6f
 8104a2a:	bf0c      	ite	eq
 8104a2c:	2308      	moveq	r3, #8
 8104a2e:	230a      	movne	r3, #10
 8104a30:	2100      	movs	r1, #0
 8104a32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8104a36:	6866      	ldr	r6, [r4, #4]
 8104a38:	60a6      	str	r6, [r4, #8]
 8104a3a:	2e00      	cmp	r6, #0
 8104a3c:	bfa2      	ittt	ge
 8104a3e:	6821      	ldrge	r1, [r4, #0]
 8104a40:	f021 0104 	bicge.w	r1, r1, #4
 8104a44:	6021      	strge	r1, [r4, #0]
 8104a46:	b90d      	cbnz	r5, 8104a4c <_printf_i+0x118>
 8104a48:	2e00      	cmp	r6, #0
 8104a4a:	d04d      	beq.n	8104ae8 <_printf_i+0x1b4>
 8104a4c:	4616      	mov	r6, r2
 8104a4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8104a52:	fb03 5711 	mls	r7, r3, r1, r5
 8104a56:	5dc7      	ldrb	r7, [r0, r7]
 8104a58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8104a5c:	462f      	mov	r7, r5
 8104a5e:	42bb      	cmp	r3, r7
 8104a60:	460d      	mov	r5, r1
 8104a62:	d9f4      	bls.n	8104a4e <_printf_i+0x11a>
 8104a64:	2b08      	cmp	r3, #8
 8104a66:	d10b      	bne.n	8104a80 <_printf_i+0x14c>
 8104a68:	6823      	ldr	r3, [r4, #0]
 8104a6a:	07df      	lsls	r7, r3, #31
 8104a6c:	d508      	bpl.n	8104a80 <_printf_i+0x14c>
 8104a6e:	6923      	ldr	r3, [r4, #16]
 8104a70:	6861      	ldr	r1, [r4, #4]
 8104a72:	4299      	cmp	r1, r3
 8104a74:	bfde      	ittt	le
 8104a76:	2330      	movle	r3, #48	; 0x30
 8104a78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8104a7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8104a80:	1b92      	subs	r2, r2, r6
 8104a82:	6122      	str	r2, [r4, #16]
 8104a84:	f8cd a000 	str.w	sl, [sp]
 8104a88:	464b      	mov	r3, r9
 8104a8a:	aa03      	add	r2, sp, #12
 8104a8c:	4621      	mov	r1, r4
 8104a8e:	4640      	mov	r0, r8
 8104a90:	f7ff fee2 	bl	8104858 <_printf_common>
 8104a94:	3001      	adds	r0, #1
 8104a96:	d14c      	bne.n	8104b32 <_printf_i+0x1fe>
 8104a98:	f04f 30ff 	mov.w	r0, #4294967295
 8104a9c:	b004      	add	sp, #16
 8104a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8104aa2:	4835      	ldr	r0, [pc, #212]	; (8104b78 <_printf_i+0x244>)
 8104aa4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8104aa8:	6823      	ldr	r3, [r4, #0]
 8104aaa:	680e      	ldr	r6, [r1, #0]
 8104aac:	061f      	lsls	r7, r3, #24
 8104aae:	f856 5b04 	ldr.w	r5, [r6], #4
 8104ab2:	600e      	str	r6, [r1, #0]
 8104ab4:	d514      	bpl.n	8104ae0 <_printf_i+0x1ac>
 8104ab6:	07d9      	lsls	r1, r3, #31
 8104ab8:	bf44      	itt	mi
 8104aba:	f043 0320 	orrmi.w	r3, r3, #32
 8104abe:	6023      	strmi	r3, [r4, #0]
 8104ac0:	b91d      	cbnz	r5, 8104aca <_printf_i+0x196>
 8104ac2:	6823      	ldr	r3, [r4, #0]
 8104ac4:	f023 0320 	bic.w	r3, r3, #32
 8104ac8:	6023      	str	r3, [r4, #0]
 8104aca:	2310      	movs	r3, #16
 8104acc:	e7b0      	b.n	8104a30 <_printf_i+0xfc>
 8104ace:	6823      	ldr	r3, [r4, #0]
 8104ad0:	f043 0320 	orr.w	r3, r3, #32
 8104ad4:	6023      	str	r3, [r4, #0]
 8104ad6:	2378      	movs	r3, #120	; 0x78
 8104ad8:	4828      	ldr	r0, [pc, #160]	; (8104b7c <_printf_i+0x248>)
 8104ada:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8104ade:	e7e3      	b.n	8104aa8 <_printf_i+0x174>
 8104ae0:	065e      	lsls	r6, r3, #25
 8104ae2:	bf48      	it	mi
 8104ae4:	b2ad      	uxthmi	r5, r5
 8104ae6:	e7e6      	b.n	8104ab6 <_printf_i+0x182>
 8104ae8:	4616      	mov	r6, r2
 8104aea:	e7bb      	b.n	8104a64 <_printf_i+0x130>
 8104aec:	680b      	ldr	r3, [r1, #0]
 8104aee:	6826      	ldr	r6, [r4, #0]
 8104af0:	6960      	ldr	r0, [r4, #20]
 8104af2:	1d1d      	adds	r5, r3, #4
 8104af4:	600d      	str	r5, [r1, #0]
 8104af6:	0635      	lsls	r5, r6, #24
 8104af8:	681b      	ldr	r3, [r3, #0]
 8104afa:	d501      	bpl.n	8104b00 <_printf_i+0x1cc>
 8104afc:	6018      	str	r0, [r3, #0]
 8104afe:	e002      	b.n	8104b06 <_printf_i+0x1d2>
 8104b00:	0671      	lsls	r1, r6, #25
 8104b02:	d5fb      	bpl.n	8104afc <_printf_i+0x1c8>
 8104b04:	8018      	strh	r0, [r3, #0]
 8104b06:	2300      	movs	r3, #0
 8104b08:	6123      	str	r3, [r4, #16]
 8104b0a:	4616      	mov	r6, r2
 8104b0c:	e7ba      	b.n	8104a84 <_printf_i+0x150>
 8104b0e:	680b      	ldr	r3, [r1, #0]
 8104b10:	1d1a      	adds	r2, r3, #4
 8104b12:	600a      	str	r2, [r1, #0]
 8104b14:	681e      	ldr	r6, [r3, #0]
 8104b16:	6862      	ldr	r2, [r4, #4]
 8104b18:	2100      	movs	r1, #0
 8104b1a:	4630      	mov	r0, r6
 8104b1c:	f7fb fbe0 	bl	81002e0 <memchr>
 8104b20:	b108      	cbz	r0, 8104b26 <_printf_i+0x1f2>
 8104b22:	1b80      	subs	r0, r0, r6
 8104b24:	6060      	str	r0, [r4, #4]
 8104b26:	6863      	ldr	r3, [r4, #4]
 8104b28:	6123      	str	r3, [r4, #16]
 8104b2a:	2300      	movs	r3, #0
 8104b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8104b30:	e7a8      	b.n	8104a84 <_printf_i+0x150>
 8104b32:	6923      	ldr	r3, [r4, #16]
 8104b34:	4632      	mov	r2, r6
 8104b36:	4649      	mov	r1, r9
 8104b38:	4640      	mov	r0, r8
 8104b3a:	47d0      	blx	sl
 8104b3c:	3001      	adds	r0, #1
 8104b3e:	d0ab      	beq.n	8104a98 <_printf_i+0x164>
 8104b40:	6823      	ldr	r3, [r4, #0]
 8104b42:	079b      	lsls	r3, r3, #30
 8104b44:	d413      	bmi.n	8104b6e <_printf_i+0x23a>
 8104b46:	68e0      	ldr	r0, [r4, #12]
 8104b48:	9b03      	ldr	r3, [sp, #12]
 8104b4a:	4298      	cmp	r0, r3
 8104b4c:	bfb8      	it	lt
 8104b4e:	4618      	movlt	r0, r3
 8104b50:	e7a4      	b.n	8104a9c <_printf_i+0x168>
 8104b52:	2301      	movs	r3, #1
 8104b54:	4632      	mov	r2, r6
 8104b56:	4649      	mov	r1, r9
 8104b58:	4640      	mov	r0, r8
 8104b5a:	47d0      	blx	sl
 8104b5c:	3001      	adds	r0, #1
 8104b5e:	d09b      	beq.n	8104a98 <_printf_i+0x164>
 8104b60:	3501      	adds	r5, #1
 8104b62:	68e3      	ldr	r3, [r4, #12]
 8104b64:	9903      	ldr	r1, [sp, #12]
 8104b66:	1a5b      	subs	r3, r3, r1
 8104b68:	42ab      	cmp	r3, r5
 8104b6a:	dcf2      	bgt.n	8104b52 <_printf_i+0x21e>
 8104b6c:	e7eb      	b.n	8104b46 <_printf_i+0x212>
 8104b6e:	2500      	movs	r5, #0
 8104b70:	f104 0619 	add.w	r6, r4, #25
 8104b74:	e7f5      	b.n	8104b62 <_printf_i+0x22e>
 8104b76:	bf00      	nop
 8104b78:	08104f29 	.word	0x08104f29
 8104b7c:	08104f3a 	.word	0x08104f3a

08104b80 <_read_r>:
 8104b80:	b538      	push	{r3, r4, r5, lr}
 8104b82:	4d07      	ldr	r5, [pc, #28]	; (8104ba0 <_read_r+0x20>)
 8104b84:	4604      	mov	r4, r0
 8104b86:	4608      	mov	r0, r1
 8104b88:	4611      	mov	r1, r2
 8104b8a:	2200      	movs	r2, #0
 8104b8c:	602a      	str	r2, [r5, #0]
 8104b8e:	461a      	mov	r2, r3
 8104b90:	f7fb fd35 	bl	81005fe <_read>
 8104b94:	1c43      	adds	r3, r0, #1
 8104b96:	d102      	bne.n	8104b9e <_read_r+0x1e>
 8104b98:	682b      	ldr	r3, [r5, #0]
 8104b9a:	b103      	cbz	r3, 8104b9e <_read_r+0x1e>
 8104b9c:	6023      	str	r3, [r4, #0]
 8104b9e:	bd38      	pop	{r3, r4, r5, pc}
 8104ba0:	10004ac4 	.word	0x10004ac4

08104ba4 <__swbuf_r>:
 8104ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8104ba6:	460e      	mov	r6, r1
 8104ba8:	4614      	mov	r4, r2
 8104baa:	4605      	mov	r5, r0
 8104bac:	b118      	cbz	r0, 8104bb6 <__swbuf_r+0x12>
 8104bae:	6983      	ldr	r3, [r0, #24]
 8104bb0:	b90b      	cbnz	r3, 8104bb6 <__swbuf_r+0x12>
 8104bb2:	f7ff f999 	bl	8103ee8 <__sinit>
 8104bb6:	4b21      	ldr	r3, [pc, #132]	; (8104c3c <__swbuf_r+0x98>)
 8104bb8:	429c      	cmp	r4, r3
 8104bba:	d12b      	bne.n	8104c14 <__swbuf_r+0x70>
 8104bbc:	686c      	ldr	r4, [r5, #4]
 8104bbe:	69a3      	ldr	r3, [r4, #24]
 8104bc0:	60a3      	str	r3, [r4, #8]
 8104bc2:	89a3      	ldrh	r3, [r4, #12]
 8104bc4:	071a      	lsls	r2, r3, #28
 8104bc6:	d52f      	bpl.n	8104c28 <__swbuf_r+0x84>
 8104bc8:	6923      	ldr	r3, [r4, #16]
 8104bca:	b36b      	cbz	r3, 8104c28 <__swbuf_r+0x84>
 8104bcc:	6923      	ldr	r3, [r4, #16]
 8104bce:	6820      	ldr	r0, [r4, #0]
 8104bd0:	1ac0      	subs	r0, r0, r3
 8104bd2:	6963      	ldr	r3, [r4, #20]
 8104bd4:	b2f6      	uxtb	r6, r6
 8104bd6:	4283      	cmp	r3, r0
 8104bd8:	4637      	mov	r7, r6
 8104bda:	dc04      	bgt.n	8104be6 <__swbuf_r+0x42>
 8104bdc:	4621      	mov	r1, r4
 8104bde:	4628      	mov	r0, r5
 8104be0:	f7ff fc36 	bl	8104450 <_fflush_r>
 8104be4:	bb30      	cbnz	r0, 8104c34 <__swbuf_r+0x90>
 8104be6:	68a3      	ldr	r3, [r4, #8]
 8104be8:	3b01      	subs	r3, #1
 8104bea:	60a3      	str	r3, [r4, #8]
 8104bec:	6823      	ldr	r3, [r4, #0]
 8104bee:	1c5a      	adds	r2, r3, #1
 8104bf0:	6022      	str	r2, [r4, #0]
 8104bf2:	701e      	strb	r6, [r3, #0]
 8104bf4:	6963      	ldr	r3, [r4, #20]
 8104bf6:	3001      	adds	r0, #1
 8104bf8:	4283      	cmp	r3, r0
 8104bfa:	d004      	beq.n	8104c06 <__swbuf_r+0x62>
 8104bfc:	89a3      	ldrh	r3, [r4, #12]
 8104bfe:	07db      	lsls	r3, r3, #31
 8104c00:	d506      	bpl.n	8104c10 <__swbuf_r+0x6c>
 8104c02:	2e0a      	cmp	r6, #10
 8104c04:	d104      	bne.n	8104c10 <__swbuf_r+0x6c>
 8104c06:	4621      	mov	r1, r4
 8104c08:	4628      	mov	r0, r5
 8104c0a:	f7ff fc21 	bl	8104450 <_fflush_r>
 8104c0e:	b988      	cbnz	r0, 8104c34 <__swbuf_r+0x90>
 8104c10:	4638      	mov	r0, r7
 8104c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8104c14:	4b0a      	ldr	r3, [pc, #40]	; (8104c40 <__swbuf_r+0x9c>)
 8104c16:	429c      	cmp	r4, r3
 8104c18:	d101      	bne.n	8104c1e <__swbuf_r+0x7a>
 8104c1a:	68ac      	ldr	r4, [r5, #8]
 8104c1c:	e7cf      	b.n	8104bbe <__swbuf_r+0x1a>
 8104c1e:	4b09      	ldr	r3, [pc, #36]	; (8104c44 <__swbuf_r+0xa0>)
 8104c20:	429c      	cmp	r4, r3
 8104c22:	bf08      	it	eq
 8104c24:	68ec      	ldreq	r4, [r5, #12]
 8104c26:	e7ca      	b.n	8104bbe <__swbuf_r+0x1a>
 8104c28:	4621      	mov	r1, r4
 8104c2a:	4628      	mov	r0, r5
 8104c2c:	f000 f80c 	bl	8104c48 <__swsetup_r>
 8104c30:	2800      	cmp	r0, #0
 8104c32:	d0cb      	beq.n	8104bcc <__swbuf_r+0x28>
 8104c34:	f04f 37ff 	mov.w	r7, #4294967295
 8104c38:	e7ea      	b.n	8104c10 <__swbuf_r+0x6c>
 8104c3a:	bf00      	nop
 8104c3c:	08104ed4 	.word	0x08104ed4
 8104c40:	08104ef4 	.word	0x08104ef4
 8104c44:	08104eb4 	.word	0x08104eb4

08104c48 <__swsetup_r>:
 8104c48:	4b32      	ldr	r3, [pc, #200]	; (8104d14 <__swsetup_r+0xcc>)
 8104c4a:	b570      	push	{r4, r5, r6, lr}
 8104c4c:	681d      	ldr	r5, [r3, #0]
 8104c4e:	4606      	mov	r6, r0
 8104c50:	460c      	mov	r4, r1
 8104c52:	b125      	cbz	r5, 8104c5e <__swsetup_r+0x16>
 8104c54:	69ab      	ldr	r3, [r5, #24]
 8104c56:	b913      	cbnz	r3, 8104c5e <__swsetup_r+0x16>
 8104c58:	4628      	mov	r0, r5
 8104c5a:	f7ff f945 	bl	8103ee8 <__sinit>
 8104c5e:	4b2e      	ldr	r3, [pc, #184]	; (8104d18 <__swsetup_r+0xd0>)
 8104c60:	429c      	cmp	r4, r3
 8104c62:	d10f      	bne.n	8104c84 <__swsetup_r+0x3c>
 8104c64:	686c      	ldr	r4, [r5, #4]
 8104c66:	89a3      	ldrh	r3, [r4, #12]
 8104c68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8104c6c:	0719      	lsls	r1, r3, #28
 8104c6e:	d42c      	bmi.n	8104cca <__swsetup_r+0x82>
 8104c70:	06dd      	lsls	r5, r3, #27
 8104c72:	d411      	bmi.n	8104c98 <__swsetup_r+0x50>
 8104c74:	2309      	movs	r3, #9
 8104c76:	6033      	str	r3, [r6, #0]
 8104c78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8104c7c:	81a3      	strh	r3, [r4, #12]
 8104c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8104c82:	e03e      	b.n	8104d02 <__swsetup_r+0xba>
 8104c84:	4b25      	ldr	r3, [pc, #148]	; (8104d1c <__swsetup_r+0xd4>)
 8104c86:	429c      	cmp	r4, r3
 8104c88:	d101      	bne.n	8104c8e <__swsetup_r+0x46>
 8104c8a:	68ac      	ldr	r4, [r5, #8]
 8104c8c:	e7eb      	b.n	8104c66 <__swsetup_r+0x1e>
 8104c8e:	4b24      	ldr	r3, [pc, #144]	; (8104d20 <__swsetup_r+0xd8>)
 8104c90:	429c      	cmp	r4, r3
 8104c92:	bf08      	it	eq
 8104c94:	68ec      	ldreq	r4, [r5, #12]
 8104c96:	e7e6      	b.n	8104c66 <__swsetup_r+0x1e>
 8104c98:	0758      	lsls	r0, r3, #29
 8104c9a:	d512      	bpl.n	8104cc2 <__swsetup_r+0x7a>
 8104c9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8104c9e:	b141      	cbz	r1, 8104cb2 <__swsetup_r+0x6a>
 8104ca0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8104ca4:	4299      	cmp	r1, r3
 8104ca6:	d002      	beq.n	8104cae <__swsetup_r+0x66>
 8104ca8:	4630      	mov	r0, r6
 8104caa:	f7ff fc2b 	bl	8104504 <_free_r>
 8104cae:	2300      	movs	r3, #0
 8104cb0:	6363      	str	r3, [r4, #52]	; 0x34
 8104cb2:	89a3      	ldrh	r3, [r4, #12]
 8104cb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8104cb8:	81a3      	strh	r3, [r4, #12]
 8104cba:	2300      	movs	r3, #0
 8104cbc:	6063      	str	r3, [r4, #4]
 8104cbe:	6923      	ldr	r3, [r4, #16]
 8104cc0:	6023      	str	r3, [r4, #0]
 8104cc2:	89a3      	ldrh	r3, [r4, #12]
 8104cc4:	f043 0308 	orr.w	r3, r3, #8
 8104cc8:	81a3      	strh	r3, [r4, #12]
 8104cca:	6923      	ldr	r3, [r4, #16]
 8104ccc:	b94b      	cbnz	r3, 8104ce2 <__swsetup_r+0x9a>
 8104cce:	89a3      	ldrh	r3, [r4, #12]
 8104cd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8104cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104cd8:	d003      	beq.n	8104ce2 <__swsetup_r+0x9a>
 8104cda:	4621      	mov	r1, r4
 8104cdc:	4630      	mov	r0, r6
 8104cde:	f000 f845 	bl	8104d6c <__smakebuf_r>
 8104ce2:	89a0      	ldrh	r0, [r4, #12]
 8104ce4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8104ce8:	f010 0301 	ands.w	r3, r0, #1
 8104cec:	d00a      	beq.n	8104d04 <__swsetup_r+0xbc>
 8104cee:	2300      	movs	r3, #0
 8104cf0:	60a3      	str	r3, [r4, #8]
 8104cf2:	6963      	ldr	r3, [r4, #20]
 8104cf4:	425b      	negs	r3, r3
 8104cf6:	61a3      	str	r3, [r4, #24]
 8104cf8:	6923      	ldr	r3, [r4, #16]
 8104cfa:	b943      	cbnz	r3, 8104d0e <__swsetup_r+0xc6>
 8104cfc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8104d00:	d1ba      	bne.n	8104c78 <__swsetup_r+0x30>
 8104d02:	bd70      	pop	{r4, r5, r6, pc}
 8104d04:	0781      	lsls	r1, r0, #30
 8104d06:	bf58      	it	pl
 8104d08:	6963      	ldrpl	r3, [r4, #20]
 8104d0a:	60a3      	str	r3, [r4, #8]
 8104d0c:	e7f4      	b.n	8104cf8 <__swsetup_r+0xb0>
 8104d0e:	2000      	movs	r0, #0
 8104d10:	e7f7      	b.n	8104d02 <__swsetup_r+0xba>
 8104d12:	bf00      	nop
 8104d14:	10000014 	.word	0x10000014
 8104d18:	08104ed4 	.word	0x08104ed4
 8104d1c:	08104ef4 	.word	0x08104ef4
 8104d20:	08104eb4 	.word	0x08104eb4

08104d24 <__swhatbuf_r>:
 8104d24:	b570      	push	{r4, r5, r6, lr}
 8104d26:	460e      	mov	r6, r1
 8104d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8104d2c:	2900      	cmp	r1, #0
 8104d2e:	b096      	sub	sp, #88	; 0x58
 8104d30:	4614      	mov	r4, r2
 8104d32:	461d      	mov	r5, r3
 8104d34:	da07      	bge.n	8104d46 <__swhatbuf_r+0x22>
 8104d36:	2300      	movs	r3, #0
 8104d38:	602b      	str	r3, [r5, #0]
 8104d3a:	89b3      	ldrh	r3, [r6, #12]
 8104d3c:	061a      	lsls	r2, r3, #24
 8104d3e:	d410      	bmi.n	8104d62 <__swhatbuf_r+0x3e>
 8104d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8104d44:	e00e      	b.n	8104d64 <__swhatbuf_r+0x40>
 8104d46:	466a      	mov	r2, sp
 8104d48:	f000 f850 	bl	8104dec <_fstat_r>
 8104d4c:	2800      	cmp	r0, #0
 8104d4e:	dbf2      	blt.n	8104d36 <__swhatbuf_r+0x12>
 8104d50:	9a01      	ldr	r2, [sp, #4]
 8104d52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8104d56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8104d5a:	425a      	negs	r2, r3
 8104d5c:	415a      	adcs	r2, r3
 8104d5e:	602a      	str	r2, [r5, #0]
 8104d60:	e7ee      	b.n	8104d40 <__swhatbuf_r+0x1c>
 8104d62:	2340      	movs	r3, #64	; 0x40
 8104d64:	2000      	movs	r0, #0
 8104d66:	6023      	str	r3, [r4, #0]
 8104d68:	b016      	add	sp, #88	; 0x58
 8104d6a:	bd70      	pop	{r4, r5, r6, pc}

08104d6c <__smakebuf_r>:
 8104d6c:	898b      	ldrh	r3, [r1, #12]
 8104d6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8104d70:	079d      	lsls	r5, r3, #30
 8104d72:	4606      	mov	r6, r0
 8104d74:	460c      	mov	r4, r1
 8104d76:	d507      	bpl.n	8104d88 <__smakebuf_r+0x1c>
 8104d78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8104d7c:	6023      	str	r3, [r4, #0]
 8104d7e:	6123      	str	r3, [r4, #16]
 8104d80:	2301      	movs	r3, #1
 8104d82:	6163      	str	r3, [r4, #20]
 8104d84:	b002      	add	sp, #8
 8104d86:	bd70      	pop	{r4, r5, r6, pc}
 8104d88:	ab01      	add	r3, sp, #4
 8104d8a:	466a      	mov	r2, sp
 8104d8c:	f7ff ffca 	bl	8104d24 <__swhatbuf_r>
 8104d90:	9900      	ldr	r1, [sp, #0]
 8104d92:	4605      	mov	r5, r0
 8104d94:	4630      	mov	r0, r6
 8104d96:	f7ff f983 	bl	81040a0 <_malloc_r>
 8104d9a:	b948      	cbnz	r0, 8104db0 <__smakebuf_r+0x44>
 8104d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8104da0:	059a      	lsls	r2, r3, #22
 8104da2:	d4ef      	bmi.n	8104d84 <__smakebuf_r+0x18>
 8104da4:	f023 0303 	bic.w	r3, r3, #3
 8104da8:	f043 0302 	orr.w	r3, r3, #2
 8104dac:	81a3      	strh	r3, [r4, #12]
 8104dae:	e7e3      	b.n	8104d78 <__smakebuf_r+0xc>
 8104db0:	4b0d      	ldr	r3, [pc, #52]	; (8104de8 <__smakebuf_r+0x7c>)
 8104db2:	62b3      	str	r3, [r6, #40]	; 0x28
 8104db4:	89a3      	ldrh	r3, [r4, #12]
 8104db6:	6020      	str	r0, [r4, #0]
 8104db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8104dbc:	81a3      	strh	r3, [r4, #12]
 8104dbe:	9b00      	ldr	r3, [sp, #0]
 8104dc0:	6163      	str	r3, [r4, #20]
 8104dc2:	9b01      	ldr	r3, [sp, #4]
 8104dc4:	6120      	str	r0, [r4, #16]
 8104dc6:	b15b      	cbz	r3, 8104de0 <__smakebuf_r+0x74>
 8104dc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8104dcc:	4630      	mov	r0, r6
 8104dce:	f000 f81f 	bl	8104e10 <_isatty_r>
 8104dd2:	b128      	cbz	r0, 8104de0 <__smakebuf_r+0x74>
 8104dd4:	89a3      	ldrh	r3, [r4, #12]
 8104dd6:	f023 0303 	bic.w	r3, r3, #3
 8104dda:	f043 0301 	orr.w	r3, r3, #1
 8104dde:	81a3      	strh	r3, [r4, #12]
 8104de0:	89a0      	ldrh	r0, [r4, #12]
 8104de2:	4305      	orrs	r5, r0
 8104de4:	81a5      	strh	r5, [r4, #12]
 8104de6:	e7cd      	b.n	8104d84 <__smakebuf_r+0x18>
 8104de8:	08103e81 	.word	0x08103e81

08104dec <_fstat_r>:
 8104dec:	b538      	push	{r3, r4, r5, lr}
 8104dee:	4d07      	ldr	r5, [pc, #28]	; (8104e0c <_fstat_r+0x20>)
 8104df0:	2300      	movs	r3, #0
 8104df2:	4604      	mov	r4, r0
 8104df4:	4608      	mov	r0, r1
 8104df6:	4611      	mov	r1, r2
 8104df8:	602b      	str	r3, [r5, #0]
 8104dfa:	f7fb fc45 	bl	8100688 <_fstat>
 8104dfe:	1c43      	adds	r3, r0, #1
 8104e00:	d102      	bne.n	8104e08 <_fstat_r+0x1c>
 8104e02:	682b      	ldr	r3, [r5, #0]
 8104e04:	b103      	cbz	r3, 8104e08 <_fstat_r+0x1c>
 8104e06:	6023      	str	r3, [r4, #0]
 8104e08:	bd38      	pop	{r3, r4, r5, pc}
 8104e0a:	bf00      	nop
 8104e0c:	10004ac4 	.word	0x10004ac4

08104e10 <_isatty_r>:
 8104e10:	b538      	push	{r3, r4, r5, lr}
 8104e12:	4d06      	ldr	r5, [pc, #24]	; (8104e2c <_isatty_r+0x1c>)
 8104e14:	2300      	movs	r3, #0
 8104e16:	4604      	mov	r4, r0
 8104e18:	4608      	mov	r0, r1
 8104e1a:	602b      	str	r3, [r5, #0]
 8104e1c:	f7fb fc44 	bl	81006a8 <_isatty>
 8104e20:	1c43      	adds	r3, r0, #1
 8104e22:	d102      	bne.n	8104e2a <_isatty_r+0x1a>
 8104e24:	682b      	ldr	r3, [r5, #0]
 8104e26:	b103      	cbz	r3, 8104e2a <_isatty_r+0x1a>
 8104e28:	6023      	str	r3, [r4, #0]
 8104e2a:	bd38      	pop	{r3, r4, r5, pc}
 8104e2c:	10004ac4 	.word	0x10004ac4

08104e30 <_init>:
 8104e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8104e32:	bf00      	nop
 8104e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8104e36:	bc08      	pop	{r3}
 8104e38:	469e      	mov	lr, r3
 8104e3a:	4770      	bx	lr

08104e3c <_fini>:
 8104e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8104e3e:	bf00      	nop
 8104e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8104e42:	bc08      	pop	{r3}
 8104e44:	469e      	mov	lr, r3
 8104e46:	4770      	bx	lr
