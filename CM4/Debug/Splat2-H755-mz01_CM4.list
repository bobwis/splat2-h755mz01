
Splat2-H755-mz01_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b38  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08103dd8  08103dd8  00013dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08103e90  08103e90  00013e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08103e94  08103e94  00013e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  10000000  08103e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004a44  10000078  08103f10  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  10004abc  08103f10  00024abc  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001af59  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000339d  00000000  00000000  0003b001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000ee8  00000000  00000000  0003e3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000dd0  00000000  00000000  0003f288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003917e  00000000  00000000  00040058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000fcb9  00000000  00000000  000791d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0017b844  00000000  00000000  00088e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  002046d3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003f7c  00000000  00000000  00204728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000078 	.word	0x10000078
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08103dc0 	.word	0x08103dc0

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000007c 	.word	0x1000007c
 81002dc:	08103dc0 	.word	0x08103dc0

081002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002e0:	b480      	push	{r7}
 81002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002e4:	4b0b      	ldr	r3, [pc, #44]	; (8100314 <SystemInit+0x34>)
 81002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002ea:	4a0a      	ldr	r2, [pc, #40]	; (8100314 <SystemInit+0x34>)
 81002ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002f4:	4b07      	ldr	r3, [pc, #28]	; (8100314 <SystemInit+0x34>)
 81002f6:	691b      	ldr	r3, [r3, #16]
 81002f8:	4a06      	ldr	r2, [pc, #24]	; (8100314 <SystemInit+0x34>)
 81002fa:	f043 0310 	orr.w	r3, r3, #16
 81002fe:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100300:	4b04      	ldr	r3, [pc, #16]	; (8100314 <SystemInit+0x34>)
 8100302:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8100306:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100308:	bf00      	nop
 810030a:	46bd      	mov	sp, r7
 810030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100310:	4770      	bx	lr
 8100312:	bf00      	nop
 8100314:	e000ed00 	.word	0xe000ed00

08100318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100318:	b580      	push	{r7, lr}
 810031a:	b082      	sub	sp, #8
 810031c:	af00      	add	r7, sp, #0
  /*************** CM4 *************************/
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810031e:	4b21      	ldr	r3, [pc, #132]	; (81003a4 <main+0x8c>)
 8100320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100324:	4a1f      	ldr	r2, [pc, #124]	; (81003a4 <main+0x8c>)
 8100326:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810032a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810032e:	4b1d      	ldr	r3, [pc, #116]	; (81003a4 <main+0x8c>)
 8100330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100338:	607b      	str	r3, [r7, #4]
 810033a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810033c:	2001      	movs	r0, #1
 810033e:	f000 fc7d 	bl	8100c3c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100342:	f000 fd07 	bl	8100d54 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100346:	2201      	movs	r2, #1
 8100348:	2102      	movs	r1, #2
 810034a:	2000      	movs	r0, #0
 810034c:	f000 fc88 	bl	8100c60 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100350:	4b15      	ldr	r3, [pc, #84]	; (81003a8 <main+0x90>)
 8100352:	681b      	ldr	r3, [r3, #0]
 8100354:	091b      	lsrs	r3, r3, #4
 8100356:	f003 030f 	and.w	r3, r3, #15
 810035a:	2b07      	cmp	r3, #7
 810035c:	d108      	bne.n	8100370 <main+0x58>
 810035e:	4b13      	ldr	r3, [pc, #76]	; (81003ac <main+0x94>)
 8100360:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100364:	4a11      	ldr	r2, [pc, #68]	; (81003ac <main+0x94>)
 8100366:	f043 0301 	orr.w	r3, r3, #1
 810036a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810036e:	e007      	b.n	8100380 <main+0x68>
 8100370:	4b0e      	ldr	r3, [pc, #56]	; (81003ac <main+0x94>)
 8100372:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100376:	4a0d      	ldr	r2, [pc, #52]	; (81003ac <main+0x94>)
 8100378:	f043 0301 	orr.w	r3, r3, #1
 810037c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100380:	f000 f8d8 	bl	8100534 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100384:	f000 f81a 	bl	81003bc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8100388:	f000 fea0 	bl	81010cc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 810038c:	4a08      	ldr	r2, [pc, #32]	; (81003b0 <main+0x98>)
 810038e:	2100      	movs	r1, #0
 8100390:	4808      	ldr	r0, [pc, #32]	; (81003b4 <main+0x9c>)
 8100392:	f000 fee5 	bl	8101160 <osThreadNew>
 8100396:	4603      	mov	r3, r0
 8100398:	4a07      	ldr	r2, [pc, #28]	; (81003b8 <main+0xa0>)
 810039a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 810039c:	f000 feba 	bl	8101114 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81003a0:	e7fe      	b.n	81003a0 <main+0x88>
 81003a2:	bf00      	nop
 81003a4:	58024400 	.word	0x58024400
 81003a8:	e000ed00 	.word	0xe000ed00
 81003ac:	58026400 	.word	0x58026400
 81003b0:	08103e0c 	.word	0x08103e0c
 81003b4:	0810043d 	.word	0x0810043d
 81003b8:	10004a68 	.word	0x10004a68

081003bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81003bc:	b580      	push	{r7, lr}
 81003be:	b086      	sub	sp, #24
 81003c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81003c2:	1d3b      	adds	r3, r7, #4
 81003c4:	2200      	movs	r2, #0
 81003c6:	601a      	str	r2, [r3, #0]
 81003c8:	605a      	str	r2, [r3, #4]
 81003ca:	609a      	str	r2, [r3, #8]
 81003cc:	60da      	str	r2, [r3, #12]
 81003ce:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81003d0:	4b18      	ldr	r3, [pc, #96]	; (8100434 <MX_GPIO_Init+0x78>)
 81003d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81003d6:	4a17      	ldr	r2, [pc, #92]	; (8100434 <MX_GPIO_Init+0x78>)
 81003d8:	f043 0308 	orr.w	r3, r3, #8
 81003dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81003e0:	4b14      	ldr	r3, [pc, #80]	; (8100434 <MX_GPIO_Init+0x78>)
 81003e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81003e6:	f003 0308 	and.w	r3, r3, #8
 81003ea:	603b      	str	r3, [r7, #0]
 81003ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_SPLAT_GPIO_Port, LD2_SPLAT_Pin, GPIO_PIN_RESET);
 81003ee:	2200      	movs	r2, #0
 81003f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 81003f4:	4810      	ldr	r0, [pc, #64]	; (8100438 <MX_GPIO_Init+0x7c>)
 81003f6:	f000 fbed 	bl	8100bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_SPLAT_Pin */
  GPIO_InitStruct.Pin = LD2_SPLAT_Pin;
 81003fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81003fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100400:	2301      	movs	r3, #1
 8100402:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100404:	2300      	movs	r3, #0
 8100406:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100408:	2300      	movs	r3, #0
 810040a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LD2_SPLAT_GPIO_Port, &GPIO_InitStruct);
 810040c:	1d3b      	adds	r3, r7, #4
 810040e:	4619      	mov	r1, r3
 8100410:	4809      	ldr	r0, [pc, #36]	; (8100438 <MX_GPIO_Init+0x7c>)
 8100412:	f000 fa2f 	bl	8100874 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_2_SPLAT_Pin */
  GPIO_InitStruct.Pin = SW1_2_SPLAT_Pin;
 8100416:	2380      	movs	r3, #128	; 0x80
 8100418:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 810041a:	2300      	movs	r3, #0
 810041c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 810041e:	2301      	movs	r3, #1
 8100420:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SW1_2_SPLAT_GPIO_Port, &GPIO_InitStruct);
 8100422:	1d3b      	adds	r3, r7, #4
 8100424:	4619      	mov	r1, r3
 8100426:	4804      	ldr	r0, [pc, #16]	; (8100438 <MX_GPIO_Init+0x7c>)
 8100428:	f000 fa24 	bl	8100874 <HAL_GPIO_Init>

}
 810042c:	bf00      	nop
 810042e:	3718      	adds	r7, #24
 8100430:	46bd      	mov	sp, r7
 8100432:	bd80      	pop	{r7, pc}
 8100434:	58024400 	.word	0x58024400
 8100438:	58020c00 	.word	0x58020c00

0810043c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 810043c:	b580      	push	{r7, lr}
 810043e:	b082      	sub	sp, #8
 8100440:	af00      	add	r7, sp, #0
 8100442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
		HAL_GPIO_TogglePin(LD2_SPLAT_GPIO_Port, LD2_SPLAT_Pin);
 8100444:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8100448:	4803      	ldr	r0, [pc, #12]	; (8100458 <StartDefaultTask+0x1c>)
 810044a:	f000 fbdc 	bl	8100c06 <HAL_GPIO_TogglePin>
	    osDelay(200);
 810044e:	20c8      	movs	r0, #200	; 0xc8
 8100450:	f000 ff18 	bl	8101284 <osDelay>
		HAL_GPIO_TogglePin(LD2_SPLAT_GPIO_Port, LD2_SPLAT_Pin);
 8100454:	e7f6      	b.n	8100444 <StartDefaultTask+0x8>
 8100456:	bf00      	nop
 8100458:	58020c00 	.word	0x58020c00

0810045c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810045c:	b580      	push	{r7, lr}
 810045e:	b082      	sub	sp, #8
 8100460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100462:	4b0c      	ldr	r3, [pc, #48]	; (8100494 <HAL_MspInit+0x38>)
 8100464:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100468:	4a0a      	ldr	r2, [pc, #40]	; (8100494 <HAL_MspInit+0x38>)
 810046a:	f043 0302 	orr.w	r3, r3, #2
 810046e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100472:	4b08      	ldr	r3, [pc, #32]	; (8100494 <HAL_MspInit+0x38>)
 8100474:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100478:	f003 0302 	and.w	r3, r3, #2
 810047c:	607b      	str	r3, [r7, #4]
 810047e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8100480:	2200      	movs	r2, #0
 8100482:	210f      	movs	r1, #15
 8100484:	f06f 0001 	mvn.w	r0, #1
 8100488:	f000 f9b9 	bl	81007fe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810048c:	bf00      	nop
 810048e:	3708      	adds	r7, #8
 8100490:	46bd      	mov	sp, r7
 8100492:	bd80      	pop	{r7, pc}
 8100494:	58024400 	.word	0x58024400

08100498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100498:	b480      	push	{r7}
 810049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 810049c:	e7fe      	b.n	810049c <NMI_Handler+0x4>

0810049e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810049e:	b480      	push	{r7}
 81004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81004a2:	e7fe      	b.n	81004a2 <HardFault_Handler+0x4>

081004a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81004a4:	b480      	push	{r7}
 81004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81004a8:	e7fe      	b.n	81004a8 <MemManage_Handler+0x4>

081004aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81004aa:	b480      	push	{r7}
 81004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81004ae:	e7fe      	b.n	81004ae <BusFault_Handler+0x4>

081004b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81004b0:	b480      	push	{r7}
 81004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81004b4:	e7fe      	b.n	81004b4 <UsageFault_Handler+0x4>

081004b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81004b6:	b480      	push	{r7}
 81004b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81004ba:	bf00      	nop
 81004bc:	46bd      	mov	sp, r7
 81004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004c2:	4770      	bx	lr

081004c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81004c4:	b580      	push	{r7, lr}
 81004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81004c8:	f000 f8c8 	bl	810065c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 81004cc:	f002 ff48 	bl	8103360 <xTaskGetSchedulerState>
 81004d0:	4603      	mov	r3, r0
 81004d2:	2b01      	cmp	r3, #1
 81004d4:	d001      	beq.n	81004da <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 81004d6:	f001 fb7f 	bl	8101bd8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81004da:	bf00      	nop
 81004dc:	bd80      	pop	{r7, pc}
	...

081004e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81004e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100518 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81004e4:	f7ff fefc 	bl	81002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81004e8:	480c      	ldr	r0, [pc, #48]	; (810051c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81004ea:	490d      	ldr	r1, [pc, #52]	; (8100520 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81004ec:	4a0d      	ldr	r2, [pc, #52]	; (8100524 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81004ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81004f0:	e002      	b.n	81004f8 <LoopCopyDataInit>

081004f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81004f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81004f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81004f6:	3304      	adds	r3, #4

081004f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81004f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81004fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81004fc:	d3f9      	bcc.n	81004f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81004fe:	4a0a      	ldr	r2, [pc, #40]	; (8100528 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100500:	4c0a      	ldr	r4, [pc, #40]	; (810052c <LoopFillZerobss+0x22>)
  movs r3, #0
 8100502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100504:	e001      	b.n	810050a <LoopFillZerobss>

08100506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100508:	3204      	adds	r2, #4

0810050a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810050a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 810050c:	d3fb      	bcc.n	8100506 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810050e:	f003 fb55 	bl	8103bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100512:	f7ff ff01 	bl	8100318 <main>
  bx  lr
 8100516:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100518:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 810051c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100520:	10000078 	.word	0x10000078
  ldr r2, =_sidata
 8100524:	08103e98 	.word	0x08103e98
  ldr r2, =_sbss
 8100528:	10000078 	.word	0x10000078
  ldr r4, =_ebss
 810052c:	10004abc 	.word	0x10004abc

08100530 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100530:	e7fe      	b.n	8100530 <ADC3_IRQHandler>
	...

08100534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100534:	b580      	push	{r7, lr}
 8100536:	b082      	sub	sp, #8
 8100538:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810053a:	4b28      	ldr	r3, [pc, #160]	; (81005dc <HAL_Init+0xa8>)
 810053c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100540:	4a26      	ldr	r2, [pc, #152]	; (81005dc <HAL_Init+0xa8>)
 8100542:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100546:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810054a:	4b24      	ldr	r3, [pc, #144]	; (81005dc <HAL_Init+0xa8>)
 810054c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100554:	603b      	str	r3, [r7, #0]
 8100556:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100558:	4b21      	ldr	r3, [pc, #132]	; (81005e0 <HAL_Init+0xac>)
 810055a:	681b      	ldr	r3, [r3, #0]
 810055c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100560:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100564:	4a1e      	ldr	r2, [pc, #120]	; (81005e0 <HAL_Init+0xac>)
 8100566:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810056a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810056c:	4b1c      	ldr	r3, [pc, #112]	; (81005e0 <HAL_Init+0xac>)
 810056e:	681b      	ldr	r3, [r3, #0]
 8100570:	4a1b      	ldr	r2, [pc, #108]	; (81005e0 <HAL_Init+0xac>)
 8100572:	f043 0301 	orr.w	r3, r3, #1
 8100576:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100578:	2003      	movs	r0, #3
 810057a:	f000 f935 	bl	81007e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810057e:	f000 fbf7 	bl	8100d70 <HAL_RCC_GetSysClockFreq>
 8100582:	4602      	mov	r2, r0
 8100584:	4b15      	ldr	r3, [pc, #84]	; (81005dc <HAL_Init+0xa8>)
 8100586:	699b      	ldr	r3, [r3, #24]
 8100588:	0a1b      	lsrs	r3, r3, #8
 810058a:	f003 030f 	and.w	r3, r3, #15
 810058e:	4915      	ldr	r1, [pc, #84]	; (81005e4 <HAL_Init+0xb0>)
 8100590:	5ccb      	ldrb	r3, [r1, r3]
 8100592:	f003 031f 	and.w	r3, r3, #31
 8100596:	fa22 f303 	lsr.w	r3, r2, r3
 810059a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810059c:	4b0f      	ldr	r3, [pc, #60]	; (81005dc <HAL_Init+0xa8>)
 810059e:	699b      	ldr	r3, [r3, #24]
 81005a0:	f003 030f 	and.w	r3, r3, #15
 81005a4:	4a0f      	ldr	r2, [pc, #60]	; (81005e4 <HAL_Init+0xb0>)
 81005a6:	5cd3      	ldrb	r3, [r2, r3]
 81005a8:	f003 031f 	and.w	r3, r3, #31
 81005ac:	687a      	ldr	r2, [r7, #4]
 81005ae:	fa22 f303 	lsr.w	r3, r2, r3
 81005b2:	4a0d      	ldr	r2, [pc, #52]	; (81005e8 <HAL_Init+0xb4>)
 81005b4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81005b6:	4b0c      	ldr	r3, [pc, #48]	; (81005e8 <HAL_Init+0xb4>)
 81005b8:	681b      	ldr	r3, [r3, #0]
 81005ba:	4a0c      	ldr	r2, [pc, #48]	; (81005ec <HAL_Init+0xb8>)
 81005bc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81005be:	200f      	movs	r0, #15
 81005c0:	f000 f816 	bl	81005f0 <HAL_InitTick>
 81005c4:	4603      	mov	r3, r0
 81005c6:	2b00      	cmp	r3, #0
 81005c8:	d001      	beq.n	81005ce <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81005ca:	2301      	movs	r3, #1
 81005cc:	e002      	b.n	81005d4 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81005ce:	f7ff ff45 	bl	810045c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81005d2:	2300      	movs	r3, #0
}
 81005d4:	4618      	mov	r0, r3
 81005d6:	3708      	adds	r7, #8
 81005d8:	46bd      	mov	sp, r7
 81005da:	bd80      	pop	{r7, pc}
 81005dc:	58024400 	.word	0x58024400
 81005e0:	40024400 	.word	0x40024400
 81005e4:	08103dfc 	.word	0x08103dfc
 81005e8:	10000004 	.word	0x10000004
 81005ec:	10000000 	.word	0x10000000

081005f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81005f0:	b580      	push	{r7, lr}
 81005f2:	b082      	sub	sp, #8
 81005f4:	af00      	add	r7, sp, #0
 81005f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81005f8:	4b15      	ldr	r3, [pc, #84]	; (8100650 <HAL_InitTick+0x60>)
 81005fa:	781b      	ldrb	r3, [r3, #0]
 81005fc:	2b00      	cmp	r3, #0
 81005fe:	d101      	bne.n	8100604 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100600:	2301      	movs	r3, #1
 8100602:	e021      	b.n	8100648 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100604:	4b13      	ldr	r3, [pc, #76]	; (8100654 <HAL_InitTick+0x64>)
 8100606:	681a      	ldr	r2, [r3, #0]
 8100608:	4b11      	ldr	r3, [pc, #68]	; (8100650 <HAL_InitTick+0x60>)
 810060a:	781b      	ldrb	r3, [r3, #0]
 810060c:	4619      	mov	r1, r3
 810060e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8100612:	fbb3 f3f1 	udiv	r3, r3, r1
 8100616:	fbb2 f3f3 	udiv	r3, r2, r3
 810061a:	4618      	mov	r0, r3
 810061c:	f000 f909 	bl	8100832 <HAL_SYSTICK_Config>
 8100620:	4603      	mov	r3, r0
 8100622:	2b00      	cmp	r3, #0
 8100624:	d001      	beq.n	810062a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100626:	2301      	movs	r3, #1
 8100628:	e00e      	b.n	8100648 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810062a:	687b      	ldr	r3, [r7, #4]
 810062c:	2b0f      	cmp	r3, #15
 810062e:	d80a      	bhi.n	8100646 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100630:	2200      	movs	r2, #0
 8100632:	6879      	ldr	r1, [r7, #4]
 8100634:	f04f 30ff 	mov.w	r0, #4294967295
 8100638:	f000 f8e1 	bl	81007fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 810063c:	4a06      	ldr	r2, [pc, #24]	; (8100658 <HAL_InitTick+0x68>)
 810063e:	687b      	ldr	r3, [r7, #4]
 8100640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100642:	2300      	movs	r3, #0
 8100644:	e000      	b.n	8100648 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100646:	2301      	movs	r3, #1
}
 8100648:	4618      	mov	r0, r3
 810064a:	3708      	adds	r7, #8
 810064c:	46bd      	mov	sp, r7
 810064e:	bd80      	pop	{r7, pc}
 8100650:	1000000c 	.word	0x1000000c
 8100654:	10000000 	.word	0x10000000
 8100658:	10000008 	.word	0x10000008

0810065c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810065c:	b480      	push	{r7}
 810065e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100660:	4b06      	ldr	r3, [pc, #24]	; (810067c <HAL_IncTick+0x20>)
 8100662:	781b      	ldrb	r3, [r3, #0]
 8100664:	461a      	mov	r2, r3
 8100666:	4b06      	ldr	r3, [pc, #24]	; (8100680 <HAL_IncTick+0x24>)
 8100668:	681b      	ldr	r3, [r3, #0]
 810066a:	4413      	add	r3, r2
 810066c:	4a04      	ldr	r2, [pc, #16]	; (8100680 <HAL_IncTick+0x24>)
 810066e:	6013      	str	r3, [r2, #0]
}
 8100670:	bf00      	nop
 8100672:	46bd      	mov	sp, r7
 8100674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100678:	4770      	bx	lr
 810067a:	bf00      	nop
 810067c:	1000000c 	.word	0x1000000c
 8100680:	10004a6c 	.word	0x10004a6c

08100684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100684:	b480      	push	{r7}
 8100686:	b085      	sub	sp, #20
 8100688:	af00      	add	r7, sp, #0
 810068a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810068c:	687b      	ldr	r3, [r7, #4]
 810068e:	f003 0307 	and.w	r3, r3, #7
 8100692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100694:	4b0c      	ldr	r3, [pc, #48]	; (81006c8 <__NVIC_SetPriorityGrouping+0x44>)
 8100696:	68db      	ldr	r3, [r3, #12]
 8100698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810069a:	68ba      	ldr	r2, [r7, #8]
 810069c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81006a0:	4013      	ands	r3, r2
 81006a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81006a4:	68fb      	ldr	r3, [r7, #12]
 81006a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81006a8:	68bb      	ldr	r3, [r7, #8]
 81006aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81006ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81006b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81006b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81006b6:	4a04      	ldr	r2, [pc, #16]	; (81006c8 <__NVIC_SetPriorityGrouping+0x44>)
 81006b8:	68bb      	ldr	r3, [r7, #8]
 81006ba:	60d3      	str	r3, [r2, #12]
}
 81006bc:	bf00      	nop
 81006be:	3714      	adds	r7, #20
 81006c0:	46bd      	mov	sp, r7
 81006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006c6:	4770      	bx	lr
 81006c8:	e000ed00 	.word	0xe000ed00

081006cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81006cc:	b480      	push	{r7}
 81006ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81006d0:	4b04      	ldr	r3, [pc, #16]	; (81006e4 <__NVIC_GetPriorityGrouping+0x18>)
 81006d2:	68db      	ldr	r3, [r3, #12]
 81006d4:	0a1b      	lsrs	r3, r3, #8
 81006d6:	f003 0307 	and.w	r3, r3, #7
}
 81006da:	4618      	mov	r0, r3
 81006dc:	46bd      	mov	sp, r7
 81006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006e2:	4770      	bx	lr
 81006e4:	e000ed00 	.word	0xe000ed00

081006e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81006e8:	b480      	push	{r7}
 81006ea:	b083      	sub	sp, #12
 81006ec:	af00      	add	r7, sp, #0
 81006ee:	4603      	mov	r3, r0
 81006f0:	6039      	str	r1, [r7, #0]
 81006f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81006f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81006f8:	2b00      	cmp	r3, #0
 81006fa:	db0a      	blt.n	8100712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81006fc:	683b      	ldr	r3, [r7, #0]
 81006fe:	b2da      	uxtb	r2, r3
 8100700:	490c      	ldr	r1, [pc, #48]	; (8100734 <__NVIC_SetPriority+0x4c>)
 8100702:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100706:	0112      	lsls	r2, r2, #4
 8100708:	b2d2      	uxtb	r2, r2
 810070a:	440b      	add	r3, r1
 810070c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100710:	e00a      	b.n	8100728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100712:	683b      	ldr	r3, [r7, #0]
 8100714:	b2da      	uxtb	r2, r3
 8100716:	4908      	ldr	r1, [pc, #32]	; (8100738 <__NVIC_SetPriority+0x50>)
 8100718:	88fb      	ldrh	r3, [r7, #6]
 810071a:	f003 030f 	and.w	r3, r3, #15
 810071e:	3b04      	subs	r3, #4
 8100720:	0112      	lsls	r2, r2, #4
 8100722:	b2d2      	uxtb	r2, r2
 8100724:	440b      	add	r3, r1
 8100726:	761a      	strb	r2, [r3, #24]
}
 8100728:	bf00      	nop
 810072a:	370c      	adds	r7, #12
 810072c:	46bd      	mov	sp, r7
 810072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100732:	4770      	bx	lr
 8100734:	e000e100 	.word	0xe000e100
 8100738:	e000ed00 	.word	0xe000ed00

0810073c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810073c:	b480      	push	{r7}
 810073e:	b089      	sub	sp, #36	; 0x24
 8100740:	af00      	add	r7, sp, #0
 8100742:	60f8      	str	r0, [r7, #12]
 8100744:	60b9      	str	r1, [r7, #8]
 8100746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100748:	68fb      	ldr	r3, [r7, #12]
 810074a:	f003 0307 	and.w	r3, r3, #7
 810074e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100750:	69fb      	ldr	r3, [r7, #28]
 8100752:	f1c3 0307 	rsb	r3, r3, #7
 8100756:	2b04      	cmp	r3, #4
 8100758:	bf28      	it	cs
 810075a:	2304      	movcs	r3, #4
 810075c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810075e:	69fb      	ldr	r3, [r7, #28]
 8100760:	3304      	adds	r3, #4
 8100762:	2b06      	cmp	r3, #6
 8100764:	d902      	bls.n	810076c <NVIC_EncodePriority+0x30>
 8100766:	69fb      	ldr	r3, [r7, #28]
 8100768:	3b03      	subs	r3, #3
 810076a:	e000      	b.n	810076e <NVIC_EncodePriority+0x32>
 810076c:	2300      	movs	r3, #0
 810076e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100770:	f04f 32ff 	mov.w	r2, #4294967295
 8100774:	69bb      	ldr	r3, [r7, #24]
 8100776:	fa02 f303 	lsl.w	r3, r2, r3
 810077a:	43da      	mvns	r2, r3
 810077c:	68bb      	ldr	r3, [r7, #8]
 810077e:	401a      	ands	r2, r3
 8100780:	697b      	ldr	r3, [r7, #20]
 8100782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100784:	f04f 31ff 	mov.w	r1, #4294967295
 8100788:	697b      	ldr	r3, [r7, #20]
 810078a:	fa01 f303 	lsl.w	r3, r1, r3
 810078e:	43d9      	mvns	r1, r3
 8100790:	687b      	ldr	r3, [r7, #4]
 8100792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100794:	4313      	orrs	r3, r2
         );
}
 8100796:	4618      	mov	r0, r3
 8100798:	3724      	adds	r7, #36	; 0x24
 810079a:	46bd      	mov	sp, r7
 810079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007a0:	4770      	bx	lr
	...

081007a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81007a4:	b580      	push	{r7, lr}
 81007a6:	b082      	sub	sp, #8
 81007a8:	af00      	add	r7, sp, #0
 81007aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81007ac:	687b      	ldr	r3, [r7, #4]
 81007ae:	3b01      	subs	r3, #1
 81007b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81007b4:	d301      	bcc.n	81007ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81007b6:	2301      	movs	r3, #1
 81007b8:	e00f      	b.n	81007da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81007ba:	4a0a      	ldr	r2, [pc, #40]	; (81007e4 <SysTick_Config+0x40>)
 81007bc:	687b      	ldr	r3, [r7, #4]
 81007be:	3b01      	subs	r3, #1
 81007c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81007c2:	210f      	movs	r1, #15
 81007c4:	f04f 30ff 	mov.w	r0, #4294967295
 81007c8:	f7ff ff8e 	bl	81006e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81007cc:	4b05      	ldr	r3, [pc, #20]	; (81007e4 <SysTick_Config+0x40>)
 81007ce:	2200      	movs	r2, #0
 81007d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81007d2:	4b04      	ldr	r3, [pc, #16]	; (81007e4 <SysTick_Config+0x40>)
 81007d4:	2207      	movs	r2, #7
 81007d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81007d8:	2300      	movs	r3, #0
}
 81007da:	4618      	mov	r0, r3
 81007dc:	3708      	adds	r7, #8
 81007de:	46bd      	mov	sp, r7
 81007e0:	bd80      	pop	{r7, pc}
 81007e2:	bf00      	nop
 81007e4:	e000e010 	.word	0xe000e010

081007e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81007e8:	b580      	push	{r7, lr}
 81007ea:	b082      	sub	sp, #8
 81007ec:	af00      	add	r7, sp, #0
 81007ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81007f0:	6878      	ldr	r0, [r7, #4]
 81007f2:	f7ff ff47 	bl	8100684 <__NVIC_SetPriorityGrouping>
}
 81007f6:	bf00      	nop
 81007f8:	3708      	adds	r7, #8
 81007fa:	46bd      	mov	sp, r7
 81007fc:	bd80      	pop	{r7, pc}

081007fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81007fe:	b580      	push	{r7, lr}
 8100800:	b086      	sub	sp, #24
 8100802:	af00      	add	r7, sp, #0
 8100804:	4603      	mov	r3, r0
 8100806:	60b9      	str	r1, [r7, #8]
 8100808:	607a      	str	r2, [r7, #4]
 810080a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810080c:	f7ff ff5e 	bl	81006cc <__NVIC_GetPriorityGrouping>
 8100810:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100812:	687a      	ldr	r2, [r7, #4]
 8100814:	68b9      	ldr	r1, [r7, #8]
 8100816:	6978      	ldr	r0, [r7, #20]
 8100818:	f7ff ff90 	bl	810073c <NVIC_EncodePriority>
 810081c:	4602      	mov	r2, r0
 810081e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100822:	4611      	mov	r1, r2
 8100824:	4618      	mov	r0, r3
 8100826:	f7ff ff5f 	bl	81006e8 <__NVIC_SetPriority>
}
 810082a:	bf00      	nop
 810082c:	3718      	adds	r7, #24
 810082e:	46bd      	mov	sp, r7
 8100830:	bd80      	pop	{r7, pc}

08100832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100832:	b580      	push	{r7, lr}
 8100834:	b082      	sub	sp, #8
 8100836:	af00      	add	r7, sp, #0
 8100838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810083a:	6878      	ldr	r0, [r7, #4]
 810083c:	f7ff ffb2 	bl	81007a4 <SysTick_Config>
 8100840:	4603      	mov	r3, r0
}
 8100842:	4618      	mov	r0, r3
 8100844:	3708      	adds	r7, #8
 8100846:	46bd      	mov	sp, r7
 8100848:	bd80      	pop	{r7, pc}
	...

0810084c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810084c:	b480      	push	{r7}
 810084e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100850:	4b07      	ldr	r3, [pc, #28]	; (8100870 <HAL_GetCurrentCPUID+0x24>)
 8100852:	681b      	ldr	r3, [r3, #0]
 8100854:	091b      	lsrs	r3, r3, #4
 8100856:	f003 030f 	and.w	r3, r3, #15
 810085a:	2b07      	cmp	r3, #7
 810085c:	d101      	bne.n	8100862 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810085e:	2303      	movs	r3, #3
 8100860:	e000      	b.n	8100864 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100862:	2301      	movs	r3, #1
  }
}
 8100864:	4618      	mov	r0, r3
 8100866:	46bd      	mov	sp, r7
 8100868:	f85d 7b04 	ldr.w	r7, [sp], #4
 810086c:	4770      	bx	lr
 810086e:	bf00      	nop
 8100870:	e000ed00 	.word	0xe000ed00

08100874 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8100874:	b480      	push	{r7}
 8100876:	b089      	sub	sp, #36	; 0x24
 8100878:	af00      	add	r7, sp, #0
 810087a:	6078      	str	r0, [r7, #4]
 810087c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810087e:	2300      	movs	r3, #0
 8100880:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100882:	4b89      	ldr	r3, [pc, #548]	; (8100aa8 <HAL_GPIO_Init+0x234>)
 8100884:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100886:	e194      	b.n	8100bb2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100888:	683b      	ldr	r3, [r7, #0]
 810088a:	681a      	ldr	r2, [r3, #0]
 810088c:	2101      	movs	r1, #1
 810088e:	69fb      	ldr	r3, [r7, #28]
 8100890:	fa01 f303 	lsl.w	r3, r1, r3
 8100894:	4013      	ands	r3, r2
 8100896:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100898:	693b      	ldr	r3, [r7, #16]
 810089a:	2b00      	cmp	r3, #0
 810089c:	f000 8186 	beq.w	8100bac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81008a0:	683b      	ldr	r3, [r7, #0]
 81008a2:	685b      	ldr	r3, [r3, #4]
 81008a4:	f003 0303 	and.w	r3, r3, #3
 81008a8:	2b01      	cmp	r3, #1
 81008aa:	d005      	beq.n	81008b8 <HAL_GPIO_Init+0x44>
 81008ac:	683b      	ldr	r3, [r7, #0]
 81008ae:	685b      	ldr	r3, [r3, #4]
 81008b0:	f003 0303 	and.w	r3, r3, #3
 81008b4:	2b02      	cmp	r3, #2
 81008b6:	d130      	bne.n	810091a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81008b8:	687b      	ldr	r3, [r7, #4]
 81008ba:	689b      	ldr	r3, [r3, #8]
 81008bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81008be:	69fb      	ldr	r3, [r7, #28]
 81008c0:	005b      	lsls	r3, r3, #1
 81008c2:	2203      	movs	r2, #3
 81008c4:	fa02 f303 	lsl.w	r3, r2, r3
 81008c8:	43db      	mvns	r3, r3
 81008ca:	69ba      	ldr	r2, [r7, #24]
 81008cc:	4013      	ands	r3, r2
 81008ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81008d0:	683b      	ldr	r3, [r7, #0]
 81008d2:	68da      	ldr	r2, [r3, #12]
 81008d4:	69fb      	ldr	r3, [r7, #28]
 81008d6:	005b      	lsls	r3, r3, #1
 81008d8:	fa02 f303 	lsl.w	r3, r2, r3
 81008dc:	69ba      	ldr	r2, [r7, #24]
 81008de:	4313      	orrs	r3, r2
 81008e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81008e2:	687b      	ldr	r3, [r7, #4]
 81008e4:	69ba      	ldr	r2, [r7, #24]
 81008e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81008e8:	687b      	ldr	r3, [r7, #4]
 81008ea:	685b      	ldr	r3, [r3, #4]
 81008ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81008ee:	2201      	movs	r2, #1
 81008f0:	69fb      	ldr	r3, [r7, #28]
 81008f2:	fa02 f303 	lsl.w	r3, r2, r3
 81008f6:	43db      	mvns	r3, r3
 81008f8:	69ba      	ldr	r2, [r7, #24]
 81008fa:	4013      	ands	r3, r2
 81008fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81008fe:	683b      	ldr	r3, [r7, #0]
 8100900:	685b      	ldr	r3, [r3, #4]
 8100902:	091b      	lsrs	r3, r3, #4
 8100904:	f003 0201 	and.w	r2, r3, #1
 8100908:	69fb      	ldr	r3, [r7, #28]
 810090a:	fa02 f303 	lsl.w	r3, r2, r3
 810090e:	69ba      	ldr	r2, [r7, #24]
 8100910:	4313      	orrs	r3, r2
 8100912:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100914:	687b      	ldr	r3, [r7, #4]
 8100916:	69ba      	ldr	r2, [r7, #24]
 8100918:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810091a:	683b      	ldr	r3, [r7, #0]
 810091c:	685b      	ldr	r3, [r3, #4]
 810091e:	f003 0303 	and.w	r3, r3, #3
 8100922:	2b03      	cmp	r3, #3
 8100924:	d017      	beq.n	8100956 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100926:	687b      	ldr	r3, [r7, #4]
 8100928:	68db      	ldr	r3, [r3, #12]
 810092a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810092c:	69fb      	ldr	r3, [r7, #28]
 810092e:	005b      	lsls	r3, r3, #1
 8100930:	2203      	movs	r2, #3
 8100932:	fa02 f303 	lsl.w	r3, r2, r3
 8100936:	43db      	mvns	r3, r3
 8100938:	69ba      	ldr	r2, [r7, #24]
 810093a:	4013      	ands	r3, r2
 810093c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810093e:	683b      	ldr	r3, [r7, #0]
 8100940:	689a      	ldr	r2, [r3, #8]
 8100942:	69fb      	ldr	r3, [r7, #28]
 8100944:	005b      	lsls	r3, r3, #1
 8100946:	fa02 f303 	lsl.w	r3, r2, r3
 810094a:	69ba      	ldr	r2, [r7, #24]
 810094c:	4313      	orrs	r3, r2
 810094e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100950:	687b      	ldr	r3, [r7, #4]
 8100952:	69ba      	ldr	r2, [r7, #24]
 8100954:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100956:	683b      	ldr	r3, [r7, #0]
 8100958:	685b      	ldr	r3, [r3, #4]
 810095a:	f003 0303 	and.w	r3, r3, #3
 810095e:	2b02      	cmp	r3, #2
 8100960:	d123      	bne.n	81009aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100962:	69fb      	ldr	r3, [r7, #28]
 8100964:	08da      	lsrs	r2, r3, #3
 8100966:	687b      	ldr	r3, [r7, #4]
 8100968:	3208      	adds	r2, #8
 810096a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810096e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100970:	69fb      	ldr	r3, [r7, #28]
 8100972:	f003 0307 	and.w	r3, r3, #7
 8100976:	009b      	lsls	r3, r3, #2
 8100978:	220f      	movs	r2, #15
 810097a:	fa02 f303 	lsl.w	r3, r2, r3
 810097e:	43db      	mvns	r3, r3
 8100980:	69ba      	ldr	r2, [r7, #24]
 8100982:	4013      	ands	r3, r2
 8100984:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100986:	683b      	ldr	r3, [r7, #0]
 8100988:	691a      	ldr	r2, [r3, #16]
 810098a:	69fb      	ldr	r3, [r7, #28]
 810098c:	f003 0307 	and.w	r3, r3, #7
 8100990:	009b      	lsls	r3, r3, #2
 8100992:	fa02 f303 	lsl.w	r3, r2, r3
 8100996:	69ba      	ldr	r2, [r7, #24]
 8100998:	4313      	orrs	r3, r2
 810099a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 810099c:	69fb      	ldr	r3, [r7, #28]
 810099e:	08da      	lsrs	r2, r3, #3
 81009a0:	687b      	ldr	r3, [r7, #4]
 81009a2:	3208      	adds	r2, #8
 81009a4:	69b9      	ldr	r1, [r7, #24]
 81009a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81009aa:	687b      	ldr	r3, [r7, #4]
 81009ac:	681b      	ldr	r3, [r3, #0]
 81009ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81009b0:	69fb      	ldr	r3, [r7, #28]
 81009b2:	005b      	lsls	r3, r3, #1
 81009b4:	2203      	movs	r2, #3
 81009b6:	fa02 f303 	lsl.w	r3, r2, r3
 81009ba:	43db      	mvns	r3, r3
 81009bc:	69ba      	ldr	r2, [r7, #24]
 81009be:	4013      	ands	r3, r2
 81009c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81009c2:	683b      	ldr	r3, [r7, #0]
 81009c4:	685b      	ldr	r3, [r3, #4]
 81009c6:	f003 0203 	and.w	r2, r3, #3
 81009ca:	69fb      	ldr	r3, [r7, #28]
 81009cc:	005b      	lsls	r3, r3, #1
 81009ce:	fa02 f303 	lsl.w	r3, r2, r3
 81009d2:	69ba      	ldr	r2, [r7, #24]
 81009d4:	4313      	orrs	r3, r2
 81009d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81009d8:	687b      	ldr	r3, [r7, #4]
 81009da:	69ba      	ldr	r2, [r7, #24]
 81009dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81009de:	683b      	ldr	r3, [r7, #0]
 81009e0:	685b      	ldr	r3, [r3, #4]
 81009e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81009e6:	2b00      	cmp	r3, #0
 81009e8:	f000 80e0 	beq.w	8100bac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81009ec:	4b2f      	ldr	r3, [pc, #188]	; (8100aac <HAL_GPIO_Init+0x238>)
 81009ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81009f2:	4a2e      	ldr	r2, [pc, #184]	; (8100aac <HAL_GPIO_Init+0x238>)
 81009f4:	f043 0302 	orr.w	r3, r3, #2
 81009f8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81009fc:	4b2b      	ldr	r3, [pc, #172]	; (8100aac <HAL_GPIO_Init+0x238>)
 81009fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100a02:	f003 0302 	and.w	r3, r3, #2
 8100a06:	60fb      	str	r3, [r7, #12]
 8100a08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100a0a:	4a29      	ldr	r2, [pc, #164]	; (8100ab0 <HAL_GPIO_Init+0x23c>)
 8100a0c:	69fb      	ldr	r3, [r7, #28]
 8100a0e:	089b      	lsrs	r3, r3, #2
 8100a10:	3302      	adds	r3, #2
 8100a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100a18:	69fb      	ldr	r3, [r7, #28]
 8100a1a:	f003 0303 	and.w	r3, r3, #3
 8100a1e:	009b      	lsls	r3, r3, #2
 8100a20:	220f      	movs	r2, #15
 8100a22:	fa02 f303 	lsl.w	r3, r2, r3
 8100a26:	43db      	mvns	r3, r3
 8100a28:	69ba      	ldr	r2, [r7, #24]
 8100a2a:	4013      	ands	r3, r2
 8100a2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100a2e:	687b      	ldr	r3, [r7, #4]
 8100a30:	4a20      	ldr	r2, [pc, #128]	; (8100ab4 <HAL_GPIO_Init+0x240>)
 8100a32:	4293      	cmp	r3, r2
 8100a34:	d052      	beq.n	8100adc <HAL_GPIO_Init+0x268>
 8100a36:	687b      	ldr	r3, [r7, #4]
 8100a38:	4a1f      	ldr	r2, [pc, #124]	; (8100ab8 <HAL_GPIO_Init+0x244>)
 8100a3a:	4293      	cmp	r3, r2
 8100a3c:	d031      	beq.n	8100aa2 <HAL_GPIO_Init+0x22e>
 8100a3e:	687b      	ldr	r3, [r7, #4]
 8100a40:	4a1e      	ldr	r2, [pc, #120]	; (8100abc <HAL_GPIO_Init+0x248>)
 8100a42:	4293      	cmp	r3, r2
 8100a44:	d02b      	beq.n	8100a9e <HAL_GPIO_Init+0x22a>
 8100a46:	687b      	ldr	r3, [r7, #4]
 8100a48:	4a1d      	ldr	r2, [pc, #116]	; (8100ac0 <HAL_GPIO_Init+0x24c>)
 8100a4a:	4293      	cmp	r3, r2
 8100a4c:	d025      	beq.n	8100a9a <HAL_GPIO_Init+0x226>
 8100a4e:	687b      	ldr	r3, [r7, #4]
 8100a50:	4a1c      	ldr	r2, [pc, #112]	; (8100ac4 <HAL_GPIO_Init+0x250>)
 8100a52:	4293      	cmp	r3, r2
 8100a54:	d01f      	beq.n	8100a96 <HAL_GPIO_Init+0x222>
 8100a56:	687b      	ldr	r3, [r7, #4]
 8100a58:	4a1b      	ldr	r2, [pc, #108]	; (8100ac8 <HAL_GPIO_Init+0x254>)
 8100a5a:	4293      	cmp	r3, r2
 8100a5c:	d019      	beq.n	8100a92 <HAL_GPIO_Init+0x21e>
 8100a5e:	687b      	ldr	r3, [r7, #4]
 8100a60:	4a1a      	ldr	r2, [pc, #104]	; (8100acc <HAL_GPIO_Init+0x258>)
 8100a62:	4293      	cmp	r3, r2
 8100a64:	d013      	beq.n	8100a8e <HAL_GPIO_Init+0x21a>
 8100a66:	687b      	ldr	r3, [r7, #4]
 8100a68:	4a19      	ldr	r2, [pc, #100]	; (8100ad0 <HAL_GPIO_Init+0x25c>)
 8100a6a:	4293      	cmp	r3, r2
 8100a6c:	d00d      	beq.n	8100a8a <HAL_GPIO_Init+0x216>
 8100a6e:	687b      	ldr	r3, [r7, #4]
 8100a70:	4a18      	ldr	r2, [pc, #96]	; (8100ad4 <HAL_GPIO_Init+0x260>)
 8100a72:	4293      	cmp	r3, r2
 8100a74:	d007      	beq.n	8100a86 <HAL_GPIO_Init+0x212>
 8100a76:	687b      	ldr	r3, [r7, #4]
 8100a78:	4a17      	ldr	r2, [pc, #92]	; (8100ad8 <HAL_GPIO_Init+0x264>)
 8100a7a:	4293      	cmp	r3, r2
 8100a7c:	d101      	bne.n	8100a82 <HAL_GPIO_Init+0x20e>
 8100a7e:	2309      	movs	r3, #9
 8100a80:	e02d      	b.n	8100ade <HAL_GPIO_Init+0x26a>
 8100a82:	230a      	movs	r3, #10
 8100a84:	e02b      	b.n	8100ade <HAL_GPIO_Init+0x26a>
 8100a86:	2308      	movs	r3, #8
 8100a88:	e029      	b.n	8100ade <HAL_GPIO_Init+0x26a>
 8100a8a:	2307      	movs	r3, #7
 8100a8c:	e027      	b.n	8100ade <HAL_GPIO_Init+0x26a>
 8100a8e:	2306      	movs	r3, #6
 8100a90:	e025      	b.n	8100ade <HAL_GPIO_Init+0x26a>
 8100a92:	2305      	movs	r3, #5
 8100a94:	e023      	b.n	8100ade <HAL_GPIO_Init+0x26a>
 8100a96:	2304      	movs	r3, #4
 8100a98:	e021      	b.n	8100ade <HAL_GPIO_Init+0x26a>
 8100a9a:	2303      	movs	r3, #3
 8100a9c:	e01f      	b.n	8100ade <HAL_GPIO_Init+0x26a>
 8100a9e:	2302      	movs	r3, #2
 8100aa0:	e01d      	b.n	8100ade <HAL_GPIO_Init+0x26a>
 8100aa2:	2301      	movs	r3, #1
 8100aa4:	e01b      	b.n	8100ade <HAL_GPIO_Init+0x26a>
 8100aa6:	bf00      	nop
 8100aa8:	580000c0 	.word	0x580000c0
 8100aac:	58024400 	.word	0x58024400
 8100ab0:	58000400 	.word	0x58000400
 8100ab4:	58020000 	.word	0x58020000
 8100ab8:	58020400 	.word	0x58020400
 8100abc:	58020800 	.word	0x58020800
 8100ac0:	58020c00 	.word	0x58020c00
 8100ac4:	58021000 	.word	0x58021000
 8100ac8:	58021400 	.word	0x58021400
 8100acc:	58021800 	.word	0x58021800
 8100ad0:	58021c00 	.word	0x58021c00
 8100ad4:	58022000 	.word	0x58022000
 8100ad8:	58022400 	.word	0x58022400
 8100adc:	2300      	movs	r3, #0
 8100ade:	69fa      	ldr	r2, [r7, #28]
 8100ae0:	f002 0203 	and.w	r2, r2, #3
 8100ae4:	0092      	lsls	r2, r2, #2
 8100ae6:	4093      	lsls	r3, r2
 8100ae8:	69ba      	ldr	r2, [r7, #24]
 8100aea:	4313      	orrs	r3, r2
 8100aec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100aee:	4938      	ldr	r1, [pc, #224]	; (8100bd0 <HAL_GPIO_Init+0x35c>)
 8100af0:	69fb      	ldr	r3, [r7, #28]
 8100af2:	089b      	lsrs	r3, r3, #2
 8100af4:	3302      	adds	r3, #2
 8100af6:	69ba      	ldr	r2, [r7, #24]
 8100af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100b00:	681b      	ldr	r3, [r3, #0]
 8100b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100b04:	693b      	ldr	r3, [r7, #16]
 8100b06:	43db      	mvns	r3, r3
 8100b08:	69ba      	ldr	r2, [r7, #24]
 8100b0a:	4013      	ands	r3, r2
 8100b0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8100b0e:	683b      	ldr	r3, [r7, #0]
 8100b10:	685b      	ldr	r3, [r3, #4]
 8100b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8100b16:	2b00      	cmp	r3, #0
 8100b18:	d003      	beq.n	8100b22 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8100b1a:	69ba      	ldr	r2, [r7, #24]
 8100b1c:	693b      	ldr	r3, [r7, #16]
 8100b1e:	4313      	orrs	r3, r2
 8100b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8100b22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100b26:	69bb      	ldr	r3, [r7, #24]
 8100b28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8100b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100b2e:	685b      	ldr	r3, [r3, #4]
 8100b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100b32:	693b      	ldr	r3, [r7, #16]
 8100b34:	43db      	mvns	r3, r3
 8100b36:	69ba      	ldr	r2, [r7, #24]
 8100b38:	4013      	ands	r3, r2
 8100b3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8100b3c:	683b      	ldr	r3, [r7, #0]
 8100b3e:	685b      	ldr	r3, [r3, #4]
 8100b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8100b44:	2b00      	cmp	r3, #0
 8100b46:	d003      	beq.n	8100b50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8100b48:	69ba      	ldr	r2, [r7, #24]
 8100b4a:	693b      	ldr	r3, [r7, #16]
 8100b4c:	4313      	orrs	r3, r2
 8100b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8100b50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100b54:	69bb      	ldr	r3, [r7, #24]
 8100b56:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8100b58:	697b      	ldr	r3, [r7, #20]
 8100b5a:	685b      	ldr	r3, [r3, #4]
 8100b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100b5e:	693b      	ldr	r3, [r7, #16]
 8100b60:	43db      	mvns	r3, r3
 8100b62:	69ba      	ldr	r2, [r7, #24]
 8100b64:	4013      	ands	r3, r2
 8100b66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8100b68:	683b      	ldr	r3, [r7, #0]
 8100b6a:	685b      	ldr	r3, [r3, #4]
 8100b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8100b70:	2b00      	cmp	r3, #0
 8100b72:	d003      	beq.n	8100b7c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8100b74:	69ba      	ldr	r2, [r7, #24]
 8100b76:	693b      	ldr	r3, [r7, #16]
 8100b78:	4313      	orrs	r3, r2
 8100b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8100b7c:	697b      	ldr	r3, [r7, #20]
 8100b7e:	69ba      	ldr	r2, [r7, #24]
 8100b80:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8100b82:	697b      	ldr	r3, [r7, #20]
 8100b84:	681b      	ldr	r3, [r3, #0]
 8100b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100b88:	693b      	ldr	r3, [r7, #16]
 8100b8a:	43db      	mvns	r3, r3
 8100b8c:	69ba      	ldr	r2, [r7, #24]
 8100b8e:	4013      	ands	r3, r2
 8100b90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8100b92:	683b      	ldr	r3, [r7, #0]
 8100b94:	685b      	ldr	r3, [r3, #4]
 8100b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100b9a:	2b00      	cmp	r3, #0
 8100b9c:	d003      	beq.n	8100ba6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8100b9e:	69ba      	ldr	r2, [r7, #24]
 8100ba0:	693b      	ldr	r3, [r7, #16]
 8100ba2:	4313      	orrs	r3, r2
 8100ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8100ba6:	697b      	ldr	r3, [r7, #20]
 8100ba8:	69ba      	ldr	r2, [r7, #24]
 8100baa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8100bac:	69fb      	ldr	r3, [r7, #28]
 8100bae:	3301      	adds	r3, #1
 8100bb0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100bb2:	683b      	ldr	r3, [r7, #0]
 8100bb4:	681a      	ldr	r2, [r3, #0]
 8100bb6:	69fb      	ldr	r3, [r7, #28]
 8100bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8100bbc:	2b00      	cmp	r3, #0
 8100bbe:	f47f ae63 	bne.w	8100888 <HAL_GPIO_Init+0x14>
  }
}
 8100bc2:	bf00      	nop
 8100bc4:	bf00      	nop
 8100bc6:	3724      	adds	r7, #36	; 0x24
 8100bc8:	46bd      	mov	sp, r7
 8100bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bce:	4770      	bx	lr
 8100bd0:	58000400 	.word	0x58000400

08100bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8100bd4:	b480      	push	{r7}
 8100bd6:	b083      	sub	sp, #12
 8100bd8:	af00      	add	r7, sp, #0
 8100bda:	6078      	str	r0, [r7, #4]
 8100bdc:	460b      	mov	r3, r1
 8100bde:	807b      	strh	r3, [r7, #2]
 8100be0:	4613      	mov	r3, r2
 8100be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8100be4:	787b      	ldrb	r3, [r7, #1]
 8100be6:	2b00      	cmp	r3, #0
 8100be8:	d003      	beq.n	8100bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8100bea:	887a      	ldrh	r2, [r7, #2]
 8100bec:	687b      	ldr	r3, [r7, #4]
 8100bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8100bf0:	e003      	b.n	8100bfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8100bf2:	887b      	ldrh	r3, [r7, #2]
 8100bf4:	041a      	lsls	r2, r3, #16
 8100bf6:	687b      	ldr	r3, [r7, #4]
 8100bf8:	619a      	str	r2, [r3, #24]
}
 8100bfa:	bf00      	nop
 8100bfc:	370c      	adds	r7, #12
 8100bfe:	46bd      	mov	sp, r7
 8100c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c04:	4770      	bx	lr

08100c06 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8100c06:	b480      	push	{r7}
 8100c08:	b085      	sub	sp, #20
 8100c0a:	af00      	add	r7, sp, #0
 8100c0c:	6078      	str	r0, [r7, #4]
 8100c0e:	460b      	mov	r3, r1
 8100c10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8100c12:	687b      	ldr	r3, [r7, #4]
 8100c14:	695b      	ldr	r3, [r3, #20]
 8100c16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8100c18:	887a      	ldrh	r2, [r7, #2]
 8100c1a:	68fb      	ldr	r3, [r7, #12]
 8100c1c:	4013      	ands	r3, r2
 8100c1e:	041a      	lsls	r2, r3, #16
 8100c20:	68fb      	ldr	r3, [r7, #12]
 8100c22:	43d9      	mvns	r1, r3
 8100c24:	887b      	ldrh	r3, [r7, #2]
 8100c26:	400b      	ands	r3, r1
 8100c28:	431a      	orrs	r2, r3
 8100c2a:	687b      	ldr	r3, [r7, #4]
 8100c2c:	619a      	str	r2, [r3, #24]
}
 8100c2e:	bf00      	nop
 8100c30:	3714      	adds	r7, #20
 8100c32:	46bd      	mov	sp, r7
 8100c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c38:	4770      	bx	lr
	...

08100c3c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100c3c:	b480      	push	{r7}
 8100c3e:	b083      	sub	sp, #12
 8100c40:	af00      	add	r7, sp, #0
 8100c42:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8100c44:	4b05      	ldr	r3, [pc, #20]	; (8100c5c <HAL_HSEM_ActivateNotification+0x20>)
 8100c46:	681a      	ldr	r2, [r3, #0]
 8100c48:	4904      	ldr	r1, [pc, #16]	; (8100c5c <HAL_HSEM_ActivateNotification+0x20>)
 8100c4a:	687b      	ldr	r3, [r7, #4]
 8100c4c:	4313      	orrs	r3, r2
 8100c4e:	600b      	str	r3, [r1, #0]
#endif
}
 8100c50:	bf00      	nop
 8100c52:	370c      	adds	r7, #12
 8100c54:	46bd      	mov	sp, r7
 8100c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c5a:	4770      	bx	lr
 8100c5c:	58026510 	.word	0x58026510

08100c60 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8100c60:	b580      	push	{r7, lr}
 8100c62:	b084      	sub	sp, #16
 8100c64:	af00      	add	r7, sp, #0
 8100c66:	60f8      	str	r0, [r7, #12]
 8100c68:	460b      	mov	r3, r1
 8100c6a:	607a      	str	r2, [r7, #4]
 8100c6c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8100c6e:	4b37      	ldr	r3, [pc, #220]	; (8100d4c <HAL_PWREx_EnterSTOPMode+0xec>)
 8100c70:	681b      	ldr	r3, [r3, #0]
 8100c72:	f023 0201 	bic.w	r2, r3, #1
 8100c76:	4935      	ldr	r1, [pc, #212]	; (8100d4c <HAL_PWREx_EnterSTOPMode+0xec>)
 8100c78:	68fb      	ldr	r3, [r7, #12]
 8100c7a:	4313      	orrs	r3, r2
 8100c7c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8100c7e:	687b      	ldr	r3, [r7, #4]
 8100c80:	2b00      	cmp	r3, #0
 8100c82:	d123      	bne.n	8100ccc <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8100c84:	f7ff fde2 	bl	810084c <HAL_GetCurrentCPUID>
 8100c88:	4603      	mov	r3, r0
 8100c8a:	2b03      	cmp	r3, #3
 8100c8c:	d158      	bne.n	8100d40 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8100c8e:	4b2f      	ldr	r3, [pc, #188]	; (8100d4c <HAL_PWREx_EnterSTOPMode+0xec>)
 8100c90:	691b      	ldr	r3, [r3, #16]
 8100c92:	4a2e      	ldr	r2, [pc, #184]	; (8100d4c <HAL_PWREx_EnterSTOPMode+0xec>)
 8100c94:	f023 0301 	bic.w	r3, r3, #1
 8100c98:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100c9a:	4b2d      	ldr	r3, [pc, #180]	; (8100d50 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100c9c:	691b      	ldr	r3, [r3, #16]
 8100c9e:	4a2c      	ldr	r2, [pc, #176]	; (8100d50 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100ca0:	f043 0304 	orr.w	r3, r3, #4
 8100ca4:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8100ca6:	f3bf 8f4f 	dsb	sy
}
 8100caa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100cac:	f3bf 8f6f 	isb	sy
}
 8100cb0:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100cb2:	7afb      	ldrb	r3, [r7, #11]
 8100cb4:	2b01      	cmp	r3, #1
 8100cb6:	d101      	bne.n	8100cbc <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100cb8:	bf30      	wfi
 8100cba:	e000      	b.n	8100cbe <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100cbc:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100cbe:	4b24      	ldr	r3, [pc, #144]	; (8100d50 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100cc0:	691b      	ldr	r3, [r3, #16]
 8100cc2:	4a23      	ldr	r2, [pc, #140]	; (8100d50 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100cc4:	f023 0304 	bic.w	r3, r3, #4
 8100cc8:	6113      	str	r3, [r2, #16]
 8100cca:	e03c      	b.n	8100d46 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8100ccc:	687b      	ldr	r3, [r7, #4]
 8100cce:	2b01      	cmp	r3, #1
 8100cd0:	d123      	bne.n	8100d1a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8100cd2:	f7ff fdbb 	bl	810084c <HAL_GetCurrentCPUID>
 8100cd6:	4603      	mov	r3, r0
 8100cd8:	2b01      	cmp	r3, #1
 8100cda:	d133      	bne.n	8100d44 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8100cdc:	4b1b      	ldr	r3, [pc, #108]	; (8100d4c <HAL_PWREx_EnterSTOPMode+0xec>)
 8100cde:	695b      	ldr	r3, [r3, #20]
 8100ce0:	4a1a      	ldr	r2, [pc, #104]	; (8100d4c <HAL_PWREx_EnterSTOPMode+0xec>)
 8100ce2:	f023 0302 	bic.w	r3, r3, #2
 8100ce6:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100ce8:	4b19      	ldr	r3, [pc, #100]	; (8100d50 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100cea:	691b      	ldr	r3, [r3, #16]
 8100cec:	4a18      	ldr	r2, [pc, #96]	; (8100d50 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100cee:	f043 0304 	orr.w	r3, r3, #4
 8100cf2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8100cf4:	f3bf 8f4f 	dsb	sy
}
 8100cf8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100cfa:	f3bf 8f6f 	isb	sy
}
 8100cfe:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100d00:	7afb      	ldrb	r3, [r7, #11]
 8100d02:	2b01      	cmp	r3, #1
 8100d04:	d101      	bne.n	8100d0a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100d06:	bf30      	wfi
 8100d08:	e000      	b.n	8100d0c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100d0a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100d0c:	4b10      	ldr	r3, [pc, #64]	; (8100d50 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d0e:	691b      	ldr	r3, [r3, #16]
 8100d10:	4a0f      	ldr	r2, [pc, #60]	; (8100d50 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d12:	f023 0304 	bic.w	r3, r3, #4
 8100d16:	6113      	str	r3, [r2, #16]
 8100d18:	e015      	b.n	8100d46 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100d1a:	f7ff fd97 	bl	810084c <HAL_GetCurrentCPUID>
 8100d1e:	4603      	mov	r3, r0
 8100d20:	2b03      	cmp	r3, #3
 8100d22:	d106      	bne.n	8100d32 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8100d24:	4b09      	ldr	r3, [pc, #36]	; (8100d4c <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d26:	691b      	ldr	r3, [r3, #16]
 8100d28:	4a08      	ldr	r2, [pc, #32]	; (8100d4c <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d2a:	f023 0304 	bic.w	r3, r3, #4
 8100d2e:	6113      	str	r3, [r2, #16]
 8100d30:	e009      	b.n	8100d46 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8100d32:	4b06      	ldr	r3, [pc, #24]	; (8100d4c <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d34:	695b      	ldr	r3, [r3, #20]
 8100d36:	4a05      	ldr	r2, [pc, #20]	; (8100d4c <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d38:	f023 0304 	bic.w	r3, r3, #4
 8100d3c:	6153      	str	r3, [r2, #20]
 8100d3e:	e002      	b.n	8100d46 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100d40:	bf00      	nop
 8100d42:	e000      	b.n	8100d46 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100d44:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8100d46:	3710      	adds	r7, #16
 8100d48:	46bd      	mov	sp, r7
 8100d4a:	bd80      	pop	{r7, pc}
 8100d4c:	58024800 	.word	0x58024800
 8100d50:	e000ed00 	.word	0xe000ed00

08100d54 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8100d54:	b580      	push	{r7, lr}
 8100d56:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100d58:	f7ff fd78 	bl	810084c <HAL_GetCurrentCPUID>
 8100d5c:	4603      	mov	r3, r0
 8100d5e:	2b03      	cmp	r3, #3
 8100d60:	d101      	bne.n	8100d66 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8100d62:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8100d64:	e001      	b.n	8100d6a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8100d66:	bf40      	sev
    __WFE ();
 8100d68:	bf20      	wfe
}
 8100d6a:	bf00      	nop
 8100d6c:	bd80      	pop	{r7, pc}
	...

08100d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8100d70:	b480      	push	{r7}
 8100d72:	b089      	sub	sp, #36	; 0x24
 8100d74:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8100d76:	4bb3      	ldr	r3, [pc, #716]	; (8101044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100d78:	691b      	ldr	r3, [r3, #16]
 8100d7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8100d7e:	2b18      	cmp	r3, #24
 8100d80:	f200 8155 	bhi.w	810102e <HAL_RCC_GetSysClockFreq+0x2be>
 8100d84:	a201      	add	r2, pc, #4	; (adr r2, 8100d8c <HAL_RCC_GetSysClockFreq+0x1c>)
 8100d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100d8a:	bf00      	nop
 8100d8c:	08100df1 	.word	0x08100df1
 8100d90:	0810102f 	.word	0x0810102f
 8100d94:	0810102f 	.word	0x0810102f
 8100d98:	0810102f 	.word	0x0810102f
 8100d9c:	0810102f 	.word	0x0810102f
 8100da0:	0810102f 	.word	0x0810102f
 8100da4:	0810102f 	.word	0x0810102f
 8100da8:	0810102f 	.word	0x0810102f
 8100dac:	08100e17 	.word	0x08100e17
 8100db0:	0810102f 	.word	0x0810102f
 8100db4:	0810102f 	.word	0x0810102f
 8100db8:	0810102f 	.word	0x0810102f
 8100dbc:	0810102f 	.word	0x0810102f
 8100dc0:	0810102f 	.word	0x0810102f
 8100dc4:	0810102f 	.word	0x0810102f
 8100dc8:	0810102f 	.word	0x0810102f
 8100dcc:	08100e1d 	.word	0x08100e1d
 8100dd0:	0810102f 	.word	0x0810102f
 8100dd4:	0810102f 	.word	0x0810102f
 8100dd8:	0810102f 	.word	0x0810102f
 8100ddc:	0810102f 	.word	0x0810102f
 8100de0:	0810102f 	.word	0x0810102f
 8100de4:	0810102f 	.word	0x0810102f
 8100de8:	0810102f 	.word	0x0810102f
 8100dec:	08100e23 	.word	0x08100e23
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100df0:	4b94      	ldr	r3, [pc, #592]	; (8101044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100df2:	681b      	ldr	r3, [r3, #0]
 8100df4:	f003 0320 	and.w	r3, r3, #32
 8100df8:	2b00      	cmp	r3, #0
 8100dfa:	d009      	beq.n	8100e10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8100dfc:	4b91      	ldr	r3, [pc, #580]	; (8101044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100dfe:	681b      	ldr	r3, [r3, #0]
 8100e00:	08db      	lsrs	r3, r3, #3
 8100e02:	f003 0303 	and.w	r3, r3, #3
 8100e06:	4a90      	ldr	r2, [pc, #576]	; (8101048 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100e08:	fa22 f303 	lsr.w	r3, r2, r3
 8100e0c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8100e0e:	e111      	b.n	8101034 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8100e10:	4b8d      	ldr	r3, [pc, #564]	; (8101048 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100e12:	61bb      	str	r3, [r7, #24]
    break;
 8100e14:	e10e      	b.n	8101034 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8100e16:	4b8d      	ldr	r3, [pc, #564]	; (810104c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8100e18:	61bb      	str	r3, [r7, #24]
    break;
 8100e1a:	e10b      	b.n	8101034 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8100e1c:	4b8c      	ldr	r3, [pc, #560]	; (8101050 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8100e1e:	61bb      	str	r3, [r7, #24]
    break;
 8100e20:	e108      	b.n	8101034 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8100e22:	4b88      	ldr	r3, [pc, #544]	; (8101044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100e26:	f003 0303 	and.w	r3, r3, #3
 8100e2a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8100e2c:	4b85      	ldr	r3, [pc, #532]	; (8101044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100e30:	091b      	lsrs	r3, r3, #4
 8100e32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8100e36:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8100e38:	4b82      	ldr	r3, [pc, #520]	; (8101044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8100e3c:	f003 0301 	and.w	r3, r3, #1
 8100e40:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8100e42:	4b80      	ldr	r3, [pc, #512]	; (8101044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8100e46:	08db      	lsrs	r3, r3, #3
 8100e48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8100e4c:	68fa      	ldr	r2, [r7, #12]
 8100e4e:	fb02 f303 	mul.w	r3, r2, r3
 8100e52:	ee07 3a90 	vmov	s15, r3
 8100e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100e5a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8100e5e:	693b      	ldr	r3, [r7, #16]
 8100e60:	2b00      	cmp	r3, #0
 8100e62:	f000 80e1 	beq.w	8101028 <HAL_RCC_GetSysClockFreq+0x2b8>
 8100e66:	697b      	ldr	r3, [r7, #20]
 8100e68:	2b02      	cmp	r3, #2
 8100e6a:	f000 8083 	beq.w	8100f74 <HAL_RCC_GetSysClockFreq+0x204>
 8100e6e:	697b      	ldr	r3, [r7, #20]
 8100e70:	2b02      	cmp	r3, #2
 8100e72:	f200 80a1 	bhi.w	8100fb8 <HAL_RCC_GetSysClockFreq+0x248>
 8100e76:	697b      	ldr	r3, [r7, #20]
 8100e78:	2b00      	cmp	r3, #0
 8100e7a:	d003      	beq.n	8100e84 <HAL_RCC_GetSysClockFreq+0x114>
 8100e7c:	697b      	ldr	r3, [r7, #20]
 8100e7e:	2b01      	cmp	r3, #1
 8100e80:	d056      	beq.n	8100f30 <HAL_RCC_GetSysClockFreq+0x1c0>
 8100e82:	e099      	b.n	8100fb8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100e84:	4b6f      	ldr	r3, [pc, #444]	; (8101044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e86:	681b      	ldr	r3, [r3, #0]
 8100e88:	f003 0320 	and.w	r3, r3, #32
 8100e8c:	2b00      	cmp	r3, #0
 8100e8e:	d02d      	beq.n	8100eec <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8100e90:	4b6c      	ldr	r3, [pc, #432]	; (8101044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e92:	681b      	ldr	r3, [r3, #0]
 8100e94:	08db      	lsrs	r3, r3, #3
 8100e96:	f003 0303 	and.w	r3, r3, #3
 8100e9a:	4a6b      	ldr	r2, [pc, #428]	; (8101048 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8100ea0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100ea2:	687b      	ldr	r3, [r7, #4]
 8100ea4:	ee07 3a90 	vmov	s15, r3
 8100ea8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100eac:	693b      	ldr	r3, [r7, #16]
 8100eae:	ee07 3a90 	vmov	s15, r3
 8100eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100eba:	4b62      	ldr	r3, [pc, #392]	; (8101044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100ec2:	ee07 3a90 	vmov	s15, r3
 8100ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100eca:	ed97 6a02 	vldr	s12, [r7, #8]
 8100ece:	eddf 5a61 	vldr	s11, [pc, #388]	; 8101054 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100eda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100ee6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8100eea:	e087      	b.n	8100ffc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100eec:	693b      	ldr	r3, [r7, #16]
 8100eee:	ee07 3a90 	vmov	s15, r3
 8100ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100ef6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8101058 <HAL_RCC_GetSysClockFreq+0x2e8>
 8100efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100efe:	4b51      	ldr	r3, [pc, #324]	; (8101044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100f06:	ee07 3a90 	vmov	s15, r3
 8100f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100f0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8100f12:	eddf 5a50 	vldr	s11, [pc, #320]	; 8101054 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100f2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100f2e:	e065      	b.n	8100ffc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100f30:	693b      	ldr	r3, [r7, #16]
 8100f32:	ee07 3a90 	vmov	s15, r3
 8100f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100f3a:	eddf 6a48 	vldr	s13, [pc, #288]	; 810105c <HAL_RCC_GetSysClockFreq+0x2ec>
 8100f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100f42:	4b40      	ldr	r3, [pc, #256]	; (8101044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100f4a:	ee07 3a90 	vmov	s15, r3
 8100f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100f52:	ed97 6a02 	vldr	s12, [r7, #8]
 8100f56:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8101054 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100f62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100f6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100f72:	e043      	b.n	8100ffc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100f74:	693b      	ldr	r3, [r7, #16]
 8100f76:	ee07 3a90 	vmov	s15, r3
 8100f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100f7e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8101060 <HAL_RCC_GetSysClockFreq+0x2f0>
 8100f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100f86:	4b2f      	ldr	r3, [pc, #188]	; (8101044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100f8e:	ee07 3a90 	vmov	s15, r3
 8100f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100f96:	ed97 6a02 	vldr	s12, [r7, #8]
 8100f9a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8101054 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100fb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100fb6:	e021      	b.n	8100ffc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100fb8:	693b      	ldr	r3, [r7, #16]
 8100fba:	ee07 3a90 	vmov	s15, r3
 8100fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100fc2:	eddf 6a26 	vldr	s13, [pc, #152]	; 810105c <HAL_RCC_GetSysClockFreq+0x2ec>
 8100fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100fca:	4b1e      	ldr	r3, [pc, #120]	; (8101044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100fd2:	ee07 3a90 	vmov	s15, r3
 8100fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100fda:	ed97 6a02 	vldr	s12, [r7, #8]
 8100fde:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8101054 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100ff6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100ffa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8100ffc:	4b11      	ldr	r3, [pc, #68]	; (8101044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101000:	0a5b      	lsrs	r3, r3, #9
 8101002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101006:	3301      	adds	r3, #1
 8101008:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 810100a:	683b      	ldr	r3, [r7, #0]
 810100c:	ee07 3a90 	vmov	s15, r3
 8101010:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101014:	edd7 6a07 	vldr	s13, [r7, #28]
 8101018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810101c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101020:	ee17 3a90 	vmov	r3, s15
 8101024:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8101026:	e005      	b.n	8101034 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8101028:	2300      	movs	r3, #0
 810102a:	61bb      	str	r3, [r7, #24]
    break;
 810102c:	e002      	b.n	8101034 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 810102e:	4b07      	ldr	r3, [pc, #28]	; (810104c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101030:	61bb      	str	r3, [r7, #24]
    break;
 8101032:	bf00      	nop
  }

  return sysclockfreq;
 8101034:	69bb      	ldr	r3, [r7, #24]
}
 8101036:	4618      	mov	r0, r3
 8101038:	3724      	adds	r7, #36	; 0x24
 810103a:	46bd      	mov	sp, r7
 810103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101040:	4770      	bx	lr
 8101042:	bf00      	nop
 8101044:	58024400 	.word	0x58024400
 8101048:	03d09000 	.word	0x03d09000
 810104c:	003d0900 	.word	0x003d0900
 8101050:	017d7840 	.word	0x017d7840
 8101054:	46000000 	.word	0x46000000
 8101058:	4c742400 	.word	0x4c742400
 810105c:	4a742400 	.word	0x4a742400
 8101060:	4bbebc20 	.word	0x4bbebc20

08101064 <__NVIC_SetPriority>:
{
 8101064:	b480      	push	{r7}
 8101066:	b083      	sub	sp, #12
 8101068:	af00      	add	r7, sp, #0
 810106a:	4603      	mov	r3, r0
 810106c:	6039      	str	r1, [r7, #0]
 810106e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101070:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101074:	2b00      	cmp	r3, #0
 8101076:	db0a      	blt.n	810108e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101078:	683b      	ldr	r3, [r7, #0]
 810107a:	b2da      	uxtb	r2, r3
 810107c:	490c      	ldr	r1, [pc, #48]	; (81010b0 <__NVIC_SetPriority+0x4c>)
 810107e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101082:	0112      	lsls	r2, r2, #4
 8101084:	b2d2      	uxtb	r2, r2
 8101086:	440b      	add	r3, r1
 8101088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 810108c:	e00a      	b.n	81010a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810108e:	683b      	ldr	r3, [r7, #0]
 8101090:	b2da      	uxtb	r2, r3
 8101092:	4908      	ldr	r1, [pc, #32]	; (81010b4 <__NVIC_SetPriority+0x50>)
 8101094:	88fb      	ldrh	r3, [r7, #6]
 8101096:	f003 030f 	and.w	r3, r3, #15
 810109a:	3b04      	subs	r3, #4
 810109c:	0112      	lsls	r2, r2, #4
 810109e:	b2d2      	uxtb	r2, r2
 81010a0:	440b      	add	r3, r1
 81010a2:	761a      	strb	r2, [r3, #24]
}
 81010a4:	bf00      	nop
 81010a6:	370c      	adds	r7, #12
 81010a8:	46bd      	mov	sp, r7
 81010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010ae:	4770      	bx	lr
 81010b0:	e000e100 	.word	0xe000e100
 81010b4:	e000ed00 	.word	0xe000ed00

081010b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 81010b8:	b580      	push	{r7, lr}
 81010ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 81010bc:	2100      	movs	r1, #0
 81010be:	f06f 0004 	mvn.w	r0, #4
 81010c2:	f7ff ffcf 	bl	8101064 <__NVIC_SetPriority>
#endif
}
 81010c6:	bf00      	nop
 81010c8:	bd80      	pop	{r7, pc}
	...

081010cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 81010cc:	b480      	push	{r7}
 81010ce:	b083      	sub	sp, #12
 81010d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81010d2:	f3ef 8305 	mrs	r3, IPSR
 81010d6:	603b      	str	r3, [r7, #0]
  return(result);
 81010d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 81010da:	2b00      	cmp	r3, #0
 81010dc:	d003      	beq.n	81010e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 81010de:	f06f 0305 	mvn.w	r3, #5
 81010e2:	607b      	str	r3, [r7, #4]
 81010e4:	e00c      	b.n	8101100 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 81010e6:	4b0a      	ldr	r3, [pc, #40]	; (8101110 <osKernelInitialize+0x44>)
 81010e8:	681b      	ldr	r3, [r3, #0]
 81010ea:	2b00      	cmp	r3, #0
 81010ec:	d105      	bne.n	81010fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 81010ee:	4b08      	ldr	r3, [pc, #32]	; (8101110 <osKernelInitialize+0x44>)
 81010f0:	2201      	movs	r2, #1
 81010f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 81010f4:	2300      	movs	r3, #0
 81010f6:	607b      	str	r3, [r7, #4]
 81010f8:	e002      	b.n	8101100 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 81010fa:	f04f 33ff 	mov.w	r3, #4294967295
 81010fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8101100:	687b      	ldr	r3, [r7, #4]
}
 8101102:	4618      	mov	r0, r3
 8101104:	370c      	adds	r7, #12
 8101106:	46bd      	mov	sp, r7
 8101108:	f85d 7b04 	ldr.w	r7, [sp], #4
 810110c:	4770      	bx	lr
 810110e:	bf00      	nop
 8101110:	10000094 	.word	0x10000094

08101114 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8101114:	b580      	push	{r7, lr}
 8101116:	b082      	sub	sp, #8
 8101118:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810111a:	f3ef 8305 	mrs	r3, IPSR
 810111e:	603b      	str	r3, [r7, #0]
  return(result);
 8101120:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8101122:	2b00      	cmp	r3, #0
 8101124:	d003      	beq.n	810112e <osKernelStart+0x1a>
    stat = osErrorISR;
 8101126:	f06f 0305 	mvn.w	r3, #5
 810112a:	607b      	str	r3, [r7, #4]
 810112c:	e010      	b.n	8101150 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 810112e:	4b0b      	ldr	r3, [pc, #44]	; (810115c <osKernelStart+0x48>)
 8101130:	681b      	ldr	r3, [r3, #0]
 8101132:	2b01      	cmp	r3, #1
 8101134:	d109      	bne.n	810114a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8101136:	f7ff ffbf 	bl	81010b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 810113a:	4b08      	ldr	r3, [pc, #32]	; (810115c <osKernelStart+0x48>)
 810113c:	2202      	movs	r2, #2
 810113e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8101140:	f001 fcb2 	bl	8102aa8 <vTaskStartScheduler>
      stat = osOK;
 8101144:	2300      	movs	r3, #0
 8101146:	607b      	str	r3, [r7, #4]
 8101148:	e002      	b.n	8101150 <osKernelStart+0x3c>
    } else {
      stat = osError;
 810114a:	f04f 33ff 	mov.w	r3, #4294967295
 810114e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8101150:	687b      	ldr	r3, [r7, #4]
}
 8101152:	4618      	mov	r0, r3
 8101154:	3708      	adds	r7, #8
 8101156:	46bd      	mov	sp, r7
 8101158:	bd80      	pop	{r7, pc}
 810115a:	bf00      	nop
 810115c:	10000094 	.word	0x10000094

08101160 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8101160:	b580      	push	{r7, lr}
 8101162:	b08e      	sub	sp, #56	; 0x38
 8101164:	af04      	add	r7, sp, #16
 8101166:	60f8      	str	r0, [r7, #12]
 8101168:	60b9      	str	r1, [r7, #8]
 810116a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 810116c:	2300      	movs	r3, #0
 810116e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8101170:	f3ef 8305 	mrs	r3, IPSR
 8101174:	617b      	str	r3, [r7, #20]
  return(result);
 8101176:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8101178:	2b00      	cmp	r3, #0
 810117a:	d17e      	bne.n	810127a <osThreadNew+0x11a>
 810117c:	68fb      	ldr	r3, [r7, #12]
 810117e:	2b00      	cmp	r3, #0
 8101180:	d07b      	beq.n	810127a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8101182:	2380      	movs	r3, #128	; 0x80
 8101184:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8101186:	2318      	movs	r3, #24
 8101188:	61fb      	str	r3, [r7, #28]

    name = NULL;
 810118a:	2300      	movs	r3, #0
 810118c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 810118e:	f04f 33ff 	mov.w	r3, #4294967295
 8101192:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8101194:	687b      	ldr	r3, [r7, #4]
 8101196:	2b00      	cmp	r3, #0
 8101198:	d045      	beq.n	8101226 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 810119a:	687b      	ldr	r3, [r7, #4]
 810119c:	681b      	ldr	r3, [r3, #0]
 810119e:	2b00      	cmp	r3, #0
 81011a0:	d002      	beq.n	81011a8 <osThreadNew+0x48>
        name = attr->name;
 81011a2:	687b      	ldr	r3, [r7, #4]
 81011a4:	681b      	ldr	r3, [r3, #0]
 81011a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 81011a8:	687b      	ldr	r3, [r7, #4]
 81011aa:	699b      	ldr	r3, [r3, #24]
 81011ac:	2b00      	cmp	r3, #0
 81011ae:	d002      	beq.n	81011b6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 81011b0:	687b      	ldr	r3, [r7, #4]
 81011b2:	699b      	ldr	r3, [r3, #24]
 81011b4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 81011b6:	69fb      	ldr	r3, [r7, #28]
 81011b8:	2b00      	cmp	r3, #0
 81011ba:	d008      	beq.n	81011ce <osThreadNew+0x6e>
 81011bc:	69fb      	ldr	r3, [r7, #28]
 81011be:	2b38      	cmp	r3, #56	; 0x38
 81011c0:	d805      	bhi.n	81011ce <osThreadNew+0x6e>
 81011c2:	687b      	ldr	r3, [r7, #4]
 81011c4:	685b      	ldr	r3, [r3, #4]
 81011c6:	f003 0301 	and.w	r3, r3, #1
 81011ca:	2b00      	cmp	r3, #0
 81011cc:	d001      	beq.n	81011d2 <osThreadNew+0x72>
        return (NULL);
 81011ce:	2300      	movs	r3, #0
 81011d0:	e054      	b.n	810127c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 81011d2:	687b      	ldr	r3, [r7, #4]
 81011d4:	695b      	ldr	r3, [r3, #20]
 81011d6:	2b00      	cmp	r3, #0
 81011d8:	d003      	beq.n	81011e2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 81011da:	687b      	ldr	r3, [r7, #4]
 81011dc:	695b      	ldr	r3, [r3, #20]
 81011de:	089b      	lsrs	r3, r3, #2
 81011e0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 81011e2:	687b      	ldr	r3, [r7, #4]
 81011e4:	689b      	ldr	r3, [r3, #8]
 81011e6:	2b00      	cmp	r3, #0
 81011e8:	d00e      	beq.n	8101208 <osThreadNew+0xa8>
 81011ea:	687b      	ldr	r3, [r7, #4]
 81011ec:	68db      	ldr	r3, [r3, #12]
 81011ee:	2bbb      	cmp	r3, #187	; 0xbb
 81011f0:	d90a      	bls.n	8101208 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 81011f2:	687b      	ldr	r3, [r7, #4]
 81011f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 81011f6:	2b00      	cmp	r3, #0
 81011f8:	d006      	beq.n	8101208 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 81011fa:	687b      	ldr	r3, [r7, #4]
 81011fc:	695b      	ldr	r3, [r3, #20]
 81011fe:	2b00      	cmp	r3, #0
 8101200:	d002      	beq.n	8101208 <osThreadNew+0xa8>
        mem = 1;
 8101202:	2301      	movs	r3, #1
 8101204:	61bb      	str	r3, [r7, #24]
 8101206:	e010      	b.n	810122a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8101208:	687b      	ldr	r3, [r7, #4]
 810120a:	689b      	ldr	r3, [r3, #8]
 810120c:	2b00      	cmp	r3, #0
 810120e:	d10c      	bne.n	810122a <osThreadNew+0xca>
 8101210:	687b      	ldr	r3, [r7, #4]
 8101212:	68db      	ldr	r3, [r3, #12]
 8101214:	2b00      	cmp	r3, #0
 8101216:	d108      	bne.n	810122a <osThreadNew+0xca>
 8101218:	687b      	ldr	r3, [r7, #4]
 810121a:	691b      	ldr	r3, [r3, #16]
 810121c:	2b00      	cmp	r3, #0
 810121e:	d104      	bne.n	810122a <osThreadNew+0xca>
          mem = 0;
 8101220:	2300      	movs	r3, #0
 8101222:	61bb      	str	r3, [r7, #24]
 8101224:	e001      	b.n	810122a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8101226:	2300      	movs	r3, #0
 8101228:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 810122a:	69bb      	ldr	r3, [r7, #24]
 810122c:	2b01      	cmp	r3, #1
 810122e:	d110      	bne.n	8101252 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8101230:	687b      	ldr	r3, [r7, #4]
 8101232:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8101234:	687a      	ldr	r2, [r7, #4]
 8101236:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8101238:	9202      	str	r2, [sp, #8]
 810123a:	9301      	str	r3, [sp, #4]
 810123c:	69fb      	ldr	r3, [r7, #28]
 810123e:	9300      	str	r3, [sp, #0]
 8101240:	68bb      	ldr	r3, [r7, #8]
 8101242:	6a3a      	ldr	r2, [r7, #32]
 8101244:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8101246:	68f8      	ldr	r0, [r7, #12]
 8101248:	f001 fa42 	bl	81026d0 <xTaskCreateStatic>
 810124c:	4603      	mov	r3, r0
 810124e:	613b      	str	r3, [r7, #16]
 8101250:	e013      	b.n	810127a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8101252:	69bb      	ldr	r3, [r7, #24]
 8101254:	2b00      	cmp	r3, #0
 8101256:	d110      	bne.n	810127a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8101258:	6a3b      	ldr	r3, [r7, #32]
 810125a:	b29a      	uxth	r2, r3
 810125c:	f107 0310 	add.w	r3, r7, #16
 8101260:	9301      	str	r3, [sp, #4]
 8101262:	69fb      	ldr	r3, [r7, #28]
 8101264:	9300      	str	r3, [sp, #0]
 8101266:	68bb      	ldr	r3, [r7, #8]
 8101268:	6a79      	ldr	r1, [r7, #36]	; 0x24
 810126a:	68f8      	ldr	r0, [r7, #12]
 810126c:	f001 fa8d 	bl	810278a <xTaskCreate>
 8101270:	4603      	mov	r3, r0
 8101272:	2b01      	cmp	r3, #1
 8101274:	d001      	beq.n	810127a <osThreadNew+0x11a>
            hTask = NULL;
 8101276:	2300      	movs	r3, #0
 8101278:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 810127a:	693b      	ldr	r3, [r7, #16]
}
 810127c:	4618      	mov	r0, r3
 810127e:	3728      	adds	r7, #40	; 0x28
 8101280:	46bd      	mov	sp, r7
 8101282:	bd80      	pop	{r7, pc}

08101284 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8101284:	b580      	push	{r7, lr}
 8101286:	b084      	sub	sp, #16
 8101288:	af00      	add	r7, sp, #0
 810128a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810128c:	f3ef 8305 	mrs	r3, IPSR
 8101290:	60bb      	str	r3, [r7, #8]
  return(result);
 8101292:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8101294:	2b00      	cmp	r3, #0
 8101296:	d003      	beq.n	81012a0 <osDelay+0x1c>
    stat = osErrorISR;
 8101298:	f06f 0305 	mvn.w	r3, #5
 810129c:	60fb      	str	r3, [r7, #12]
 810129e:	e007      	b.n	81012b0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 81012a0:	2300      	movs	r3, #0
 81012a2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 81012a4:	687b      	ldr	r3, [r7, #4]
 81012a6:	2b00      	cmp	r3, #0
 81012a8:	d002      	beq.n	81012b0 <osDelay+0x2c>
      vTaskDelay(ticks);
 81012aa:	6878      	ldr	r0, [r7, #4]
 81012ac:	f001 fbc8 	bl	8102a40 <vTaskDelay>
    }
  }

  return (stat);
 81012b0:	68fb      	ldr	r3, [r7, #12]
}
 81012b2:	4618      	mov	r0, r3
 81012b4:	3710      	adds	r7, #16
 81012b6:	46bd      	mov	sp, r7
 81012b8:	bd80      	pop	{r7, pc}
	...

081012bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 81012bc:	b480      	push	{r7}
 81012be:	b085      	sub	sp, #20
 81012c0:	af00      	add	r7, sp, #0
 81012c2:	60f8      	str	r0, [r7, #12]
 81012c4:	60b9      	str	r1, [r7, #8]
 81012c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 81012c8:	68fb      	ldr	r3, [r7, #12]
 81012ca:	4a07      	ldr	r2, [pc, #28]	; (81012e8 <vApplicationGetIdleTaskMemory+0x2c>)
 81012cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 81012ce:	68bb      	ldr	r3, [r7, #8]
 81012d0:	4a06      	ldr	r2, [pc, #24]	; (81012ec <vApplicationGetIdleTaskMemory+0x30>)
 81012d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 81012d4:	687b      	ldr	r3, [r7, #4]
 81012d6:	2280      	movs	r2, #128	; 0x80
 81012d8:	601a      	str	r2, [r3, #0]
}
 81012da:	bf00      	nop
 81012dc:	3714      	adds	r7, #20
 81012de:	46bd      	mov	sp, r7
 81012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012e4:	4770      	bx	lr
 81012e6:	bf00      	nop
 81012e8:	10000098 	.word	0x10000098
 81012ec:	10000154 	.word	0x10000154

081012f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 81012f0:	b480      	push	{r7}
 81012f2:	b085      	sub	sp, #20
 81012f4:	af00      	add	r7, sp, #0
 81012f6:	60f8      	str	r0, [r7, #12]
 81012f8:	60b9      	str	r1, [r7, #8]
 81012fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 81012fc:	68fb      	ldr	r3, [r7, #12]
 81012fe:	4a07      	ldr	r2, [pc, #28]	; (810131c <vApplicationGetTimerTaskMemory+0x2c>)
 8101300:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8101302:	68bb      	ldr	r3, [r7, #8]
 8101304:	4a06      	ldr	r2, [pc, #24]	; (8101320 <vApplicationGetTimerTaskMemory+0x30>)
 8101306:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8101308:	687b      	ldr	r3, [r7, #4]
 810130a:	f44f 7280 	mov.w	r2, #256	; 0x100
 810130e:	601a      	str	r2, [r3, #0]
}
 8101310:	bf00      	nop
 8101312:	3714      	adds	r7, #20
 8101314:	46bd      	mov	sp, r7
 8101316:	f85d 7b04 	ldr.w	r7, [sp], #4
 810131a:	4770      	bx	lr
 810131c:	10000354 	.word	0x10000354
 8101320:	10000410 	.word	0x10000410

08101324 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8101324:	b580      	push	{r7, lr}
 8101326:	b08a      	sub	sp, #40	; 0x28
 8101328:	af00      	add	r7, sp, #0
 810132a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 810132c:	2300      	movs	r3, #0
 810132e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8101330:	f001 fc2a 	bl	8102b88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8101334:	4b5b      	ldr	r3, [pc, #364]	; (81014a4 <pvPortMalloc+0x180>)
 8101336:	681b      	ldr	r3, [r3, #0]
 8101338:	2b00      	cmp	r3, #0
 810133a:	d101      	bne.n	8101340 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 810133c:	f000 f920 	bl	8101580 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8101340:	4b59      	ldr	r3, [pc, #356]	; (81014a8 <pvPortMalloc+0x184>)
 8101342:	681a      	ldr	r2, [r3, #0]
 8101344:	687b      	ldr	r3, [r7, #4]
 8101346:	4013      	ands	r3, r2
 8101348:	2b00      	cmp	r3, #0
 810134a:	f040 8093 	bne.w	8101474 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 810134e:	687b      	ldr	r3, [r7, #4]
 8101350:	2b00      	cmp	r3, #0
 8101352:	d01d      	beq.n	8101390 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8101354:	2208      	movs	r2, #8
 8101356:	687b      	ldr	r3, [r7, #4]
 8101358:	4413      	add	r3, r2
 810135a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 810135c:	687b      	ldr	r3, [r7, #4]
 810135e:	f003 0307 	and.w	r3, r3, #7
 8101362:	2b00      	cmp	r3, #0
 8101364:	d014      	beq.n	8101390 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8101366:	687b      	ldr	r3, [r7, #4]
 8101368:	f023 0307 	bic.w	r3, r3, #7
 810136c:	3308      	adds	r3, #8
 810136e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8101370:	687b      	ldr	r3, [r7, #4]
 8101372:	f003 0307 	and.w	r3, r3, #7
 8101376:	2b00      	cmp	r3, #0
 8101378:	d00a      	beq.n	8101390 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 810137a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810137e:	f383 8811 	msr	BASEPRI, r3
 8101382:	f3bf 8f6f 	isb	sy
 8101386:	f3bf 8f4f 	dsb	sy
 810138a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 810138c:	bf00      	nop
 810138e:	e7fe      	b.n	810138e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8101390:	687b      	ldr	r3, [r7, #4]
 8101392:	2b00      	cmp	r3, #0
 8101394:	d06e      	beq.n	8101474 <pvPortMalloc+0x150>
 8101396:	4b45      	ldr	r3, [pc, #276]	; (81014ac <pvPortMalloc+0x188>)
 8101398:	681b      	ldr	r3, [r3, #0]
 810139a:	687a      	ldr	r2, [r7, #4]
 810139c:	429a      	cmp	r2, r3
 810139e:	d869      	bhi.n	8101474 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 81013a0:	4b43      	ldr	r3, [pc, #268]	; (81014b0 <pvPortMalloc+0x18c>)
 81013a2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 81013a4:	4b42      	ldr	r3, [pc, #264]	; (81014b0 <pvPortMalloc+0x18c>)
 81013a6:	681b      	ldr	r3, [r3, #0]
 81013a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 81013aa:	e004      	b.n	81013b6 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 81013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81013ae:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 81013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81013b2:	681b      	ldr	r3, [r3, #0]
 81013b4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 81013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81013b8:	685b      	ldr	r3, [r3, #4]
 81013ba:	687a      	ldr	r2, [r7, #4]
 81013bc:	429a      	cmp	r2, r3
 81013be:	d903      	bls.n	81013c8 <pvPortMalloc+0xa4>
 81013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81013c2:	681b      	ldr	r3, [r3, #0]
 81013c4:	2b00      	cmp	r3, #0
 81013c6:	d1f1      	bne.n	81013ac <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 81013c8:	4b36      	ldr	r3, [pc, #216]	; (81014a4 <pvPortMalloc+0x180>)
 81013ca:	681b      	ldr	r3, [r3, #0]
 81013cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81013ce:	429a      	cmp	r2, r3
 81013d0:	d050      	beq.n	8101474 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 81013d2:	6a3b      	ldr	r3, [r7, #32]
 81013d4:	681b      	ldr	r3, [r3, #0]
 81013d6:	2208      	movs	r2, #8
 81013d8:	4413      	add	r3, r2
 81013da:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 81013dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81013de:	681a      	ldr	r2, [r3, #0]
 81013e0:	6a3b      	ldr	r3, [r7, #32]
 81013e2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 81013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81013e6:	685a      	ldr	r2, [r3, #4]
 81013e8:	687b      	ldr	r3, [r7, #4]
 81013ea:	1ad2      	subs	r2, r2, r3
 81013ec:	2308      	movs	r3, #8
 81013ee:	005b      	lsls	r3, r3, #1
 81013f0:	429a      	cmp	r2, r3
 81013f2:	d91f      	bls.n	8101434 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 81013f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81013f6:	687b      	ldr	r3, [r7, #4]
 81013f8:	4413      	add	r3, r2
 81013fa:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 81013fc:	69bb      	ldr	r3, [r7, #24]
 81013fe:	f003 0307 	and.w	r3, r3, #7
 8101402:	2b00      	cmp	r3, #0
 8101404:	d00a      	beq.n	810141c <pvPortMalloc+0xf8>
	__asm volatile
 8101406:	f04f 0350 	mov.w	r3, #80	; 0x50
 810140a:	f383 8811 	msr	BASEPRI, r3
 810140e:	f3bf 8f6f 	isb	sy
 8101412:	f3bf 8f4f 	dsb	sy
 8101416:	613b      	str	r3, [r7, #16]
}
 8101418:	bf00      	nop
 810141a:	e7fe      	b.n	810141a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 810141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810141e:	685a      	ldr	r2, [r3, #4]
 8101420:	687b      	ldr	r3, [r7, #4]
 8101422:	1ad2      	subs	r2, r2, r3
 8101424:	69bb      	ldr	r3, [r7, #24]
 8101426:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8101428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810142a:	687a      	ldr	r2, [r7, #4]
 810142c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 810142e:	69b8      	ldr	r0, [r7, #24]
 8101430:	f000 f908 	bl	8101644 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8101434:	4b1d      	ldr	r3, [pc, #116]	; (81014ac <pvPortMalloc+0x188>)
 8101436:	681a      	ldr	r2, [r3, #0]
 8101438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810143a:	685b      	ldr	r3, [r3, #4]
 810143c:	1ad3      	subs	r3, r2, r3
 810143e:	4a1b      	ldr	r2, [pc, #108]	; (81014ac <pvPortMalloc+0x188>)
 8101440:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8101442:	4b1a      	ldr	r3, [pc, #104]	; (81014ac <pvPortMalloc+0x188>)
 8101444:	681a      	ldr	r2, [r3, #0]
 8101446:	4b1b      	ldr	r3, [pc, #108]	; (81014b4 <pvPortMalloc+0x190>)
 8101448:	681b      	ldr	r3, [r3, #0]
 810144a:	429a      	cmp	r2, r3
 810144c:	d203      	bcs.n	8101456 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 810144e:	4b17      	ldr	r3, [pc, #92]	; (81014ac <pvPortMalloc+0x188>)
 8101450:	681b      	ldr	r3, [r3, #0]
 8101452:	4a18      	ldr	r2, [pc, #96]	; (81014b4 <pvPortMalloc+0x190>)
 8101454:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8101456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101458:	685a      	ldr	r2, [r3, #4]
 810145a:	4b13      	ldr	r3, [pc, #76]	; (81014a8 <pvPortMalloc+0x184>)
 810145c:	681b      	ldr	r3, [r3, #0]
 810145e:	431a      	orrs	r2, r3
 8101460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101462:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8101464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101466:	2200      	movs	r2, #0
 8101468:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 810146a:	4b13      	ldr	r3, [pc, #76]	; (81014b8 <pvPortMalloc+0x194>)
 810146c:	681b      	ldr	r3, [r3, #0]
 810146e:	3301      	adds	r3, #1
 8101470:	4a11      	ldr	r2, [pc, #68]	; (81014b8 <pvPortMalloc+0x194>)
 8101472:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8101474:	f001 fb96 	bl	8102ba4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8101478:	69fb      	ldr	r3, [r7, #28]
 810147a:	f003 0307 	and.w	r3, r3, #7
 810147e:	2b00      	cmp	r3, #0
 8101480:	d00a      	beq.n	8101498 <pvPortMalloc+0x174>
	__asm volatile
 8101482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101486:	f383 8811 	msr	BASEPRI, r3
 810148a:	f3bf 8f6f 	isb	sy
 810148e:	f3bf 8f4f 	dsb	sy
 8101492:	60fb      	str	r3, [r7, #12]
}
 8101494:	bf00      	nop
 8101496:	e7fe      	b.n	8101496 <pvPortMalloc+0x172>
	return pvReturn;
 8101498:	69fb      	ldr	r3, [r7, #28]
}
 810149a:	4618      	mov	r0, r3
 810149c:	3728      	adds	r7, #40	; 0x28
 810149e:	46bd      	mov	sp, r7
 81014a0:	bd80      	pop	{r7, pc}
 81014a2:	bf00      	nop
 81014a4:	10004418 	.word	0x10004418
 81014a8:	1000442c 	.word	0x1000442c
 81014ac:	1000441c 	.word	0x1000441c
 81014b0:	10004410 	.word	0x10004410
 81014b4:	10004420 	.word	0x10004420
 81014b8:	10004424 	.word	0x10004424

081014bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 81014bc:	b580      	push	{r7, lr}
 81014be:	b086      	sub	sp, #24
 81014c0:	af00      	add	r7, sp, #0
 81014c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 81014c4:	687b      	ldr	r3, [r7, #4]
 81014c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 81014c8:	687b      	ldr	r3, [r7, #4]
 81014ca:	2b00      	cmp	r3, #0
 81014cc:	d04d      	beq.n	810156a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 81014ce:	2308      	movs	r3, #8
 81014d0:	425b      	negs	r3, r3
 81014d2:	697a      	ldr	r2, [r7, #20]
 81014d4:	4413      	add	r3, r2
 81014d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 81014d8:	697b      	ldr	r3, [r7, #20]
 81014da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 81014dc:	693b      	ldr	r3, [r7, #16]
 81014de:	685a      	ldr	r2, [r3, #4]
 81014e0:	4b24      	ldr	r3, [pc, #144]	; (8101574 <vPortFree+0xb8>)
 81014e2:	681b      	ldr	r3, [r3, #0]
 81014e4:	4013      	ands	r3, r2
 81014e6:	2b00      	cmp	r3, #0
 81014e8:	d10a      	bne.n	8101500 <vPortFree+0x44>
	__asm volatile
 81014ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 81014ee:	f383 8811 	msr	BASEPRI, r3
 81014f2:	f3bf 8f6f 	isb	sy
 81014f6:	f3bf 8f4f 	dsb	sy
 81014fa:	60fb      	str	r3, [r7, #12]
}
 81014fc:	bf00      	nop
 81014fe:	e7fe      	b.n	81014fe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8101500:	693b      	ldr	r3, [r7, #16]
 8101502:	681b      	ldr	r3, [r3, #0]
 8101504:	2b00      	cmp	r3, #0
 8101506:	d00a      	beq.n	810151e <vPortFree+0x62>
	__asm volatile
 8101508:	f04f 0350 	mov.w	r3, #80	; 0x50
 810150c:	f383 8811 	msr	BASEPRI, r3
 8101510:	f3bf 8f6f 	isb	sy
 8101514:	f3bf 8f4f 	dsb	sy
 8101518:	60bb      	str	r3, [r7, #8]
}
 810151a:	bf00      	nop
 810151c:	e7fe      	b.n	810151c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810151e:	693b      	ldr	r3, [r7, #16]
 8101520:	685a      	ldr	r2, [r3, #4]
 8101522:	4b14      	ldr	r3, [pc, #80]	; (8101574 <vPortFree+0xb8>)
 8101524:	681b      	ldr	r3, [r3, #0]
 8101526:	4013      	ands	r3, r2
 8101528:	2b00      	cmp	r3, #0
 810152a:	d01e      	beq.n	810156a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 810152c:	693b      	ldr	r3, [r7, #16]
 810152e:	681b      	ldr	r3, [r3, #0]
 8101530:	2b00      	cmp	r3, #0
 8101532:	d11a      	bne.n	810156a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8101534:	693b      	ldr	r3, [r7, #16]
 8101536:	685a      	ldr	r2, [r3, #4]
 8101538:	4b0e      	ldr	r3, [pc, #56]	; (8101574 <vPortFree+0xb8>)
 810153a:	681b      	ldr	r3, [r3, #0]
 810153c:	43db      	mvns	r3, r3
 810153e:	401a      	ands	r2, r3
 8101540:	693b      	ldr	r3, [r7, #16]
 8101542:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8101544:	f001 fb20 	bl	8102b88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8101548:	693b      	ldr	r3, [r7, #16]
 810154a:	685a      	ldr	r2, [r3, #4]
 810154c:	4b0a      	ldr	r3, [pc, #40]	; (8101578 <vPortFree+0xbc>)
 810154e:	681b      	ldr	r3, [r3, #0]
 8101550:	4413      	add	r3, r2
 8101552:	4a09      	ldr	r2, [pc, #36]	; (8101578 <vPortFree+0xbc>)
 8101554:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8101556:	6938      	ldr	r0, [r7, #16]
 8101558:	f000 f874 	bl	8101644 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 810155c:	4b07      	ldr	r3, [pc, #28]	; (810157c <vPortFree+0xc0>)
 810155e:	681b      	ldr	r3, [r3, #0]
 8101560:	3301      	adds	r3, #1
 8101562:	4a06      	ldr	r2, [pc, #24]	; (810157c <vPortFree+0xc0>)
 8101564:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8101566:	f001 fb1d 	bl	8102ba4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 810156a:	bf00      	nop
 810156c:	3718      	adds	r7, #24
 810156e:	46bd      	mov	sp, r7
 8101570:	bd80      	pop	{r7, pc}
 8101572:	bf00      	nop
 8101574:	1000442c 	.word	0x1000442c
 8101578:	1000441c 	.word	0x1000441c
 810157c:	10004428 	.word	0x10004428

08101580 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8101580:	b480      	push	{r7}
 8101582:	b085      	sub	sp, #20
 8101584:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8101586:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 810158a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 810158c:	4b27      	ldr	r3, [pc, #156]	; (810162c <prvHeapInit+0xac>)
 810158e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8101590:	68fb      	ldr	r3, [r7, #12]
 8101592:	f003 0307 	and.w	r3, r3, #7
 8101596:	2b00      	cmp	r3, #0
 8101598:	d00c      	beq.n	81015b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 810159a:	68fb      	ldr	r3, [r7, #12]
 810159c:	3307      	adds	r3, #7
 810159e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 81015a0:	68fb      	ldr	r3, [r7, #12]
 81015a2:	f023 0307 	bic.w	r3, r3, #7
 81015a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 81015a8:	68ba      	ldr	r2, [r7, #8]
 81015aa:	68fb      	ldr	r3, [r7, #12]
 81015ac:	1ad3      	subs	r3, r2, r3
 81015ae:	4a1f      	ldr	r2, [pc, #124]	; (810162c <prvHeapInit+0xac>)
 81015b0:	4413      	add	r3, r2
 81015b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 81015b4:	68fb      	ldr	r3, [r7, #12]
 81015b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 81015b8:	4a1d      	ldr	r2, [pc, #116]	; (8101630 <prvHeapInit+0xb0>)
 81015ba:	687b      	ldr	r3, [r7, #4]
 81015bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 81015be:	4b1c      	ldr	r3, [pc, #112]	; (8101630 <prvHeapInit+0xb0>)
 81015c0:	2200      	movs	r2, #0
 81015c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 81015c4:	687b      	ldr	r3, [r7, #4]
 81015c6:	68ba      	ldr	r2, [r7, #8]
 81015c8:	4413      	add	r3, r2
 81015ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 81015cc:	2208      	movs	r2, #8
 81015ce:	68fb      	ldr	r3, [r7, #12]
 81015d0:	1a9b      	subs	r3, r3, r2
 81015d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 81015d4:	68fb      	ldr	r3, [r7, #12]
 81015d6:	f023 0307 	bic.w	r3, r3, #7
 81015da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 81015dc:	68fb      	ldr	r3, [r7, #12]
 81015de:	4a15      	ldr	r2, [pc, #84]	; (8101634 <prvHeapInit+0xb4>)
 81015e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 81015e2:	4b14      	ldr	r3, [pc, #80]	; (8101634 <prvHeapInit+0xb4>)
 81015e4:	681b      	ldr	r3, [r3, #0]
 81015e6:	2200      	movs	r2, #0
 81015e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 81015ea:	4b12      	ldr	r3, [pc, #72]	; (8101634 <prvHeapInit+0xb4>)
 81015ec:	681b      	ldr	r3, [r3, #0]
 81015ee:	2200      	movs	r2, #0
 81015f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 81015f2:	687b      	ldr	r3, [r7, #4]
 81015f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 81015f6:	683b      	ldr	r3, [r7, #0]
 81015f8:	68fa      	ldr	r2, [r7, #12]
 81015fa:	1ad2      	subs	r2, r2, r3
 81015fc:	683b      	ldr	r3, [r7, #0]
 81015fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8101600:	4b0c      	ldr	r3, [pc, #48]	; (8101634 <prvHeapInit+0xb4>)
 8101602:	681a      	ldr	r2, [r3, #0]
 8101604:	683b      	ldr	r3, [r7, #0]
 8101606:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8101608:	683b      	ldr	r3, [r7, #0]
 810160a:	685b      	ldr	r3, [r3, #4]
 810160c:	4a0a      	ldr	r2, [pc, #40]	; (8101638 <prvHeapInit+0xb8>)
 810160e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8101610:	683b      	ldr	r3, [r7, #0]
 8101612:	685b      	ldr	r3, [r3, #4]
 8101614:	4a09      	ldr	r2, [pc, #36]	; (810163c <prvHeapInit+0xbc>)
 8101616:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8101618:	4b09      	ldr	r3, [pc, #36]	; (8101640 <prvHeapInit+0xc0>)
 810161a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 810161e:	601a      	str	r2, [r3, #0]
}
 8101620:	bf00      	nop
 8101622:	3714      	adds	r7, #20
 8101624:	46bd      	mov	sp, r7
 8101626:	f85d 7b04 	ldr.w	r7, [sp], #4
 810162a:	4770      	bx	lr
 810162c:	10000810 	.word	0x10000810
 8101630:	10004410 	.word	0x10004410
 8101634:	10004418 	.word	0x10004418
 8101638:	10004420 	.word	0x10004420
 810163c:	1000441c 	.word	0x1000441c
 8101640:	1000442c 	.word	0x1000442c

08101644 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8101644:	b480      	push	{r7}
 8101646:	b085      	sub	sp, #20
 8101648:	af00      	add	r7, sp, #0
 810164a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 810164c:	4b28      	ldr	r3, [pc, #160]	; (81016f0 <prvInsertBlockIntoFreeList+0xac>)
 810164e:	60fb      	str	r3, [r7, #12]
 8101650:	e002      	b.n	8101658 <prvInsertBlockIntoFreeList+0x14>
 8101652:	68fb      	ldr	r3, [r7, #12]
 8101654:	681b      	ldr	r3, [r3, #0]
 8101656:	60fb      	str	r3, [r7, #12]
 8101658:	68fb      	ldr	r3, [r7, #12]
 810165a:	681b      	ldr	r3, [r3, #0]
 810165c:	687a      	ldr	r2, [r7, #4]
 810165e:	429a      	cmp	r2, r3
 8101660:	d8f7      	bhi.n	8101652 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8101662:	68fb      	ldr	r3, [r7, #12]
 8101664:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8101666:	68fb      	ldr	r3, [r7, #12]
 8101668:	685b      	ldr	r3, [r3, #4]
 810166a:	68ba      	ldr	r2, [r7, #8]
 810166c:	4413      	add	r3, r2
 810166e:	687a      	ldr	r2, [r7, #4]
 8101670:	429a      	cmp	r2, r3
 8101672:	d108      	bne.n	8101686 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8101674:	68fb      	ldr	r3, [r7, #12]
 8101676:	685a      	ldr	r2, [r3, #4]
 8101678:	687b      	ldr	r3, [r7, #4]
 810167a:	685b      	ldr	r3, [r3, #4]
 810167c:	441a      	add	r2, r3
 810167e:	68fb      	ldr	r3, [r7, #12]
 8101680:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8101682:	68fb      	ldr	r3, [r7, #12]
 8101684:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8101686:	687b      	ldr	r3, [r7, #4]
 8101688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 810168a:	687b      	ldr	r3, [r7, #4]
 810168c:	685b      	ldr	r3, [r3, #4]
 810168e:	68ba      	ldr	r2, [r7, #8]
 8101690:	441a      	add	r2, r3
 8101692:	68fb      	ldr	r3, [r7, #12]
 8101694:	681b      	ldr	r3, [r3, #0]
 8101696:	429a      	cmp	r2, r3
 8101698:	d118      	bne.n	81016cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 810169a:	68fb      	ldr	r3, [r7, #12]
 810169c:	681a      	ldr	r2, [r3, #0]
 810169e:	4b15      	ldr	r3, [pc, #84]	; (81016f4 <prvInsertBlockIntoFreeList+0xb0>)
 81016a0:	681b      	ldr	r3, [r3, #0]
 81016a2:	429a      	cmp	r2, r3
 81016a4:	d00d      	beq.n	81016c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 81016a6:	687b      	ldr	r3, [r7, #4]
 81016a8:	685a      	ldr	r2, [r3, #4]
 81016aa:	68fb      	ldr	r3, [r7, #12]
 81016ac:	681b      	ldr	r3, [r3, #0]
 81016ae:	685b      	ldr	r3, [r3, #4]
 81016b0:	441a      	add	r2, r3
 81016b2:	687b      	ldr	r3, [r7, #4]
 81016b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 81016b6:	68fb      	ldr	r3, [r7, #12]
 81016b8:	681b      	ldr	r3, [r3, #0]
 81016ba:	681a      	ldr	r2, [r3, #0]
 81016bc:	687b      	ldr	r3, [r7, #4]
 81016be:	601a      	str	r2, [r3, #0]
 81016c0:	e008      	b.n	81016d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 81016c2:	4b0c      	ldr	r3, [pc, #48]	; (81016f4 <prvInsertBlockIntoFreeList+0xb0>)
 81016c4:	681a      	ldr	r2, [r3, #0]
 81016c6:	687b      	ldr	r3, [r7, #4]
 81016c8:	601a      	str	r2, [r3, #0]
 81016ca:	e003      	b.n	81016d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 81016cc:	68fb      	ldr	r3, [r7, #12]
 81016ce:	681a      	ldr	r2, [r3, #0]
 81016d0:	687b      	ldr	r3, [r7, #4]
 81016d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 81016d4:	68fa      	ldr	r2, [r7, #12]
 81016d6:	687b      	ldr	r3, [r7, #4]
 81016d8:	429a      	cmp	r2, r3
 81016da:	d002      	beq.n	81016e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 81016dc:	68fb      	ldr	r3, [r7, #12]
 81016de:	687a      	ldr	r2, [r7, #4]
 81016e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81016e2:	bf00      	nop
 81016e4:	3714      	adds	r7, #20
 81016e6:	46bd      	mov	sp, r7
 81016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016ec:	4770      	bx	lr
 81016ee:	bf00      	nop
 81016f0:	10004410 	.word	0x10004410
 81016f4:	10004418 	.word	0x10004418

081016f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 81016f8:	b480      	push	{r7}
 81016fa:	b083      	sub	sp, #12
 81016fc:	af00      	add	r7, sp, #0
 81016fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8101700:	687b      	ldr	r3, [r7, #4]
 8101702:	f103 0208 	add.w	r2, r3, #8
 8101706:	687b      	ldr	r3, [r7, #4]
 8101708:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810170a:	687b      	ldr	r3, [r7, #4]
 810170c:	f04f 32ff 	mov.w	r2, #4294967295
 8101710:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8101712:	687b      	ldr	r3, [r7, #4]
 8101714:	f103 0208 	add.w	r2, r3, #8
 8101718:	687b      	ldr	r3, [r7, #4]
 810171a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810171c:	687b      	ldr	r3, [r7, #4]
 810171e:	f103 0208 	add.w	r2, r3, #8
 8101722:	687b      	ldr	r3, [r7, #4]
 8101724:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8101726:	687b      	ldr	r3, [r7, #4]
 8101728:	2200      	movs	r2, #0
 810172a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 810172c:	bf00      	nop
 810172e:	370c      	adds	r7, #12
 8101730:	46bd      	mov	sp, r7
 8101732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101736:	4770      	bx	lr

08101738 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8101738:	b480      	push	{r7}
 810173a:	b083      	sub	sp, #12
 810173c:	af00      	add	r7, sp, #0
 810173e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8101740:	687b      	ldr	r3, [r7, #4]
 8101742:	2200      	movs	r2, #0
 8101744:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8101746:	bf00      	nop
 8101748:	370c      	adds	r7, #12
 810174a:	46bd      	mov	sp, r7
 810174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101750:	4770      	bx	lr

08101752 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8101752:	b480      	push	{r7}
 8101754:	b085      	sub	sp, #20
 8101756:	af00      	add	r7, sp, #0
 8101758:	6078      	str	r0, [r7, #4]
 810175a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 810175c:	687b      	ldr	r3, [r7, #4]
 810175e:	685b      	ldr	r3, [r3, #4]
 8101760:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8101762:	683b      	ldr	r3, [r7, #0]
 8101764:	68fa      	ldr	r2, [r7, #12]
 8101766:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8101768:	68fb      	ldr	r3, [r7, #12]
 810176a:	689a      	ldr	r2, [r3, #8]
 810176c:	683b      	ldr	r3, [r7, #0]
 810176e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8101770:	68fb      	ldr	r3, [r7, #12]
 8101772:	689b      	ldr	r3, [r3, #8]
 8101774:	683a      	ldr	r2, [r7, #0]
 8101776:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8101778:	68fb      	ldr	r3, [r7, #12]
 810177a:	683a      	ldr	r2, [r7, #0]
 810177c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 810177e:	683b      	ldr	r3, [r7, #0]
 8101780:	687a      	ldr	r2, [r7, #4]
 8101782:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8101784:	687b      	ldr	r3, [r7, #4]
 8101786:	681b      	ldr	r3, [r3, #0]
 8101788:	1c5a      	adds	r2, r3, #1
 810178a:	687b      	ldr	r3, [r7, #4]
 810178c:	601a      	str	r2, [r3, #0]
}
 810178e:	bf00      	nop
 8101790:	3714      	adds	r7, #20
 8101792:	46bd      	mov	sp, r7
 8101794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101798:	4770      	bx	lr

0810179a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810179a:	b480      	push	{r7}
 810179c:	b085      	sub	sp, #20
 810179e:	af00      	add	r7, sp, #0
 81017a0:	6078      	str	r0, [r7, #4]
 81017a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 81017a4:	683b      	ldr	r3, [r7, #0]
 81017a6:	681b      	ldr	r3, [r3, #0]
 81017a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 81017aa:	68bb      	ldr	r3, [r7, #8]
 81017ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 81017b0:	d103      	bne.n	81017ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 81017b2:	687b      	ldr	r3, [r7, #4]
 81017b4:	691b      	ldr	r3, [r3, #16]
 81017b6:	60fb      	str	r3, [r7, #12]
 81017b8:	e00c      	b.n	81017d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 81017ba:	687b      	ldr	r3, [r7, #4]
 81017bc:	3308      	adds	r3, #8
 81017be:	60fb      	str	r3, [r7, #12]
 81017c0:	e002      	b.n	81017c8 <vListInsert+0x2e>
 81017c2:	68fb      	ldr	r3, [r7, #12]
 81017c4:	685b      	ldr	r3, [r3, #4]
 81017c6:	60fb      	str	r3, [r7, #12]
 81017c8:	68fb      	ldr	r3, [r7, #12]
 81017ca:	685b      	ldr	r3, [r3, #4]
 81017cc:	681b      	ldr	r3, [r3, #0]
 81017ce:	68ba      	ldr	r2, [r7, #8]
 81017d0:	429a      	cmp	r2, r3
 81017d2:	d2f6      	bcs.n	81017c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 81017d4:	68fb      	ldr	r3, [r7, #12]
 81017d6:	685a      	ldr	r2, [r3, #4]
 81017d8:	683b      	ldr	r3, [r7, #0]
 81017da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 81017dc:	683b      	ldr	r3, [r7, #0]
 81017de:	685b      	ldr	r3, [r3, #4]
 81017e0:	683a      	ldr	r2, [r7, #0]
 81017e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 81017e4:	683b      	ldr	r3, [r7, #0]
 81017e6:	68fa      	ldr	r2, [r7, #12]
 81017e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 81017ea:	68fb      	ldr	r3, [r7, #12]
 81017ec:	683a      	ldr	r2, [r7, #0]
 81017ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 81017f0:	683b      	ldr	r3, [r7, #0]
 81017f2:	687a      	ldr	r2, [r7, #4]
 81017f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 81017f6:	687b      	ldr	r3, [r7, #4]
 81017f8:	681b      	ldr	r3, [r3, #0]
 81017fa:	1c5a      	adds	r2, r3, #1
 81017fc:	687b      	ldr	r3, [r7, #4]
 81017fe:	601a      	str	r2, [r3, #0]
}
 8101800:	bf00      	nop
 8101802:	3714      	adds	r7, #20
 8101804:	46bd      	mov	sp, r7
 8101806:	f85d 7b04 	ldr.w	r7, [sp], #4
 810180a:	4770      	bx	lr

0810180c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 810180c:	b480      	push	{r7}
 810180e:	b085      	sub	sp, #20
 8101810:	af00      	add	r7, sp, #0
 8101812:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8101814:	687b      	ldr	r3, [r7, #4]
 8101816:	691b      	ldr	r3, [r3, #16]
 8101818:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810181a:	687b      	ldr	r3, [r7, #4]
 810181c:	685b      	ldr	r3, [r3, #4]
 810181e:	687a      	ldr	r2, [r7, #4]
 8101820:	6892      	ldr	r2, [r2, #8]
 8101822:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8101824:	687b      	ldr	r3, [r7, #4]
 8101826:	689b      	ldr	r3, [r3, #8]
 8101828:	687a      	ldr	r2, [r7, #4]
 810182a:	6852      	ldr	r2, [r2, #4]
 810182c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810182e:	68fb      	ldr	r3, [r7, #12]
 8101830:	685b      	ldr	r3, [r3, #4]
 8101832:	687a      	ldr	r2, [r7, #4]
 8101834:	429a      	cmp	r2, r3
 8101836:	d103      	bne.n	8101840 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8101838:	687b      	ldr	r3, [r7, #4]
 810183a:	689a      	ldr	r2, [r3, #8]
 810183c:	68fb      	ldr	r3, [r7, #12]
 810183e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8101840:	687b      	ldr	r3, [r7, #4]
 8101842:	2200      	movs	r2, #0
 8101844:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8101846:	68fb      	ldr	r3, [r7, #12]
 8101848:	681b      	ldr	r3, [r3, #0]
 810184a:	1e5a      	subs	r2, r3, #1
 810184c:	68fb      	ldr	r3, [r7, #12]
 810184e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8101850:	68fb      	ldr	r3, [r7, #12]
 8101852:	681b      	ldr	r3, [r3, #0]
}
 8101854:	4618      	mov	r0, r3
 8101856:	3714      	adds	r7, #20
 8101858:	46bd      	mov	sp, r7
 810185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810185e:	4770      	bx	lr

08101860 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8101860:	b480      	push	{r7}
 8101862:	b085      	sub	sp, #20
 8101864:	af00      	add	r7, sp, #0
 8101866:	60f8      	str	r0, [r7, #12]
 8101868:	60b9      	str	r1, [r7, #8]
 810186a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 810186c:	68fb      	ldr	r3, [r7, #12]
 810186e:	3b04      	subs	r3, #4
 8101870:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8101872:	68fb      	ldr	r3, [r7, #12]
 8101874:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8101878:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810187a:	68fb      	ldr	r3, [r7, #12]
 810187c:	3b04      	subs	r3, #4
 810187e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8101880:	68bb      	ldr	r3, [r7, #8]
 8101882:	f023 0201 	bic.w	r2, r3, #1
 8101886:	68fb      	ldr	r3, [r7, #12]
 8101888:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810188a:	68fb      	ldr	r3, [r7, #12]
 810188c:	3b04      	subs	r3, #4
 810188e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8101890:	4a0c      	ldr	r2, [pc, #48]	; (81018c4 <pxPortInitialiseStack+0x64>)
 8101892:	68fb      	ldr	r3, [r7, #12]
 8101894:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8101896:	68fb      	ldr	r3, [r7, #12]
 8101898:	3b14      	subs	r3, #20
 810189a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 810189c:	687a      	ldr	r2, [r7, #4]
 810189e:	68fb      	ldr	r3, [r7, #12]
 81018a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 81018a2:	68fb      	ldr	r3, [r7, #12]
 81018a4:	3b04      	subs	r3, #4
 81018a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 81018a8:	68fb      	ldr	r3, [r7, #12]
 81018aa:	f06f 0202 	mvn.w	r2, #2
 81018ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 81018b0:	68fb      	ldr	r3, [r7, #12]
 81018b2:	3b20      	subs	r3, #32
 81018b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 81018b6:	68fb      	ldr	r3, [r7, #12]
}
 81018b8:	4618      	mov	r0, r3
 81018ba:	3714      	adds	r7, #20
 81018bc:	46bd      	mov	sp, r7
 81018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018c2:	4770      	bx	lr
 81018c4:	081018c9 	.word	0x081018c9

081018c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 81018c8:	b480      	push	{r7}
 81018ca:	b085      	sub	sp, #20
 81018cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 81018ce:	2300      	movs	r3, #0
 81018d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 81018d2:	4b12      	ldr	r3, [pc, #72]	; (810191c <prvTaskExitError+0x54>)
 81018d4:	681b      	ldr	r3, [r3, #0]
 81018d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81018da:	d00a      	beq.n	81018f2 <prvTaskExitError+0x2a>
	__asm volatile
 81018dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 81018e0:	f383 8811 	msr	BASEPRI, r3
 81018e4:	f3bf 8f6f 	isb	sy
 81018e8:	f3bf 8f4f 	dsb	sy
 81018ec:	60fb      	str	r3, [r7, #12]
}
 81018ee:	bf00      	nop
 81018f0:	e7fe      	b.n	81018f0 <prvTaskExitError+0x28>
	__asm volatile
 81018f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81018f6:	f383 8811 	msr	BASEPRI, r3
 81018fa:	f3bf 8f6f 	isb	sy
 81018fe:	f3bf 8f4f 	dsb	sy
 8101902:	60bb      	str	r3, [r7, #8]
}
 8101904:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8101906:	bf00      	nop
 8101908:	687b      	ldr	r3, [r7, #4]
 810190a:	2b00      	cmp	r3, #0
 810190c:	d0fc      	beq.n	8101908 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 810190e:	bf00      	nop
 8101910:	bf00      	nop
 8101912:	3714      	adds	r7, #20
 8101914:	46bd      	mov	sp, r7
 8101916:	f85d 7b04 	ldr.w	r7, [sp], #4
 810191a:	4770      	bx	lr
 810191c:	10000010 	.word	0x10000010

08101920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8101920:	4b07      	ldr	r3, [pc, #28]	; (8101940 <pxCurrentTCBConst2>)
 8101922:	6819      	ldr	r1, [r3, #0]
 8101924:	6808      	ldr	r0, [r1, #0]
 8101926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810192a:	f380 8809 	msr	PSP, r0
 810192e:	f3bf 8f6f 	isb	sy
 8101932:	f04f 0000 	mov.w	r0, #0
 8101936:	f380 8811 	msr	BASEPRI, r0
 810193a:	4770      	bx	lr
 810193c:	f3af 8000 	nop.w

08101940 <pxCurrentTCBConst2>:
 8101940:	10004438 	.word	0x10004438
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8101944:	bf00      	nop
 8101946:	bf00      	nop

08101948 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8101948:	4808      	ldr	r0, [pc, #32]	; (810196c <prvPortStartFirstTask+0x24>)
 810194a:	6800      	ldr	r0, [r0, #0]
 810194c:	6800      	ldr	r0, [r0, #0]
 810194e:	f380 8808 	msr	MSP, r0
 8101952:	f04f 0000 	mov.w	r0, #0
 8101956:	f380 8814 	msr	CONTROL, r0
 810195a:	b662      	cpsie	i
 810195c:	b661      	cpsie	f
 810195e:	f3bf 8f4f 	dsb	sy
 8101962:	f3bf 8f6f 	isb	sy
 8101966:	df00      	svc	0
 8101968:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 810196a:	bf00      	nop
 810196c:	e000ed08 	.word	0xe000ed08

08101970 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8101970:	b580      	push	{r7, lr}
 8101972:	b086      	sub	sp, #24
 8101974:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8101976:	4b46      	ldr	r3, [pc, #280]	; (8101a90 <xPortStartScheduler+0x120>)
 8101978:	681b      	ldr	r3, [r3, #0]
 810197a:	4a46      	ldr	r2, [pc, #280]	; (8101a94 <xPortStartScheduler+0x124>)
 810197c:	4293      	cmp	r3, r2
 810197e:	d10a      	bne.n	8101996 <xPortStartScheduler+0x26>
	__asm volatile
 8101980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101984:	f383 8811 	msr	BASEPRI, r3
 8101988:	f3bf 8f6f 	isb	sy
 810198c:	f3bf 8f4f 	dsb	sy
 8101990:	613b      	str	r3, [r7, #16]
}
 8101992:	bf00      	nop
 8101994:	e7fe      	b.n	8101994 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8101996:	4b3e      	ldr	r3, [pc, #248]	; (8101a90 <xPortStartScheduler+0x120>)
 8101998:	681b      	ldr	r3, [r3, #0]
 810199a:	4a3f      	ldr	r2, [pc, #252]	; (8101a98 <xPortStartScheduler+0x128>)
 810199c:	4293      	cmp	r3, r2
 810199e:	d10a      	bne.n	81019b6 <xPortStartScheduler+0x46>
	__asm volatile
 81019a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81019a4:	f383 8811 	msr	BASEPRI, r3
 81019a8:	f3bf 8f6f 	isb	sy
 81019ac:	f3bf 8f4f 	dsb	sy
 81019b0:	60fb      	str	r3, [r7, #12]
}
 81019b2:	bf00      	nop
 81019b4:	e7fe      	b.n	81019b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 81019b6:	4b39      	ldr	r3, [pc, #228]	; (8101a9c <xPortStartScheduler+0x12c>)
 81019b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 81019ba:	697b      	ldr	r3, [r7, #20]
 81019bc:	781b      	ldrb	r3, [r3, #0]
 81019be:	b2db      	uxtb	r3, r3
 81019c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 81019c2:	697b      	ldr	r3, [r7, #20]
 81019c4:	22ff      	movs	r2, #255	; 0xff
 81019c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 81019c8:	697b      	ldr	r3, [r7, #20]
 81019ca:	781b      	ldrb	r3, [r3, #0]
 81019cc:	b2db      	uxtb	r3, r3
 81019ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 81019d0:	78fb      	ldrb	r3, [r7, #3]
 81019d2:	b2db      	uxtb	r3, r3
 81019d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 81019d8:	b2da      	uxtb	r2, r3
 81019da:	4b31      	ldr	r3, [pc, #196]	; (8101aa0 <xPortStartScheduler+0x130>)
 81019dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 81019de:	4b31      	ldr	r3, [pc, #196]	; (8101aa4 <xPortStartScheduler+0x134>)
 81019e0:	2207      	movs	r2, #7
 81019e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 81019e4:	e009      	b.n	81019fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 81019e6:	4b2f      	ldr	r3, [pc, #188]	; (8101aa4 <xPortStartScheduler+0x134>)
 81019e8:	681b      	ldr	r3, [r3, #0]
 81019ea:	3b01      	subs	r3, #1
 81019ec:	4a2d      	ldr	r2, [pc, #180]	; (8101aa4 <xPortStartScheduler+0x134>)
 81019ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 81019f0:	78fb      	ldrb	r3, [r7, #3]
 81019f2:	b2db      	uxtb	r3, r3
 81019f4:	005b      	lsls	r3, r3, #1
 81019f6:	b2db      	uxtb	r3, r3
 81019f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 81019fa:	78fb      	ldrb	r3, [r7, #3]
 81019fc:	b2db      	uxtb	r3, r3
 81019fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101a02:	2b80      	cmp	r3, #128	; 0x80
 8101a04:	d0ef      	beq.n	81019e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8101a06:	4b27      	ldr	r3, [pc, #156]	; (8101aa4 <xPortStartScheduler+0x134>)
 8101a08:	681b      	ldr	r3, [r3, #0]
 8101a0a:	f1c3 0307 	rsb	r3, r3, #7
 8101a0e:	2b04      	cmp	r3, #4
 8101a10:	d00a      	beq.n	8101a28 <xPortStartScheduler+0xb8>
	__asm volatile
 8101a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101a16:	f383 8811 	msr	BASEPRI, r3
 8101a1a:	f3bf 8f6f 	isb	sy
 8101a1e:	f3bf 8f4f 	dsb	sy
 8101a22:	60bb      	str	r3, [r7, #8]
}
 8101a24:	bf00      	nop
 8101a26:	e7fe      	b.n	8101a26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8101a28:	4b1e      	ldr	r3, [pc, #120]	; (8101aa4 <xPortStartScheduler+0x134>)
 8101a2a:	681b      	ldr	r3, [r3, #0]
 8101a2c:	021b      	lsls	r3, r3, #8
 8101a2e:	4a1d      	ldr	r2, [pc, #116]	; (8101aa4 <xPortStartScheduler+0x134>)
 8101a30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8101a32:	4b1c      	ldr	r3, [pc, #112]	; (8101aa4 <xPortStartScheduler+0x134>)
 8101a34:	681b      	ldr	r3, [r3, #0]
 8101a36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8101a3a:	4a1a      	ldr	r2, [pc, #104]	; (8101aa4 <xPortStartScheduler+0x134>)
 8101a3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8101a3e:	687b      	ldr	r3, [r7, #4]
 8101a40:	b2da      	uxtb	r2, r3
 8101a42:	697b      	ldr	r3, [r7, #20]
 8101a44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8101a46:	4b18      	ldr	r3, [pc, #96]	; (8101aa8 <xPortStartScheduler+0x138>)
 8101a48:	681b      	ldr	r3, [r3, #0]
 8101a4a:	4a17      	ldr	r2, [pc, #92]	; (8101aa8 <xPortStartScheduler+0x138>)
 8101a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101a50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8101a52:	4b15      	ldr	r3, [pc, #84]	; (8101aa8 <xPortStartScheduler+0x138>)
 8101a54:	681b      	ldr	r3, [r3, #0]
 8101a56:	4a14      	ldr	r2, [pc, #80]	; (8101aa8 <xPortStartScheduler+0x138>)
 8101a58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8101a5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8101a5e:	f000 f8dd 	bl	8101c1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8101a62:	4b12      	ldr	r3, [pc, #72]	; (8101aac <xPortStartScheduler+0x13c>)
 8101a64:	2200      	movs	r2, #0
 8101a66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8101a68:	f000 f8fc 	bl	8101c64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8101a6c:	4b10      	ldr	r3, [pc, #64]	; (8101ab0 <xPortStartScheduler+0x140>)
 8101a6e:	681b      	ldr	r3, [r3, #0]
 8101a70:	4a0f      	ldr	r2, [pc, #60]	; (8101ab0 <xPortStartScheduler+0x140>)
 8101a72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8101a76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8101a78:	f7ff ff66 	bl	8101948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8101a7c:	f001 f9fa 	bl	8102e74 <vTaskSwitchContext>
	prvTaskExitError();
 8101a80:	f7ff ff22 	bl	81018c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8101a84:	2300      	movs	r3, #0
}
 8101a86:	4618      	mov	r0, r3
 8101a88:	3718      	adds	r7, #24
 8101a8a:	46bd      	mov	sp, r7
 8101a8c:	bd80      	pop	{r7, pc}
 8101a8e:	bf00      	nop
 8101a90:	e000ed00 	.word	0xe000ed00
 8101a94:	410fc271 	.word	0x410fc271
 8101a98:	410fc270 	.word	0x410fc270
 8101a9c:	e000e400 	.word	0xe000e400
 8101aa0:	10004430 	.word	0x10004430
 8101aa4:	10004434 	.word	0x10004434
 8101aa8:	e000ed20 	.word	0xe000ed20
 8101aac:	10000010 	.word	0x10000010
 8101ab0:	e000ef34 	.word	0xe000ef34

08101ab4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8101ab4:	b480      	push	{r7}
 8101ab6:	b083      	sub	sp, #12
 8101ab8:	af00      	add	r7, sp, #0
	__asm volatile
 8101aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101abe:	f383 8811 	msr	BASEPRI, r3
 8101ac2:	f3bf 8f6f 	isb	sy
 8101ac6:	f3bf 8f4f 	dsb	sy
 8101aca:	607b      	str	r3, [r7, #4]
}
 8101acc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8101ace:	4b0f      	ldr	r3, [pc, #60]	; (8101b0c <vPortEnterCritical+0x58>)
 8101ad0:	681b      	ldr	r3, [r3, #0]
 8101ad2:	3301      	adds	r3, #1
 8101ad4:	4a0d      	ldr	r2, [pc, #52]	; (8101b0c <vPortEnterCritical+0x58>)
 8101ad6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8101ad8:	4b0c      	ldr	r3, [pc, #48]	; (8101b0c <vPortEnterCritical+0x58>)
 8101ada:	681b      	ldr	r3, [r3, #0]
 8101adc:	2b01      	cmp	r3, #1
 8101ade:	d10f      	bne.n	8101b00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8101ae0:	4b0b      	ldr	r3, [pc, #44]	; (8101b10 <vPortEnterCritical+0x5c>)
 8101ae2:	681b      	ldr	r3, [r3, #0]
 8101ae4:	b2db      	uxtb	r3, r3
 8101ae6:	2b00      	cmp	r3, #0
 8101ae8:	d00a      	beq.n	8101b00 <vPortEnterCritical+0x4c>
	__asm volatile
 8101aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101aee:	f383 8811 	msr	BASEPRI, r3
 8101af2:	f3bf 8f6f 	isb	sy
 8101af6:	f3bf 8f4f 	dsb	sy
 8101afa:	603b      	str	r3, [r7, #0]
}
 8101afc:	bf00      	nop
 8101afe:	e7fe      	b.n	8101afe <vPortEnterCritical+0x4a>
	}
}
 8101b00:	bf00      	nop
 8101b02:	370c      	adds	r7, #12
 8101b04:	46bd      	mov	sp, r7
 8101b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b0a:	4770      	bx	lr
 8101b0c:	10000010 	.word	0x10000010
 8101b10:	e000ed04 	.word	0xe000ed04

08101b14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8101b14:	b480      	push	{r7}
 8101b16:	b083      	sub	sp, #12
 8101b18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8101b1a:	4b12      	ldr	r3, [pc, #72]	; (8101b64 <vPortExitCritical+0x50>)
 8101b1c:	681b      	ldr	r3, [r3, #0]
 8101b1e:	2b00      	cmp	r3, #0
 8101b20:	d10a      	bne.n	8101b38 <vPortExitCritical+0x24>
	__asm volatile
 8101b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101b26:	f383 8811 	msr	BASEPRI, r3
 8101b2a:	f3bf 8f6f 	isb	sy
 8101b2e:	f3bf 8f4f 	dsb	sy
 8101b32:	607b      	str	r3, [r7, #4]
}
 8101b34:	bf00      	nop
 8101b36:	e7fe      	b.n	8101b36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8101b38:	4b0a      	ldr	r3, [pc, #40]	; (8101b64 <vPortExitCritical+0x50>)
 8101b3a:	681b      	ldr	r3, [r3, #0]
 8101b3c:	3b01      	subs	r3, #1
 8101b3e:	4a09      	ldr	r2, [pc, #36]	; (8101b64 <vPortExitCritical+0x50>)
 8101b40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8101b42:	4b08      	ldr	r3, [pc, #32]	; (8101b64 <vPortExitCritical+0x50>)
 8101b44:	681b      	ldr	r3, [r3, #0]
 8101b46:	2b00      	cmp	r3, #0
 8101b48:	d105      	bne.n	8101b56 <vPortExitCritical+0x42>
 8101b4a:	2300      	movs	r3, #0
 8101b4c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8101b4e:	683b      	ldr	r3, [r7, #0]
 8101b50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8101b54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8101b56:	bf00      	nop
 8101b58:	370c      	adds	r7, #12
 8101b5a:	46bd      	mov	sp, r7
 8101b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b60:	4770      	bx	lr
 8101b62:	bf00      	nop
 8101b64:	10000010 	.word	0x10000010
	...

08101b70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8101b70:	f3ef 8009 	mrs	r0, PSP
 8101b74:	f3bf 8f6f 	isb	sy
 8101b78:	4b15      	ldr	r3, [pc, #84]	; (8101bd0 <pxCurrentTCBConst>)
 8101b7a:	681a      	ldr	r2, [r3, #0]
 8101b7c:	f01e 0f10 	tst.w	lr, #16
 8101b80:	bf08      	it	eq
 8101b82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8101b86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8101b8a:	6010      	str	r0, [r2, #0]
 8101b8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8101b90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8101b94:	f380 8811 	msr	BASEPRI, r0
 8101b98:	f3bf 8f4f 	dsb	sy
 8101b9c:	f3bf 8f6f 	isb	sy
 8101ba0:	f001 f968 	bl	8102e74 <vTaskSwitchContext>
 8101ba4:	f04f 0000 	mov.w	r0, #0
 8101ba8:	f380 8811 	msr	BASEPRI, r0
 8101bac:	bc09      	pop	{r0, r3}
 8101bae:	6819      	ldr	r1, [r3, #0]
 8101bb0:	6808      	ldr	r0, [r1, #0]
 8101bb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8101bb6:	f01e 0f10 	tst.w	lr, #16
 8101bba:	bf08      	it	eq
 8101bbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8101bc0:	f380 8809 	msr	PSP, r0
 8101bc4:	f3bf 8f6f 	isb	sy
 8101bc8:	4770      	bx	lr
 8101bca:	bf00      	nop
 8101bcc:	f3af 8000 	nop.w

08101bd0 <pxCurrentTCBConst>:
 8101bd0:	10004438 	.word	0x10004438
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8101bd4:	bf00      	nop
 8101bd6:	bf00      	nop

08101bd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8101bd8:	b580      	push	{r7, lr}
 8101bda:	b082      	sub	sp, #8
 8101bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8101bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101be2:	f383 8811 	msr	BASEPRI, r3
 8101be6:	f3bf 8f6f 	isb	sy
 8101bea:	f3bf 8f4f 	dsb	sy
 8101bee:	607b      	str	r3, [r7, #4]
}
 8101bf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8101bf2:	f001 f885 	bl	8102d00 <xTaskIncrementTick>
 8101bf6:	4603      	mov	r3, r0
 8101bf8:	2b00      	cmp	r3, #0
 8101bfa:	d003      	beq.n	8101c04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8101bfc:	4b06      	ldr	r3, [pc, #24]	; (8101c18 <xPortSysTickHandler+0x40>)
 8101bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8101c02:	601a      	str	r2, [r3, #0]
 8101c04:	2300      	movs	r3, #0
 8101c06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8101c08:	683b      	ldr	r3, [r7, #0]
 8101c0a:	f383 8811 	msr	BASEPRI, r3
}
 8101c0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8101c10:	bf00      	nop
 8101c12:	3708      	adds	r7, #8
 8101c14:	46bd      	mov	sp, r7
 8101c16:	bd80      	pop	{r7, pc}
 8101c18:	e000ed04 	.word	0xe000ed04

08101c1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8101c1c:	b480      	push	{r7}
 8101c1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8101c20:	4b0b      	ldr	r3, [pc, #44]	; (8101c50 <vPortSetupTimerInterrupt+0x34>)
 8101c22:	2200      	movs	r2, #0
 8101c24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8101c26:	4b0b      	ldr	r3, [pc, #44]	; (8101c54 <vPortSetupTimerInterrupt+0x38>)
 8101c28:	2200      	movs	r2, #0
 8101c2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8101c2c:	4b0a      	ldr	r3, [pc, #40]	; (8101c58 <vPortSetupTimerInterrupt+0x3c>)
 8101c2e:	681b      	ldr	r3, [r3, #0]
 8101c30:	4a0a      	ldr	r2, [pc, #40]	; (8101c5c <vPortSetupTimerInterrupt+0x40>)
 8101c32:	fba2 2303 	umull	r2, r3, r2, r3
 8101c36:	099b      	lsrs	r3, r3, #6
 8101c38:	4a09      	ldr	r2, [pc, #36]	; (8101c60 <vPortSetupTimerInterrupt+0x44>)
 8101c3a:	3b01      	subs	r3, #1
 8101c3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8101c3e:	4b04      	ldr	r3, [pc, #16]	; (8101c50 <vPortSetupTimerInterrupt+0x34>)
 8101c40:	2207      	movs	r2, #7
 8101c42:	601a      	str	r2, [r3, #0]
}
 8101c44:	bf00      	nop
 8101c46:	46bd      	mov	sp, r7
 8101c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c4c:	4770      	bx	lr
 8101c4e:	bf00      	nop
 8101c50:	e000e010 	.word	0xe000e010
 8101c54:	e000e018 	.word	0xe000e018
 8101c58:	10000004 	.word	0x10000004
 8101c5c:	10624dd3 	.word	0x10624dd3
 8101c60:	e000e014 	.word	0xe000e014

08101c64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8101c64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8101c74 <vPortEnableVFP+0x10>
 8101c68:	6801      	ldr	r1, [r0, #0]
 8101c6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8101c6e:	6001      	str	r1, [r0, #0]
 8101c70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8101c72:	bf00      	nop
 8101c74:	e000ed88 	.word	0xe000ed88

08101c78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8101c78:	b480      	push	{r7}
 8101c7a:	b085      	sub	sp, #20
 8101c7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8101c7e:	f3ef 8305 	mrs	r3, IPSR
 8101c82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8101c84:	68fb      	ldr	r3, [r7, #12]
 8101c86:	2b0f      	cmp	r3, #15
 8101c88:	d914      	bls.n	8101cb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8101c8a:	4a17      	ldr	r2, [pc, #92]	; (8101ce8 <vPortValidateInterruptPriority+0x70>)
 8101c8c:	68fb      	ldr	r3, [r7, #12]
 8101c8e:	4413      	add	r3, r2
 8101c90:	781b      	ldrb	r3, [r3, #0]
 8101c92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8101c94:	4b15      	ldr	r3, [pc, #84]	; (8101cec <vPortValidateInterruptPriority+0x74>)
 8101c96:	781b      	ldrb	r3, [r3, #0]
 8101c98:	7afa      	ldrb	r2, [r7, #11]
 8101c9a:	429a      	cmp	r2, r3
 8101c9c:	d20a      	bcs.n	8101cb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8101c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101ca2:	f383 8811 	msr	BASEPRI, r3
 8101ca6:	f3bf 8f6f 	isb	sy
 8101caa:	f3bf 8f4f 	dsb	sy
 8101cae:	607b      	str	r3, [r7, #4]
}
 8101cb0:	bf00      	nop
 8101cb2:	e7fe      	b.n	8101cb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8101cb4:	4b0e      	ldr	r3, [pc, #56]	; (8101cf0 <vPortValidateInterruptPriority+0x78>)
 8101cb6:	681b      	ldr	r3, [r3, #0]
 8101cb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8101cbc:	4b0d      	ldr	r3, [pc, #52]	; (8101cf4 <vPortValidateInterruptPriority+0x7c>)
 8101cbe:	681b      	ldr	r3, [r3, #0]
 8101cc0:	429a      	cmp	r2, r3
 8101cc2:	d90a      	bls.n	8101cda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8101cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101cc8:	f383 8811 	msr	BASEPRI, r3
 8101ccc:	f3bf 8f6f 	isb	sy
 8101cd0:	f3bf 8f4f 	dsb	sy
 8101cd4:	603b      	str	r3, [r7, #0]
}
 8101cd6:	bf00      	nop
 8101cd8:	e7fe      	b.n	8101cd8 <vPortValidateInterruptPriority+0x60>
	}
 8101cda:	bf00      	nop
 8101cdc:	3714      	adds	r7, #20
 8101cde:	46bd      	mov	sp, r7
 8101ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ce4:	4770      	bx	lr
 8101ce6:	bf00      	nop
 8101ce8:	e000e3f0 	.word	0xe000e3f0
 8101cec:	10004430 	.word	0x10004430
 8101cf0:	e000ed0c 	.word	0xe000ed0c
 8101cf4:	10004434 	.word	0x10004434

08101cf8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8101cf8:	b580      	push	{r7, lr}
 8101cfa:	b084      	sub	sp, #16
 8101cfc:	af00      	add	r7, sp, #0
 8101cfe:	6078      	str	r0, [r7, #4]
 8101d00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8101d02:	687b      	ldr	r3, [r7, #4]
 8101d04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8101d06:	68fb      	ldr	r3, [r7, #12]
 8101d08:	2b00      	cmp	r3, #0
 8101d0a:	d10a      	bne.n	8101d22 <xQueueGenericReset+0x2a>
	__asm volatile
 8101d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101d10:	f383 8811 	msr	BASEPRI, r3
 8101d14:	f3bf 8f6f 	isb	sy
 8101d18:	f3bf 8f4f 	dsb	sy
 8101d1c:	60bb      	str	r3, [r7, #8]
}
 8101d1e:	bf00      	nop
 8101d20:	e7fe      	b.n	8101d20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8101d22:	f7ff fec7 	bl	8101ab4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8101d26:	68fb      	ldr	r3, [r7, #12]
 8101d28:	681a      	ldr	r2, [r3, #0]
 8101d2a:	68fb      	ldr	r3, [r7, #12]
 8101d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8101d2e:	68f9      	ldr	r1, [r7, #12]
 8101d30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8101d32:	fb01 f303 	mul.w	r3, r1, r3
 8101d36:	441a      	add	r2, r3
 8101d38:	68fb      	ldr	r3, [r7, #12]
 8101d3a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8101d3c:	68fb      	ldr	r3, [r7, #12]
 8101d3e:	2200      	movs	r2, #0
 8101d40:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8101d42:	68fb      	ldr	r3, [r7, #12]
 8101d44:	681a      	ldr	r2, [r3, #0]
 8101d46:	68fb      	ldr	r3, [r7, #12]
 8101d48:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8101d4a:	68fb      	ldr	r3, [r7, #12]
 8101d4c:	681a      	ldr	r2, [r3, #0]
 8101d4e:	68fb      	ldr	r3, [r7, #12]
 8101d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8101d52:	3b01      	subs	r3, #1
 8101d54:	68f9      	ldr	r1, [r7, #12]
 8101d56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8101d58:	fb01 f303 	mul.w	r3, r1, r3
 8101d5c:	441a      	add	r2, r3
 8101d5e:	68fb      	ldr	r3, [r7, #12]
 8101d60:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8101d62:	68fb      	ldr	r3, [r7, #12]
 8101d64:	22ff      	movs	r2, #255	; 0xff
 8101d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8101d6a:	68fb      	ldr	r3, [r7, #12]
 8101d6c:	22ff      	movs	r2, #255	; 0xff
 8101d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8101d72:	683b      	ldr	r3, [r7, #0]
 8101d74:	2b00      	cmp	r3, #0
 8101d76:	d114      	bne.n	8101da2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8101d78:	68fb      	ldr	r3, [r7, #12]
 8101d7a:	691b      	ldr	r3, [r3, #16]
 8101d7c:	2b00      	cmp	r3, #0
 8101d7e:	d01a      	beq.n	8101db6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8101d80:	68fb      	ldr	r3, [r7, #12]
 8101d82:	3310      	adds	r3, #16
 8101d84:	4618      	mov	r0, r3
 8101d86:	f001 f929 	bl	8102fdc <xTaskRemoveFromEventList>
 8101d8a:	4603      	mov	r3, r0
 8101d8c:	2b00      	cmp	r3, #0
 8101d8e:	d012      	beq.n	8101db6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8101d90:	4b0c      	ldr	r3, [pc, #48]	; (8101dc4 <xQueueGenericReset+0xcc>)
 8101d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8101d96:	601a      	str	r2, [r3, #0]
 8101d98:	f3bf 8f4f 	dsb	sy
 8101d9c:	f3bf 8f6f 	isb	sy
 8101da0:	e009      	b.n	8101db6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8101da2:	68fb      	ldr	r3, [r7, #12]
 8101da4:	3310      	adds	r3, #16
 8101da6:	4618      	mov	r0, r3
 8101da8:	f7ff fca6 	bl	81016f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8101dac:	68fb      	ldr	r3, [r7, #12]
 8101dae:	3324      	adds	r3, #36	; 0x24
 8101db0:	4618      	mov	r0, r3
 8101db2:	f7ff fca1 	bl	81016f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8101db6:	f7ff fead 	bl	8101b14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8101dba:	2301      	movs	r3, #1
}
 8101dbc:	4618      	mov	r0, r3
 8101dbe:	3710      	adds	r7, #16
 8101dc0:	46bd      	mov	sp, r7
 8101dc2:	bd80      	pop	{r7, pc}
 8101dc4:	e000ed04 	.word	0xe000ed04

08101dc8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8101dc8:	b580      	push	{r7, lr}
 8101dca:	b08e      	sub	sp, #56	; 0x38
 8101dcc:	af02      	add	r7, sp, #8
 8101dce:	60f8      	str	r0, [r7, #12]
 8101dd0:	60b9      	str	r1, [r7, #8]
 8101dd2:	607a      	str	r2, [r7, #4]
 8101dd4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8101dd6:	68fb      	ldr	r3, [r7, #12]
 8101dd8:	2b00      	cmp	r3, #0
 8101dda:	d10a      	bne.n	8101df2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8101ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101de0:	f383 8811 	msr	BASEPRI, r3
 8101de4:	f3bf 8f6f 	isb	sy
 8101de8:	f3bf 8f4f 	dsb	sy
 8101dec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8101dee:	bf00      	nop
 8101df0:	e7fe      	b.n	8101df0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8101df2:	683b      	ldr	r3, [r7, #0]
 8101df4:	2b00      	cmp	r3, #0
 8101df6:	d10a      	bne.n	8101e0e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8101df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101dfc:	f383 8811 	msr	BASEPRI, r3
 8101e00:	f3bf 8f6f 	isb	sy
 8101e04:	f3bf 8f4f 	dsb	sy
 8101e08:	627b      	str	r3, [r7, #36]	; 0x24
}
 8101e0a:	bf00      	nop
 8101e0c:	e7fe      	b.n	8101e0c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8101e0e:	687b      	ldr	r3, [r7, #4]
 8101e10:	2b00      	cmp	r3, #0
 8101e12:	d002      	beq.n	8101e1a <xQueueGenericCreateStatic+0x52>
 8101e14:	68bb      	ldr	r3, [r7, #8]
 8101e16:	2b00      	cmp	r3, #0
 8101e18:	d001      	beq.n	8101e1e <xQueueGenericCreateStatic+0x56>
 8101e1a:	2301      	movs	r3, #1
 8101e1c:	e000      	b.n	8101e20 <xQueueGenericCreateStatic+0x58>
 8101e1e:	2300      	movs	r3, #0
 8101e20:	2b00      	cmp	r3, #0
 8101e22:	d10a      	bne.n	8101e3a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8101e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101e28:	f383 8811 	msr	BASEPRI, r3
 8101e2c:	f3bf 8f6f 	isb	sy
 8101e30:	f3bf 8f4f 	dsb	sy
 8101e34:	623b      	str	r3, [r7, #32]
}
 8101e36:	bf00      	nop
 8101e38:	e7fe      	b.n	8101e38 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8101e3a:	687b      	ldr	r3, [r7, #4]
 8101e3c:	2b00      	cmp	r3, #0
 8101e3e:	d102      	bne.n	8101e46 <xQueueGenericCreateStatic+0x7e>
 8101e40:	68bb      	ldr	r3, [r7, #8]
 8101e42:	2b00      	cmp	r3, #0
 8101e44:	d101      	bne.n	8101e4a <xQueueGenericCreateStatic+0x82>
 8101e46:	2301      	movs	r3, #1
 8101e48:	e000      	b.n	8101e4c <xQueueGenericCreateStatic+0x84>
 8101e4a:	2300      	movs	r3, #0
 8101e4c:	2b00      	cmp	r3, #0
 8101e4e:	d10a      	bne.n	8101e66 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8101e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101e54:	f383 8811 	msr	BASEPRI, r3
 8101e58:	f3bf 8f6f 	isb	sy
 8101e5c:	f3bf 8f4f 	dsb	sy
 8101e60:	61fb      	str	r3, [r7, #28]
}
 8101e62:	bf00      	nop
 8101e64:	e7fe      	b.n	8101e64 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8101e66:	2350      	movs	r3, #80	; 0x50
 8101e68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8101e6a:	697b      	ldr	r3, [r7, #20]
 8101e6c:	2b50      	cmp	r3, #80	; 0x50
 8101e6e:	d00a      	beq.n	8101e86 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8101e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101e74:	f383 8811 	msr	BASEPRI, r3
 8101e78:	f3bf 8f6f 	isb	sy
 8101e7c:	f3bf 8f4f 	dsb	sy
 8101e80:	61bb      	str	r3, [r7, #24]
}
 8101e82:	bf00      	nop
 8101e84:	e7fe      	b.n	8101e84 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8101e86:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8101e88:	683b      	ldr	r3, [r7, #0]
 8101e8a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8101e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101e8e:	2b00      	cmp	r3, #0
 8101e90:	d00d      	beq.n	8101eae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8101e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101e94:	2201      	movs	r2, #1
 8101e96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8101e9a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8101e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101ea0:	9300      	str	r3, [sp, #0]
 8101ea2:	4613      	mov	r3, r2
 8101ea4:	687a      	ldr	r2, [r7, #4]
 8101ea6:	68b9      	ldr	r1, [r7, #8]
 8101ea8:	68f8      	ldr	r0, [r7, #12]
 8101eaa:	f000 f805 	bl	8101eb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8101eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8101eb0:	4618      	mov	r0, r3
 8101eb2:	3730      	adds	r7, #48	; 0x30
 8101eb4:	46bd      	mov	sp, r7
 8101eb6:	bd80      	pop	{r7, pc}

08101eb8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8101eb8:	b580      	push	{r7, lr}
 8101eba:	b084      	sub	sp, #16
 8101ebc:	af00      	add	r7, sp, #0
 8101ebe:	60f8      	str	r0, [r7, #12]
 8101ec0:	60b9      	str	r1, [r7, #8]
 8101ec2:	607a      	str	r2, [r7, #4]
 8101ec4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8101ec6:	68bb      	ldr	r3, [r7, #8]
 8101ec8:	2b00      	cmp	r3, #0
 8101eca:	d103      	bne.n	8101ed4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8101ecc:	69bb      	ldr	r3, [r7, #24]
 8101ece:	69ba      	ldr	r2, [r7, #24]
 8101ed0:	601a      	str	r2, [r3, #0]
 8101ed2:	e002      	b.n	8101eda <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8101ed4:	69bb      	ldr	r3, [r7, #24]
 8101ed6:	687a      	ldr	r2, [r7, #4]
 8101ed8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8101eda:	69bb      	ldr	r3, [r7, #24]
 8101edc:	68fa      	ldr	r2, [r7, #12]
 8101ede:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8101ee0:	69bb      	ldr	r3, [r7, #24]
 8101ee2:	68ba      	ldr	r2, [r7, #8]
 8101ee4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8101ee6:	2101      	movs	r1, #1
 8101ee8:	69b8      	ldr	r0, [r7, #24]
 8101eea:	f7ff ff05 	bl	8101cf8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8101eee:	69bb      	ldr	r3, [r7, #24]
 8101ef0:	78fa      	ldrb	r2, [r7, #3]
 8101ef2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8101ef6:	bf00      	nop
 8101ef8:	3710      	adds	r7, #16
 8101efa:	46bd      	mov	sp, r7
 8101efc:	bd80      	pop	{r7, pc}
	...

08101f00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8101f00:	b580      	push	{r7, lr}
 8101f02:	b08e      	sub	sp, #56	; 0x38
 8101f04:	af00      	add	r7, sp, #0
 8101f06:	60f8      	str	r0, [r7, #12]
 8101f08:	60b9      	str	r1, [r7, #8]
 8101f0a:	607a      	str	r2, [r7, #4]
 8101f0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8101f0e:	2300      	movs	r3, #0
 8101f10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8101f12:	68fb      	ldr	r3, [r7, #12]
 8101f14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8101f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101f18:	2b00      	cmp	r3, #0
 8101f1a:	d10a      	bne.n	8101f32 <xQueueGenericSend+0x32>
	__asm volatile
 8101f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101f20:	f383 8811 	msr	BASEPRI, r3
 8101f24:	f3bf 8f6f 	isb	sy
 8101f28:	f3bf 8f4f 	dsb	sy
 8101f2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8101f2e:	bf00      	nop
 8101f30:	e7fe      	b.n	8101f30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8101f32:	68bb      	ldr	r3, [r7, #8]
 8101f34:	2b00      	cmp	r3, #0
 8101f36:	d103      	bne.n	8101f40 <xQueueGenericSend+0x40>
 8101f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8101f3c:	2b00      	cmp	r3, #0
 8101f3e:	d101      	bne.n	8101f44 <xQueueGenericSend+0x44>
 8101f40:	2301      	movs	r3, #1
 8101f42:	e000      	b.n	8101f46 <xQueueGenericSend+0x46>
 8101f44:	2300      	movs	r3, #0
 8101f46:	2b00      	cmp	r3, #0
 8101f48:	d10a      	bne.n	8101f60 <xQueueGenericSend+0x60>
	__asm volatile
 8101f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101f4e:	f383 8811 	msr	BASEPRI, r3
 8101f52:	f3bf 8f6f 	isb	sy
 8101f56:	f3bf 8f4f 	dsb	sy
 8101f5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8101f5c:	bf00      	nop
 8101f5e:	e7fe      	b.n	8101f5e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8101f60:	683b      	ldr	r3, [r7, #0]
 8101f62:	2b02      	cmp	r3, #2
 8101f64:	d103      	bne.n	8101f6e <xQueueGenericSend+0x6e>
 8101f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8101f6a:	2b01      	cmp	r3, #1
 8101f6c:	d101      	bne.n	8101f72 <xQueueGenericSend+0x72>
 8101f6e:	2301      	movs	r3, #1
 8101f70:	e000      	b.n	8101f74 <xQueueGenericSend+0x74>
 8101f72:	2300      	movs	r3, #0
 8101f74:	2b00      	cmp	r3, #0
 8101f76:	d10a      	bne.n	8101f8e <xQueueGenericSend+0x8e>
	__asm volatile
 8101f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101f7c:	f383 8811 	msr	BASEPRI, r3
 8101f80:	f3bf 8f6f 	isb	sy
 8101f84:	f3bf 8f4f 	dsb	sy
 8101f88:	623b      	str	r3, [r7, #32]
}
 8101f8a:	bf00      	nop
 8101f8c:	e7fe      	b.n	8101f8c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8101f8e:	f001 f9e7 	bl	8103360 <xTaskGetSchedulerState>
 8101f92:	4603      	mov	r3, r0
 8101f94:	2b00      	cmp	r3, #0
 8101f96:	d102      	bne.n	8101f9e <xQueueGenericSend+0x9e>
 8101f98:	687b      	ldr	r3, [r7, #4]
 8101f9a:	2b00      	cmp	r3, #0
 8101f9c:	d101      	bne.n	8101fa2 <xQueueGenericSend+0xa2>
 8101f9e:	2301      	movs	r3, #1
 8101fa0:	e000      	b.n	8101fa4 <xQueueGenericSend+0xa4>
 8101fa2:	2300      	movs	r3, #0
 8101fa4:	2b00      	cmp	r3, #0
 8101fa6:	d10a      	bne.n	8101fbe <xQueueGenericSend+0xbe>
	__asm volatile
 8101fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101fac:	f383 8811 	msr	BASEPRI, r3
 8101fb0:	f3bf 8f6f 	isb	sy
 8101fb4:	f3bf 8f4f 	dsb	sy
 8101fb8:	61fb      	str	r3, [r7, #28]
}
 8101fba:	bf00      	nop
 8101fbc:	e7fe      	b.n	8101fbc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8101fbe:	f7ff fd79 	bl	8101ab4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8101fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8101fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8101fca:	429a      	cmp	r2, r3
 8101fcc:	d302      	bcc.n	8101fd4 <xQueueGenericSend+0xd4>
 8101fce:	683b      	ldr	r3, [r7, #0]
 8101fd0:	2b02      	cmp	r3, #2
 8101fd2:	d129      	bne.n	8102028 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8101fd4:	683a      	ldr	r2, [r7, #0]
 8101fd6:	68b9      	ldr	r1, [r7, #8]
 8101fd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8101fda:	f000 fa0b 	bl	81023f4 <prvCopyDataToQueue>
 8101fde:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8101fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101fe4:	2b00      	cmp	r3, #0
 8101fe6:	d010      	beq.n	810200a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8101fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101fea:	3324      	adds	r3, #36	; 0x24
 8101fec:	4618      	mov	r0, r3
 8101fee:	f000 fff5 	bl	8102fdc <xTaskRemoveFromEventList>
 8101ff2:	4603      	mov	r3, r0
 8101ff4:	2b00      	cmp	r3, #0
 8101ff6:	d013      	beq.n	8102020 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8101ff8:	4b3f      	ldr	r3, [pc, #252]	; (81020f8 <xQueueGenericSend+0x1f8>)
 8101ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8101ffe:	601a      	str	r2, [r3, #0]
 8102000:	f3bf 8f4f 	dsb	sy
 8102004:	f3bf 8f6f 	isb	sy
 8102008:	e00a      	b.n	8102020 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 810200a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810200c:	2b00      	cmp	r3, #0
 810200e:	d007      	beq.n	8102020 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8102010:	4b39      	ldr	r3, [pc, #228]	; (81020f8 <xQueueGenericSend+0x1f8>)
 8102012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102016:	601a      	str	r2, [r3, #0]
 8102018:	f3bf 8f4f 	dsb	sy
 810201c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8102020:	f7ff fd78 	bl	8101b14 <vPortExitCritical>
				return pdPASS;
 8102024:	2301      	movs	r3, #1
 8102026:	e063      	b.n	81020f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8102028:	687b      	ldr	r3, [r7, #4]
 810202a:	2b00      	cmp	r3, #0
 810202c:	d103      	bne.n	8102036 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810202e:	f7ff fd71 	bl	8101b14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8102032:	2300      	movs	r3, #0
 8102034:	e05c      	b.n	81020f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8102036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102038:	2b00      	cmp	r3, #0
 810203a:	d106      	bne.n	810204a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810203c:	f107 0314 	add.w	r3, r7, #20
 8102040:	4618      	mov	r0, r3
 8102042:	f001 f82f 	bl	81030a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8102046:	2301      	movs	r3, #1
 8102048:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810204a:	f7ff fd63 	bl	8101b14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810204e:	f000 fd9b 	bl	8102b88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8102052:	f7ff fd2f 	bl	8101ab4 <vPortEnterCritical>
 8102056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102058:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810205c:	b25b      	sxtb	r3, r3
 810205e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102062:	d103      	bne.n	810206c <xQueueGenericSend+0x16c>
 8102064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102066:	2200      	movs	r2, #0
 8102068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810206c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810206e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8102072:	b25b      	sxtb	r3, r3
 8102074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102078:	d103      	bne.n	8102082 <xQueueGenericSend+0x182>
 810207a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810207c:	2200      	movs	r2, #0
 810207e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8102082:	f7ff fd47 	bl	8101b14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8102086:	1d3a      	adds	r2, r7, #4
 8102088:	f107 0314 	add.w	r3, r7, #20
 810208c:	4611      	mov	r1, r2
 810208e:	4618      	mov	r0, r3
 8102090:	f001 f81e 	bl	81030d0 <xTaskCheckForTimeOut>
 8102094:	4603      	mov	r3, r0
 8102096:	2b00      	cmp	r3, #0
 8102098:	d124      	bne.n	81020e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 810209a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810209c:	f000 faa2 	bl	81025e4 <prvIsQueueFull>
 81020a0:	4603      	mov	r3, r0
 81020a2:	2b00      	cmp	r3, #0
 81020a4:	d018      	beq.n	81020d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 81020a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81020a8:	3310      	adds	r3, #16
 81020aa:	687a      	ldr	r2, [r7, #4]
 81020ac:	4611      	mov	r1, r2
 81020ae:	4618      	mov	r0, r3
 81020b0:	f000 ff44 	bl	8102f3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 81020b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81020b6:	f000 fa2d 	bl	8102514 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 81020ba:	f000 fd73 	bl	8102ba4 <xTaskResumeAll>
 81020be:	4603      	mov	r3, r0
 81020c0:	2b00      	cmp	r3, #0
 81020c2:	f47f af7c 	bne.w	8101fbe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 81020c6:	4b0c      	ldr	r3, [pc, #48]	; (81020f8 <xQueueGenericSend+0x1f8>)
 81020c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81020cc:	601a      	str	r2, [r3, #0]
 81020ce:	f3bf 8f4f 	dsb	sy
 81020d2:	f3bf 8f6f 	isb	sy
 81020d6:	e772      	b.n	8101fbe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 81020d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81020da:	f000 fa1b 	bl	8102514 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 81020de:	f000 fd61 	bl	8102ba4 <xTaskResumeAll>
 81020e2:	e76c      	b.n	8101fbe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 81020e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81020e6:	f000 fa15 	bl	8102514 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 81020ea:	f000 fd5b 	bl	8102ba4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 81020ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 81020f0:	4618      	mov	r0, r3
 81020f2:	3738      	adds	r7, #56	; 0x38
 81020f4:	46bd      	mov	sp, r7
 81020f6:	bd80      	pop	{r7, pc}
 81020f8:	e000ed04 	.word	0xe000ed04

081020fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 81020fc:	b580      	push	{r7, lr}
 81020fe:	b090      	sub	sp, #64	; 0x40
 8102100:	af00      	add	r7, sp, #0
 8102102:	60f8      	str	r0, [r7, #12]
 8102104:	60b9      	str	r1, [r7, #8]
 8102106:	607a      	str	r2, [r7, #4]
 8102108:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810210a:	68fb      	ldr	r3, [r7, #12]
 810210c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 810210e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102110:	2b00      	cmp	r3, #0
 8102112:	d10a      	bne.n	810212a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8102114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102118:	f383 8811 	msr	BASEPRI, r3
 810211c:	f3bf 8f6f 	isb	sy
 8102120:	f3bf 8f4f 	dsb	sy
 8102124:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8102126:	bf00      	nop
 8102128:	e7fe      	b.n	8102128 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810212a:	68bb      	ldr	r3, [r7, #8]
 810212c:	2b00      	cmp	r3, #0
 810212e:	d103      	bne.n	8102138 <xQueueGenericSendFromISR+0x3c>
 8102130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102134:	2b00      	cmp	r3, #0
 8102136:	d101      	bne.n	810213c <xQueueGenericSendFromISR+0x40>
 8102138:	2301      	movs	r3, #1
 810213a:	e000      	b.n	810213e <xQueueGenericSendFromISR+0x42>
 810213c:	2300      	movs	r3, #0
 810213e:	2b00      	cmp	r3, #0
 8102140:	d10a      	bne.n	8102158 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8102142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102146:	f383 8811 	msr	BASEPRI, r3
 810214a:	f3bf 8f6f 	isb	sy
 810214e:	f3bf 8f4f 	dsb	sy
 8102152:	627b      	str	r3, [r7, #36]	; 0x24
}
 8102154:	bf00      	nop
 8102156:	e7fe      	b.n	8102156 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8102158:	683b      	ldr	r3, [r7, #0]
 810215a:	2b02      	cmp	r3, #2
 810215c:	d103      	bne.n	8102166 <xQueueGenericSendFromISR+0x6a>
 810215e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102162:	2b01      	cmp	r3, #1
 8102164:	d101      	bne.n	810216a <xQueueGenericSendFromISR+0x6e>
 8102166:	2301      	movs	r3, #1
 8102168:	e000      	b.n	810216c <xQueueGenericSendFromISR+0x70>
 810216a:	2300      	movs	r3, #0
 810216c:	2b00      	cmp	r3, #0
 810216e:	d10a      	bne.n	8102186 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8102170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102174:	f383 8811 	msr	BASEPRI, r3
 8102178:	f3bf 8f6f 	isb	sy
 810217c:	f3bf 8f4f 	dsb	sy
 8102180:	623b      	str	r3, [r7, #32]
}
 8102182:	bf00      	nop
 8102184:	e7fe      	b.n	8102184 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8102186:	f7ff fd77 	bl	8101c78 <vPortValidateInterruptPriority>
	__asm volatile
 810218a:	f3ef 8211 	mrs	r2, BASEPRI
 810218e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102192:	f383 8811 	msr	BASEPRI, r3
 8102196:	f3bf 8f6f 	isb	sy
 810219a:	f3bf 8f4f 	dsb	sy
 810219e:	61fa      	str	r2, [r7, #28]
 81021a0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 81021a2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 81021a4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 81021a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81021a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81021aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81021ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81021ae:	429a      	cmp	r2, r3
 81021b0:	d302      	bcc.n	81021b8 <xQueueGenericSendFromISR+0xbc>
 81021b2:	683b      	ldr	r3, [r7, #0]
 81021b4:	2b02      	cmp	r3, #2
 81021b6:	d12f      	bne.n	8102218 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 81021b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81021ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81021be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 81021c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81021c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81021c6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 81021c8:	683a      	ldr	r2, [r7, #0]
 81021ca:	68b9      	ldr	r1, [r7, #8]
 81021cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 81021ce:	f000 f911 	bl	81023f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 81021d2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 81021d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81021da:	d112      	bne.n	8102202 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 81021dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81021e0:	2b00      	cmp	r3, #0
 81021e2:	d016      	beq.n	8102212 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 81021e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81021e6:	3324      	adds	r3, #36	; 0x24
 81021e8:	4618      	mov	r0, r3
 81021ea:	f000 fef7 	bl	8102fdc <xTaskRemoveFromEventList>
 81021ee:	4603      	mov	r3, r0
 81021f0:	2b00      	cmp	r3, #0
 81021f2:	d00e      	beq.n	8102212 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 81021f4:	687b      	ldr	r3, [r7, #4]
 81021f6:	2b00      	cmp	r3, #0
 81021f8:	d00b      	beq.n	8102212 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 81021fa:	687b      	ldr	r3, [r7, #4]
 81021fc:	2201      	movs	r2, #1
 81021fe:	601a      	str	r2, [r3, #0]
 8102200:	e007      	b.n	8102212 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8102202:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8102206:	3301      	adds	r3, #1
 8102208:	b2db      	uxtb	r3, r3
 810220a:	b25a      	sxtb	r2, r3
 810220c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810220e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8102212:	2301      	movs	r3, #1
 8102214:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8102216:	e001      	b.n	810221c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8102218:	2300      	movs	r3, #0
 810221a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810221c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810221e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8102220:	697b      	ldr	r3, [r7, #20]
 8102222:	f383 8811 	msr	BASEPRI, r3
}
 8102226:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8102228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 810222a:	4618      	mov	r0, r3
 810222c:	3740      	adds	r7, #64	; 0x40
 810222e:	46bd      	mov	sp, r7
 8102230:	bd80      	pop	{r7, pc}
	...

08102234 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8102234:	b580      	push	{r7, lr}
 8102236:	b08c      	sub	sp, #48	; 0x30
 8102238:	af00      	add	r7, sp, #0
 810223a:	60f8      	str	r0, [r7, #12]
 810223c:	60b9      	str	r1, [r7, #8]
 810223e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8102240:	2300      	movs	r3, #0
 8102242:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8102244:	68fb      	ldr	r3, [r7, #12]
 8102246:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8102248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810224a:	2b00      	cmp	r3, #0
 810224c:	d10a      	bne.n	8102264 <xQueueReceive+0x30>
	__asm volatile
 810224e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102252:	f383 8811 	msr	BASEPRI, r3
 8102256:	f3bf 8f6f 	isb	sy
 810225a:	f3bf 8f4f 	dsb	sy
 810225e:	623b      	str	r3, [r7, #32]
}
 8102260:	bf00      	nop
 8102262:	e7fe      	b.n	8102262 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8102264:	68bb      	ldr	r3, [r7, #8]
 8102266:	2b00      	cmp	r3, #0
 8102268:	d103      	bne.n	8102272 <xQueueReceive+0x3e>
 810226a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810226e:	2b00      	cmp	r3, #0
 8102270:	d101      	bne.n	8102276 <xQueueReceive+0x42>
 8102272:	2301      	movs	r3, #1
 8102274:	e000      	b.n	8102278 <xQueueReceive+0x44>
 8102276:	2300      	movs	r3, #0
 8102278:	2b00      	cmp	r3, #0
 810227a:	d10a      	bne.n	8102292 <xQueueReceive+0x5e>
	__asm volatile
 810227c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102280:	f383 8811 	msr	BASEPRI, r3
 8102284:	f3bf 8f6f 	isb	sy
 8102288:	f3bf 8f4f 	dsb	sy
 810228c:	61fb      	str	r3, [r7, #28]
}
 810228e:	bf00      	nop
 8102290:	e7fe      	b.n	8102290 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8102292:	f001 f865 	bl	8103360 <xTaskGetSchedulerState>
 8102296:	4603      	mov	r3, r0
 8102298:	2b00      	cmp	r3, #0
 810229a:	d102      	bne.n	81022a2 <xQueueReceive+0x6e>
 810229c:	687b      	ldr	r3, [r7, #4]
 810229e:	2b00      	cmp	r3, #0
 81022a0:	d101      	bne.n	81022a6 <xQueueReceive+0x72>
 81022a2:	2301      	movs	r3, #1
 81022a4:	e000      	b.n	81022a8 <xQueueReceive+0x74>
 81022a6:	2300      	movs	r3, #0
 81022a8:	2b00      	cmp	r3, #0
 81022aa:	d10a      	bne.n	81022c2 <xQueueReceive+0x8e>
	__asm volatile
 81022ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 81022b0:	f383 8811 	msr	BASEPRI, r3
 81022b4:	f3bf 8f6f 	isb	sy
 81022b8:	f3bf 8f4f 	dsb	sy
 81022bc:	61bb      	str	r3, [r7, #24]
}
 81022be:	bf00      	nop
 81022c0:	e7fe      	b.n	81022c0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 81022c2:	f7ff fbf7 	bl	8101ab4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 81022c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81022c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81022ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 81022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81022ce:	2b00      	cmp	r3, #0
 81022d0:	d01f      	beq.n	8102312 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 81022d2:	68b9      	ldr	r1, [r7, #8]
 81022d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81022d6:	f000 f8f7 	bl	81024c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 81022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81022dc:	1e5a      	subs	r2, r3, #1
 81022de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81022e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81022e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81022e4:	691b      	ldr	r3, [r3, #16]
 81022e6:	2b00      	cmp	r3, #0
 81022e8:	d00f      	beq.n	810230a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81022ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81022ec:	3310      	adds	r3, #16
 81022ee:	4618      	mov	r0, r3
 81022f0:	f000 fe74 	bl	8102fdc <xTaskRemoveFromEventList>
 81022f4:	4603      	mov	r3, r0
 81022f6:	2b00      	cmp	r3, #0
 81022f8:	d007      	beq.n	810230a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 81022fa:	4b3d      	ldr	r3, [pc, #244]	; (81023f0 <xQueueReceive+0x1bc>)
 81022fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102300:	601a      	str	r2, [r3, #0]
 8102302:	f3bf 8f4f 	dsb	sy
 8102306:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810230a:	f7ff fc03 	bl	8101b14 <vPortExitCritical>
				return pdPASS;
 810230e:	2301      	movs	r3, #1
 8102310:	e069      	b.n	81023e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8102312:	687b      	ldr	r3, [r7, #4]
 8102314:	2b00      	cmp	r3, #0
 8102316:	d103      	bne.n	8102320 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8102318:	f7ff fbfc 	bl	8101b14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810231c:	2300      	movs	r3, #0
 810231e:	e062      	b.n	81023e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8102320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102322:	2b00      	cmp	r3, #0
 8102324:	d106      	bne.n	8102334 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8102326:	f107 0310 	add.w	r3, r7, #16
 810232a:	4618      	mov	r0, r3
 810232c:	f000 feba 	bl	81030a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8102330:	2301      	movs	r3, #1
 8102332:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8102334:	f7ff fbee 	bl	8101b14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8102338:	f000 fc26 	bl	8102b88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810233c:	f7ff fbba 	bl	8101ab4 <vPortEnterCritical>
 8102340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102342:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8102346:	b25b      	sxtb	r3, r3
 8102348:	f1b3 3fff 	cmp.w	r3, #4294967295
 810234c:	d103      	bne.n	8102356 <xQueueReceive+0x122>
 810234e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102350:	2200      	movs	r2, #0
 8102352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8102356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810235c:	b25b      	sxtb	r3, r3
 810235e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102362:	d103      	bne.n	810236c <xQueueReceive+0x138>
 8102364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102366:	2200      	movs	r2, #0
 8102368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810236c:	f7ff fbd2 	bl	8101b14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8102370:	1d3a      	adds	r2, r7, #4
 8102372:	f107 0310 	add.w	r3, r7, #16
 8102376:	4611      	mov	r1, r2
 8102378:	4618      	mov	r0, r3
 810237a:	f000 fea9 	bl	81030d0 <xTaskCheckForTimeOut>
 810237e:	4603      	mov	r3, r0
 8102380:	2b00      	cmp	r3, #0
 8102382:	d123      	bne.n	81023cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8102384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8102386:	f000 f917 	bl	81025b8 <prvIsQueueEmpty>
 810238a:	4603      	mov	r3, r0
 810238c:	2b00      	cmp	r3, #0
 810238e:	d017      	beq.n	81023c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8102390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102392:	3324      	adds	r3, #36	; 0x24
 8102394:	687a      	ldr	r2, [r7, #4]
 8102396:	4611      	mov	r1, r2
 8102398:	4618      	mov	r0, r3
 810239a:	f000 fdcf 	bl	8102f3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810239e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81023a0:	f000 f8b8 	bl	8102514 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 81023a4:	f000 fbfe 	bl	8102ba4 <xTaskResumeAll>
 81023a8:	4603      	mov	r3, r0
 81023aa:	2b00      	cmp	r3, #0
 81023ac:	d189      	bne.n	81022c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 81023ae:	4b10      	ldr	r3, [pc, #64]	; (81023f0 <xQueueReceive+0x1bc>)
 81023b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81023b4:	601a      	str	r2, [r3, #0]
 81023b6:	f3bf 8f4f 	dsb	sy
 81023ba:	f3bf 8f6f 	isb	sy
 81023be:	e780      	b.n	81022c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 81023c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81023c2:	f000 f8a7 	bl	8102514 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 81023c6:	f000 fbed 	bl	8102ba4 <xTaskResumeAll>
 81023ca:	e77a      	b.n	81022c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 81023cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81023ce:	f000 f8a1 	bl	8102514 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 81023d2:	f000 fbe7 	bl	8102ba4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81023d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81023d8:	f000 f8ee 	bl	81025b8 <prvIsQueueEmpty>
 81023dc:	4603      	mov	r3, r0
 81023de:	2b00      	cmp	r3, #0
 81023e0:	f43f af6f 	beq.w	81022c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 81023e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 81023e6:	4618      	mov	r0, r3
 81023e8:	3730      	adds	r7, #48	; 0x30
 81023ea:	46bd      	mov	sp, r7
 81023ec:	bd80      	pop	{r7, pc}
 81023ee:	bf00      	nop
 81023f0:	e000ed04 	.word	0xe000ed04

081023f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 81023f4:	b580      	push	{r7, lr}
 81023f6:	b086      	sub	sp, #24
 81023f8:	af00      	add	r7, sp, #0
 81023fa:	60f8      	str	r0, [r7, #12]
 81023fc:	60b9      	str	r1, [r7, #8]
 81023fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8102400:	2300      	movs	r3, #0
 8102402:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8102404:	68fb      	ldr	r3, [r7, #12]
 8102406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102408:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810240a:	68fb      	ldr	r3, [r7, #12]
 810240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810240e:	2b00      	cmp	r3, #0
 8102410:	d10d      	bne.n	810242e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8102412:	68fb      	ldr	r3, [r7, #12]
 8102414:	681b      	ldr	r3, [r3, #0]
 8102416:	2b00      	cmp	r3, #0
 8102418:	d14d      	bne.n	81024b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810241a:	68fb      	ldr	r3, [r7, #12]
 810241c:	689b      	ldr	r3, [r3, #8]
 810241e:	4618      	mov	r0, r3
 8102420:	f000 ffbc 	bl	810339c <xTaskPriorityDisinherit>
 8102424:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8102426:	68fb      	ldr	r3, [r7, #12]
 8102428:	2200      	movs	r2, #0
 810242a:	609a      	str	r2, [r3, #8]
 810242c:	e043      	b.n	81024b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810242e:	687b      	ldr	r3, [r7, #4]
 8102430:	2b00      	cmp	r3, #0
 8102432:	d119      	bne.n	8102468 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8102434:	68fb      	ldr	r3, [r7, #12]
 8102436:	6858      	ldr	r0, [r3, #4]
 8102438:	68fb      	ldr	r3, [r7, #12]
 810243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810243c:	461a      	mov	r2, r3
 810243e:	68b9      	ldr	r1, [r7, #8]
 8102440:	f001 fbe2 	bl	8103c08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8102444:	68fb      	ldr	r3, [r7, #12]
 8102446:	685a      	ldr	r2, [r3, #4]
 8102448:	68fb      	ldr	r3, [r7, #12]
 810244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810244c:	441a      	add	r2, r3
 810244e:	68fb      	ldr	r3, [r7, #12]
 8102450:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8102452:	68fb      	ldr	r3, [r7, #12]
 8102454:	685a      	ldr	r2, [r3, #4]
 8102456:	68fb      	ldr	r3, [r7, #12]
 8102458:	689b      	ldr	r3, [r3, #8]
 810245a:	429a      	cmp	r2, r3
 810245c:	d32b      	bcc.n	81024b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810245e:	68fb      	ldr	r3, [r7, #12]
 8102460:	681a      	ldr	r2, [r3, #0]
 8102462:	68fb      	ldr	r3, [r7, #12]
 8102464:	605a      	str	r2, [r3, #4]
 8102466:	e026      	b.n	81024b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8102468:	68fb      	ldr	r3, [r7, #12]
 810246a:	68d8      	ldr	r0, [r3, #12]
 810246c:	68fb      	ldr	r3, [r7, #12]
 810246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102470:	461a      	mov	r2, r3
 8102472:	68b9      	ldr	r1, [r7, #8]
 8102474:	f001 fbc8 	bl	8103c08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8102478:	68fb      	ldr	r3, [r7, #12]
 810247a:	68da      	ldr	r2, [r3, #12]
 810247c:	68fb      	ldr	r3, [r7, #12]
 810247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102480:	425b      	negs	r3, r3
 8102482:	441a      	add	r2, r3
 8102484:	68fb      	ldr	r3, [r7, #12]
 8102486:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8102488:	68fb      	ldr	r3, [r7, #12]
 810248a:	68da      	ldr	r2, [r3, #12]
 810248c:	68fb      	ldr	r3, [r7, #12]
 810248e:	681b      	ldr	r3, [r3, #0]
 8102490:	429a      	cmp	r2, r3
 8102492:	d207      	bcs.n	81024a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8102494:	68fb      	ldr	r3, [r7, #12]
 8102496:	689a      	ldr	r2, [r3, #8]
 8102498:	68fb      	ldr	r3, [r7, #12]
 810249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810249c:	425b      	negs	r3, r3
 810249e:	441a      	add	r2, r3
 81024a0:	68fb      	ldr	r3, [r7, #12]
 81024a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 81024a4:	687b      	ldr	r3, [r7, #4]
 81024a6:	2b02      	cmp	r3, #2
 81024a8:	d105      	bne.n	81024b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 81024aa:	693b      	ldr	r3, [r7, #16]
 81024ac:	2b00      	cmp	r3, #0
 81024ae:	d002      	beq.n	81024b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 81024b0:	693b      	ldr	r3, [r7, #16]
 81024b2:	3b01      	subs	r3, #1
 81024b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 81024b6:	693b      	ldr	r3, [r7, #16]
 81024b8:	1c5a      	adds	r2, r3, #1
 81024ba:	68fb      	ldr	r3, [r7, #12]
 81024bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 81024be:	697b      	ldr	r3, [r7, #20]
}
 81024c0:	4618      	mov	r0, r3
 81024c2:	3718      	adds	r7, #24
 81024c4:	46bd      	mov	sp, r7
 81024c6:	bd80      	pop	{r7, pc}

081024c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 81024c8:	b580      	push	{r7, lr}
 81024ca:	b082      	sub	sp, #8
 81024cc:	af00      	add	r7, sp, #0
 81024ce:	6078      	str	r0, [r7, #4]
 81024d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 81024d2:	687b      	ldr	r3, [r7, #4]
 81024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81024d6:	2b00      	cmp	r3, #0
 81024d8:	d018      	beq.n	810250c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 81024da:	687b      	ldr	r3, [r7, #4]
 81024dc:	68da      	ldr	r2, [r3, #12]
 81024de:	687b      	ldr	r3, [r7, #4]
 81024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81024e2:	441a      	add	r2, r3
 81024e4:	687b      	ldr	r3, [r7, #4]
 81024e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 81024e8:	687b      	ldr	r3, [r7, #4]
 81024ea:	68da      	ldr	r2, [r3, #12]
 81024ec:	687b      	ldr	r3, [r7, #4]
 81024ee:	689b      	ldr	r3, [r3, #8]
 81024f0:	429a      	cmp	r2, r3
 81024f2:	d303      	bcc.n	81024fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 81024f4:	687b      	ldr	r3, [r7, #4]
 81024f6:	681a      	ldr	r2, [r3, #0]
 81024f8:	687b      	ldr	r3, [r7, #4]
 81024fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 81024fc:	687b      	ldr	r3, [r7, #4]
 81024fe:	68d9      	ldr	r1, [r3, #12]
 8102500:	687b      	ldr	r3, [r7, #4]
 8102502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102504:	461a      	mov	r2, r3
 8102506:	6838      	ldr	r0, [r7, #0]
 8102508:	f001 fb7e 	bl	8103c08 <memcpy>
	}
}
 810250c:	bf00      	nop
 810250e:	3708      	adds	r7, #8
 8102510:	46bd      	mov	sp, r7
 8102512:	bd80      	pop	{r7, pc}

08102514 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8102514:	b580      	push	{r7, lr}
 8102516:	b084      	sub	sp, #16
 8102518:	af00      	add	r7, sp, #0
 810251a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810251c:	f7ff faca 	bl	8101ab4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8102520:	687b      	ldr	r3, [r7, #4]
 8102522:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8102526:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8102528:	e011      	b.n	810254e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810252a:	687b      	ldr	r3, [r7, #4]
 810252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810252e:	2b00      	cmp	r3, #0
 8102530:	d012      	beq.n	8102558 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8102532:	687b      	ldr	r3, [r7, #4]
 8102534:	3324      	adds	r3, #36	; 0x24
 8102536:	4618      	mov	r0, r3
 8102538:	f000 fd50 	bl	8102fdc <xTaskRemoveFromEventList>
 810253c:	4603      	mov	r3, r0
 810253e:	2b00      	cmp	r3, #0
 8102540:	d001      	beq.n	8102546 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8102542:	f000 fe27 	bl	8103194 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8102546:	7bfb      	ldrb	r3, [r7, #15]
 8102548:	3b01      	subs	r3, #1
 810254a:	b2db      	uxtb	r3, r3
 810254c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810254e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8102552:	2b00      	cmp	r3, #0
 8102554:	dce9      	bgt.n	810252a <prvUnlockQueue+0x16>
 8102556:	e000      	b.n	810255a <prvUnlockQueue+0x46>
					break;
 8102558:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810255a:	687b      	ldr	r3, [r7, #4]
 810255c:	22ff      	movs	r2, #255	; 0xff
 810255e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8102562:	f7ff fad7 	bl	8101b14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8102566:	f7ff faa5 	bl	8101ab4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 810256a:	687b      	ldr	r3, [r7, #4]
 810256c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8102570:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8102572:	e011      	b.n	8102598 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8102574:	687b      	ldr	r3, [r7, #4]
 8102576:	691b      	ldr	r3, [r3, #16]
 8102578:	2b00      	cmp	r3, #0
 810257a:	d012      	beq.n	81025a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810257c:	687b      	ldr	r3, [r7, #4]
 810257e:	3310      	adds	r3, #16
 8102580:	4618      	mov	r0, r3
 8102582:	f000 fd2b 	bl	8102fdc <xTaskRemoveFromEventList>
 8102586:	4603      	mov	r3, r0
 8102588:	2b00      	cmp	r3, #0
 810258a:	d001      	beq.n	8102590 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 810258c:	f000 fe02 	bl	8103194 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8102590:	7bbb      	ldrb	r3, [r7, #14]
 8102592:	3b01      	subs	r3, #1
 8102594:	b2db      	uxtb	r3, r3
 8102596:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8102598:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810259c:	2b00      	cmp	r3, #0
 810259e:	dce9      	bgt.n	8102574 <prvUnlockQueue+0x60>
 81025a0:	e000      	b.n	81025a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 81025a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 81025a4:	687b      	ldr	r3, [r7, #4]
 81025a6:	22ff      	movs	r2, #255	; 0xff
 81025a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 81025ac:	f7ff fab2 	bl	8101b14 <vPortExitCritical>
}
 81025b0:	bf00      	nop
 81025b2:	3710      	adds	r7, #16
 81025b4:	46bd      	mov	sp, r7
 81025b6:	bd80      	pop	{r7, pc}

081025b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 81025b8:	b580      	push	{r7, lr}
 81025ba:	b084      	sub	sp, #16
 81025bc:	af00      	add	r7, sp, #0
 81025be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 81025c0:	f7ff fa78 	bl	8101ab4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 81025c4:	687b      	ldr	r3, [r7, #4]
 81025c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81025c8:	2b00      	cmp	r3, #0
 81025ca:	d102      	bne.n	81025d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 81025cc:	2301      	movs	r3, #1
 81025ce:	60fb      	str	r3, [r7, #12]
 81025d0:	e001      	b.n	81025d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 81025d2:	2300      	movs	r3, #0
 81025d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 81025d6:	f7ff fa9d 	bl	8101b14 <vPortExitCritical>

	return xReturn;
 81025da:	68fb      	ldr	r3, [r7, #12]
}
 81025dc:	4618      	mov	r0, r3
 81025de:	3710      	adds	r7, #16
 81025e0:	46bd      	mov	sp, r7
 81025e2:	bd80      	pop	{r7, pc}

081025e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 81025e4:	b580      	push	{r7, lr}
 81025e6:	b084      	sub	sp, #16
 81025e8:	af00      	add	r7, sp, #0
 81025ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 81025ec:	f7ff fa62 	bl	8101ab4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 81025f0:	687b      	ldr	r3, [r7, #4]
 81025f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81025f4:	687b      	ldr	r3, [r7, #4]
 81025f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81025f8:	429a      	cmp	r2, r3
 81025fa:	d102      	bne.n	8102602 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 81025fc:	2301      	movs	r3, #1
 81025fe:	60fb      	str	r3, [r7, #12]
 8102600:	e001      	b.n	8102606 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8102602:	2300      	movs	r3, #0
 8102604:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8102606:	f7ff fa85 	bl	8101b14 <vPortExitCritical>

	return xReturn;
 810260a:	68fb      	ldr	r3, [r7, #12]
}
 810260c:	4618      	mov	r0, r3
 810260e:	3710      	adds	r7, #16
 8102610:	46bd      	mov	sp, r7
 8102612:	bd80      	pop	{r7, pc}

08102614 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8102614:	b480      	push	{r7}
 8102616:	b085      	sub	sp, #20
 8102618:	af00      	add	r7, sp, #0
 810261a:	6078      	str	r0, [r7, #4]
 810261c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810261e:	2300      	movs	r3, #0
 8102620:	60fb      	str	r3, [r7, #12]
 8102622:	e014      	b.n	810264e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8102624:	4a0f      	ldr	r2, [pc, #60]	; (8102664 <vQueueAddToRegistry+0x50>)
 8102626:	68fb      	ldr	r3, [r7, #12]
 8102628:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 810262c:	2b00      	cmp	r3, #0
 810262e:	d10b      	bne.n	8102648 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8102630:	490c      	ldr	r1, [pc, #48]	; (8102664 <vQueueAddToRegistry+0x50>)
 8102632:	68fb      	ldr	r3, [r7, #12]
 8102634:	683a      	ldr	r2, [r7, #0]
 8102636:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 810263a:	4a0a      	ldr	r2, [pc, #40]	; (8102664 <vQueueAddToRegistry+0x50>)
 810263c:	68fb      	ldr	r3, [r7, #12]
 810263e:	00db      	lsls	r3, r3, #3
 8102640:	4413      	add	r3, r2
 8102642:	687a      	ldr	r2, [r7, #4]
 8102644:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8102646:	e006      	b.n	8102656 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8102648:	68fb      	ldr	r3, [r7, #12]
 810264a:	3301      	adds	r3, #1
 810264c:	60fb      	str	r3, [r7, #12]
 810264e:	68fb      	ldr	r3, [r7, #12]
 8102650:	2b07      	cmp	r3, #7
 8102652:	d9e7      	bls.n	8102624 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8102654:	bf00      	nop
 8102656:	bf00      	nop
 8102658:	3714      	adds	r7, #20
 810265a:	46bd      	mov	sp, r7
 810265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102660:	4770      	bx	lr
 8102662:	bf00      	nop
 8102664:	10004a70 	.word	0x10004a70

08102668 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8102668:	b580      	push	{r7, lr}
 810266a:	b086      	sub	sp, #24
 810266c:	af00      	add	r7, sp, #0
 810266e:	60f8      	str	r0, [r7, #12]
 8102670:	60b9      	str	r1, [r7, #8]
 8102672:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8102674:	68fb      	ldr	r3, [r7, #12]
 8102676:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8102678:	f7ff fa1c 	bl	8101ab4 <vPortEnterCritical>
 810267c:	697b      	ldr	r3, [r7, #20]
 810267e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8102682:	b25b      	sxtb	r3, r3
 8102684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102688:	d103      	bne.n	8102692 <vQueueWaitForMessageRestricted+0x2a>
 810268a:	697b      	ldr	r3, [r7, #20]
 810268c:	2200      	movs	r2, #0
 810268e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8102692:	697b      	ldr	r3, [r7, #20]
 8102694:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8102698:	b25b      	sxtb	r3, r3
 810269a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810269e:	d103      	bne.n	81026a8 <vQueueWaitForMessageRestricted+0x40>
 81026a0:	697b      	ldr	r3, [r7, #20]
 81026a2:	2200      	movs	r2, #0
 81026a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81026a8:	f7ff fa34 	bl	8101b14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 81026ac:	697b      	ldr	r3, [r7, #20]
 81026ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81026b0:	2b00      	cmp	r3, #0
 81026b2:	d106      	bne.n	81026c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 81026b4:	697b      	ldr	r3, [r7, #20]
 81026b6:	3324      	adds	r3, #36	; 0x24
 81026b8:	687a      	ldr	r2, [r7, #4]
 81026ba:	68b9      	ldr	r1, [r7, #8]
 81026bc:	4618      	mov	r0, r3
 81026be:	f000 fc61 	bl	8102f84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 81026c2:	6978      	ldr	r0, [r7, #20]
 81026c4:	f7ff ff26 	bl	8102514 <prvUnlockQueue>
	}
 81026c8:	bf00      	nop
 81026ca:	3718      	adds	r7, #24
 81026cc:	46bd      	mov	sp, r7
 81026ce:	bd80      	pop	{r7, pc}

081026d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 81026d0:	b580      	push	{r7, lr}
 81026d2:	b08e      	sub	sp, #56	; 0x38
 81026d4:	af04      	add	r7, sp, #16
 81026d6:	60f8      	str	r0, [r7, #12]
 81026d8:	60b9      	str	r1, [r7, #8]
 81026da:	607a      	str	r2, [r7, #4]
 81026dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 81026de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81026e0:	2b00      	cmp	r3, #0
 81026e2:	d10a      	bne.n	81026fa <xTaskCreateStatic+0x2a>
	__asm volatile
 81026e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81026e8:	f383 8811 	msr	BASEPRI, r3
 81026ec:	f3bf 8f6f 	isb	sy
 81026f0:	f3bf 8f4f 	dsb	sy
 81026f4:	623b      	str	r3, [r7, #32]
}
 81026f6:	bf00      	nop
 81026f8:	e7fe      	b.n	81026f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 81026fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81026fc:	2b00      	cmp	r3, #0
 81026fe:	d10a      	bne.n	8102716 <xTaskCreateStatic+0x46>
	__asm volatile
 8102700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102704:	f383 8811 	msr	BASEPRI, r3
 8102708:	f3bf 8f6f 	isb	sy
 810270c:	f3bf 8f4f 	dsb	sy
 8102710:	61fb      	str	r3, [r7, #28]
}
 8102712:	bf00      	nop
 8102714:	e7fe      	b.n	8102714 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8102716:	23bc      	movs	r3, #188	; 0xbc
 8102718:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 810271a:	693b      	ldr	r3, [r7, #16]
 810271c:	2bbc      	cmp	r3, #188	; 0xbc
 810271e:	d00a      	beq.n	8102736 <xTaskCreateStatic+0x66>
	__asm volatile
 8102720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102724:	f383 8811 	msr	BASEPRI, r3
 8102728:	f3bf 8f6f 	isb	sy
 810272c:	f3bf 8f4f 	dsb	sy
 8102730:	61bb      	str	r3, [r7, #24]
}
 8102732:	bf00      	nop
 8102734:	e7fe      	b.n	8102734 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8102736:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8102738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810273a:	2b00      	cmp	r3, #0
 810273c:	d01e      	beq.n	810277c <xTaskCreateStatic+0xac>
 810273e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102740:	2b00      	cmp	r3, #0
 8102742:	d01b      	beq.n	810277c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8102744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102746:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8102748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810274a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810274c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 810274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102750:	2202      	movs	r2, #2
 8102752:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8102756:	2300      	movs	r3, #0
 8102758:	9303      	str	r3, [sp, #12]
 810275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810275c:	9302      	str	r3, [sp, #8]
 810275e:	f107 0314 	add.w	r3, r7, #20
 8102762:	9301      	str	r3, [sp, #4]
 8102764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102766:	9300      	str	r3, [sp, #0]
 8102768:	683b      	ldr	r3, [r7, #0]
 810276a:	687a      	ldr	r2, [r7, #4]
 810276c:	68b9      	ldr	r1, [r7, #8]
 810276e:	68f8      	ldr	r0, [r7, #12]
 8102770:	f000 f850 	bl	8102814 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8102774:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8102776:	f000 f8f3 	bl	8102960 <prvAddNewTaskToReadyList>
 810277a:	e001      	b.n	8102780 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 810277c:	2300      	movs	r3, #0
 810277e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8102780:	697b      	ldr	r3, [r7, #20]
	}
 8102782:	4618      	mov	r0, r3
 8102784:	3728      	adds	r7, #40	; 0x28
 8102786:	46bd      	mov	sp, r7
 8102788:	bd80      	pop	{r7, pc}

0810278a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810278a:	b580      	push	{r7, lr}
 810278c:	b08c      	sub	sp, #48	; 0x30
 810278e:	af04      	add	r7, sp, #16
 8102790:	60f8      	str	r0, [r7, #12]
 8102792:	60b9      	str	r1, [r7, #8]
 8102794:	603b      	str	r3, [r7, #0]
 8102796:	4613      	mov	r3, r2
 8102798:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810279a:	88fb      	ldrh	r3, [r7, #6]
 810279c:	009b      	lsls	r3, r3, #2
 810279e:	4618      	mov	r0, r3
 81027a0:	f7fe fdc0 	bl	8101324 <pvPortMalloc>
 81027a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 81027a6:	697b      	ldr	r3, [r7, #20]
 81027a8:	2b00      	cmp	r3, #0
 81027aa:	d00e      	beq.n	81027ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 81027ac:	20bc      	movs	r0, #188	; 0xbc
 81027ae:	f7fe fdb9 	bl	8101324 <pvPortMalloc>
 81027b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 81027b4:	69fb      	ldr	r3, [r7, #28]
 81027b6:	2b00      	cmp	r3, #0
 81027b8:	d003      	beq.n	81027c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 81027ba:	69fb      	ldr	r3, [r7, #28]
 81027bc:	697a      	ldr	r2, [r7, #20]
 81027be:	631a      	str	r2, [r3, #48]	; 0x30
 81027c0:	e005      	b.n	81027ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 81027c2:	6978      	ldr	r0, [r7, #20]
 81027c4:	f7fe fe7a 	bl	81014bc <vPortFree>
 81027c8:	e001      	b.n	81027ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 81027ca:	2300      	movs	r3, #0
 81027cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 81027ce:	69fb      	ldr	r3, [r7, #28]
 81027d0:	2b00      	cmp	r3, #0
 81027d2:	d017      	beq.n	8102804 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 81027d4:	69fb      	ldr	r3, [r7, #28]
 81027d6:	2200      	movs	r2, #0
 81027d8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 81027dc:	88fa      	ldrh	r2, [r7, #6]
 81027de:	2300      	movs	r3, #0
 81027e0:	9303      	str	r3, [sp, #12]
 81027e2:	69fb      	ldr	r3, [r7, #28]
 81027e4:	9302      	str	r3, [sp, #8]
 81027e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81027e8:	9301      	str	r3, [sp, #4]
 81027ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81027ec:	9300      	str	r3, [sp, #0]
 81027ee:	683b      	ldr	r3, [r7, #0]
 81027f0:	68b9      	ldr	r1, [r7, #8]
 81027f2:	68f8      	ldr	r0, [r7, #12]
 81027f4:	f000 f80e 	bl	8102814 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 81027f8:	69f8      	ldr	r0, [r7, #28]
 81027fa:	f000 f8b1 	bl	8102960 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 81027fe:	2301      	movs	r3, #1
 8102800:	61bb      	str	r3, [r7, #24]
 8102802:	e002      	b.n	810280a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8102804:	f04f 33ff 	mov.w	r3, #4294967295
 8102808:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 810280a:	69bb      	ldr	r3, [r7, #24]
	}
 810280c:	4618      	mov	r0, r3
 810280e:	3720      	adds	r7, #32
 8102810:	46bd      	mov	sp, r7
 8102812:	bd80      	pop	{r7, pc}

08102814 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8102814:	b580      	push	{r7, lr}
 8102816:	b088      	sub	sp, #32
 8102818:	af00      	add	r7, sp, #0
 810281a:	60f8      	str	r0, [r7, #12]
 810281c:	60b9      	str	r1, [r7, #8]
 810281e:	607a      	str	r2, [r7, #4]
 8102820:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8102822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102824:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8102826:	687b      	ldr	r3, [r7, #4]
 8102828:	009b      	lsls	r3, r3, #2
 810282a:	461a      	mov	r2, r3
 810282c:	21a5      	movs	r1, #165	; 0xa5
 810282e:	f001 f9f9 	bl	8103c24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8102832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8102836:	687b      	ldr	r3, [r7, #4]
 8102838:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 810283c:	3b01      	subs	r3, #1
 810283e:	009b      	lsls	r3, r3, #2
 8102840:	4413      	add	r3, r2
 8102842:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8102844:	69bb      	ldr	r3, [r7, #24]
 8102846:	f023 0307 	bic.w	r3, r3, #7
 810284a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 810284c:	69bb      	ldr	r3, [r7, #24]
 810284e:	f003 0307 	and.w	r3, r3, #7
 8102852:	2b00      	cmp	r3, #0
 8102854:	d00a      	beq.n	810286c <prvInitialiseNewTask+0x58>
	__asm volatile
 8102856:	f04f 0350 	mov.w	r3, #80	; 0x50
 810285a:	f383 8811 	msr	BASEPRI, r3
 810285e:	f3bf 8f6f 	isb	sy
 8102862:	f3bf 8f4f 	dsb	sy
 8102866:	617b      	str	r3, [r7, #20]
}
 8102868:	bf00      	nop
 810286a:	e7fe      	b.n	810286a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810286c:	68bb      	ldr	r3, [r7, #8]
 810286e:	2b00      	cmp	r3, #0
 8102870:	d01f      	beq.n	81028b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8102872:	2300      	movs	r3, #0
 8102874:	61fb      	str	r3, [r7, #28]
 8102876:	e012      	b.n	810289e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8102878:	68ba      	ldr	r2, [r7, #8]
 810287a:	69fb      	ldr	r3, [r7, #28]
 810287c:	4413      	add	r3, r2
 810287e:	7819      	ldrb	r1, [r3, #0]
 8102880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8102882:	69fb      	ldr	r3, [r7, #28]
 8102884:	4413      	add	r3, r2
 8102886:	3334      	adds	r3, #52	; 0x34
 8102888:	460a      	mov	r2, r1
 810288a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810288c:	68ba      	ldr	r2, [r7, #8]
 810288e:	69fb      	ldr	r3, [r7, #28]
 8102890:	4413      	add	r3, r2
 8102892:	781b      	ldrb	r3, [r3, #0]
 8102894:	2b00      	cmp	r3, #0
 8102896:	d006      	beq.n	81028a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8102898:	69fb      	ldr	r3, [r7, #28]
 810289a:	3301      	adds	r3, #1
 810289c:	61fb      	str	r3, [r7, #28]
 810289e:	69fb      	ldr	r3, [r7, #28]
 81028a0:	2b0f      	cmp	r3, #15
 81028a2:	d9e9      	bls.n	8102878 <prvInitialiseNewTask+0x64>
 81028a4:	e000      	b.n	81028a8 <prvInitialiseNewTask+0x94>
			{
				break;
 81028a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 81028a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81028aa:	2200      	movs	r2, #0
 81028ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 81028b0:	e003      	b.n	81028ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 81028b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81028b4:	2200      	movs	r2, #0
 81028b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 81028ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81028bc:	2b37      	cmp	r3, #55	; 0x37
 81028be:	d901      	bls.n	81028c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 81028c0:	2337      	movs	r3, #55	; 0x37
 81028c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 81028c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81028c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81028c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 81028ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81028cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81028ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 81028d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81028d2:	2200      	movs	r2, #0
 81028d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 81028d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81028d8:	3304      	adds	r3, #4
 81028da:	4618      	mov	r0, r3
 81028dc:	f7fe ff2c 	bl	8101738 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 81028e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81028e2:	3318      	adds	r3, #24
 81028e4:	4618      	mov	r0, r3
 81028e6:	f7fe ff27 	bl	8101738 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 81028ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81028ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81028ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81028f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81028f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 81028f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81028f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 81028fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81028fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81028fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8102900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102902:	2200      	movs	r2, #0
 8102904:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8102908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810290a:	2200      	movs	r2, #0
 810290c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8102910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102912:	3354      	adds	r3, #84	; 0x54
 8102914:	2260      	movs	r2, #96	; 0x60
 8102916:	2100      	movs	r1, #0
 8102918:	4618      	mov	r0, r3
 810291a:	f001 f983 	bl	8103c24 <memset>
 810291e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102920:	4a0c      	ldr	r2, [pc, #48]	; (8102954 <prvInitialiseNewTask+0x140>)
 8102922:	659a      	str	r2, [r3, #88]	; 0x58
 8102924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102926:	4a0c      	ldr	r2, [pc, #48]	; (8102958 <prvInitialiseNewTask+0x144>)
 8102928:	65da      	str	r2, [r3, #92]	; 0x5c
 810292a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810292c:	4a0b      	ldr	r2, [pc, #44]	; (810295c <prvInitialiseNewTask+0x148>)
 810292e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8102930:	683a      	ldr	r2, [r7, #0]
 8102932:	68f9      	ldr	r1, [r7, #12]
 8102934:	69b8      	ldr	r0, [r7, #24]
 8102936:	f7fe ff93 	bl	8101860 <pxPortInitialiseStack>
 810293a:	4602      	mov	r2, r0
 810293c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810293e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8102940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102942:	2b00      	cmp	r3, #0
 8102944:	d002      	beq.n	810294c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8102946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810294a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810294c:	bf00      	nop
 810294e:	3720      	adds	r7, #32
 8102950:	46bd      	mov	sp, r7
 8102952:	bd80      	pop	{r7, pc}
 8102954:	08103e50 	.word	0x08103e50
 8102958:	08103e70 	.word	0x08103e70
 810295c:	08103e30 	.word	0x08103e30

08102960 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8102960:	b580      	push	{r7, lr}
 8102962:	b082      	sub	sp, #8
 8102964:	af00      	add	r7, sp, #0
 8102966:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8102968:	f7ff f8a4 	bl	8101ab4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 810296c:	4b2d      	ldr	r3, [pc, #180]	; (8102a24 <prvAddNewTaskToReadyList+0xc4>)
 810296e:	681b      	ldr	r3, [r3, #0]
 8102970:	3301      	adds	r3, #1
 8102972:	4a2c      	ldr	r2, [pc, #176]	; (8102a24 <prvAddNewTaskToReadyList+0xc4>)
 8102974:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8102976:	4b2c      	ldr	r3, [pc, #176]	; (8102a28 <prvAddNewTaskToReadyList+0xc8>)
 8102978:	681b      	ldr	r3, [r3, #0]
 810297a:	2b00      	cmp	r3, #0
 810297c:	d109      	bne.n	8102992 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810297e:	4a2a      	ldr	r2, [pc, #168]	; (8102a28 <prvAddNewTaskToReadyList+0xc8>)
 8102980:	687b      	ldr	r3, [r7, #4]
 8102982:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8102984:	4b27      	ldr	r3, [pc, #156]	; (8102a24 <prvAddNewTaskToReadyList+0xc4>)
 8102986:	681b      	ldr	r3, [r3, #0]
 8102988:	2b01      	cmp	r3, #1
 810298a:	d110      	bne.n	81029ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 810298c:	f000 fc26 	bl	81031dc <prvInitialiseTaskLists>
 8102990:	e00d      	b.n	81029ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8102992:	4b26      	ldr	r3, [pc, #152]	; (8102a2c <prvAddNewTaskToReadyList+0xcc>)
 8102994:	681b      	ldr	r3, [r3, #0]
 8102996:	2b00      	cmp	r3, #0
 8102998:	d109      	bne.n	81029ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810299a:	4b23      	ldr	r3, [pc, #140]	; (8102a28 <prvAddNewTaskToReadyList+0xc8>)
 810299c:	681b      	ldr	r3, [r3, #0]
 810299e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81029a0:	687b      	ldr	r3, [r7, #4]
 81029a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81029a4:	429a      	cmp	r2, r3
 81029a6:	d802      	bhi.n	81029ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 81029a8:	4a1f      	ldr	r2, [pc, #124]	; (8102a28 <prvAddNewTaskToReadyList+0xc8>)
 81029aa:	687b      	ldr	r3, [r7, #4]
 81029ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 81029ae:	4b20      	ldr	r3, [pc, #128]	; (8102a30 <prvAddNewTaskToReadyList+0xd0>)
 81029b0:	681b      	ldr	r3, [r3, #0]
 81029b2:	3301      	adds	r3, #1
 81029b4:	4a1e      	ldr	r2, [pc, #120]	; (8102a30 <prvAddNewTaskToReadyList+0xd0>)
 81029b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 81029b8:	4b1d      	ldr	r3, [pc, #116]	; (8102a30 <prvAddNewTaskToReadyList+0xd0>)
 81029ba:	681a      	ldr	r2, [r3, #0]
 81029bc:	687b      	ldr	r3, [r7, #4]
 81029be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 81029c0:	687b      	ldr	r3, [r7, #4]
 81029c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81029c4:	4b1b      	ldr	r3, [pc, #108]	; (8102a34 <prvAddNewTaskToReadyList+0xd4>)
 81029c6:	681b      	ldr	r3, [r3, #0]
 81029c8:	429a      	cmp	r2, r3
 81029ca:	d903      	bls.n	81029d4 <prvAddNewTaskToReadyList+0x74>
 81029cc:	687b      	ldr	r3, [r7, #4]
 81029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81029d0:	4a18      	ldr	r2, [pc, #96]	; (8102a34 <prvAddNewTaskToReadyList+0xd4>)
 81029d2:	6013      	str	r3, [r2, #0]
 81029d4:	687b      	ldr	r3, [r7, #4]
 81029d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81029d8:	4613      	mov	r3, r2
 81029da:	009b      	lsls	r3, r3, #2
 81029dc:	4413      	add	r3, r2
 81029de:	009b      	lsls	r3, r3, #2
 81029e0:	4a15      	ldr	r2, [pc, #84]	; (8102a38 <prvAddNewTaskToReadyList+0xd8>)
 81029e2:	441a      	add	r2, r3
 81029e4:	687b      	ldr	r3, [r7, #4]
 81029e6:	3304      	adds	r3, #4
 81029e8:	4619      	mov	r1, r3
 81029ea:	4610      	mov	r0, r2
 81029ec:	f7fe feb1 	bl	8101752 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 81029f0:	f7ff f890 	bl	8101b14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 81029f4:	4b0d      	ldr	r3, [pc, #52]	; (8102a2c <prvAddNewTaskToReadyList+0xcc>)
 81029f6:	681b      	ldr	r3, [r3, #0]
 81029f8:	2b00      	cmp	r3, #0
 81029fa:	d00e      	beq.n	8102a1a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 81029fc:	4b0a      	ldr	r3, [pc, #40]	; (8102a28 <prvAddNewTaskToReadyList+0xc8>)
 81029fe:	681b      	ldr	r3, [r3, #0]
 8102a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102a02:	687b      	ldr	r3, [r7, #4]
 8102a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102a06:	429a      	cmp	r2, r3
 8102a08:	d207      	bcs.n	8102a1a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8102a0a:	4b0c      	ldr	r3, [pc, #48]	; (8102a3c <prvAddNewTaskToReadyList+0xdc>)
 8102a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102a10:	601a      	str	r2, [r3, #0]
 8102a12:	f3bf 8f4f 	dsb	sy
 8102a16:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8102a1a:	bf00      	nop
 8102a1c:	3708      	adds	r7, #8
 8102a1e:	46bd      	mov	sp, r7
 8102a20:	bd80      	pop	{r7, pc}
 8102a22:	bf00      	nop
 8102a24:	1000490c 	.word	0x1000490c
 8102a28:	10004438 	.word	0x10004438
 8102a2c:	10004918 	.word	0x10004918
 8102a30:	10004928 	.word	0x10004928
 8102a34:	10004914 	.word	0x10004914
 8102a38:	1000443c 	.word	0x1000443c
 8102a3c:	e000ed04 	.word	0xe000ed04

08102a40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8102a40:	b580      	push	{r7, lr}
 8102a42:	b084      	sub	sp, #16
 8102a44:	af00      	add	r7, sp, #0
 8102a46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8102a48:	2300      	movs	r3, #0
 8102a4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8102a4c:	687b      	ldr	r3, [r7, #4]
 8102a4e:	2b00      	cmp	r3, #0
 8102a50:	d017      	beq.n	8102a82 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8102a52:	4b13      	ldr	r3, [pc, #76]	; (8102aa0 <vTaskDelay+0x60>)
 8102a54:	681b      	ldr	r3, [r3, #0]
 8102a56:	2b00      	cmp	r3, #0
 8102a58:	d00a      	beq.n	8102a70 <vTaskDelay+0x30>
	__asm volatile
 8102a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102a5e:	f383 8811 	msr	BASEPRI, r3
 8102a62:	f3bf 8f6f 	isb	sy
 8102a66:	f3bf 8f4f 	dsb	sy
 8102a6a:	60bb      	str	r3, [r7, #8]
}
 8102a6c:	bf00      	nop
 8102a6e:	e7fe      	b.n	8102a6e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8102a70:	f000 f88a 	bl	8102b88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8102a74:	2100      	movs	r1, #0
 8102a76:	6878      	ldr	r0, [r7, #4]
 8102a78:	f000 fcfe 	bl	8103478 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8102a7c:	f000 f892 	bl	8102ba4 <xTaskResumeAll>
 8102a80:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8102a82:	68fb      	ldr	r3, [r7, #12]
 8102a84:	2b00      	cmp	r3, #0
 8102a86:	d107      	bne.n	8102a98 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8102a88:	4b06      	ldr	r3, [pc, #24]	; (8102aa4 <vTaskDelay+0x64>)
 8102a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102a8e:	601a      	str	r2, [r3, #0]
 8102a90:	f3bf 8f4f 	dsb	sy
 8102a94:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8102a98:	bf00      	nop
 8102a9a:	3710      	adds	r7, #16
 8102a9c:	46bd      	mov	sp, r7
 8102a9e:	bd80      	pop	{r7, pc}
 8102aa0:	10004934 	.word	0x10004934
 8102aa4:	e000ed04 	.word	0xe000ed04

08102aa8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8102aa8:	b580      	push	{r7, lr}
 8102aaa:	b08a      	sub	sp, #40	; 0x28
 8102aac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8102aae:	2300      	movs	r3, #0
 8102ab0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8102ab2:	2300      	movs	r3, #0
 8102ab4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8102ab6:	463a      	mov	r2, r7
 8102ab8:	1d39      	adds	r1, r7, #4
 8102aba:	f107 0308 	add.w	r3, r7, #8
 8102abe:	4618      	mov	r0, r3
 8102ac0:	f7fe fbfc 	bl	81012bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8102ac4:	6839      	ldr	r1, [r7, #0]
 8102ac6:	687b      	ldr	r3, [r7, #4]
 8102ac8:	68ba      	ldr	r2, [r7, #8]
 8102aca:	9202      	str	r2, [sp, #8]
 8102acc:	9301      	str	r3, [sp, #4]
 8102ace:	2300      	movs	r3, #0
 8102ad0:	9300      	str	r3, [sp, #0]
 8102ad2:	2300      	movs	r3, #0
 8102ad4:	460a      	mov	r2, r1
 8102ad6:	4924      	ldr	r1, [pc, #144]	; (8102b68 <vTaskStartScheduler+0xc0>)
 8102ad8:	4824      	ldr	r0, [pc, #144]	; (8102b6c <vTaskStartScheduler+0xc4>)
 8102ada:	f7ff fdf9 	bl	81026d0 <xTaskCreateStatic>
 8102ade:	4603      	mov	r3, r0
 8102ae0:	4a23      	ldr	r2, [pc, #140]	; (8102b70 <vTaskStartScheduler+0xc8>)
 8102ae2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8102ae4:	4b22      	ldr	r3, [pc, #136]	; (8102b70 <vTaskStartScheduler+0xc8>)
 8102ae6:	681b      	ldr	r3, [r3, #0]
 8102ae8:	2b00      	cmp	r3, #0
 8102aea:	d002      	beq.n	8102af2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8102aec:	2301      	movs	r3, #1
 8102aee:	617b      	str	r3, [r7, #20]
 8102af0:	e001      	b.n	8102af6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8102af2:	2300      	movs	r3, #0
 8102af4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8102af6:	697b      	ldr	r3, [r7, #20]
 8102af8:	2b01      	cmp	r3, #1
 8102afa:	d102      	bne.n	8102b02 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8102afc:	f000 fd10 	bl	8103520 <xTimerCreateTimerTask>
 8102b00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8102b02:	697b      	ldr	r3, [r7, #20]
 8102b04:	2b01      	cmp	r3, #1
 8102b06:	d11b      	bne.n	8102b40 <vTaskStartScheduler+0x98>
	__asm volatile
 8102b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102b0c:	f383 8811 	msr	BASEPRI, r3
 8102b10:	f3bf 8f6f 	isb	sy
 8102b14:	f3bf 8f4f 	dsb	sy
 8102b18:	613b      	str	r3, [r7, #16]
}
 8102b1a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8102b1c:	4b15      	ldr	r3, [pc, #84]	; (8102b74 <vTaskStartScheduler+0xcc>)
 8102b1e:	681b      	ldr	r3, [r3, #0]
 8102b20:	3354      	adds	r3, #84	; 0x54
 8102b22:	4a15      	ldr	r2, [pc, #84]	; (8102b78 <vTaskStartScheduler+0xd0>)
 8102b24:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8102b26:	4b15      	ldr	r3, [pc, #84]	; (8102b7c <vTaskStartScheduler+0xd4>)
 8102b28:	f04f 32ff 	mov.w	r2, #4294967295
 8102b2c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8102b2e:	4b14      	ldr	r3, [pc, #80]	; (8102b80 <vTaskStartScheduler+0xd8>)
 8102b30:	2201      	movs	r2, #1
 8102b32:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8102b34:	4b13      	ldr	r3, [pc, #76]	; (8102b84 <vTaskStartScheduler+0xdc>)
 8102b36:	2200      	movs	r2, #0
 8102b38:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8102b3a:	f7fe ff19 	bl	8101970 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8102b3e:	e00e      	b.n	8102b5e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8102b40:	697b      	ldr	r3, [r7, #20]
 8102b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102b46:	d10a      	bne.n	8102b5e <vTaskStartScheduler+0xb6>
	__asm volatile
 8102b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102b4c:	f383 8811 	msr	BASEPRI, r3
 8102b50:	f3bf 8f6f 	isb	sy
 8102b54:	f3bf 8f4f 	dsb	sy
 8102b58:	60fb      	str	r3, [r7, #12]
}
 8102b5a:	bf00      	nop
 8102b5c:	e7fe      	b.n	8102b5c <vTaskStartScheduler+0xb4>
}
 8102b5e:	bf00      	nop
 8102b60:	3718      	adds	r7, #24
 8102b62:	46bd      	mov	sp, r7
 8102b64:	bd80      	pop	{r7, pc}
 8102b66:	bf00      	nop
 8102b68:	08103de4 	.word	0x08103de4
 8102b6c:	081031ad 	.word	0x081031ad
 8102b70:	10004930 	.word	0x10004930
 8102b74:	10004438 	.word	0x10004438
 8102b78:	10000014 	.word	0x10000014
 8102b7c:	1000492c 	.word	0x1000492c
 8102b80:	10004918 	.word	0x10004918
 8102b84:	10004910 	.word	0x10004910

08102b88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8102b88:	b480      	push	{r7}
 8102b8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8102b8c:	4b04      	ldr	r3, [pc, #16]	; (8102ba0 <vTaskSuspendAll+0x18>)
 8102b8e:	681b      	ldr	r3, [r3, #0]
 8102b90:	3301      	adds	r3, #1
 8102b92:	4a03      	ldr	r2, [pc, #12]	; (8102ba0 <vTaskSuspendAll+0x18>)
 8102b94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8102b96:	bf00      	nop
 8102b98:	46bd      	mov	sp, r7
 8102b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b9e:	4770      	bx	lr
 8102ba0:	10004934 	.word	0x10004934

08102ba4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8102ba4:	b580      	push	{r7, lr}
 8102ba6:	b084      	sub	sp, #16
 8102ba8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8102baa:	2300      	movs	r3, #0
 8102bac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8102bae:	2300      	movs	r3, #0
 8102bb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8102bb2:	4b42      	ldr	r3, [pc, #264]	; (8102cbc <xTaskResumeAll+0x118>)
 8102bb4:	681b      	ldr	r3, [r3, #0]
 8102bb6:	2b00      	cmp	r3, #0
 8102bb8:	d10a      	bne.n	8102bd0 <xTaskResumeAll+0x2c>
	__asm volatile
 8102bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102bbe:	f383 8811 	msr	BASEPRI, r3
 8102bc2:	f3bf 8f6f 	isb	sy
 8102bc6:	f3bf 8f4f 	dsb	sy
 8102bca:	603b      	str	r3, [r7, #0]
}
 8102bcc:	bf00      	nop
 8102bce:	e7fe      	b.n	8102bce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8102bd0:	f7fe ff70 	bl	8101ab4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8102bd4:	4b39      	ldr	r3, [pc, #228]	; (8102cbc <xTaskResumeAll+0x118>)
 8102bd6:	681b      	ldr	r3, [r3, #0]
 8102bd8:	3b01      	subs	r3, #1
 8102bda:	4a38      	ldr	r2, [pc, #224]	; (8102cbc <xTaskResumeAll+0x118>)
 8102bdc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8102bde:	4b37      	ldr	r3, [pc, #220]	; (8102cbc <xTaskResumeAll+0x118>)
 8102be0:	681b      	ldr	r3, [r3, #0]
 8102be2:	2b00      	cmp	r3, #0
 8102be4:	d162      	bne.n	8102cac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8102be6:	4b36      	ldr	r3, [pc, #216]	; (8102cc0 <xTaskResumeAll+0x11c>)
 8102be8:	681b      	ldr	r3, [r3, #0]
 8102bea:	2b00      	cmp	r3, #0
 8102bec:	d05e      	beq.n	8102cac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8102bee:	e02f      	b.n	8102c50 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8102bf0:	4b34      	ldr	r3, [pc, #208]	; (8102cc4 <xTaskResumeAll+0x120>)
 8102bf2:	68db      	ldr	r3, [r3, #12]
 8102bf4:	68db      	ldr	r3, [r3, #12]
 8102bf6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8102bf8:	68fb      	ldr	r3, [r7, #12]
 8102bfa:	3318      	adds	r3, #24
 8102bfc:	4618      	mov	r0, r3
 8102bfe:	f7fe fe05 	bl	810180c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8102c02:	68fb      	ldr	r3, [r7, #12]
 8102c04:	3304      	adds	r3, #4
 8102c06:	4618      	mov	r0, r3
 8102c08:	f7fe fe00 	bl	810180c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8102c0c:	68fb      	ldr	r3, [r7, #12]
 8102c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102c10:	4b2d      	ldr	r3, [pc, #180]	; (8102cc8 <xTaskResumeAll+0x124>)
 8102c12:	681b      	ldr	r3, [r3, #0]
 8102c14:	429a      	cmp	r2, r3
 8102c16:	d903      	bls.n	8102c20 <xTaskResumeAll+0x7c>
 8102c18:	68fb      	ldr	r3, [r7, #12]
 8102c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c1c:	4a2a      	ldr	r2, [pc, #168]	; (8102cc8 <xTaskResumeAll+0x124>)
 8102c1e:	6013      	str	r3, [r2, #0]
 8102c20:	68fb      	ldr	r3, [r7, #12]
 8102c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102c24:	4613      	mov	r3, r2
 8102c26:	009b      	lsls	r3, r3, #2
 8102c28:	4413      	add	r3, r2
 8102c2a:	009b      	lsls	r3, r3, #2
 8102c2c:	4a27      	ldr	r2, [pc, #156]	; (8102ccc <xTaskResumeAll+0x128>)
 8102c2e:	441a      	add	r2, r3
 8102c30:	68fb      	ldr	r3, [r7, #12]
 8102c32:	3304      	adds	r3, #4
 8102c34:	4619      	mov	r1, r3
 8102c36:	4610      	mov	r0, r2
 8102c38:	f7fe fd8b 	bl	8101752 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8102c3c:	68fb      	ldr	r3, [r7, #12]
 8102c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102c40:	4b23      	ldr	r3, [pc, #140]	; (8102cd0 <xTaskResumeAll+0x12c>)
 8102c42:	681b      	ldr	r3, [r3, #0]
 8102c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c46:	429a      	cmp	r2, r3
 8102c48:	d302      	bcc.n	8102c50 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8102c4a:	4b22      	ldr	r3, [pc, #136]	; (8102cd4 <xTaskResumeAll+0x130>)
 8102c4c:	2201      	movs	r2, #1
 8102c4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8102c50:	4b1c      	ldr	r3, [pc, #112]	; (8102cc4 <xTaskResumeAll+0x120>)
 8102c52:	681b      	ldr	r3, [r3, #0]
 8102c54:	2b00      	cmp	r3, #0
 8102c56:	d1cb      	bne.n	8102bf0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8102c58:	68fb      	ldr	r3, [r7, #12]
 8102c5a:	2b00      	cmp	r3, #0
 8102c5c:	d001      	beq.n	8102c62 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8102c5e:	f000 fb5f 	bl	8103320 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8102c62:	4b1d      	ldr	r3, [pc, #116]	; (8102cd8 <xTaskResumeAll+0x134>)
 8102c64:	681b      	ldr	r3, [r3, #0]
 8102c66:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8102c68:	687b      	ldr	r3, [r7, #4]
 8102c6a:	2b00      	cmp	r3, #0
 8102c6c:	d010      	beq.n	8102c90 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8102c6e:	f000 f847 	bl	8102d00 <xTaskIncrementTick>
 8102c72:	4603      	mov	r3, r0
 8102c74:	2b00      	cmp	r3, #0
 8102c76:	d002      	beq.n	8102c7e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8102c78:	4b16      	ldr	r3, [pc, #88]	; (8102cd4 <xTaskResumeAll+0x130>)
 8102c7a:	2201      	movs	r2, #1
 8102c7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8102c7e:	687b      	ldr	r3, [r7, #4]
 8102c80:	3b01      	subs	r3, #1
 8102c82:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8102c84:	687b      	ldr	r3, [r7, #4]
 8102c86:	2b00      	cmp	r3, #0
 8102c88:	d1f1      	bne.n	8102c6e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8102c8a:	4b13      	ldr	r3, [pc, #76]	; (8102cd8 <xTaskResumeAll+0x134>)
 8102c8c:	2200      	movs	r2, #0
 8102c8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8102c90:	4b10      	ldr	r3, [pc, #64]	; (8102cd4 <xTaskResumeAll+0x130>)
 8102c92:	681b      	ldr	r3, [r3, #0]
 8102c94:	2b00      	cmp	r3, #0
 8102c96:	d009      	beq.n	8102cac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8102c98:	2301      	movs	r3, #1
 8102c9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8102c9c:	4b0f      	ldr	r3, [pc, #60]	; (8102cdc <xTaskResumeAll+0x138>)
 8102c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102ca2:	601a      	str	r2, [r3, #0]
 8102ca4:	f3bf 8f4f 	dsb	sy
 8102ca8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8102cac:	f7fe ff32 	bl	8101b14 <vPortExitCritical>

	return xAlreadyYielded;
 8102cb0:	68bb      	ldr	r3, [r7, #8]
}
 8102cb2:	4618      	mov	r0, r3
 8102cb4:	3710      	adds	r7, #16
 8102cb6:	46bd      	mov	sp, r7
 8102cb8:	bd80      	pop	{r7, pc}
 8102cba:	bf00      	nop
 8102cbc:	10004934 	.word	0x10004934
 8102cc0:	1000490c 	.word	0x1000490c
 8102cc4:	100048cc 	.word	0x100048cc
 8102cc8:	10004914 	.word	0x10004914
 8102ccc:	1000443c 	.word	0x1000443c
 8102cd0:	10004438 	.word	0x10004438
 8102cd4:	10004920 	.word	0x10004920
 8102cd8:	1000491c 	.word	0x1000491c
 8102cdc:	e000ed04 	.word	0xe000ed04

08102ce0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8102ce0:	b480      	push	{r7}
 8102ce2:	b083      	sub	sp, #12
 8102ce4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8102ce6:	4b05      	ldr	r3, [pc, #20]	; (8102cfc <xTaskGetTickCount+0x1c>)
 8102ce8:	681b      	ldr	r3, [r3, #0]
 8102cea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8102cec:	687b      	ldr	r3, [r7, #4]
}
 8102cee:	4618      	mov	r0, r3
 8102cf0:	370c      	adds	r7, #12
 8102cf2:	46bd      	mov	sp, r7
 8102cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cf8:	4770      	bx	lr
 8102cfa:	bf00      	nop
 8102cfc:	10004910 	.word	0x10004910

08102d00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8102d00:	b580      	push	{r7, lr}
 8102d02:	b086      	sub	sp, #24
 8102d04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8102d06:	2300      	movs	r3, #0
 8102d08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8102d0a:	4b4f      	ldr	r3, [pc, #316]	; (8102e48 <xTaskIncrementTick+0x148>)
 8102d0c:	681b      	ldr	r3, [r3, #0]
 8102d0e:	2b00      	cmp	r3, #0
 8102d10:	f040 808f 	bne.w	8102e32 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8102d14:	4b4d      	ldr	r3, [pc, #308]	; (8102e4c <xTaskIncrementTick+0x14c>)
 8102d16:	681b      	ldr	r3, [r3, #0]
 8102d18:	3301      	adds	r3, #1
 8102d1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8102d1c:	4a4b      	ldr	r2, [pc, #300]	; (8102e4c <xTaskIncrementTick+0x14c>)
 8102d1e:	693b      	ldr	r3, [r7, #16]
 8102d20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8102d22:	693b      	ldr	r3, [r7, #16]
 8102d24:	2b00      	cmp	r3, #0
 8102d26:	d120      	bne.n	8102d6a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8102d28:	4b49      	ldr	r3, [pc, #292]	; (8102e50 <xTaskIncrementTick+0x150>)
 8102d2a:	681b      	ldr	r3, [r3, #0]
 8102d2c:	681b      	ldr	r3, [r3, #0]
 8102d2e:	2b00      	cmp	r3, #0
 8102d30:	d00a      	beq.n	8102d48 <xTaskIncrementTick+0x48>
	__asm volatile
 8102d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102d36:	f383 8811 	msr	BASEPRI, r3
 8102d3a:	f3bf 8f6f 	isb	sy
 8102d3e:	f3bf 8f4f 	dsb	sy
 8102d42:	603b      	str	r3, [r7, #0]
}
 8102d44:	bf00      	nop
 8102d46:	e7fe      	b.n	8102d46 <xTaskIncrementTick+0x46>
 8102d48:	4b41      	ldr	r3, [pc, #260]	; (8102e50 <xTaskIncrementTick+0x150>)
 8102d4a:	681b      	ldr	r3, [r3, #0]
 8102d4c:	60fb      	str	r3, [r7, #12]
 8102d4e:	4b41      	ldr	r3, [pc, #260]	; (8102e54 <xTaskIncrementTick+0x154>)
 8102d50:	681b      	ldr	r3, [r3, #0]
 8102d52:	4a3f      	ldr	r2, [pc, #252]	; (8102e50 <xTaskIncrementTick+0x150>)
 8102d54:	6013      	str	r3, [r2, #0]
 8102d56:	4a3f      	ldr	r2, [pc, #252]	; (8102e54 <xTaskIncrementTick+0x154>)
 8102d58:	68fb      	ldr	r3, [r7, #12]
 8102d5a:	6013      	str	r3, [r2, #0]
 8102d5c:	4b3e      	ldr	r3, [pc, #248]	; (8102e58 <xTaskIncrementTick+0x158>)
 8102d5e:	681b      	ldr	r3, [r3, #0]
 8102d60:	3301      	adds	r3, #1
 8102d62:	4a3d      	ldr	r2, [pc, #244]	; (8102e58 <xTaskIncrementTick+0x158>)
 8102d64:	6013      	str	r3, [r2, #0]
 8102d66:	f000 fadb 	bl	8103320 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8102d6a:	4b3c      	ldr	r3, [pc, #240]	; (8102e5c <xTaskIncrementTick+0x15c>)
 8102d6c:	681b      	ldr	r3, [r3, #0]
 8102d6e:	693a      	ldr	r2, [r7, #16]
 8102d70:	429a      	cmp	r2, r3
 8102d72:	d349      	bcc.n	8102e08 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8102d74:	4b36      	ldr	r3, [pc, #216]	; (8102e50 <xTaskIncrementTick+0x150>)
 8102d76:	681b      	ldr	r3, [r3, #0]
 8102d78:	681b      	ldr	r3, [r3, #0]
 8102d7a:	2b00      	cmp	r3, #0
 8102d7c:	d104      	bne.n	8102d88 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8102d7e:	4b37      	ldr	r3, [pc, #220]	; (8102e5c <xTaskIncrementTick+0x15c>)
 8102d80:	f04f 32ff 	mov.w	r2, #4294967295
 8102d84:	601a      	str	r2, [r3, #0]
					break;
 8102d86:	e03f      	b.n	8102e08 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8102d88:	4b31      	ldr	r3, [pc, #196]	; (8102e50 <xTaskIncrementTick+0x150>)
 8102d8a:	681b      	ldr	r3, [r3, #0]
 8102d8c:	68db      	ldr	r3, [r3, #12]
 8102d8e:	68db      	ldr	r3, [r3, #12]
 8102d90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8102d92:	68bb      	ldr	r3, [r7, #8]
 8102d94:	685b      	ldr	r3, [r3, #4]
 8102d96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8102d98:	693a      	ldr	r2, [r7, #16]
 8102d9a:	687b      	ldr	r3, [r7, #4]
 8102d9c:	429a      	cmp	r2, r3
 8102d9e:	d203      	bcs.n	8102da8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8102da0:	4a2e      	ldr	r2, [pc, #184]	; (8102e5c <xTaskIncrementTick+0x15c>)
 8102da2:	687b      	ldr	r3, [r7, #4]
 8102da4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8102da6:	e02f      	b.n	8102e08 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8102da8:	68bb      	ldr	r3, [r7, #8]
 8102daa:	3304      	adds	r3, #4
 8102dac:	4618      	mov	r0, r3
 8102dae:	f7fe fd2d 	bl	810180c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8102db2:	68bb      	ldr	r3, [r7, #8]
 8102db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102db6:	2b00      	cmp	r3, #0
 8102db8:	d004      	beq.n	8102dc4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8102dba:	68bb      	ldr	r3, [r7, #8]
 8102dbc:	3318      	adds	r3, #24
 8102dbe:	4618      	mov	r0, r3
 8102dc0:	f7fe fd24 	bl	810180c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8102dc4:	68bb      	ldr	r3, [r7, #8]
 8102dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102dc8:	4b25      	ldr	r3, [pc, #148]	; (8102e60 <xTaskIncrementTick+0x160>)
 8102dca:	681b      	ldr	r3, [r3, #0]
 8102dcc:	429a      	cmp	r2, r3
 8102dce:	d903      	bls.n	8102dd8 <xTaskIncrementTick+0xd8>
 8102dd0:	68bb      	ldr	r3, [r7, #8]
 8102dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102dd4:	4a22      	ldr	r2, [pc, #136]	; (8102e60 <xTaskIncrementTick+0x160>)
 8102dd6:	6013      	str	r3, [r2, #0]
 8102dd8:	68bb      	ldr	r3, [r7, #8]
 8102dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102ddc:	4613      	mov	r3, r2
 8102dde:	009b      	lsls	r3, r3, #2
 8102de0:	4413      	add	r3, r2
 8102de2:	009b      	lsls	r3, r3, #2
 8102de4:	4a1f      	ldr	r2, [pc, #124]	; (8102e64 <xTaskIncrementTick+0x164>)
 8102de6:	441a      	add	r2, r3
 8102de8:	68bb      	ldr	r3, [r7, #8]
 8102dea:	3304      	adds	r3, #4
 8102dec:	4619      	mov	r1, r3
 8102dee:	4610      	mov	r0, r2
 8102df0:	f7fe fcaf 	bl	8101752 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8102df4:	68bb      	ldr	r3, [r7, #8]
 8102df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102df8:	4b1b      	ldr	r3, [pc, #108]	; (8102e68 <xTaskIncrementTick+0x168>)
 8102dfa:	681b      	ldr	r3, [r3, #0]
 8102dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102dfe:	429a      	cmp	r2, r3
 8102e00:	d3b8      	bcc.n	8102d74 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8102e02:	2301      	movs	r3, #1
 8102e04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8102e06:	e7b5      	b.n	8102d74 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8102e08:	4b17      	ldr	r3, [pc, #92]	; (8102e68 <xTaskIncrementTick+0x168>)
 8102e0a:	681b      	ldr	r3, [r3, #0]
 8102e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102e0e:	4915      	ldr	r1, [pc, #84]	; (8102e64 <xTaskIncrementTick+0x164>)
 8102e10:	4613      	mov	r3, r2
 8102e12:	009b      	lsls	r3, r3, #2
 8102e14:	4413      	add	r3, r2
 8102e16:	009b      	lsls	r3, r3, #2
 8102e18:	440b      	add	r3, r1
 8102e1a:	681b      	ldr	r3, [r3, #0]
 8102e1c:	2b01      	cmp	r3, #1
 8102e1e:	d901      	bls.n	8102e24 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8102e20:	2301      	movs	r3, #1
 8102e22:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8102e24:	4b11      	ldr	r3, [pc, #68]	; (8102e6c <xTaskIncrementTick+0x16c>)
 8102e26:	681b      	ldr	r3, [r3, #0]
 8102e28:	2b00      	cmp	r3, #0
 8102e2a:	d007      	beq.n	8102e3c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8102e2c:	2301      	movs	r3, #1
 8102e2e:	617b      	str	r3, [r7, #20]
 8102e30:	e004      	b.n	8102e3c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8102e32:	4b0f      	ldr	r3, [pc, #60]	; (8102e70 <xTaskIncrementTick+0x170>)
 8102e34:	681b      	ldr	r3, [r3, #0]
 8102e36:	3301      	adds	r3, #1
 8102e38:	4a0d      	ldr	r2, [pc, #52]	; (8102e70 <xTaskIncrementTick+0x170>)
 8102e3a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8102e3c:	697b      	ldr	r3, [r7, #20]
}
 8102e3e:	4618      	mov	r0, r3
 8102e40:	3718      	adds	r7, #24
 8102e42:	46bd      	mov	sp, r7
 8102e44:	bd80      	pop	{r7, pc}
 8102e46:	bf00      	nop
 8102e48:	10004934 	.word	0x10004934
 8102e4c:	10004910 	.word	0x10004910
 8102e50:	100048c4 	.word	0x100048c4
 8102e54:	100048c8 	.word	0x100048c8
 8102e58:	10004924 	.word	0x10004924
 8102e5c:	1000492c 	.word	0x1000492c
 8102e60:	10004914 	.word	0x10004914
 8102e64:	1000443c 	.word	0x1000443c
 8102e68:	10004438 	.word	0x10004438
 8102e6c:	10004920 	.word	0x10004920
 8102e70:	1000491c 	.word	0x1000491c

08102e74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8102e74:	b480      	push	{r7}
 8102e76:	b085      	sub	sp, #20
 8102e78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8102e7a:	4b2a      	ldr	r3, [pc, #168]	; (8102f24 <vTaskSwitchContext+0xb0>)
 8102e7c:	681b      	ldr	r3, [r3, #0]
 8102e7e:	2b00      	cmp	r3, #0
 8102e80:	d003      	beq.n	8102e8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8102e82:	4b29      	ldr	r3, [pc, #164]	; (8102f28 <vTaskSwitchContext+0xb4>)
 8102e84:	2201      	movs	r2, #1
 8102e86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8102e88:	e046      	b.n	8102f18 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8102e8a:	4b27      	ldr	r3, [pc, #156]	; (8102f28 <vTaskSwitchContext+0xb4>)
 8102e8c:	2200      	movs	r2, #0
 8102e8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8102e90:	4b26      	ldr	r3, [pc, #152]	; (8102f2c <vTaskSwitchContext+0xb8>)
 8102e92:	681b      	ldr	r3, [r3, #0]
 8102e94:	60fb      	str	r3, [r7, #12]
 8102e96:	e010      	b.n	8102eba <vTaskSwitchContext+0x46>
 8102e98:	68fb      	ldr	r3, [r7, #12]
 8102e9a:	2b00      	cmp	r3, #0
 8102e9c:	d10a      	bne.n	8102eb4 <vTaskSwitchContext+0x40>
	__asm volatile
 8102e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102ea2:	f383 8811 	msr	BASEPRI, r3
 8102ea6:	f3bf 8f6f 	isb	sy
 8102eaa:	f3bf 8f4f 	dsb	sy
 8102eae:	607b      	str	r3, [r7, #4]
}
 8102eb0:	bf00      	nop
 8102eb2:	e7fe      	b.n	8102eb2 <vTaskSwitchContext+0x3e>
 8102eb4:	68fb      	ldr	r3, [r7, #12]
 8102eb6:	3b01      	subs	r3, #1
 8102eb8:	60fb      	str	r3, [r7, #12]
 8102eba:	491d      	ldr	r1, [pc, #116]	; (8102f30 <vTaskSwitchContext+0xbc>)
 8102ebc:	68fa      	ldr	r2, [r7, #12]
 8102ebe:	4613      	mov	r3, r2
 8102ec0:	009b      	lsls	r3, r3, #2
 8102ec2:	4413      	add	r3, r2
 8102ec4:	009b      	lsls	r3, r3, #2
 8102ec6:	440b      	add	r3, r1
 8102ec8:	681b      	ldr	r3, [r3, #0]
 8102eca:	2b00      	cmp	r3, #0
 8102ecc:	d0e4      	beq.n	8102e98 <vTaskSwitchContext+0x24>
 8102ece:	68fa      	ldr	r2, [r7, #12]
 8102ed0:	4613      	mov	r3, r2
 8102ed2:	009b      	lsls	r3, r3, #2
 8102ed4:	4413      	add	r3, r2
 8102ed6:	009b      	lsls	r3, r3, #2
 8102ed8:	4a15      	ldr	r2, [pc, #84]	; (8102f30 <vTaskSwitchContext+0xbc>)
 8102eda:	4413      	add	r3, r2
 8102edc:	60bb      	str	r3, [r7, #8]
 8102ede:	68bb      	ldr	r3, [r7, #8]
 8102ee0:	685b      	ldr	r3, [r3, #4]
 8102ee2:	685a      	ldr	r2, [r3, #4]
 8102ee4:	68bb      	ldr	r3, [r7, #8]
 8102ee6:	605a      	str	r2, [r3, #4]
 8102ee8:	68bb      	ldr	r3, [r7, #8]
 8102eea:	685a      	ldr	r2, [r3, #4]
 8102eec:	68bb      	ldr	r3, [r7, #8]
 8102eee:	3308      	adds	r3, #8
 8102ef0:	429a      	cmp	r2, r3
 8102ef2:	d104      	bne.n	8102efe <vTaskSwitchContext+0x8a>
 8102ef4:	68bb      	ldr	r3, [r7, #8]
 8102ef6:	685b      	ldr	r3, [r3, #4]
 8102ef8:	685a      	ldr	r2, [r3, #4]
 8102efa:	68bb      	ldr	r3, [r7, #8]
 8102efc:	605a      	str	r2, [r3, #4]
 8102efe:	68bb      	ldr	r3, [r7, #8]
 8102f00:	685b      	ldr	r3, [r3, #4]
 8102f02:	68db      	ldr	r3, [r3, #12]
 8102f04:	4a0b      	ldr	r2, [pc, #44]	; (8102f34 <vTaskSwitchContext+0xc0>)
 8102f06:	6013      	str	r3, [r2, #0]
 8102f08:	4a08      	ldr	r2, [pc, #32]	; (8102f2c <vTaskSwitchContext+0xb8>)
 8102f0a:	68fb      	ldr	r3, [r7, #12]
 8102f0c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8102f0e:	4b09      	ldr	r3, [pc, #36]	; (8102f34 <vTaskSwitchContext+0xc0>)
 8102f10:	681b      	ldr	r3, [r3, #0]
 8102f12:	3354      	adds	r3, #84	; 0x54
 8102f14:	4a08      	ldr	r2, [pc, #32]	; (8102f38 <vTaskSwitchContext+0xc4>)
 8102f16:	6013      	str	r3, [r2, #0]
}
 8102f18:	bf00      	nop
 8102f1a:	3714      	adds	r7, #20
 8102f1c:	46bd      	mov	sp, r7
 8102f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f22:	4770      	bx	lr
 8102f24:	10004934 	.word	0x10004934
 8102f28:	10004920 	.word	0x10004920
 8102f2c:	10004914 	.word	0x10004914
 8102f30:	1000443c 	.word	0x1000443c
 8102f34:	10004438 	.word	0x10004438
 8102f38:	10000014 	.word	0x10000014

08102f3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8102f3c:	b580      	push	{r7, lr}
 8102f3e:	b084      	sub	sp, #16
 8102f40:	af00      	add	r7, sp, #0
 8102f42:	6078      	str	r0, [r7, #4]
 8102f44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8102f46:	687b      	ldr	r3, [r7, #4]
 8102f48:	2b00      	cmp	r3, #0
 8102f4a:	d10a      	bne.n	8102f62 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8102f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102f50:	f383 8811 	msr	BASEPRI, r3
 8102f54:	f3bf 8f6f 	isb	sy
 8102f58:	f3bf 8f4f 	dsb	sy
 8102f5c:	60fb      	str	r3, [r7, #12]
}
 8102f5e:	bf00      	nop
 8102f60:	e7fe      	b.n	8102f60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8102f62:	4b07      	ldr	r3, [pc, #28]	; (8102f80 <vTaskPlaceOnEventList+0x44>)
 8102f64:	681b      	ldr	r3, [r3, #0]
 8102f66:	3318      	adds	r3, #24
 8102f68:	4619      	mov	r1, r3
 8102f6a:	6878      	ldr	r0, [r7, #4]
 8102f6c:	f7fe fc15 	bl	810179a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8102f70:	2101      	movs	r1, #1
 8102f72:	6838      	ldr	r0, [r7, #0]
 8102f74:	f000 fa80 	bl	8103478 <prvAddCurrentTaskToDelayedList>
}
 8102f78:	bf00      	nop
 8102f7a:	3710      	adds	r7, #16
 8102f7c:	46bd      	mov	sp, r7
 8102f7e:	bd80      	pop	{r7, pc}
 8102f80:	10004438 	.word	0x10004438

08102f84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8102f84:	b580      	push	{r7, lr}
 8102f86:	b086      	sub	sp, #24
 8102f88:	af00      	add	r7, sp, #0
 8102f8a:	60f8      	str	r0, [r7, #12]
 8102f8c:	60b9      	str	r1, [r7, #8]
 8102f8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8102f90:	68fb      	ldr	r3, [r7, #12]
 8102f92:	2b00      	cmp	r3, #0
 8102f94:	d10a      	bne.n	8102fac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8102f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102f9a:	f383 8811 	msr	BASEPRI, r3
 8102f9e:	f3bf 8f6f 	isb	sy
 8102fa2:	f3bf 8f4f 	dsb	sy
 8102fa6:	617b      	str	r3, [r7, #20]
}
 8102fa8:	bf00      	nop
 8102faa:	e7fe      	b.n	8102faa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8102fac:	4b0a      	ldr	r3, [pc, #40]	; (8102fd8 <vTaskPlaceOnEventListRestricted+0x54>)
 8102fae:	681b      	ldr	r3, [r3, #0]
 8102fb0:	3318      	adds	r3, #24
 8102fb2:	4619      	mov	r1, r3
 8102fb4:	68f8      	ldr	r0, [r7, #12]
 8102fb6:	f7fe fbcc 	bl	8101752 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8102fba:	687b      	ldr	r3, [r7, #4]
 8102fbc:	2b00      	cmp	r3, #0
 8102fbe:	d002      	beq.n	8102fc6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8102fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8102fc4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8102fc6:	6879      	ldr	r1, [r7, #4]
 8102fc8:	68b8      	ldr	r0, [r7, #8]
 8102fca:	f000 fa55 	bl	8103478 <prvAddCurrentTaskToDelayedList>
	}
 8102fce:	bf00      	nop
 8102fd0:	3718      	adds	r7, #24
 8102fd2:	46bd      	mov	sp, r7
 8102fd4:	bd80      	pop	{r7, pc}
 8102fd6:	bf00      	nop
 8102fd8:	10004438 	.word	0x10004438

08102fdc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8102fdc:	b580      	push	{r7, lr}
 8102fde:	b086      	sub	sp, #24
 8102fe0:	af00      	add	r7, sp, #0
 8102fe2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8102fe4:	687b      	ldr	r3, [r7, #4]
 8102fe6:	68db      	ldr	r3, [r3, #12]
 8102fe8:	68db      	ldr	r3, [r3, #12]
 8102fea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8102fec:	693b      	ldr	r3, [r7, #16]
 8102fee:	2b00      	cmp	r3, #0
 8102ff0:	d10a      	bne.n	8103008 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8102ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102ff6:	f383 8811 	msr	BASEPRI, r3
 8102ffa:	f3bf 8f6f 	isb	sy
 8102ffe:	f3bf 8f4f 	dsb	sy
 8103002:	60fb      	str	r3, [r7, #12]
}
 8103004:	bf00      	nop
 8103006:	e7fe      	b.n	8103006 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8103008:	693b      	ldr	r3, [r7, #16]
 810300a:	3318      	adds	r3, #24
 810300c:	4618      	mov	r0, r3
 810300e:	f7fe fbfd 	bl	810180c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8103012:	4b1e      	ldr	r3, [pc, #120]	; (810308c <xTaskRemoveFromEventList+0xb0>)
 8103014:	681b      	ldr	r3, [r3, #0]
 8103016:	2b00      	cmp	r3, #0
 8103018:	d11d      	bne.n	8103056 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 810301a:	693b      	ldr	r3, [r7, #16]
 810301c:	3304      	adds	r3, #4
 810301e:	4618      	mov	r0, r3
 8103020:	f7fe fbf4 	bl	810180c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8103024:	693b      	ldr	r3, [r7, #16]
 8103026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103028:	4b19      	ldr	r3, [pc, #100]	; (8103090 <xTaskRemoveFromEventList+0xb4>)
 810302a:	681b      	ldr	r3, [r3, #0]
 810302c:	429a      	cmp	r2, r3
 810302e:	d903      	bls.n	8103038 <xTaskRemoveFromEventList+0x5c>
 8103030:	693b      	ldr	r3, [r7, #16]
 8103032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103034:	4a16      	ldr	r2, [pc, #88]	; (8103090 <xTaskRemoveFromEventList+0xb4>)
 8103036:	6013      	str	r3, [r2, #0]
 8103038:	693b      	ldr	r3, [r7, #16]
 810303a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810303c:	4613      	mov	r3, r2
 810303e:	009b      	lsls	r3, r3, #2
 8103040:	4413      	add	r3, r2
 8103042:	009b      	lsls	r3, r3, #2
 8103044:	4a13      	ldr	r2, [pc, #76]	; (8103094 <xTaskRemoveFromEventList+0xb8>)
 8103046:	441a      	add	r2, r3
 8103048:	693b      	ldr	r3, [r7, #16]
 810304a:	3304      	adds	r3, #4
 810304c:	4619      	mov	r1, r3
 810304e:	4610      	mov	r0, r2
 8103050:	f7fe fb7f 	bl	8101752 <vListInsertEnd>
 8103054:	e005      	b.n	8103062 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8103056:	693b      	ldr	r3, [r7, #16]
 8103058:	3318      	adds	r3, #24
 810305a:	4619      	mov	r1, r3
 810305c:	480e      	ldr	r0, [pc, #56]	; (8103098 <xTaskRemoveFromEventList+0xbc>)
 810305e:	f7fe fb78 	bl	8101752 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8103062:	693b      	ldr	r3, [r7, #16]
 8103064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103066:	4b0d      	ldr	r3, [pc, #52]	; (810309c <xTaskRemoveFromEventList+0xc0>)
 8103068:	681b      	ldr	r3, [r3, #0]
 810306a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810306c:	429a      	cmp	r2, r3
 810306e:	d905      	bls.n	810307c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8103070:	2301      	movs	r3, #1
 8103072:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8103074:	4b0a      	ldr	r3, [pc, #40]	; (81030a0 <xTaskRemoveFromEventList+0xc4>)
 8103076:	2201      	movs	r2, #1
 8103078:	601a      	str	r2, [r3, #0]
 810307a:	e001      	b.n	8103080 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 810307c:	2300      	movs	r3, #0
 810307e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8103080:	697b      	ldr	r3, [r7, #20]
}
 8103082:	4618      	mov	r0, r3
 8103084:	3718      	adds	r7, #24
 8103086:	46bd      	mov	sp, r7
 8103088:	bd80      	pop	{r7, pc}
 810308a:	bf00      	nop
 810308c:	10004934 	.word	0x10004934
 8103090:	10004914 	.word	0x10004914
 8103094:	1000443c 	.word	0x1000443c
 8103098:	100048cc 	.word	0x100048cc
 810309c:	10004438 	.word	0x10004438
 81030a0:	10004920 	.word	0x10004920

081030a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 81030a4:	b480      	push	{r7}
 81030a6:	b083      	sub	sp, #12
 81030a8:	af00      	add	r7, sp, #0
 81030aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 81030ac:	4b06      	ldr	r3, [pc, #24]	; (81030c8 <vTaskInternalSetTimeOutState+0x24>)
 81030ae:	681a      	ldr	r2, [r3, #0]
 81030b0:	687b      	ldr	r3, [r7, #4]
 81030b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 81030b4:	4b05      	ldr	r3, [pc, #20]	; (81030cc <vTaskInternalSetTimeOutState+0x28>)
 81030b6:	681a      	ldr	r2, [r3, #0]
 81030b8:	687b      	ldr	r3, [r7, #4]
 81030ba:	605a      	str	r2, [r3, #4]
}
 81030bc:	bf00      	nop
 81030be:	370c      	adds	r7, #12
 81030c0:	46bd      	mov	sp, r7
 81030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030c6:	4770      	bx	lr
 81030c8:	10004924 	.word	0x10004924
 81030cc:	10004910 	.word	0x10004910

081030d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 81030d0:	b580      	push	{r7, lr}
 81030d2:	b088      	sub	sp, #32
 81030d4:	af00      	add	r7, sp, #0
 81030d6:	6078      	str	r0, [r7, #4]
 81030d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 81030da:	687b      	ldr	r3, [r7, #4]
 81030dc:	2b00      	cmp	r3, #0
 81030de:	d10a      	bne.n	81030f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 81030e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81030e4:	f383 8811 	msr	BASEPRI, r3
 81030e8:	f3bf 8f6f 	isb	sy
 81030ec:	f3bf 8f4f 	dsb	sy
 81030f0:	613b      	str	r3, [r7, #16]
}
 81030f2:	bf00      	nop
 81030f4:	e7fe      	b.n	81030f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 81030f6:	683b      	ldr	r3, [r7, #0]
 81030f8:	2b00      	cmp	r3, #0
 81030fa:	d10a      	bne.n	8103112 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 81030fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103100:	f383 8811 	msr	BASEPRI, r3
 8103104:	f3bf 8f6f 	isb	sy
 8103108:	f3bf 8f4f 	dsb	sy
 810310c:	60fb      	str	r3, [r7, #12]
}
 810310e:	bf00      	nop
 8103110:	e7fe      	b.n	8103110 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8103112:	f7fe fccf 	bl	8101ab4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8103116:	4b1d      	ldr	r3, [pc, #116]	; (810318c <xTaskCheckForTimeOut+0xbc>)
 8103118:	681b      	ldr	r3, [r3, #0]
 810311a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810311c:	687b      	ldr	r3, [r7, #4]
 810311e:	685b      	ldr	r3, [r3, #4]
 8103120:	69ba      	ldr	r2, [r7, #24]
 8103122:	1ad3      	subs	r3, r2, r3
 8103124:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8103126:	683b      	ldr	r3, [r7, #0]
 8103128:	681b      	ldr	r3, [r3, #0]
 810312a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810312e:	d102      	bne.n	8103136 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8103130:	2300      	movs	r3, #0
 8103132:	61fb      	str	r3, [r7, #28]
 8103134:	e023      	b.n	810317e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8103136:	687b      	ldr	r3, [r7, #4]
 8103138:	681a      	ldr	r2, [r3, #0]
 810313a:	4b15      	ldr	r3, [pc, #84]	; (8103190 <xTaskCheckForTimeOut+0xc0>)
 810313c:	681b      	ldr	r3, [r3, #0]
 810313e:	429a      	cmp	r2, r3
 8103140:	d007      	beq.n	8103152 <xTaskCheckForTimeOut+0x82>
 8103142:	687b      	ldr	r3, [r7, #4]
 8103144:	685b      	ldr	r3, [r3, #4]
 8103146:	69ba      	ldr	r2, [r7, #24]
 8103148:	429a      	cmp	r2, r3
 810314a:	d302      	bcc.n	8103152 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 810314c:	2301      	movs	r3, #1
 810314e:	61fb      	str	r3, [r7, #28]
 8103150:	e015      	b.n	810317e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8103152:	683b      	ldr	r3, [r7, #0]
 8103154:	681b      	ldr	r3, [r3, #0]
 8103156:	697a      	ldr	r2, [r7, #20]
 8103158:	429a      	cmp	r2, r3
 810315a:	d20b      	bcs.n	8103174 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 810315c:	683b      	ldr	r3, [r7, #0]
 810315e:	681a      	ldr	r2, [r3, #0]
 8103160:	697b      	ldr	r3, [r7, #20]
 8103162:	1ad2      	subs	r2, r2, r3
 8103164:	683b      	ldr	r3, [r7, #0]
 8103166:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8103168:	6878      	ldr	r0, [r7, #4]
 810316a:	f7ff ff9b 	bl	81030a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 810316e:	2300      	movs	r3, #0
 8103170:	61fb      	str	r3, [r7, #28]
 8103172:	e004      	b.n	810317e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8103174:	683b      	ldr	r3, [r7, #0]
 8103176:	2200      	movs	r2, #0
 8103178:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 810317a:	2301      	movs	r3, #1
 810317c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 810317e:	f7fe fcc9 	bl	8101b14 <vPortExitCritical>

	return xReturn;
 8103182:	69fb      	ldr	r3, [r7, #28]
}
 8103184:	4618      	mov	r0, r3
 8103186:	3720      	adds	r7, #32
 8103188:	46bd      	mov	sp, r7
 810318a:	bd80      	pop	{r7, pc}
 810318c:	10004910 	.word	0x10004910
 8103190:	10004924 	.word	0x10004924

08103194 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8103194:	b480      	push	{r7}
 8103196:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8103198:	4b03      	ldr	r3, [pc, #12]	; (81031a8 <vTaskMissedYield+0x14>)
 810319a:	2201      	movs	r2, #1
 810319c:	601a      	str	r2, [r3, #0]
}
 810319e:	bf00      	nop
 81031a0:	46bd      	mov	sp, r7
 81031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031a6:	4770      	bx	lr
 81031a8:	10004920 	.word	0x10004920

081031ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 81031ac:	b580      	push	{r7, lr}
 81031ae:	b082      	sub	sp, #8
 81031b0:	af00      	add	r7, sp, #0
 81031b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 81031b4:	f000 f852 	bl	810325c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 81031b8:	4b06      	ldr	r3, [pc, #24]	; (81031d4 <prvIdleTask+0x28>)
 81031ba:	681b      	ldr	r3, [r3, #0]
 81031bc:	2b01      	cmp	r3, #1
 81031be:	d9f9      	bls.n	81031b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 81031c0:	4b05      	ldr	r3, [pc, #20]	; (81031d8 <prvIdleTask+0x2c>)
 81031c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81031c6:	601a      	str	r2, [r3, #0]
 81031c8:	f3bf 8f4f 	dsb	sy
 81031cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 81031d0:	e7f0      	b.n	81031b4 <prvIdleTask+0x8>
 81031d2:	bf00      	nop
 81031d4:	1000443c 	.word	0x1000443c
 81031d8:	e000ed04 	.word	0xe000ed04

081031dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 81031dc:	b580      	push	{r7, lr}
 81031de:	b082      	sub	sp, #8
 81031e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 81031e2:	2300      	movs	r3, #0
 81031e4:	607b      	str	r3, [r7, #4]
 81031e6:	e00c      	b.n	8103202 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 81031e8:	687a      	ldr	r2, [r7, #4]
 81031ea:	4613      	mov	r3, r2
 81031ec:	009b      	lsls	r3, r3, #2
 81031ee:	4413      	add	r3, r2
 81031f0:	009b      	lsls	r3, r3, #2
 81031f2:	4a12      	ldr	r2, [pc, #72]	; (810323c <prvInitialiseTaskLists+0x60>)
 81031f4:	4413      	add	r3, r2
 81031f6:	4618      	mov	r0, r3
 81031f8:	f7fe fa7e 	bl	81016f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 81031fc:	687b      	ldr	r3, [r7, #4]
 81031fe:	3301      	adds	r3, #1
 8103200:	607b      	str	r3, [r7, #4]
 8103202:	687b      	ldr	r3, [r7, #4]
 8103204:	2b37      	cmp	r3, #55	; 0x37
 8103206:	d9ef      	bls.n	81031e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8103208:	480d      	ldr	r0, [pc, #52]	; (8103240 <prvInitialiseTaskLists+0x64>)
 810320a:	f7fe fa75 	bl	81016f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810320e:	480d      	ldr	r0, [pc, #52]	; (8103244 <prvInitialiseTaskLists+0x68>)
 8103210:	f7fe fa72 	bl	81016f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8103214:	480c      	ldr	r0, [pc, #48]	; (8103248 <prvInitialiseTaskLists+0x6c>)
 8103216:	f7fe fa6f 	bl	81016f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810321a:	480c      	ldr	r0, [pc, #48]	; (810324c <prvInitialiseTaskLists+0x70>)
 810321c:	f7fe fa6c 	bl	81016f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8103220:	480b      	ldr	r0, [pc, #44]	; (8103250 <prvInitialiseTaskLists+0x74>)
 8103222:	f7fe fa69 	bl	81016f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8103226:	4b0b      	ldr	r3, [pc, #44]	; (8103254 <prvInitialiseTaskLists+0x78>)
 8103228:	4a05      	ldr	r2, [pc, #20]	; (8103240 <prvInitialiseTaskLists+0x64>)
 810322a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 810322c:	4b0a      	ldr	r3, [pc, #40]	; (8103258 <prvInitialiseTaskLists+0x7c>)
 810322e:	4a05      	ldr	r2, [pc, #20]	; (8103244 <prvInitialiseTaskLists+0x68>)
 8103230:	601a      	str	r2, [r3, #0]
}
 8103232:	bf00      	nop
 8103234:	3708      	adds	r7, #8
 8103236:	46bd      	mov	sp, r7
 8103238:	bd80      	pop	{r7, pc}
 810323a:	bf00      	nop
 810323c:	1000443c 	.word	0x1000443c
 8103240:	1000489c 	.word	0x1000489c
 8103244:	100048b0 	.word	0x100048b0
 8103248:	100048cc 	.word	0x100048cc
 810324c:	100048e0 	.word	0x100048e0
 8103250:	100048f8 	.word	0x100048f8
 8103254:	100048c4 	.word	0x100048c4
 8103258:	100048c8 	.word	0x100048c8

0810325c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 810325c:	b580      	push	{r7, lr}
 810325e:	b082      	sub	sp, #8
 8103260:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8103262:	e019      	b.n	8103298 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8103264:	f7fe fc26 	bl	8101ab4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8103268:	4b10      	ldr	r3, [pc, #64]	; (81032ac <prvCheckTasksWaitingTermination+0x50>)
 810326a:	68db      	ldr	r3, [r3, #12]
 810326c:	68db      	ldr	r3, [r3, #12]
 810326e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8103270:	687b      	ldr	r3, [r7, #4]
 8103272:	3304      	adds	r3, #4
 8103274:	4618      	mov	r0, r3
 8103276:	f7fe fac9 	bl	810180c <uxListRemove>
				--uxCurrentNumberOfTasks;
 810327a:	4b0d      	ldr	r3, [pc, #52]	; (81032b0 <prvCheckTasksWaitingTermination+0x54>)
 810327c:	681b      	ldr	r3, [r3, #0]
 810327e:	3b01      	subs	r3, #1
 8103280:	4a0b      	ldr	r2, [pc, #44]	; (81032b0 <prvCheckTasksWaitingTermination+0x54>)
 8103282:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8103284:	4b0b      	ldr	r3, [pc, #44]	; (81032b4 <prvCheckTasksWaitingTermination+0x58>)
 8103286:	681b      	ldr	r3, [r3, #0]
 8103288:	3b01      	subs	r3, #1
 810328a:	4a0a      	ldr	r2, [pc, #40]	; (81032b4 <prvCheckTasksWaitingTermination+0x58>)
 810328c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 810328e:	f7fe fc41 	bl	8101b14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8103292:	6878      	ldr	r0, [r7, #4]
 8103294:	f000 f810 	bl	81032b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8103298:	4b06      	ldr	r3, [pc, #24]	; (81032b4 <prvCheckTasksWaitingTermination+0x58>)
 810329a:	681b      	ldr	r3, [r3, #0]
 810329c:	2b00      	cmp	r3, #0
 810329e:	d1e1      	bne.n	8103264 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 81032a0:	bf00      	nop
 81032a2:	bf00      	nop
 81032a4:	3708      	adds	r7, #8
 81032a6:	46bd      	mov	sp, r7
 81032a8:	bd80      	pop	{r7, pc}
 81032aa:	bf00      	nop
 81032ac:	100048e0 	.word	0x100048e0
 81032b0:	1000490c 	.word	0x1000490c
 81032b4:	100048f4 	.word	0x100048f4

081032b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 81032b8:	b580      	push	{r7, lr}
 81032ba:	b084      	sub	sp, #16
 81032bc:	af00      	add	r7, sp, #0
 81032be:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 81032c0:	687b      	ldr	r3, [r7, #4]
 81032c2:	3354      	adds	r3, #84	; 0x54
 81032c4:	4618      	mov	r0, r3
 81032c6:	f000 fcc3 	bl	8103c50 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 81032ca:	687b      	ldr	r3, [r7, #4]
 81032cc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 81032d0:	2b00      	cmp	r3, #0
 81032d2:	d108      	bne.n	81032e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 81032d4:	687b      	ldr	r3, [r7, #4]
 81032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81032d8:	4618      	mov	r0, r3
 81032da:	f7fe f8ef 	bl	81014bc <vPortFree>
				vPortFree( pxTCB );
 81032de:	6878      	ldr	r0, [r7, #4]
 81032e0:	f7fe f8ec 	bl	81014bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 81032e4:	e018      	b.n	8103318 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 81032e6:	687b      	ldr	r3, [r7, #4]
 81032e8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 81032ec:	2b01      	cmp	r3, #1
 81032ee:	d103      	bne.n	81032f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 81032f0:	6878      	ldr	r0, [r7, #4]
 81032f2:	f7fe f8e3 	bl	81014bc <vPortFree>
	}
 81032f6:	e00f      	b.n	8103318 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 81032f8:	687b      	ldr	r3, [r7, #4]
 81032fa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 81032fe:	2b02      	cmp	r3, #2
 8103300:	d00a      	beq.n	8103318 <prvDeleteTCB+0x60>
	__asm volatile
 8103302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103306:	f383 8811 	msr	BASEPRI, r3
 810330a:	f3bf 8f6f 	isb	sy
 810330e:	f3bf 8f4f 	dsb	sy
 8103312:	60fb      	str	r3, [r7, #12]
}
 8103314:	bf00      	nop
 8103316:	e7fe      	b.n	8103316 <prvDeleteTCB+0x5e>
	}
 8103318:	bf00      	nop
 810331a:	3710      	adds	r7, #16
 810331c:	46bd      	mov	sp, r7
 810331e:	bd80      	pop	{r7, pc}

08103320 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8103320:	b480      	push	{r7}
 8103322:	b083      	sub	sp, #12
 8103324:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8103326:	4b0c      	ldr	r3, [pc, #48]	; (8103358 <prvResetNextTaskUnblockTime+0x38>)
 8103328:	681b      	ldr	r3, [r3, #0]
 810332a:	681b      	ldr	r3, [r3, #0]
 810332c:	2b00      	cmp	r3, #0
 810332e:	d104      	bne.n	810333a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8103330:	4b0a      	ldr	r3, [pc, #40]	; (810335c <prvResetNextTaskUnblockTime+0x3c>)
 8103332:	f04f 32ff 	mov.w	r2, #4294967295
 8103336:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8103338:	e008      	b.n	810334c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810333a:	4b07      	ldr	r3, [pc, #28]	; (8103358 <prvResetNextTaskUnblockTime+0x38>)
 810333c:	681b      	ldr	r3, [r3, #0]
 810333e:	68db      	ldr	r3, [r3, #12]
 8103340:	68db      	ldr	r3, [r3, #12]
 8103342:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8103344:	687b      	ldr	r3, [r7, #4]
 8103346:	685b      	ldr	r3, [r3, #4]
 8103348:	4a04      	ldr	r2, [pc, #16]	; (810335c <prvResetNextTaskUnblockTime+0x3c>)
 810334a:	6013      	str	r3, [r2, #0]
}
 810334c:	bf00      	nop
 810334e:	370c      	adds	r7, #12
 8103350:	46bd      	mov	sp, r7
 8103352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103356:	4770      	bx	lr
 8103358:	100048c4 	.word	0x100048c4
 810335c:	1000492c 	.word	0x1000492c

08103360 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8103360:	b480      	push	{r7}
 8103362:	b083      	sub	sp, #12
 8103364:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8103366:	4b0b      	ldr	r3, [pc, #44]	; (8103394 <xTaskGetSchedulerState+0x34>)
 8103368:	681b      	ldr	r3, [r3, #0]
 810336a:	2b00      	cmp	r3, #0
 810336c:	d102      	bne.n	8103374 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810336e:	2301      	movs	r3, #1
 8103370:	607b      	str	r3, [r7, #4]
 8103372:	e008      	b.n	8103386 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8103374:	4b08      	ldr	r3, [pc, #32]	; (8103398 <xTaskGetSchedulerState+0x38>)
 8103376:	681b      	ldr	r3, [r3, #0]
 8103378:	2b00      	cmp	r3, #0
 810337a:	d102      	bne.n	8103382 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 810337c:	2302      	movs	r3, #2
 810337e:	607b      	str	r3, [r7, #4]
 8103380:	e001      	b.n	8103386 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8103382:	2300      	movs	r3, #0
 8103384:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8103386:	687b      	ldr	r3, [r7, #4]
	}
 8103388:	4618      	mov	r0, r3
 810338a:	370c      	adds	r7, #12
 810338c:	46bd      	mov	sp, r7
 810338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103392:	4770      	bx	lr
 8103394:	10004918 	.word	0x10004918
 8103398:	10004934 	.word	0x10004934

0810339c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 810339c:	b580      	push	{r7, lr}
 810339e:	b086      	sub	sp, #24
 81033a0:	af00      	add	r7, sp, #0
 81033a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 81033a4:	687b      	ldr	r3, [r7, #4]
 81033a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 81033a8:	2300      	movs	r3, #0
 81033aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 81033ac:	687b      	ldr	r3, [r7, #4]
 81033ae:	2b00      	cmp	r3, #0
 81033b0:	d056      	beq.n	8103460 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 81033b2:	4b2e      	ldr	r3, [pc, #184]	; (810346c <xTaskPriorityDisinherit+0xd0>)
 81033b4:	681b      	ldr	r3, [r3, #0]
 81033b6:	693a      	ldr	r2, [r7, #16]
 81033b8:	429a      	cmp	r2, r3
 81033ba:	d00a      	beq.n	81033d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 81033bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 81033c0:	f383 8811 	msr	BASEPRI, r3
 81033c4:	f3bf 8f6f 	isb	sy
 81033c8:	f3bf 8f4f 	dsb	sy
 81033cc:	60fb      	str	r3, [r7, #12]
}
 81033ce:	bf00      	nop
 81033d0:	e7fe      	b.n	81033d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 81033d2:	693b      	ldr	r3, [r7, #16]
 81033d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81033d6:	2b00      	cmp	r3, #0
 81033d8:	d10a      	bne.n	81033f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 81033da:	f04f 0350 	mov.w	r3, #80	; 0x50
 81033de:	f383 8811 	msr	BASEPRI, r3
 81033e2:	f3bf 8f6f 	isb	sy
 81033e6:	f3bf 8f4f 	dsb	sy
 81033ea:	60bb      	str	r3, [r7, #8]
}
 81033ec:	bf00      	nop
 81033ee:	e7fe      	b.n	81033ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 81033f0:	693b      	ldr	r3, [r7, #16]
 81033f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81033f4:	1e5a      	subs	r2, r3, #1
 81033f6:	693b      	ldr	r3, [r7, #16]
 81033f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 81033fa:	693b      	ldr	r3, [r7, #16]
 81033fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81033fe:	693b      	ldr	r3, [r7, #16]
 8103400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103402:	429a      	cmp	r2, r3
 8103404:	d02c      	beq.n	8103460 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8103406:	693b      	ldr	r3, [r7, #16]
 8103408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810340a:	2b00      	cmp	r3, #0
 810340c:	d128      	bne.n	8103460 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810340e:	693b      	ldr	r3, [r7, #16]
 8103410:	3304      	adds	r3, #4
 8103412:	4618      	mov	r0, r3
 8103414:	f7fe f9fa 	bl	810180c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8103418:	693b      	ldr	r3, [r7, #16]
 810341a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810341c:	693b      	ldr	r3, [r7, #16]
 810341e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8103420:	693b      	ldr	r3, [r7, #16]
 8103422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103424:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8103428:	693b      	ldr	r3, [r7, #16]
 810342a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810342c:	693b      	ldr	r3, [r7, #16]
 810342e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103430:	4b0f      	ldr	r3, [pc, #60]	; (8103470 <xTaskPriorityDisinherit+0xd4>)
 8103432:	681b      	ldr	r3, [r3, #0]
 8103434:	429a      	cmp	r2, r3
 8103436:	d903      	bls.n	8103440 <xTaskPriorityDisinherit+0xa4>
 8103438:	693b      	ldr	r3, [r7, #16]
 810343a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810343c:	4a0c      	ldr	r2, [pc, #48]	; (8103470 <xTaskPriorityDisinherit+0xd4>)
 810343e:	6013      	str	r3, [r2, #0]
 8103440:	693b      	ldr	r3, [r7, #16]
 8103442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103444:	4613      	mov	r3, r2
 8103446:	009b      	lsls	r3, r3, #2
 8103448:	4413      	add	r3, r2
 810344a:	009b      	lsls	r3, r3, #2
 810344c:	4a09      	ldr	r2, [pc, #36]	; (8103474 <xTaskPriorityDisinherit+0xd8>)
 810344e:	441a      	add	r2, r3
 8103450:	693b      	ldr	r3, [r7, #16]
 8103452:	3304      	adds	r3, #4
 8103454:	4619      	mov	r1, r3
 8103456:	4610      	mov	r0, r2
 8103458:	f7fe f97b 	bl	8101752 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 810345c:	2301      	movs	r3, #1
 810345e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8103460:	697b      	ldr	r3, [r7, #20]
	}
 8103462:	4618      	mov	r0, r3
 8103464:	3718      	adds	r7, #24
 8103466:	46bd      	mov	sp, r7
 8103468:	bd80      	pop	{r7, pc}
 810346a:	bf00      	nop
 810346c:	10004438 	.word	0x10004438
 8103470:	10004914 	.word	0x10004914
 8103474:	1000443c 	.word	0x1000443c

08103478 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8103478:	b580      	push	{r7, lr}
 810347a:	b084      	sub	sp, #16
 810347c:	af00      	add	r7, sp, #0
 810347e:	6078      	str	r0, [r7, #4]
 8103480:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8103482:	4b21      	ldr	r3, [pc, #132]	; (8103508 <prvAddCurrentTaskToDelayedList+0x90>)
 8103484:	681b      	ldr	r3, [r3, #0]
 8103486:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8103488:	4b20      	ldr	r3, [pc, #128]	; (810350c <prvAddCurrentTaskToDelayedList+0x94>)
 810348a:	681b      	ldr	r3, [r3, #0]
 810348c:	3304      	adds	r3, #4
 810348e:	4618      	mov	r0, r3
 8103490:	f7fe f9bc 	bl	810180c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8103494:	687b      	ldr	r3, [r7, #4]
 8103496:	f1b3 3fff 	cmp.w	r3, #4294967295
 810349a:	d10a      	bne.n	81034b2 <prvAddCurrentTaskToDelayedList+0x3a>
 810349c:	683b      	ldr	r3, [r7, #0]
 810349e:	2b00      	cmp	r3, #0
 81034a0:	d007      	beq.n	81034b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81034a2:	4b1a      	ldr	r3, [pc, #104]	; (810350c <prvAddCurrentTaskToDelayedList+0x94>)
 81034a4:	681b      	ldr	r3, [r3, #0]
 81034a6:	3304      	adds	r3, #4
 81034a8:	4619      	mov	r1, r3
 81034aa:	4819      	ldr	r0, [pc, #100]	; (8103510 <prvAddCurrentTaskToDelayedList+0x98>)
 81034ac:	f7fe f951 	bl	8101752 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 81034b0:	e026      	b.n	8103500 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 81034b2:	68fa      	ldr	r2, [r7, #12]
 81034b4:	687b      	ldr	r3, [r7, #4]
 81034b6:	4413      	add	r3, r2
 81034b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 81034ba:	4b14      	ldr	r3, [pc, #80]	; (810350c <prvAddCurrentTaskToDelayedList+0x94>)
 81034bc:	681b      	ldr	r3, [r3, #0]
 81034be:	68ba      	ldr	r2, [r7, #8]
 81034c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 81034c2:	68ba      	ldr	r2, [r7, #8]
 81034c4:	68fb      	ldr	r3, [r7, #12]
 81034c6:	429a      	cmp	r2, r3
 81034c8:	d209      	bcs.n	81034de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81034ca:	4b12      	ldr	r3, [pc, #72]	; (8103514 <prvAddCurrentTaskToDelayedList+0x9c>)
 81034cc:	681a      	ldr	r2, [r3, #0]
 81034ce:	4b0f      	ldr	r3, [pc, #60]	; (810350c <prvAddCurrentTaskToDelayedList+0x94>)
 81034d0:	681b      	ldr	r3, [r3, #0]
 81034d2:	3304      	adds	r3, #4
 81034d4:	4619      	mov	r1, r3
 81034d6:	4610      	mov	r0, r2
 81034d8:	f7fe f95f 	bl	810179a <vListInsert>
}
 81034dc:	e010      	b.n	8103500 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81034de:	4b0e      	ldr	r3, [pc, #56]	; (8103518 <prvAddCurrentTaskToDelayedList+0xa0>)
 81034e0:	681a      	ldr	r2, [r3, #0]
 81034e2:	4b0a      	ldr	r3, [pc, #40]	; (810350c <prvAddCurrentTaskToDelayedList+0x94>)
 81034e4:	681b      	ldr	r3, [r3, #0]
 81034e6:	3304      	adds	r3, #4
 81034e8:	4619      	mov	r1, r3
 81034ea:	4610      	mov	r0, r2
 81034ec:	f7fe f955 	bl	810179a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 81034f0:	4b0a      	ldr	r3, [pc, #40]	; (810351c <prvAddCurrentTaskToDelayedList+0xa4>)
 81034f2:	681b      	ldr	r3, [r3, #0]
 81034f4:	68ba      	ldr	r2, [r7, #8]
 81034f6:	429a      	cmp	r2, r3
 81034f8:	d202      	bcs.n	8103500 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 81034fa:	4a08      	ldr	r2, [pc, #32]	; (810351c <prvAddCurrentTaskToDelayedList+0xa4>)
 81034fc:	68bb      	ldr	r3, [r7, #8]
 81034fe:	6013      	str	r3, [r2, #0]
}
 8103500:	bf00      	nop
 8103502:	3710      	adds	r7, #16
 8103504:	46bd      	mov	sp, r7
 8103506:	bd80      	pop	{r7, pc}
 8103508:	10004910 	.word	0x10004910
 810350c:	10004438 	.word	0x10004438
 8103510:	100048f8 	.word	0x100048f8
 8103514:	100048c8 	.word	0x100048c8
 8103518:	100048c4 	.word	0x100048c4
 810351c:	1000492c 	.word	0x1000492c

08103520 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8103520:	b580      	push	{r7, lr}
 8103522:	b08a      	sub	sp, #40	; 0x28
 8103524:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8103526:	2300      	movs	r3, #0
 8103528:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 810352a:	f000 fb07 	bl	8103b3c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 810352e:	4b1c      	ldr	r3, [pc, #112]	; (81035a0 <xTimerCreateTimerTask+0x80>)
 8103530:	681b      	ldr	r3, [r3, #0]
 8103532:	2b00      	cmp	r3, #0
 8103534:	d021      	beq.n	810357a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8103536:	2300      	movs	r3, #0
 8103538:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 810353a:	2300      	movs	r3, #0
 810353c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 810353e:	1d3a      	adds	r2, r7, #4
 8103540:	f107 0108 	add.w	r1, r7, #8
 8103544:	f107 030c 	add.w	r3, r7, #12
 8103548:	4618      	mov	r0, r3
 810354a:	f7fd fed1 	bl	81012f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 810354e:	6879      	ldr	r1, [r7, #4]
 8103550:	68bb      	ldr	r3, [r7, #8]
 8103552:	68fa      	ldr	r2, [r7, #12]
 8103554:	9202      	str	r2, [sp, #8]
 8103556:	9301      	str	r3, [sp, #4]
 8103558:	2302      	movs	r3, #2
 810355a:	9300      	str	r3, [sp, #0]
 810355c:	2300      	movs	r3, #0
 810355e:	460a      	mov	r2, r1
 8103560:	4910      	ldr	r1, [pc, #64]	; (81035a4 <xTimerCreateTimerTask+0x84>)
 8103562:	4811      	ldr	r0, [pc, #68]	; (81035a8 <xTimerCreateTimerTask+0x88>)
 8103564:	f7ff f8b4 	bl	81026d0 <xTaskCreateStatic>
 8103568:	4603      	mov	r3, r0
 810356a:	4a10      	ldr	r2, [pc, #64]	; (81035ac <xTimerCreateTimerTask+0x8c>)
 810356c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 810356e:	4b0f      	ldr	r3, [pc, #60]	; (81035ac <xTimerCreateTimerTask+0x8c>)
 8103570:	681b      	ldr	r3, [r3, #0]
 8103572:	2b00      	cmp	r3, #0
 8103574:	d001      	beq.n	810357a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8103576:	2301      	movs	r3, #1
 8103578:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 810357a:	697b      	ldr	r3, [r7, #20]
 810357c:	2b00      	cmp	r3, #0
 810357e:	d10a      	bne.n	8103596 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8103580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103584:	f383 8811 	msr	BASEPRI, r3
 8103588:	f3bf 8f6f 	isb	sy
 810358c:	f3bf 8f4f 	dsb	sy
 8103590:	613b      	str	r3, [r7, #16]
}
 8103592:	bf00      	nop
 8103594:	e7fe      	b.n	8103594 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8103596:	697b      	ldr	r3, [r7, #20]
}
 8103598:	4618      	mov	r0, r3
 810359a:	3718      	adds	r7, #24
 810359c:	46bd      	mov	sp, r7
 810359e:	bd80      	pop	{r7, pc}
 81035a0:	10004968 	.word	0x10004968
 81035a4:	08103dec 	.word	0x08103dec
 81035a8:	081036e5 	.word	0x081036e5
 81035ac:	1000496c 	.word	0x1000496c

081035b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 81035b0:	b580      	push	{r7, lr}
 81035b2:	b08a      	sub	sp, #40	; 0x28
 81035b4:	af00      	add	r7, sp, #0
 81035b6:	60f8      	str	r0, [r7, #12]
 81035b8:	60b9      	str	r1, [r7, #8]
 81035ba:	607a      	str	r2, [r7, #4]
 81035bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 81035be:	2300      	movs	r3, #0
 81035c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 81035c2:	68fb      	ldr	r3, [r7, #12]
 81035c4:	2b00      	cmp	r3, #0
 81035c6:	d10a      	bne.n	81035de <xTimerGenericCommand+0x2e>
	__asm volatile
 81035c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81035cc:	f383 8811 	msr	BASEPRI, r3
 81035d0:	f3bf 8f6f 	isb	sy
 81035d4:	f3bf 8f4f 	dsb	sy
 81035d8:	623b      	str	r3, [r7, #32]
}
 81035da:	bf00      	nop
 81035dc:	e7fe      	b.n	81035dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 81035de:	4b1a      	ldr	r3, [pc, #104]	; (8103648 <xTimerGenericCommand+0x98>)
 81035e0:	681b      	ldr	r3, [r3, #0]
 81035e2:	2b00      	cmp	r3, #0
 81035e4:	d02a      	beq.n	810363c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 81035e6:	68bb      	ldr	r3, [r7, #8]
 81035e8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 81035ea:	687b      	ldr	r3, [r7, #4]
 81035ec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 81035ee:	68fb      	ldr	r3, [r7, #12]
 81035f0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 81035f2:	68bb      	ldr	r3, [r7, #8]
 81035f4:	2b05      	cmp	r3, #5
 81035f6:	dc18      	bgt.n	810362a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 81035f8:	f7ff feb2 	bl	8103360 <xTaskGetSchedulerState>
 81035fc:	4603      	mov	r3, r0
 81035fe:	2b02      	cmp	r3, #2
 8103600:	d109      	bne.n	8103616 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8103602:	4b11      	ldr	r3, [pc, #68]	; (8103648 <xTimerGenericCommand+0x98>)
 8103604:	6818      	ldr	r0, [r3, #0]
 8103606:	f107 0110 	add.w	r1, r7, #16
 810360a:	2300      	movs	r3, #0
 810360c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810360e:	f7fe fc77 	bl	8101f00 <xQueueGenericSend>
 8103612:	6278      	str	r0, [r7, #36]	; 0x24
 8103614:	e012      	b.n	810363c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8103616:	4b0c      	ldr	r3, [pc, #48]	; (8103648 <xTimerGenericCommand+0x98>)
 8103618:	6818      	ldr	r0, [r3, #0]
 810361a:	f107 0110 	add.w	r1, r7, #16
 810361e:	2300      	movs	r3, #0
 8103620:	2200      	movs	r2, #0
 8103622:	f7fe fc6d 	bl	8101f00 <xQueueGenericSend>
 8103626:	6278      	str	r0, [r7, #36]	; 0x24
 8103628:	e008      	b.n	810363c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 810362a:	4b07      	ldr	r3, [pc, #28]	; (8103648 <xTimerGenericCommand+0x98>)
 810362c:	6818      	ldr	r0, [r3, #0]
 810362e:	f107 0110 	add.w	r1, r7, #16
 8103632:	2300      	movs	r3, #0
 8103634:	683a      	ldr	r2, [r7, #0]
 8103636:	f7fe fd61 	bl	81020fc <xQueueGenericSendFromISR>
 810363a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 810363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 810363e:	4618      	mov	r0, r3
 8103640:	3728      	adds	r7, #40	; 0x28
 8103642:	46bd      	mov	sp, r7
 8103644:	bd80      	pop	{r7, pc}
 8103646:	bf00      	nop
 8103648:	10004968 	.word	0x10004968

0810364c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 810364c:	b580      	push	{r7, lr}
 810364e:	b088      	sub	sp, #32
 8103650:	af02      	add	r7, sp, #8
 8103652:	6078      	str	r0, [r7, #4]
 8103654:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8103656:	4b22      	ldr	r3, [pc, #136]	; (81036e0 <prvProcessExpiredTimer+0x94>)
 8103658:	681b      	ldr	r3, [r3, #0]
 810365a:	68db      	ldr	r3, [r3, #12]
 810365c:	68db      	ldr	r3, [r3, #12]
 810365e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8103660:	697b      	ldr	r3, [r7, #20]
 8103662:	3304      	adds	r3, #4
 8103664:	4618      	mov	r0, r3
 8103666:	f7fe f8d1 	bl	810180c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810366a:	697b      	ldr	r3, [r7, #20]
 810366c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8103670:	f003 0304 	and.w	r3, r3, #4
 8103674:	2b00      	cmp	r3, #0
 8103676:	d022      	beq.n	81036be <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8103678:	697b      	ldr	r3, [r7, #20]
 810367a:	699a      	ldr	r2, [r3, #24]
 810367c:	687b      	ldr	r3, [r7, #4]
 810367e:	18d1      	adds	r1, r2, r3
 8103680:	687b      	ldr	r3, [r7, #4]
 8103682:	683a      	ldr	r2, [r7, #0]
 8103684:	6978      	ldr	r0, [r7, #20]
 8103686:	f000 f8d1 	bl	810382c <prvInsertTimerInActiveList>
 810368a:	4603      	mov	r3, r0
 810368c:	2b00      	cmp	r3, #0
 810368e:	d01f      	beq.n	81036d0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8103690:	2300      	movs	r3, #0
 8103692:	9300      	str	r3, [sp, #0]
 8103694:	2300      	movs	r3, #0
 8103696:	687a      	ldr	r2, [r7, #4]
 8103698:	2100      	movs	r1, #0
 810369a:	6978      	ldr	r0, [r7, #20]
 810369c:	f7ff ff88 	bl	81035b0 <xTimerGenericCommand>
 81036a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 81036a2:	693b      	ldr	r3, [r7, #16]
 81036a4:	2b00      	cmp	r3, #0
 81036a6:	d113      	bne.n	81036d0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 81036a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81036ac:	f383 8811 	msr	BASEPRI, r3
 81036b0:	f3bf 8f6f 	isb	sy
 81036b4:	f3bf 8f4f 	dsb	sy
 81036b8:	60fb      	str	r3, [r7, #12]
}
 81036ba:	bf00      	nop
 81036bc:	e7fe      	b.n	81036bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81036be:	697b      	ldr	r3, [r7, #20]
 81036c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81036c4:	f023 0301 	bic.w	r3, r3, #1
 81036c8:	b2da      	uxtb	r2, r3
 81036ca:	697b      	ldr	r3, [r7, #20]
 81036cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81036d0:	697b      	ldr	r3, [r7, #20]
 81036d2:	6a1b      	ldr	r3, [r3, #32]
 81036d4:	6978      	ldr	r0, [r7, #20]
 81036d6:	4798      	blx	r3
}
 81036d8:	bf00      	nop
 81036da:	3718      	adds	r7, #24
 81036dc:	46bd      	mov	sp, r7
 81036de:	bd80      	pop	{r7, pc}
 81036e0:	10004960 	.word	0x10004960

081036e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 81036e4:	b580      	push	{r7, lr}
 81036e6:	b084      	sub	sp, #16
 81036e8:	af00      	add	r7, sp, #0
 81036ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 81036ec:	f107 0308 	add.w	r3, r7, #8
 81036f0:	4618      	mov	r0, r3
 81036f2:	f000 f857 	bl	81037a4 <prvGetNextExpireTime>
 81036f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 81036f8:	68bb      	ldr	r3, [r7, #8]
 81036fa:	4619      	mov	r1, r3
 81036fc:	68f8      	ldr	r0, [r7, #12]
 81036fe:	f000 f803 	bl	8103708 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8103702:	f000 f8d5 	bl	81038b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8103706:	e7f1      	b.n	81036ec <prvTimerTask+0x8>

08103708 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8103708:	b580      	push	{r7, lr}
 810370a:	b084      	sub	sp, #16
 810370c:	af00      	add	r7, sp, #0
 810370e:	6078      	str	r0, [r7, #4]
 8103710:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8103712:	f7ff fa39 	bl	8102b88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8103716:	f107 0308 	add.w	r3, r7, #8
 810371a:	4618      	mov	r0, r3
 810371c:	f000 f866 	bl	81037ec <prvSampleTimeNow>
 8103720:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8103722:	68bb      	ldr	r3, [r7, #8]
 8103724:	2b00      	cmp	r3, #0
 8103726:	d130      	bne.n	810378a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8103728:	683b      	ldr	r3, [r7, #0]
 810372a:	2b00      	cmp	r3, #0
 810372c:	d10a      	bne.n	8103744 <prvProcessTimerOrBlockTask+0x3c>
 810372e:	687a      	ldr	r2, [r7, #4]
 8103730:	68fb      	ldr	r3, [r7, #12]
 8103732:	429a      	cmp	r2, r3
 8103734:	d806      	bhi.n	8103744 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8103736:	f7ff fa35 	bl	8102ba4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 810373a:	68f9      	ldr	r1, [r7, #12]
 810373c:	6878      	ldr	r0, [r7, #4]
 810373e:	f7ff ff85 	bl	810364c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8103742:	e024      	b.n	810378e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8103744:	683b      	ldr	r3, [r7, #0]
 8103746:	2b00      	cmp	r3, #0
 8103748:	d008      	beq.n	810375c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 810374a:	4b13      	ldr	r3, [pc, #76]	; (8103798 <prvProcessTimerOrBlockTask+0x90>)
 810374c:	681b      	ldr	r3, [r3, #0]
 810374e:	681b      	ldr	r3, [r3, #0]
 8103750:	2b00      	cmp	r3, #0
 8103752:	d101      	bne.n	8103758 <prvProcessTimerOrBlockTask+0x50>
 8103754:	2301      	movs	r3, #1
 8103756:	e000      	b.n	810375a <prvProcessTimerOrBlockTask+0x52>
 8103758:	2300      	movs	r3, #0
 810375a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 810375c:	4b0f      	ldr	r3, [pc, #60]	; (810379c <prvProcessTimerOrBlockTask+0x94>)
 810375e:	6818      	ldr	r0, [r3, #0]
 8103760:	687a      	ldr	r2, [r7, #4]
 8103762:	68fb      	ldr	r3, [r7, #12]
 8103764:	1ad3      	subs	r3, r2, r3
 8103766:	683a      	ldr	r2, [r7, #0]
 8103768:	4619      	mov	r1, r3
 810376a:	f7fe ff7d 	bl	8102668 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 810376e:	f7ff fa19 	bl	8102ba4 <xTaskResumeAll>
 8103772:	4603      	mov	r3, r0
 8103774:	2b00      	cmp	r3, #0
 8103776:	d10a      	bne.n	810378e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8103778:	4b09      	ldr	r3, [pc, #36]	; (81037a0 <prvProcessTimerOrBlockTask+0x98>)
 810377a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810377e:	601a      	str	r2, [r3, #0]
 8103780:	f3bf 8f4f 	dsb	sy
 8103784:	f3bf 8f6f 	isb	sy
}
 8103788:	e001      	b.n	810378e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 810378a:	f7ff fa0b 	bl	8102ba4 <xTaskResumeAll>
}
 810378e:	bf00      	nop
 8103790:	3710      	adds	r7, #16
 8103792:	46bd      	mov	sp, r7
 8103794:	bd80      	pop	{r7, pc}
 8103796:	bf00      	nop
 8103798:	10004964 	.word	0x10004964
 810379c:	10004968 	.word	0x10004968
 81037a0:	e000ed04 	.word	0xe000ed04

081037a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 81037a4:	b480      	push	{r7}
 81037a6:	b085      	sub	sp, #20
 81037a8:	af00      	add	r7, sp, #0
 81037aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 81037ac:	4b0e      	ldr	r3, [pc, #56]	; (81037e8 <prvGetNextExpireTime+0x44>)
 81037ae:	681b      	ldr	r3, [r3, #0]
 81037b0:	681b      	ldr	r3, [r3, #0]
 81037b2:	2b00      	cmp	r3, #0
 81037b4:	d101      	bne.n	81037ba <prvGetNextExpireTime+0x16>
 81037b6:	2201      	movs	r2, #1
 81037b8:	e000      	b.n	81037bc <prvGetNextExpireTime+0x18>
 81037ba:	2200      	movs	r2, #0
 81037bc:	687b      	ldr	r3, [r7, #4]
 81037be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 81037c0:	687b      	ldr	r3, [r7, #4]
 81037c2:	681b      	ldr	r3, [r3, #0]
 81037c4:	2b00      	cmp	r3, #0
 81037c6:	d105      	bne.n	81037d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81037c8:	4b07      	ldr	r3, [pc, #28]	; (81037e8 <prvGetNextExpireTime+0x44>)
 81037ca:	681b      	ldr	r3, [r3, #0]
 81037cc:	68db      	ldr	r3, [r3, #12]
 81037ce:	681b      	ldr	r3, [r3, #0]
 81037d0:	60fb      	str	r3, [r7, #12]
 81037d2:	e001      	b.n	81037d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 81037d4:	2300      	movs	r3, #0
 81037d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 81037d8:	68fb      	ldr	r3, [r7, #12]
}
 81037da:	4618      	mov	r0, r3
 81037dc:	3714      	adds	r7, #20
 81037de:	46bd      	mov	sp, r7
 81037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037e4:	4770      	bx	lr
 81037e6:	bf00      	nop
 81037e8:	10004960 	.word	0x10004960

081037ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 81037ec:	b580      	push	{r7, lr}
 81037ee:	b084      	sub	sp, #16
 81037f0:	af00      	add	r7, sp, #0
 81037f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 81037f4:	f7ff fa74 	bl	8102ce0 <xTaskGetTickCount>
 81037f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 81037fa:	4b0b      	ldr	r3, [pc, #44]	; (8103828 <prvSampleTimeNow+0x3c>)
 81037fc:	681b      	ldr	r3, [r3, #0]
 81037fe:	68fa      	ldr	r2, [r7, #12]
 8103800:	429a      	cmp	r2, r3
 8103802:	d205      	bcs.n	8103810 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8103804:	f000 f936 	bl	8103a74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8103808:	687b      	ldr	r3, [r7, #4]
 810380a:	2201      	movs	r2, #1
 810380c:	601a      	str	r2, [r3, #0]
 810380e:	e002      	b.n	8103816 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8103810:	687b      	ldr	r3, [r7, #4]
 8103812:	2200      	movs	r2, #0
 8103814:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8103816:	4a04      	ldr	r2, [pc, #16]	; (8103828 <prvSampleTimeNow+0x3c>)
 8103818:	68fb      	ldr	r3, [r7, #12]
 810381a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 810381c:	68fb      	ldr	r3, [r7, #12]
}
 810381e:	4618      	mov	r0, r3
 8103820:	3710      	adds	r7, #16
 8103822:	46bd      	mov	sp, r7
 8103824:	bd80      	pop	{r7, pc}
 8103826:	bf00      	nop
 8103828:	10004970 	.word	0x10004970

0810382c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 810382c:	b580      	push	{r7, lr}
 810382e:	b086      	sub	sp, #24
 8103830:	af00      	add	r7, sp, #0
 8103832:	60f8      	str	r0, [r7, #12]
 8103834:	60b9      	str	r1, [r7, #8]
 8103836:	607a      	str	r2, [r7, #4]
 8103838:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 810383a:	2300      	movs	r3, #0
 810383c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 810383e:	68fb      	ldr	r3, [r7, #12]
 8103840:	68ba      	ldr	r2, [r7, #8]
 8103842:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8103844:	68fb      	ldr	r3, [r7, #12]
 8103846:	68fa      	ldr	r2, [r7, #12]
 8103848:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 810384a:	68ba      	ldr	r2, [r7, #8]
 810384c:	687b      	ldr	r3, [r7, #4]
 810384e:	429a      	cmp	r2, r3
 8103850:	d812      	bhi.n	8103878 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8103852:	687a      	ldr	r2, [r7, #4]
 8103854:	683b      	ldr	r3, [r7, #0]
 8103856:	1ad2      	subs	r2, r2, r3
 8103858:	68fb      	ldr	r3, [r7, #12]
 810385a:	699b      	ldr	r3, [r3, #24]
 810385c:	429a      	cmp	r2, r3
 810385e:	d302      	bcc.n	8103866 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8103860:	2301      	movs	r3, #1
 8103862:	617b      	str	r3, [r7, #20]
 8103864:	e01b      	b.n	810389e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8103866:	4b10      	ldr	r3, [pc, #64]	; (81038a8 <prvInsertTimerInActiveList+0x7c>)
 8103868:	681a      	ldr	r2, [r3, #0]
 810386a:	68fb      	ldr	r3, [r7, #12]
 810386c:	3304      	adds	r3, #4
 810386e:	4619      	mov	r1, r3
 8103870:	4610      	mov	r0, r2
 8103872:	f7fd ff92 	bl	810179a <vListInsert>
 8103876:	e012      	b.n	810389e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8103878:	687a      	ldr	r2, [r7, #4]
 810387a:	683b      	ldr	r3, [r7, #0]
 810387c:	429a      	cmp	r2, r3
 810387e:	d206      	bcs.n	810388e <prvInsertTimerInActiveList+0x62>
 8103880:	68ba      	ldr	r2, [r7, #8]
 8103882:	683b      	ldr	r3, [r7, #0]
 8103884:	429a      	cmp	r2, r3
 8103886:	d302      	bcc.n	810388e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8103888:	2301      	movs	r3, #1
 810388a:	617b      	str	r3, [r7, #20]
 810388c:	e007      	b.n	810389e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810388e:	4b07      	ldr	r3, [pc, #28]	; (81038ac <prvInsertTimerInActiveList+0x80>)
 8103890:	681a      	ldr	r2, [r3, #0]
 8103892:	68fb      	ldr	r3, [r7, #12]
 8103894:	3304      	adds	r3, #4
 8103896:	4619      	mov	r1, r3
 8103898:	4610      	mov	r0, r2
 810389a:	f7fd ff7e 	bl	810179a <vListInsert>
		}
	}

	return xProcessTimerNow;
 810389e:	697b      	ldr	r3, [r7, #20]
}
 81038a0:	4618      	mov	r0, r3
 81038a2:	3718      	adds	r7, #24
 81038a4:	46bd      	mov	sp, r7
 81038a6:	bd80      	pop	{r7, pc}
 81038a8:	10004964 	.word	0x10004964
 81038ac:	10004960 	.word	0x10004960

081038b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 81038b0:	b580      	push	{r7, lr}
 81038b2:	b08e      	sub	sp, #56	; 0x38
 81038b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 81038b6:	e0ca      	b.n	8103a4e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 81038b8:	687b      	ldr	r3, [r7, #4]
 81038ba:	2b00      	cmp	r3, #0
 81038bc:	da18      	bge.n	81038f0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 81038be:	1d3b      	adds	r3, r7, #4
 81038c0:	3304      	adds	r3, #4
 81038c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 81038c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81038c6:	2b00      	cmp	r3, #0
 81038c8:	d10a      	bne.n	81038e0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 81038ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 81038ce:	f383 8811 	msr	BASEPRI, r3
 81038d2:	f3bf 8f6f 	isb	sy
 81038d6:	f3bf 8f4f 	dsb	sy
 81038da:	61fb      	str	r3, [r7, #28]
}
 81038dc:	bf00      	nop
 81038de:	e7fe      	b.n	81038de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 81038e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81038e2:	681b      	ldr	r3, [r3, #0]
 81038e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81038e6:	6850      	ldr	r0, [r2, #4]
 81038e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81038ea:	6892      	ldr	r2, [r2, #8]
 81038ec:	4611      	mov	r1, r2
 81038ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 81038f0:	687b      	ldr	r3, [r7, #4]
 81038f2:	2b00      	cmp	r3, #0
 81038f4:	f2c0 80aa 	blt.w	8103a4c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 81038f8:	68fb      	ldr	r3, [r7, #12]
 81038fa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 81038fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81038fe:	695b      	ldr	r3, [r3, #20]
 8103900:	2b00      	cmp	r3, #0
 8103902:	d004      	beq.n	810390e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8103904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103906:	3304      	adds	r3, #4
 8103908:	4618      	mov	r0, r3
 810390a:	f7fd ff7f 	bl	810180c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810390e:	463b      	mov	r3, r7
 8103910:	4618      	mov	r0, r3
 8103912:	f7ff ff6b 	bl	81037ec <prvSampleTimeNow>
 8103916:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8103918:	687b      	ldr	r3, [r7, #4]
 810391a:	2b09      	cmp	r3, #9
 810391c:	f200 8097 	bhi.w	8103a4e <prvProcessReceivedCommands+0x19e>
 8103920:	a201      	add	r2, pc, #4	; (adr r2, 8103928 <prvProcessReceivedCommands+0x78>)
 8103922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103926:	bf00      	nop
 8103928:	08103951 	.word	0x08103951
 810392c:	08103951 	.word	0x08103951
 8103930:	08103951 	.word	0x08103951
 8103934:	081039c5 	.word	0x081039c5
 8103938:	081039d9 	.word	0x081039d9
 810393c:	08103a23 	.word	0x08103a23
 8103940:	08103951 	.word	0x08103951
 8103944:	08103951 	.word	0x08103951
 8103948:	081039c5 	.word	0x081039c5
 810394c:	081039d9 	.word	0x081039d9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8103950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103952:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8103956:	f043 0301 	orr.w	r3, r3, #1
 810395a:	b2da      	uxtb	r2, r3
 810395c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810395e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8103962:	68ba      	ldr	r2, [r7, #8]
 8103964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103966:	699b      	ldr	r3, [r3, #24]
 8103968:	18d1      	adds	r1, r2, r3
 810396a:	68bb      	ldr	r3, [r7, #8]
 810396c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810396e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8103970:	f7ff ff5c 	bl	810382c <prvInsertTimerInActiveList>
 8103974:	4603      	mov	r3, r0
 8103976:	2b00      	cmp	r3, #0
 8103978:	d069      	beq.n	8103a4e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810397a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810397c:	6a1b      	ldr	r3, [r3, #32]
 810397e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8103980:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8103982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103984:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8103988:	f003 0304 	and.w	r3, r3, #4
 810398c:	2b00      	cmp	r3, #0
 810398e:	d05e      	beq.n	8103a4e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8103990:	68ba      	ldr	r2, [r7, #8]
 8103992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103994:	699b      	ldr	r3, [r3, #24]
 8103996:	441a      	add	r2, r3
 8103998:	2300      	movs	r3, #0
 810399a:	9300      	str	r3, [sp, #0]
 810399c:	2300      	movs	r3, #0
 810399e:	2100      	movs	r1, #0
 81039a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81039a2:	f7ff fe05 	bl	81035b0 <xTimerGenericCommand>
 81039a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 81039a8:	6a3b      	ldr	r3, [r7, #32]
 81039aa:	2b00      	cmp	r3, #0
 81039ac:	d14f      	bne.n	8103a4e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 81039ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 81039b2:	f383 8811 	msr	BASEPRI, r3
 81039b6:	f3bf 8f6f 	isb	sy
 81039ba:	f3bf 8f4f 	dsb	sy
 81039be:	61bb      	str	r3, [r7, #24]
}
 81039c0:	bf00      	nop
 81039c2:	e7fe      	b.n	81039c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81039c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81039c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81039ca:	f023 0301 	bic.w	r3, r3, #1
 81039ce:	b2da      	uxtb	r2, r3
 81039d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81039d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 81039d6:	e03a      	b.n	8103a4e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 81039d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81039da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81039de:	f043 0301 	orr.w	r3, r3, #1
 81039e2:	b2da      	uxtb	r2, r3
 81039e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81039e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 81039ea:	68ba      	ldr	r2, [r7, #8]
 81039ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81039ee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 81039f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81039f2:	699b      	ldr	r3, [r3, #24]
 81039f4:	2b00      	cmp	r3, #0
 81039f6:	d10a      	bne.n	8103a0e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 81039f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81039fc:	f383 8811 	msr	BASEPRI, r3
 8103a00:	f3bf 8f6f 	isb	sy
 8103a04:	f3bf 8f4f 	dsb	sy
 8103a08:	617b      	str	r3, [r7, #20]
}
 8103a0a:	bf00      	nop
 8103a0c:	e7fe      	b.n	8103a0c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8103a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103a10:	699a      	ldr	r2, [r3, #24]
 8103a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103a14:	18d1      	adds	r1, r2, r3
 8103a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103a1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8103a1c:	f7ff ff06 	bl	810382c <prvInsertTimerInActiveList>
					break;
 8103a20:	e015      	b.n	8103a4e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8103a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103a24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8103a28:	f003 0302 	and.w	r3, r3, #2
 8103a2c:	2b00      	cmp	r3, #0
 8103a2e:	d103      	bne.n	8103a38 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8103a30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8103a32:	f7fd fd43 	bl	81014bc <vPortFree>
 8103a36:	e00a      	b.n	8103a4e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8103a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103a3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8103a3e:	f023 0301 	bic.w	r3, r3, #1
 8103a42:	b2da      	uxtb	r2, r3
 8103a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103a46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8103a4a:	e000      	b.n	8103a4e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8103a4c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8103a4e:	4b08      	ldr	r3, [pc, #32]	; (8103a70 <prvProcessReceivedCommands+0x1c0>)
 8103a50:	681b      	ldr	r3, [r3, #0]
 8103a52:	1d39      	adds	r1, r7, #4
 8103a54:	2200      	movs	r2, #0
 8103a56:	4618      	mov	r0, r3
 8103a58:	f7fe fbec 	bl	8102234 <xQueueReceive>
 8103a5c:	4603      	mov	r3, r0
 8103a5e:	2b00      	cmp	r3, #0
 8103a60:	f47f af2a 	bne.w	81038b8 <prvProcessReceivedCommands+0x8>
	}
}
 8103a64:	bf00      	nop
 8103a66:	bf00      	nop
 8103a68:	3730      	adds	r7, #48	; 0x30
 8103a6a:	46bd      	mov	sp, r7
 8103a6c:	bd80      	pop	{r7, pc}
 8103a6e:	bf00      	nop
 8103a70:	10004968 	.word	0x10004968

08103a74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8103a74:	b580      	push	{r7, lr}
 8103a76:	b088      	sub	sp, #32
 8103a78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8103a7a:	e048      	b.n	8103b0e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8103a7c:	4b2d      	ldr	r3, [pc, #180]	; (8103b34 <prvSwitchTimerLists+0xc0>)
 8103a7e:	681b      	ldr	r3, [r3, #0]
 8103a80:	68db      	ldr	r3, [r3, #12]
 8103a82:	681b      	ldr	r3, [r3, #0]
 8103a84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8103a86:	4b2b      	ldr	r3, [pc, #172]	; (8103b34 <prvSwitchTimerLists+0xc0>)
 8103a88:	681b      	ldr	r3, [r3, #0]
 8103a8a:	68db      	ldr	r3, [r3, #12]
 8103a8c:	68db      	ldr	r3, [r3, #12]
 8103a8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8103a90:	68fb      	ldr	r3, [r7, #12]
 8103a92:	3304      	adds	r3, #4
 8103a94:	4618      	mov	r0, r3
 8103a96:	f7fd feb9 	bl	810180c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8103a9a:	68fb      	ldr	r3, [r7, #12]
 8103a9c:	6a1b      	ldr	r3, [r3, #32]
 8103a9e:	68f8      	ldr	r0, [r7, #12]
 8103aa0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8103aa2:	68fb      	ldr	r3, [r7, #12]
 8103aa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8103aa8:	f003 0304 	and.w	r3, r3, #4
 8103aac:	2b00      	cmp	r3, #0
 8103aae:	d02e      	beq.n	8103b0e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8103ab0:	68fb      	ldr	r3, [r7, #12]
 8103ab2:	699b      	ldr	r3, [r3, #24]
 8103ab4:	693a      	ldr	r2, [r7, #16]
 8103ab6:	4413      	add	r3, r2
 8103ab8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8103aba:	68ba      	ldr	r2, [r7, #8]
 8103abc:	693b      	ldr	r3, [r7, #16]
 8103abe:	429a      	cmp	r2, r3
 8103ac0:	d90e      	bls.n	8103ae0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8103ac2:	68fb      	ldr	r3, [r7, #12]
 8103ac4:	68ba      	ldr	r2, [r7, #8]
 8103ac6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8103ac8:	68fb      	ldr	r3, [r7, #12]
 8103aca:	68fa      	ldr	r2, [r7, #12]
 8103acc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8103ace:	4b19      	ldr	r3, [pc, #100]	; (8103b34 <prvSwitchTimerLists+0xc0>)
 8103ad0:	681a      	ldr	r2, [r3, #0]
 8103ad2:	68fb      	ldr	r3, [r7, #12]
 8103ad4:	3304      	adds	r3, #4
 8103ad6:	4619      	mov	r1, r3
 8103ad8:	4610      	mov	r0, r2
 8103ada:	f7fd fe5e 	bl	810179a <vListInsert>
 8103ade:	e016      	b.n	8103b0e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8103ae0:	2300      	movs	r3, #0
 8103ae2:	9300      	str	r3, [sp, #0]
 8103ae4:	2300      	movs	r3, #0
 8103ae6:	693a      	ldr	r2, [r7, #16]
 8103ae8:	2100      	movs	r1, #0
 8103aea:	68f8      	ldr	r0, [r7, #12]
 8103aec:	f7ff fd60 	bl	81035b0 <xTimerGenericCommand>
 8103af0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8103af2:	687b      	ldr	r3, [r7, #4]
 8103af4:	2b00      	cmp	r3, #0
 8103af6:	d10a      	bne.n	8103b0e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8103af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103afc:	f383 8811 	msr	BASEPRI, r3
 8103b00:	f3bf 8f6f 	isb	sy
 8103b04:	f3bf 8f4f 	dsb	sy
 8103b08:	603b      	str	r3, [r7, #0]
}
 8103b0a:	bf00      	nop
 8103b0c:	e7fe      	b.n	8103b0c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8103b0e:	4b09      	ldr	r3, [pc, #36]	; (8103b34 <prvSwitchTimerLists+0xc0>)
 8103b10:	681b      	ldr	r3, [r3, #0]
 8103b12:	681b      	ldr	r3, [r3, #0]
 8103b14:	2b00      	cmp	r3, #0
 8103b16:	d1b1      	bne.n	8103a7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8103b18:	4b06      	ldr	r3, [pc, #24]	; (8103b34 <prvSwitchTimerLists+0xc0>)
 8103b1a:	681b      	ldr	r3, [r3, #0]
 8103b1c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8103b1e:	4b06      	ldr	r3, [pc, #24]	; (8103b38 <prvSwitchTimerLists+0xc4>)
 8103b20:	681b      	ldr	r3, [r3, #0]
 8103b22:	4a04      	ldr	r2, [pc, #16]	; (8103b34 <prvSwitchTimerLists+0xc0>)
 8103b24:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8103b26:	4a04      	ldr	r2, [pc, #16]	; (8103b38 <prvSwitchTimerLists+0xc4>)
 8103b28:	697b      	ldr	r3, [r7, #20]
 8103b2a:	6013      	str	r3, [r2, #0]
}
 8103b2c:	bf00      	nop
 8103b2e:	3718      	adds	r7, #24
 8103b30:	46bd      	mov	sp, r7
 8103b32:	bd80      	pop	{r7, pc}
 8103b34:	10004960 	.word	0x10004960
 8103b38:	10004964 	.word	0x10004964

08103b3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8103b3c:	b580      	push	{r7, lr}
 8103b3e:	b082      	sub	sp, #8
 8103b40:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8103b42:	f7fd ffb7 	bl	8101ab4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8103b46:	4b15      	ldr	r3, [pc, #84]	; (8103b9c <prvCheckForValidListAndQueue+0x60>)
 8103b48:	681b      	ldr	r3, [r3, #0]
 8103b4a:	2b00      	cmp	r3, #0
 8103b4c:	d120      	bne.n	8103b90 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8103b4e:	4814      	ldr	r0, [pc, #80]	; (8103ba0 <prvCheckForValidListAndQueue+0x64>)
 8103b50:	f7fd fdd2 	bl	81016f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8103b54:	4813      	ldr	r0, [pc, #76]	; (8103ba4 <prvCheckForValidListAndQueue+0x68>)
 8103b56:	f7fd fdcf 	bl	81016f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8103b5a:	4b13      	ldr	r3, [pc, #76]	; (8103ba8 <prvCheckForValidListAndQueue+0x6c>)
 8103b5c:	4a10      	ldr	r2, [pc, #64]	; (8103ba0 <prvCheckForValidListAndQueue+0x64>)
 8103b5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8103b60:	4b12      	ldr	r3, [pc, #72]	; (8103bac <prvCheckForValidListAndQueue+0x70>)
 8103b62:	4a10      	ldr	r2, [pc, #64]	; (8103ba4 <prvCheckForValidListAndQueue+0x68>)
 8103b64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8103b66:	2300      	movs	r3, #0
 8103b68:	9300      	str	r3, [sp, #0]
 8103b6a:	4b11      	ldr	r3, [pc, #68]	; (8103bb0 <prvCheckForValidListAndQueue+0x74>)
 8103b6c:	4a11      	ldr	r2, [pc, #68]	; (8103bb4 <prvCheckForValidListAndQueue+0x78>)
 8103b6e:	2110      	movs	r1, #16
 8103b70:	200a      	movs	r0, #10
 8103b72:	f7fe f929 	bl	8101dc8 <xQueueGenericCreateStatic>
 8103b76:	4603      	mov	r3, r0
 8103b78:	4a08      	ldr	r2, [pc, #32]	; (8103b9c <prvCheckForValidListAndQueue+0x60>)
 8103b7a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8103b7c:	4b07      	ldr	r3, [pc, #28]	; (8103b9c <prvCheckForValidListAndQueue+0x60>)
 8103b7e:	681b      	ldr	r3, [r3, #0]
 8103b80:	2b00      	cmp	r3, #0
 8103b82:	d005      	beq.n	8103b90 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8103b84:	4b05      	ldr	r3, [pc, #20]	; (8103b9c <prvCheckForValidListAndQueue+0x60>)
 8103b86:	681b      	ldr	r3, [r3, #0]
 8103b88:	490b      	ldr	r1, [pc, #44]	; (8103bb8 <prvCheckForValidListAndQueue+0x7c>)
 8103b8a:	4618      	mov	r0, r3
 8103b8c:	f7fe fd42 	bl	8102614 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8103b90:	f7fd ffc0 	bl	8101b14 <vPortExitCritical>
}
 8103b94:	bf00      	nop
 8103b96:	46bd      	mov	sp, r7
 8103b98:	bd80      	pop	{r7, pc}
 8103b9a:	bf00      	nop
 8103b9c:	10004968 	.word	0x10004968
 8103ba0:	10004938 	.word	0x10004938
 8103ba4:	1000494c 	.word	0x1000494c
 8103ba8:	10004960 	.word	0x10004960
 8103bac:	10004964 	.word	0x10004964
 8103bb0:	10004a14 	.word	0x10004a14
 8103bb4:	10004974 	.word	0x10004974
 8103bb8:	08103df4 	.word	0x08103df4

08103bbc <__libc_init_array>:
 8103bbc:	b570      	push	{r4, r5, r6, lr}
 8103bbe:	4d0d      	ldr	r5, [pc, #52]	; (8103bf4 <__libc_init_array+0x38>)
 8103bc0:	4c0d      	ldr	r4, [pc, #52]	; (8103bf8 <__libc_init_array+0x3c>)
 8103bc2:	1b64      	subs	r4, r4, r5
 8103bc4:	10a4      	asrs	r4, r4, #2
 8103bc6:	2600      	movs	r6, #0
 8103bc8:	42a6      	cmp	r6, r4
 8103bca:	d109      	bne.n	8103be0 <__libc_init_array+0x24>
 8103bcc:	4d0b      	ldr	r5, [pc, #44]	; (8103bfc <__libc_init_array+0x40>)
 8103bce:	4c0c      	ldr	r4, [pc, #48]	; (8103c00 <__libc_init_array+0x44>)
 8103bd0:	f000 f8f6 	bl	8103dc0 <_init>
 8103bd4:	1b64      	subs	r4, r4, r5
 8103bd6:	10a4      	asrs	r4, r4, #2
 8103bd8:	2600      	movs	r6, #0
 8103bda:	42a6      	cmp	r6, r4
 8103bdc:	d105      	bne.n	8103bea <__libc_init_array+0x2e>
 8103bde:	bd70      	pop	{r4, r5, r6, pc}
 8103be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8103be4:	4798      	blx	r3
 8103be6:	3601      	adds	r6, #1
 8103be8:	e7ee      	b.n	8103bc8 <__libc_init_array+0xc>
 8103bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8103bee:	4798      	blx	r3
 8103bf0:	3601      	adds	r6, #1
 8103bf2:	e7f2      	b.n	8103bda <__libc_init_array+0x1e>
 8103bf4:	08103e90 	.word	0x08103e90
 8103bf8:	08103e90 	.word	0x08103e90
 8103bfc:	08103e90 	.word	0x08103e90
 8103c00:	08103e94 	.word	0x08103e94

08103c04 <__retarget_lock_acquire_recursive>:
 8103c04:	4770      	bx	lr

08103c06 <__retarget_lock_release_recursive>:
 8103c06:	4770      	bx	lr

08103c08 <memcpy>:
 8103c08:	440a      	add	r2, r1
 8103c0a:	4291      	cmp	r1, r2
 8103c0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8103c10:	d100      	bne.n	8103c14 <memcpy+0xc>
 8103c12:	4770      	bx	lr
 8103c14:	b510      	push	{r4, lr}
 8103c16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8103c1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8103c1e:	4291      	cmp	r1, r2
 8103c20:	d1f9      	bne.n	8103c16 <memcpy+0xe>
 8103c22:	bd10      	pop	{r4, pc}

08103c24 <memset>:
 8103c24:	4402      	add	r2, r0
 8103c26:	4603      	mov	r3, r0
 8103c28:	4293      	cmp	r3, r2
 8103c2a:	d100      	bne.n	8103c2e <memset+0xa>
 8103c2c:	4770      	bx	lr
 8103c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8103c32:	e7f9      	b.n	8103c28 <memset+0x4>

08103c34 <cleanup_glue>:
 8103c34:	b538      	push	{r3, r4, r5, lr}
 8103c36:	460c      	mov	r4, r1
 8103c38:	6809      	ldr	r1, [r1, #0]
 8103c3a:	4605      	mov	r5, r0
 8103c3c:	b109      	cbz	r1, 8103c42 <cleanup_glue+0xe>
 8103c3e:	f7ff fff9 	bl	8103c34 <cleanup_glue>
 8103c42:	4621      	mov	r1, r4
 8103c44:	4628      	mov	r0, r5
 8103c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8103c4a:	f000 b869 	b.w	8103d20 <_free_r>
	...

08103c50 <_reclaim_reent>:
 8103c50:	4b2c      	ldr	r3, [pc, #176]	; (8103d04 <_reclaim_reent+0xb4>)
 8103c52:	681b      	ldr	r3, [r3, #0]
 8103c54:	4283      	cmp	r3, r0
 8103c56:	b570      	push	{r4, r5, r6, lr}
 8103c58:	4604      	mov	r4, r0
 8103c5a:	d051      	beq.n	8103d00 <_reclaim_reent+0xb0>
 8103c5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8103c5e:	b143      	cbz	r3, 8103c72 <_reclaim_reent+0x22>
 8103c60:	68db      	ldr	r3, [r3, #12]
 8103c62:	2b00      	cmp	r3, #0
 8103c64:	d14a      	bne.n	8103cfc <_reclaim_reent+0xac>
 8103c66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8103c68:	6819      	ldr	r1, [r3, #0]
 8103c6a:	b111      	cbz	r1, 8103c72 <_reclaim_reent+0x22>
 8103c6c:	4620      	mov	r0, r4
 8103c6e:	f000 f857 	bl	8103d20 <_free_r>
 8103c72:	6961      	ldr	r1, [r4, #20]
 8103c74:	b111      	cbz	r1, 8103c7c <_reclaim_reent+0x2c>
 8103c76:	4620      	mov	r0, r4
 8103c78:	f000 f852 	bl	8103d20 <_free_r>
 8103c7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8103c7e:	b111      	cbz	r1, 8103c86 <_reclaim_reent+0x36>
 8103c80:	4620      	mov	r0, r4
 8103c82:	f000 f84d 	bl	8103d20 <_free_r>
 8103c86:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8103c88:	b111      	cbz	r1, 8103c90 <_reclaim_reent+0x40>
 8103c8a:	4620      	mov	r0, r4
 8103c8c:	f000 f848 	bl	8103d20 <_free_r>
 8103c90:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8103c92:	b111      	cbz	r1, 8103c9a <_reclaim_reent+0x4a>
 8103c94:	4620      	mov	r0, r4
 8103c96:	f000 f843 	bl	8103d20 <_free_r>
 8103c9a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8103c9c:	b111      	cbz	r1, 8103ca4 <_reclaim_reent+0x54>
 8103c9e:	4620      	mov	r0, r4
 8103ca0:	f000 f83e 	bl	8103d20 <_free_r>
 8103ca4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8103ca6:	b111      	cbz	r1, 8103cae <_reclaim_reent+0x5e>
 8103ca8:	4620      	mov	r0, r4
 8103caa:	f000 f839 	bl	8103d20 <_free_r>
 8103cae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8103cb0:	b111      	cbz	r1, 8103cb8 <_reclaim_reent+0x68>
 8103cb2:	4620      	mov	r0, r4
 8103cb4:	f000 f834 	bl	8103d20 <_free_r>
 8103cb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8103cba:	b111      	cbz	r1, 8103cc2 <_reclaim_reent+0x72>
 8103cbc:	4620      	mov	r0, r4
 8103cbe:	f000 f82f 	bl	8103d20 <_free_r>
 8103cc2:	69a3      	ldr	r3, [r4, #24]
 8103cc4:	b1e3      	cbz	r3, 8103d00 <_reclaim_reent+0xb0>
 8103cc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8103cc8:	4620      	mov	r0, r4
 8103cca:	4798      	blx	r3
 8103ccc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8103cce:	b1b9      	cbz	r1, 8103d00 <_reclaim_reent+0xb0>
 8103cd0:	4620      	mov	r0, r4
 8103cd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8103cd6:	f7ff bfad 	b.w	8103c34 <cleanup_glue>
 8103cda:	5949      	ldr	r1, [r1, r5]
 8103cdc:	b941      	cbnz	r1, 8103cf0 <_reclaim_reent+0xa0>
 8103cde:	3504      	adds	r5, #4
 8103ce0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8103ce2:	2d80      	cmp	r5, #128	; 0x80
 8103ce4:	68d9      	ldr	r1, [r3, #12]
 8103ce6:	d1f8      	bne.n	8103cda <_reclaim_reent+0x8a>
 8103ce8:	4620      	mov	r0, r4
 8103cea:	f000 f819 	bl	8103d20 <_free_r>
 8103cee:	e7ba      	b.n	8103c66 <_reclaim_reent+0x16>
 8103cf0:	680e      	ldr	r6, [r1, #0]
 8103cf2:	4620      	mov	r0, r4
 8103cf4:	f000 f814 	bl	8103d20 <_free_r>
 8103cf8:	4631      	mov	r1, r6
 8103cfa:	e7ef      	b.n	8103cdc <_reclaim_reent+0x8c>
 8103cfc:	2500      	movs	r5, #0
 8103cfe:	e7ef      	b.n	8103ce0 <_reclaim_reent+0x90>
 8103d00:	bd70      	pop	{r4, r5, r6, pc}
 8103d02:	bf00      	nop
 8103d04:	10000014 	.word	0x10000014

08103d08 <__malloc_lock>:
 8103d08:	4801      	ldr	r0, [pc, #4]	; (8103d10 <__malloc_lock+0x8>)
 8103d0a:	f7ff bf7b 	b.w	8103c04 <__retarget_lock_acquire_recursive>
 8103d0e:	bf00      	nop
 8103d10:	10004ab4 	.word	0x10004ab4

08103d14 <__malloc_unlock>:
 8103d14:	4801      	ldr	r0, [pc, #4]	; (8103d1c <__malloc_unlock+0x8>)
 8103d16:	f7ff bf76 	b.w	8103c06 <__retarget_lock_release_recursive>
 8103d1a:	bf00      	nop
 8103d1c:	10004ab4 	.word	0x10004ab4

08103d20 <_free_r>:
 8103d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8103d22:	2900      	cmp	r1, #0
 8103d24:	d048      	beq.n	8103db8 <_free_r+0x98>
 8103d26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8103d2a:	9001      	str	r0, [sp, #4]
 8103d2c:	2b00      	cmp	r3, #0
 8103d2e:	f1a1 0404 	sub.w	r4, r1, #4
 8103d32:	bfb8      	it	lt
 8103d34:	18e4      	addlt	r4, r4, r3
 8103d36:	f7ff ffe7 	bl	8103d08 <__malloc_lock>
 8103d3a:	4a20      	ldr	r2, [pc, #128]	; (8103dbc <_free_r+0x9c>)
 8103d3c:	9801      	ldr	r0, [sp, #4]
 8103d3e:	6813      	ldr	r3, [r2, #0]
 8103d40:	4615      	mov	r5, r2
 8103d42:	b933      	cbnz	r3, 8103d52 <_free_r+0x32>
 8103d44:	6063      	str	r3, [r4, #4]
 8103d46:	6014      	str	r4, [r2, #0]
 8103d48:	b003      	add	sp, #12
 8103d4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8103d4e:	f7ff bfe1 	b.w	8103d14 <__malloc_unlock>
 8103d52:	42a3      	cmp	r3, r4
 8103d54:	d90b      	bls.n	8103d6e <_free_r+0x4e>
 8103d56:	6821      	ldr	r1, [r4, #0]
 8103d58:	1862      	adds	r2, r4, r1
 8103d5a:	4293      	cmp	r3, r2
 8103d5c:	bf04      	itt	eq
 8103d5e:	681a      	ldreq	r2, [r3, #0]
 8103d60:	685b      	ldreq	r3, [r3, #4]
 8103d62:	6063      	str	r3, [r4, #4]
 8103d64:	bf04      	itt	eq
 8103d66:	1852      	addeq	r2, r2, r1
 8103d68:	6022      	streq	r2, [r4, #0]
 8103d6a:	602c      	str	r4, [r5, #0]
 8103d6c:	e7ec      	b.n	8103d48 <_free_r+0x28>
 8103d6e:	461a      	mov	r2, r3
 8103d70:	685b      	ldr	r3, [r3, #4]
 8103d72:	b10b      	cbz	r3, 8103d78 <_free_r+0x58>
 8103d74:	42a3      	cmp	r3, r4
 8103d76:	d9fa      	bls.n	8103d6e <_free_r+0x4e>
 8103d78:	6811      	ldr	r1, [r2, #0]
 8103d7a:	1855      	adds	r5, r2, r1
 8103d7c:	42a5      	cmp	r5, r4
 8103d7e:	d10b      	bne.n	8103d98 <_free_r+0x78>
 8103d80:	6824      	ldr	r4, [r4, #0]
 8103d82:	4421      	add	r1, r4
 8103d84:	1854      	adds	r4, r2, r1
 8103d86:	42a3      	cmp	r3, r4
 8103d88:	6011      	str	r1, [r2, #0]
 8103d8a:	d1dd      	bne.n	8103d48 <_free_r+0x28>
 8103d8c:	681c      	ldr	r4, [r3, #0]
 8103d8e:	685b      	ldr	r3, [r3, #4]
 8103d90:	6053      	str	r3, [r2, #4]
 8103d92:	4421      	add	r1, r4
 8103d94:	6011      	str	r1, [r2, #0]
 8103d96:	e7d7      	b.n	8103d48 <_free_r+0x28>
 8103d98:	d902      	bls.n	8103da0 <_free_r+0x80>
 8103d9a:	230c      	movs	r3, #12
 8103d9c:	6003      	str	r3, [r0, #0]
 8103d9e:	e7d3      	b.n	8103d48 <_free_r+0x28>
 8103da0:	6825      	ldr	r5, [r4, #0]
 8103da2:	1961      	adds	r1, r4, r5
 8103da4:	428b      	cmp	r3, r1
 8103da6:	bf04      	itt	eq
 8103da8:	6819      	ldreq	r1, [r3, #0]
 8103daa:	685b      	ldreq	r3, [r3, #4]
 8103dac:	6063      	str	r3, [r4, #4]
 8103dae:	bf04      	itt	eq
 8103db0:	1949      	addeq	r1, r1, r5
 8103db2:	6021      	streq	r1, [r4, #0]
 8103db4:	6054      	str	r4, [r2, #4]
 8103db6:	e7c7      	b.n	8103d48 <_free_r+0x28>
 8103db8:	b003      	add	sp, #12
 8103dba:	bd30      	pop	{r4, r5, pc}
 8103dbc:	10004a64 	.word	0x10004a64

08103dc0 <_init>:
 8103dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8103dc2:	bf00      	nop
 8103dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8103dc6:	bc08      	pop	{r3}
 8103dc8:	469e      	mov	lr, r3
 8103dca:	4770      	bx	lr

08103dcc <_fini>:
 8103dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8103dce:	bf00      	nop
 8103dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8103dd2:	bc08      	pop	{r3}
 8103dd4:	469e      	mov	lr, r3
 8103dd6:	4770      	bx	lr
